__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _TestNativeInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _ = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _native = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var changeActivity = _native.default.changeActivity;

  var RNHighScores = function (_React$Component) {
    (0, _inherits2.default)(RNHighScores, _React$Component);

    var _super = _createSuper(RNHighScores);

    function RNHighScores() {
      (0, _classCallCheck2.default)(this, RNHighScores);
      return _super.apply(this, arguments);
    }

    (0, _createClass2.default)(RNHighScores, [{
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.container,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            onPress: function onPress() {
              changeActivity("IOS");
            },
            style: styles.highScoresTitle,
            children: "IOS bundle2"
          }), (0, _jsxRuntime.jsx)(_reactNative.Image, {
            resizeMethod: "resize",
            resizeMode: "contain",
            source: _.default,
            style: styles.img
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {})]
        });
      }
    }]);
    return RNHighScores;
  }(_react.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#FFFFFF'
    },
    highScoresTitle: {
      fontSize: 20,
      textAlign: 'center',
      margin: 10
    },
    scores: {
      textAlign: 'center',
      color: '#333333',
      marginBottom: 5
    },
    img: {
      width: "100%",
      height: 600
    }
  });

  _reactNative.AppRegistry.registerComponent('IOS2', function () {
    return RNHighScores;
  });
},50000000,[7,16,17,28,30,33,1,3,50000001,50000002,50000004,180]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _reactNativeDeviceInfo = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var FunctionalComponent = function FunctionalComponent() {
    var batteryLevel = (0, _reactNativeDeviceInfo.useBatteryLevel)();
    var batteryLevelIsLow = (0, _reactNativeDeviceInfo.useBatteryLevelIsLow)();
    var powerState = (0, _reactNativeDeviceInfo.usePowerState)();
    var firstInstallTime = (0, _reactNativeDeviceInfo.useFirstInstallTime)();
    var deviceName = (0, _reactNativeDeviceInfo.useDeviceName)();
    var manufacturer = (0, _reactNativeDeviceInfo.useManufacturer)();
    var hasSystemFeature = (0, _reactNativeDeviceInfo.useHasSystemFeature)('amazon.hardware.fire_tv');
    var isEmulator = (0, _reactNativeDeviceInfo.useIsEmulator)();
    var isHeadphonesConnected = (0, _reactNativeDeviceInfo.useIsHeadphonesConnected)();
    var brightness = (0, _reactNativeDeviceInfo.useBrightness)();
    var deviceJSON = {
      batteryLevel: batteryLevel,
      batteryLevelIsLow: batteryLevelIsLow,
      powerState: powerState,
      firstInstallTime: firstInstallTime,
      deviceName: deviceName,
      manufacturer: manufacturer,
      hasSystemFeature: hasSystemFeature,
      isEmulator: isEmulator,
      isHeadphonesConnected: isHeadphonesConnected,
      brightness: brightness
    };
    return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.instructions,
        testID: "hooks tab contents",
        children: JSON.stringify(deviceJSON, null, '  ')
      })
    });
  };

  var ActionExtensionHeader = (0, _react.memo)(function (_ref) {
    var isActionExtension = _ref.isActionExtension;
    var onDonePress = (0, _react.useCallback)(function () {
      _reactNative.NativeModules.ActionExtension.done();
    }, []);
    return isActionExtension ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        minHeight: 50,
        flexDirection: 'row',
        margin: 10
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: onDonePress,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            backgroundColor: 'red',
            borderRadius: 20,
            minWidth: 80,
            minHeight: 40,
            alignContent: 'center',
            justifyContent: 'center',
            alignItems: 'center'
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            children: "Done"
          })
        })
      })
    }) : (0, _jsxRuntime.jsx)(_reactNative.View, {});
  });

  var TestNativeInfo = function (_Component) {
    (0, _inherits2.default)(TestNativeInfo, _Component);

    var _super = _createSuper(TestNativeInfo);

    function TestNativeInfo(props) {
      var _this;

      (0, _classCallCheck2.default)(this, TestNativeInfo);
      _this = _super.call(this, props);
      _this.state = {
        activeTab: 'constant',
        constantdeviceinfo: _this.getConstantDeviceInfo(),
        asyncdeviceinfo: {},
        syncdeviceinfo: _this.getSyncDeviceInfo()
      };
      return _this;
    }

    (0, _createClass2.default)(TestNativeInfo, [{
      key: "getConstantDeviceInfo",
      value: function getConstantDeviceInfo() {
        var deviceJSON = {};
        deviceJSON.deviceId = _reactNativeDeviceInfo.default.getDeviceId();
        deviceJSON.bundleId = _reactNativeDeviceInfo.default.getBundleId();
        deviceJSON.systemName = _reactNativeDeviceInfo.default.getSystemName();
        deviceJSON.systemVersion = _reactNativeDeviceInfo.default.getSystemVersion();
        deviceJSON.version = _reactNativeDeviceInfo.default.getVersion();
        deviceJSON.readableVersion = _reactNativeDeviceInfo.default.getReadableVersion();
        deviceJSON.buildNumber = _reactNativeDeviceInfo.default.getBuildNumber();
        deviceJSON.isTablet = _reactNativeDeviceInfo.default.isTablet();
        deviceJSON.appName = _reactNativeDeviceInfo.default.getApplicationName();
        deviceJSON.brand = _reactNativeDeviceInfo.default.getBrand();
        deviceJSON.model = _reactNativeDeviceInfo.default.getModel();
        deviceJSON.deviceType = _reactNativeDeviceInfo.default.getDeviceType();
        return deviceJSON;
      }
    }, {
      key: "getSyncDeviceInfo",
      value: function getSyncDeviceInfo() {
        var deviceJSON = {};
        deviceJSON.uniqueId = (0, _reactNativeDeviceInfo.getUniqueIdSync)();
        deviceJSON.manufacturer = (0, _reactNativeDeviceInfo.getManufacturerSync)();
        deviceJSON.buildId = _reactNativeDeviceInfo.default.getBuildIdSync();
        deviceJSON.isCameraPresent = _reactNativeDeviceInfo.default.isCameraPresentSync();
        deviceJSON.deviceName = _reactNativeDeviceInfo.default.getDeviceNameSync();
        deviceJSON.usedMemory = _reactNativeDeviceInfo.default.getUsedMemorySync();
        deviceJSON.instanceId = _reactNativeDeviceInfo.default.getInstanceIdSync();
        deviceJSON.installReferrer = _reactNativeDeviceInfo.default.getInstallReferrerSync();
        deviceJSON.installerPackageName = _reactNativeDeviceInfo.default.getInstallerPackageNameSync();
        deviceJSON.isEmulator = _reactNativeDeviceInfo.default.isEmulatorSync();
        deviceJSON.fontScale = _reactNativeDeviceInfo.default.getFontScaleSync();
        deviceJSON.hasNotch = _reactNativeDeviceInfo.default.hasNotch();
        deviceJSON.hasDynamicIsland = _reactNativeDeviceInfo.default.hasDynamicIsland();
        deviceJSON.firstInstallTime = _reactNativeDeviceInfo.default.getFirstInstallTimeSync();
        deviceJSON.lastUpdateTime = _reactNativeDeviceInfo.default.getLastUpdateTimeSync();
        deviceJSON.serialNumber = _reactNativeDeviceInfo.default.getSerialNumberSync();
        deviceJSON.androidId = _reactNativeDeviceInfo.default.getAndroidIdSync();
        deviceJSON.IpAddress = _reactNativeDeviceInfo.default.getIpAddressSync();
        deviceJSON.MacAddress = _reactNativeDeviceInfo.default.getMacAddressSync();
        deviceJSON.phoneNumber = _reactNativeDeviceInfo.default.getPhoneNumberSync();
        deviceJSON.ApiLevel = _reactNativeDeviceInfo.default.getApiLevelSync();
        deviceJSON.carrier = _reactNativeDeviceInfo.default.getCarrierSync();
        deviceJSON.totalMemory = _reactNativeDeviceInfo.default.getTotalMemorySync();
        deviceJSON.maxMemory = _reactNativeDeviceInfo.default.getMaxMemorySync();
        deviceJSON.totalDiskCapacity = _reactNativeDeviceInfo.default.getTotalDiskCapacitySync();
        deviceJSON.totalDiskCapacityOld = _reactNativeDeviceInfo.default.getTotalDiskCapacityOldSync();
        deviceJSON.freeDiskStorage = _reactNativeDeviceInfo.default.getFreeDiskStorageSync();
        deviceJSON.freeDiskStorageOld = _reactNativeDeviceInfo.default.getFreeDiskStorageOldSync();
        deviceJSON.batteryLevel = _reactNativeDeviceInfo.default.getBatteryLevelSync();
        deviceJSON.isLandscape = _reactNativeDeviceInfo.default.isLandscapeSync();
        deviceJSON.isAirplaneMode = _reactNativeDeviceInfo.default.isAirplaneModeSync();
        deviceJSON.isBatteryCharging = _reactNativeDeviceInfo.default.isBatteryChargingSync();
        deviceJSON.isPinOrFingerprintSet = _reactNativeDeviceInfo.default.isPinOrFingerprintSetSync();
        deviceJSON.supportedAbis = _reactNativeDeviceInfo.default.supportedAbisSync();
        deviceJSON.hasSystemFeature = _reactNativeDeviceInfo.default.hasSystemFeatureSync('android.software.webview');
        deviceJSON.getSystemAvailableFeatures = _reactNativeDeviceInfo.default.getSystemAvailableFeaturesSync();
        deviceJSON.powerState = _reactNativeDeviceInfo.default.getPowerStateSync();
        deviceJSON.isLocationEnabled = _reactNativeDeviceInfo.default.isLocationEnabledSync();
        deviceJSON.headphones = _reactNativeDeviceInfo.default.isHeadphonesConnectedSync();
        deviceJSON.getAvailableLocationProviders = _reactNativeDeviceInfo.default.getAvailableLocationProvidersSync();
        deviceJSON.bootloader = _reactNativeDeviceInfo.default.getBootloaderSync();
        deviceJSON.device = _reactNativeDeviceInfo.default.getDeviceSync();
        deviceJSON.display = _reactNativeDeviceInfo.default.getDisplaySync();
        deviceJSON.fingerprint = _reactNativeDeviceInfo.default.getFingerprintSync();
        deviceJSON.hardware = _reactNativeDeviceInfo.default.getHardwareSync();
        deviceJSON.host = _reactNativeDeviceInfo.default.getHostSync();
        deviceJSON.product = _reactNativeDeviceInfo.default.getProductSync();
        deviceJSON.tags = _reactNativeDeviceInfo.default.getTagsSync();
        deviceJSON.type = _reactNativeDeviceInfo.default.getTypeSync();
        deviceJSON.baseOS = _reactNativeDeviceInfo.default.getBaseOsSync();
        deviceJSON.previewSdkInt = _reactNativeDeviceInfo.default.getPreviewSdkIntSync();
        deviceJSON.securityPatch = _reactNativeDeviceInfo.default.getSecurityPatchSync();
        deviceJSON.codename = _reactNativeDeviceInfo.default.getCodenameSync();
        deviceJSON.incremental = _reactNativeDeviceInfo.default.getIncrementalSync();
        deviceJSON.brightness = _reactNativeDeviceInfo.default.getBrightnessSync();
        deviceJSON.supported32BitAbis = _reactNativeDeviceInfo.default.supported32BitAbisSync();
        deviceJSON.supported64BitAbis = _reactNativeDeviceInfo.default.supported64BitAbisSync();
        deviceJSON.hasGms = _reactNativeDeviceInfo.default.hasGmsSync();
        deviceJSON.hasHms = _reactNativeDeviceInfo.default.hasHmsSync();
        deviceJSON.isMouseConnected = _reactNativeDeviceInfo.default.isMouseConnectedSync();
        deviceJSON.isKeyboardConnected = _reactNativeDeviceInfo.default.isKeyboardConnectedSync();
        return deviceJSON;
      }
    }, {
      key: "componentDidMount",
      value: function () {
        var _componentDidMount = (0, _asyncToGenerator2.default)(function* () {
          var deviceJSON = {};

          try {
            deviceJSON.uniqueId = yield (0, _reactNativeDeviceInfo.getUniqueId)();
            deviceJSON.syncUniqueId = yield (0, _reactNativeDeviceInfo.syncUniqueId)();
            deviceJSON.manufacturer = yield (0, _reactNativeDeviceInfo.getManufacturer)();
            deviceJSON.buildId = yield _reactNativeDeviceInfo.default.getBuildId();
            deviceJSON.isCameraPresent = yield _reactNativeDeviceInfo.default.isCameraPresent();
            deviceJSON.deviceName = yield _reactNativeDeviceInfo.default.getDeviceName();
            deviceJSON.usedMemory = yield _reactNativeDeviceInfo.default.getUsedMemory();
            deviceJSON.userAgent = yield _reactNativeDeviceInfo.default.getUserAgent();
            deviceJSON.instanceId = yield _reactNativeDeviceInfo.default.getInstanceId();
            deviceJSON.installReferrer = yield _reactNativeDeviceInfo.default.getInstallReferrer();
            deviceJSON.installerPackageName = yield _reactNativeDeviceInfo.default.getInstallerPackageName();
            deviceJSON.isEmulator = yield _reactNativeDeviceInfo.default.isEmulator();
            deviceJSON.fontScale = yield _reactNativeDeviceInfo.default.getFontScale();
            deviceJSON.hasNotch = yield _reactNativeDeviceInfo.default.hasNotch();
            deviceJSON.hasDynamicIsland = yield _reactNativeDeviceInfo.default.hasDynamicIsland();
            deviceJSON.firstInstallTime = yield _reactNativeDeviceInfo.default.getFirstInstallTime();
            deviceJSON.lastUpdateTime = yield _reactNativeDeviceInfo.default.getLastUpdateTime();
            deviceJSON.serialNumber = yield _reactNativeDeviceInfo.default.getSerialNumber();
            deviceJSON.androidId = yield _reactNativeDeviceInfo.default.getAndroidId();
            deviceJSON.IpAddress = yield _reactNativeDeviceInfo.default.getIpAddress();
            deviceJSON.MacAddress = yield _reactNativeDeviceInfo.default.getMacAddress();
            deviceJSON.phoneNumber = yield _reactNativeDeviceInfo.default.getPhoneNumber();
            deviceJSON.ApiLevel = yield _reactNativeDeviceInfo.default.getApiLevel();
            deviceJSON.carrier = yield _reactNativeDeviceInfo.default.getCarrier();
            deviceJSON.totalMemory = yield _reactNativeDeviceInfo.default.getTotalMemory();
            deviceJSON.maxMemory = yield _reactNativeDeviceInfo.default.getMaxMemory();
            deviceJSON.totalDiskCapacity = yield _reactNativeDeviceInfo.default.getTotalDiskCapacity();
            deviceJSON.totalDiskCapacityOld = yield _reactNativeDeviceInfo.default.getTotalDiskCapacityOld();
            deviceJSON.freeDiskStorage = yield _reactNativeDeviceInfo.default.getFreeDiskStorage();
            deviceJSON.freeDiskStorageOld = yield _reactNativeDeviceInfo.default.getFreeDiskStorageOld();
            deviceJSON.batteryLevel = yield _reactNativeDeviceInfo.default.getBatteryLevel();
            deviceJSON.isLandscape = yield _reactNativeDeviceInfo.default.isLandscape();
            deviceJSON.isAirplaneMode = yield _reactNativeDeviceInfo.default.isAirplaneMode();
            deviceJSON.isBatteryCharging = yield _reactNativeDeviceInfo.default.isBatteryCharging();
            deviceJSON.isPinOrFingerprintSet = yield _reactNativeDeviceInfo.default.isPinOrFingerprintSet();
            deviceJSON.supportedAbis = yield _reactNativeDeviceInfo.default.supportedAbis();
            deviceJSON.hasSystemFeature = yield _reactNativeDeviceInfo.default.hasSystemFeature('android.software.webview');
            deviceJSON.getSystemAvailableFeatures = yield _reactNativeDeviceInfo.default.getSystemAvailableFeatures();
            deviceJSON.powerState = yield _reactNativeDeviceInfo.default.getPowerState();
            deviceJSON.isLocationEnabled = yield _reactNativeDeviceInfo.default.isLocationEnabled();
            deviceJSON.headphones = yield _reactNativeDeviceInfo.default.isHeadphonesConnected();
            deviceJSON.getAvailableLocationProviders = yield _reactNativeDeviceInfo.default.getAvailableLocationProviders();
            deviceJSON.bootloader = yield _reactNativeDeviceInfo.default.getBootloader();
            deviceJSON.device = yield _reactNativeDeviceInfo.default.getDevice();
            deviceJSON.display = yield _reactNativeDeviceInfo.default.getDisplay();
            deviceJSON.fingerprint = yield _reactNativeDeviceInfo.default.getFingerprint();
            deviceJSON.hardware = yield _reactNativeDeviceInfo.default.getHardware();
            deviceJSON.host = yield _reactNativeDeviceInfo.default.getHost();
            deviceJSON.product = yield _reactNativeDeviceInfo.default.getProduct();
            deviceJSON.tags = yield _reactNativeDeviceInfo.default.getTags();
            deviceJSON.type = yield _reactNativeDeviceInfo.default.getType();
            deviceJSON.baseOS = yield _reactNativeDeviceInfo.default.getBaseOs();
            deviceJSON.previewSdkInt = yield _reactNativeDeviceInfo.default.getPreviewSdkInt();
            deviceJSON.securityPatch = yield _reactNativeDeviceInfo.default.getSecurityPatch();
            deviceJSON.codename = yield _reactNativeDeviceInfo.default.getCodename();
            deviceJSON.incremental = yield _reactNativeDeviceInfo.default.getIncremental();
            deviceJSON.brightness = yield _reactNativeDeviceInfo.default.getBrightness();
            deviceJSON.supported32BitAbis = yield _reactNativeDeviceInfo.default.supported32BitAbis();
            deviceJSON.supported64BitAbis = yield _reactNativeDeviceInfo.default.supported64BitAbis();
            deviceJSON.hasGms = yield _reactNativeDeviceInfo.default.hasGms();
            deviceJSON.hasHms = yield _reactNativeDeviceInfo.default.hasHms();
            deviceJSON.synchronizedUniqueId = yield _reactNativeDeviceInfo.default.syncUniqueId();
            deviceJSON.isMouseConnected = yield _reactNativeDeviceInfo.default.isMouseConnected();
            deviceJSON.isKeyboardConnected = yield _reactNativeDeviceInfo.default.isKeyboardConnected();
            deviceJSON.isTabletMode = yield _reactNativeDeviceInfo.default.isTabletMode();

            try {
              deviceJSON.deviceToken = yield _reactNativeDeviceInfo.default.getDeviceToken();
            } catch (e) {
              console.log('Trouble getting device token, likely a simulator or not iOS11+');
            }
          } catch (e) {
            console.log('Trouble getting device info ', e);
          }

          this.setState({
            asyncdeviceinfo: deviceJSON
          });
          this.forceUpdate();
        });

        function componentDidMount() {
          return _componentDidMount.apply(this, arguments);
        }

        return componentDidMount;
      }()
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
          style: styles.container,
          children: [(0, _jsxRuntime.jsx)(ActionExtensionHeader, {
            isActionExtension: this.props.isActionExtension
          }), this.state.activeTab === 'constant' ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.welcome,
              children: "react-native-device-info example - constant info:"
            }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.instructions,
                testID: "constant tab contents",
                children: JSON.stringify(this.state.constantdeviceinfo, null, '  ')
              })
            })]
          }) : this.state.activeTab === 'sync' ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.welcome,
              children: "react-native-device-info example - sync info:"
            }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.instructions,
                testID: "sync tab contents",
                children: JSON.stringify(this.state.syncdeviceinfo, null, '  ')
              })
            })]
          }) : this.state.activeTab === 'async' ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.welcome,
              children: "react-native-device-info example - async info:"
            }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.instructions,
                testID: "async tab contents",
                children: JSON.stringify(this.state.asyncdeviceinfo, null, '  ')
              })
            })]
          }) : this.state.activeTab === 'hooks' ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.welcome,
              children: "react-native-device-info example - hooks:"
            }), (0, _jsxRuntime.jsx)(FunctionalComponent, {})]
          }) : null, (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.tabBar,
            children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.tab,
              testID: "constant button",
              onPress: function onPress() {
                return _this2.setState({
                  activeTab: 'constant'
                });
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.tabText, this.state.activeTab === 'constant' && styles.boldText],
                children: "Constant"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.tab,
              testID: "sync button",
              onPress: function onPress() {
                return _this2.setState({
                  activeTab: 'sync'
                });
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.tabText, this.state.activeTab === 'sync' && styles.boldText],
                children: "Sync"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.tab,
              testID: "async button",
              onPress: function onPress() {
                return _this2.setState({
                  activeTab: 'async'
                });
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.tabText, this.state.activeTab === 'async' && styles.boldText],
                children: "Async"
              })
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.tab,
              testID: "hooks button",
              onPress: function onPress() {
                return _this2.setState({
                  activeTab: 'hooks'
                });
              },
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.tabText, this.state.activeTab === 'hooks' && styles.boldText],
                children: "Hooks"
              })
            })]
          })]
        });
      }
    }]);
    return TestNativeInfo;
  }(_react.Component);

  exports.default = TestNativeInfo;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#F5FCFF'
    },
    welcome: {
      fontSize: 20,
      textAlign: 'center',
      margin: 10
    },
    instructions: {
      textAlign: 'left',
      color: '#333333',
      margin: 5
    },
    tabBar: {
      flexDirection: 'row',
      borderTopColor: '#333333',
      borderTopWidth: 1
    },
    tab: {
      height: 50,
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    tabText: {
      color: '#333333'
    },
    boldText: {
      fontWeight: '700'
    }
  });
},50000001,[7,269,16,17,28,30,33,1,3,377,180]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/modules/Business1/assets/img",
    "width": 1024,
    "height": 500,
    "scales": [1],
    "hash": "938f55d05f70c75063d310be556059e4",
    "name": "1024_500",
    "type": "png"
  });
},50000002,[50000003]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},50000003,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  if (!_reactNative.NativeModules.RNToolsManager) {
    throw new Error("native模块加载失败");
  }

  var RNToolsManager = {
    changeActivity: function changeActivity(value) {
      if (_reactNative.Platform.OS === 'ios') {
        return _reactNative.NativeModules.RNToolsManager.changeActivity("bundle/" + value + ".ios", value);
      }

      return _reactNative.NativeModules.RNToolsManager.changeActivity(value, null);
    },
    writeFileFoRC: function writeFileFoRC(versionMapInfo) {
      return _reactNative.NativeModules.RNToolsManager.writeFileFoRC(versionMapInfo);
    },
    cleanFileByPath: function cleanFileByPath() {
      return _reactNative.NativeModules.RNToolsManager.cleanFileByPath();
    },
    downloadFiles: function downloadFiles(url, type, module) {
      return _reactNative.NativeModules.RNToolsManager.downloadFiles(url, type, module);
    },
    touchZip: function touchZip() {
      return _reactNative.NativeModules.RNToolsManager.touchZip();
    },
    getAndroidDEV: function () {
      var _getAndroidDEV = (0, _asyncToGenerator2.default)(function* () {
        return _reactNative.NativeModules.RNToolsManager.getAndroidDEV();
      });

      function getAndroidDEV() {
        return _getAndroidDEV.apply(this, arguments);
      }

      return getAndroidDEV;
    }(),
    isInited: function () {
      var _isInited = (0, _asyncToGenerator2.default)(function* () {
        return _reactNative.NativeModules.RNToolsManager.isInited();
      });

      function isInited() {
        return _isInited.apply(this, arguments);
      }

      return isInited;
    }(),
    getCurrentVersion: function () {
      var _getCurrentVersion = (0, _asyncToGenerator2.default)(function* (module, type) {
        return _reactNative.NativeModules.RNToolsManager.getCurrentVersion(module, type);
      });

      function getCurrentVersion(_x, _x2) {
        return _getCurrentVersion.apply(this, arguments);
      }

      return getCurrentVersion;
    }(),
    setFileVersion: function () {
      var _setFileVersion = (0, _asyncToGenerator2.default)(function* (module, type, newVersion) {
        return _reactNative.NativeModules.RNToolsManager.setFileVersion(module, type, newVersion);
      });

      function setFileVersion(_x3, _x4, _x5) {
        return _setFileVersion.apply(this, arguments);
      }

      return setFileVersion;
    }()
  };
  var _default = RNToolsManager;
  exports.default = _default;
},50000004,[7,269,3]);
__r(21);
__r(50000000);