var __BUNDLE_START_TIME__ = this.nativePerformanceNow
    ? nativePerformanceNow()
    : Date.now(),
  __DEV__ = false,
  process = this.process || {},
  __METRO_GLOBAL_PREFIX__ = "";
process.env = process.env || {};
process.env.NODE_ENV = process.env.NODE_ENV || "production";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global[__METRO_GLOBAL_PREFIX__ + "__d"] = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  var EMPTY = {};
  var CYCLE_DETECTED = {};
  var _ref = {},
    hasOwnProperty = _ref.hasOwnProperty;

  function clear() {
    modules = Object.create(null);
    return modules;
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      return;
    }

    var mod = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {},
      },
    };
    modules[moduleId] = mod;
  }

  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized
      ? module.publicModule.exports
      : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (
      modules[moduleIdReallyIsNumber] &&
      modules[moduleIdReallyIsNumber].importedDefault !== EMPTY
    ) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault =
      exports && exports.__esModule ? exports.default : exports;
    return (modules[moduleIdReallyIsNumber].importedDefault = importedDefault);
  }

  metroRequire.importDefault = metroImportDefault;

  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (
      modules[moduleIdReallyIsNumber] &&
      modules[moduleIdReallyIsNumber].importedAll !== EMPTY
    ) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }

      importedAll.default = exports;
    }

    return (modules[moduleIdReallyIsNumber].importedAll = importedAll);
  }

  metroRequire.importAll = metroImportAll;

  metroRequire.context = function fallbackRequireContext() {
    throw new Error(
      "The experimental Metro feature `require.context` is not enabled in your project."
    );
  };

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId,
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];
  var definingSegmentByModuleID = new Map();

  function registerSegment(segmentId, moduleDefiner, moduleIds) {
    moduleDefinersBySegmentID[segmentId] = moduleDefiner;

    if (moduleIds) {
      moduleIds.forEach(function (moduleId) {
        if (!modules[moduleId] && !definingSegmentByModuleID.has(moduleId)) {
          definingSegmentByModuleID.set(moduleId, segmentId);
        }
      });
    }
  }

  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var _definingSegmentByMod;

      var segmentId =
        (_definingSegmentByMod = definingSegmentByModuleID.get(moduleId)) !==
          null && _definingSegmentByMod !== undefined
          ? _definingSegmentByMod
          : 0;
      var definer = moduleDefinersBySegmentID[segmentId];

      if (definer != null) {
        definer(moduleId);
        module = modules[moduleId];
        definingSegmentByModuleID.delete(moduleId);
      }
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
        _segmentId = _unpackModuleId.segmentId,
        localId = _unpackModuleId.localId;

      nativeRequire(localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;

    try {
      var moduleObject = module.publicModule;
      moduleObject.id = moduleId;
      factory(
        global,
        metroRequire,
        metroImportDefault,
        metroImportAll,
        moduleObject,
        moduleObject.exports,
        dependencyMap
      );
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = id;
    return Error(
      'Requiring module "' +
        displayName +
        '", which threw an exception: ' +
        error
    );
  }
})(
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof global !== "undefined"
    ? global
    : typeof window !== "undefined"
    ? window
    : this
);
(function (global) {
  var inspect = (function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        formatValueCalls: 0,
        stylize: stylizeNoColor,
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      ctx.formatValueCalls++;

      if (ctx.formatValueCalls > 200) {
        return (
          "[TOO BIG formatValueCalls " +
          ctx.formatValueCalls +
          " exceeded limit of 200]"
        );
      }

      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (
        isError(value) &&
        (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)
      ) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = "",
        array = false,
        braces = ["{", "}"];

      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }

      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }

      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = " " + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            array
          );
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize("undefined", "undefined");

      if (isString(value)) {
        var simple =
          "'" +
          JSON.stringify(value)
            .replace(/^"|"$/g, "")
            .replace(/'/g, "\\'")
            .replace(/\\"/g, '"') +
          "'";
        return ctx.stylize(simple, "string");
      }

      if (isNumber(value)) return ctx.stylize("" + value, "number");
      if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
      if (isNull(value)) return ctx.stylize("null", "null");
    }

    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(
            formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              String(i),
              true
            )
          );
        } else {
          output.push("");
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(
            formatProperty(ctx, value, recurseTimes, visibleKeys, key, true)
          );
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key],
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str
                .split("\n")
                .map(function (line) {
                  return "  " + line;
                })
                .join("\n")
                .substr(2);
            } else {
              str =
                "\n" +
                str
                  .split("\n")
                  .map(function (line) {
                    return "   " + line;
                  })
                  .join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify("" + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name
            .replace(/'/g, "\\'")
            .replace(/\\"/g, '"')
            .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }

      return name + ": " + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);

      if (length > 60) {
        return (
          braces[0] +
          (base === "" ? "" : base + "\n ") +
          " " +
          output.join(",\n  ") +
          " " +
          braces[1]
        );
      }

      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === "boolean";
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNumber(arg) {
      return typeof arg === "number";
    }

    function isString(arg) {
      return typeof arg === "string";
    }

    function isUndefined(arg) {
      return arg === undefined;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }

    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }

    function isError(e) {
      return (
        isObject(e) &&
        (objectToString(e) === "[object Error]" || e instanceof Error)
      );
    }

    function isFunction(arg) {
      return typeof arg === "function";
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  })();

  var OBJECT_COLUMN_NAME = "(index)";
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3,
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = "debug";
  INSPECTOR_LEVELS[LOG_LEVELS.info] = "log";
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = "warning";
  INSPECTOR_LEVELS[LOG_LEVELS.error] = "error";
  var INSPECTOR_FRAMES_TO_SKIP = 1;

  function getNativeLogFunction(level) {
    return function () {
      var str;

      if (arguments.length === 1 && typeof arguments[0] === "string") {
        str = arguments[0];
      } else {
        str = Array.prototype.map
          .call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10,
            });
          })
          .join(", ");
      }

      var firstArg = arguments[0];
      var logLevel = level;

      if (
        typeof firstArg === "string" &&
        firstArg.slice(0, 9) === "Warning: " &&
        logLevel >= LOG_LEVELS.error
      ) {
        logLevel = LOG_LEVELS.warn;
      }

      if (global.__inspectorLog) {
        global.__inspectorLog(
          INSPECTOR_LEVELS[logLevel],
          str,
          [].slice.call(arguments),
          INSPECTOR_FRAMES_TO_SKIP
        );
      }

      if (groupStack.length) {
        str = groupFormat("", str);
      }

      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];

      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }

    if (rows.length === 0) {
      global.nativeLoggingHook("", LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;

      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || "?").toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(" ", columnWidths[i] - cell.length).join("");
        return cell + extraSpaces;
      });
      space = space || " ";
      return cells.join(space + "|" + space);
    }

    var separators = columnWidths.map(function (columnWidth) {
      return repeat("-", columnWidth).join("");
    });
    var separatorRow = joinRow(separators, "-");
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook("\n" + table.join("\n"), LOG_LEVELS.info);
  }

  var GROUP_PAD = "\u2502";
  var GROUP_OPEN = "\u2510";
  var GROUP_CLOSE = "\u2518";
  var groupStack = [];

  function groupFormat(prefix, msg) {
    return groupStack.join("") + prefix + " " + (msg || "");
  }

  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupCollapsedPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }

  function consoleAssertPolyfill(expression, label) {
    if (!expression) {
      global.nativeLoggingHook("Assertion failed: " + label, LOG_LEVELS.error);
    }
  }

  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill,
      groupCollapsed: consoleGroupCollapsedPolyfill,
      assert: consoleAssertPolyfill,
    };
    Object.defineProperty(console, "_isPolyfilled", {
      value: true,
      enumerable: false,
    });
  } else if (!global.console) {
    function stub() {}

    var log = global.print || stub;
    global.console = {
      debug: log,
      error: log,
      info: log,
      log: log,
      trace: log,
      warn: log,
      assert: function assert(expression, label) {
        if (!expression) {
          log("Assertion failed: " + label);
        }
      },
      clear: stub,
      dir: stub,
      dirxml: stub,
      group: stub,
      groupCollapsed: stub,
      groupEnd: stub,
      profile: stub,
      profileEnd: stub,
      table: stub,
    };
    Object.defineProperty(console, "_isPolyfilled", {
      value: true,
      enumerable: false,
    });
  }
})(
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof global !== "undefined"
    ? global
    : typeof window !== "undefined"
    ? window
    : this
);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e, isFatal) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error, false);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(
      fun,
      context,
      args,
      unused_onError,
      unused_name
    ) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(
      fun,
      context,
      args
    ) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return !!_inGuard;
    },
    guard: function guard(fun, name, context) {
      var _ref;

      if (typeof fun !== "function") {
        console.warn(
          "A function must be passed to ErrorUtils.guard, got ",
          fun
        );
        return null;
      }

      var guardName =
        (_ref = name != null ? name : fun.name) != null
          ? _ref
          : "<generated guard>";

      function guarded() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return ErrorUtils.applyWithGuard(
          fun,
          context != null ? context : this,
          args,
          null,
          guardName
        );
      }

      return guarded;
    },
  };
  global.ErrorUtils = ErrorUtils;
})(
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof global !== "undefined"
    ? global
    : typeof window !== "undefined"
    ? window
    : this
);
(function (global) {
  (function () {
    "use strict";

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== "function") {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError("Object.entries called on non-object");
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== "function") {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError("Object.values called on non-object");
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(
  typeof globalThis !== "undefined"
    ? globalThis
    : typeof global !== "undefined"
    ? global
    : typeof window !== "undefined"
    ? window
    : this
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    _$$_REQUIRE(_dependencyMap[0]);

    var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

    _$$_REQUIRE(_dependencyMap[2]);
  },
  0,
  [1, 3, 376]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    {
      module.exports = _$$_REQUIRE(_dependencyMap[0]);
    }
  },
  1,
  [2]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    /**
     * @license React
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";

    var l = Symbol.for("react.element"),
      n = Symbol.for("react.portal"),
      p = Symbol.for("react.fragment"),
      q = Symbol.for("react.strict_mode"),
      r = Symbol.for("react.profiler"),
      t = Symbol.for("react.provider"),
      u = Symbol.for("react.context"),
      v = Symbol.for("react.forward_ref"),
      w = Symbol.for("react.suspense"),
      x = Symbol.for("react.memo"),
      y = Symbol.for("react.lazy"),
      z = Symbol.iterator;

    function A(a) {
      if (null === a || "object" !== typeof a) return null;
      a = (z && a[z]) || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }

    var B = {
        isMounted: function isMounted() {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate() {},
        enqueueReplaceState: function enqueueReplaceState() {},
        enqueueSetState: function enqueueSetState() {},
      },
      C = Object.assign,
      D = {};

    function E(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }

    E.prototype.isReactComponent = {};

    E.prototype.setState = function (a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error(
          "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, a, b, "setState");
    };

    E.prototype.forceUpdate = function (a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };

    function F() {}

    F.prototype = E.prototype;

    function G(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }

    var H = (G.prototype = new F());
    H.constructor = G;
    C(H, E.prototype);
    H.isPureReactComponent = true;
    var I = Array.isArray,
      J = Object.prototype.hasOwnProperty,
      K = {
        current: null,
      },
      L = {
        key: true,
        ref: true,
        __self: true,
        __source: true,
      };

    function M(a, b, e) {
      var d,
        c = {},
        k = null,
        h = null;
      if (null != b)
        for (d in (undefined !== b.ref && (h = b.ref),
        undefined !== b.key && (k = "" + b.key),
        b)) {
          J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
        }
      var g = arguments.length - 2;
      if (1 === g) c.children = e;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++) {
          f[m] = arguments[m + 2];
        }

        c.children = f;
      }
      if (a && a.defaultProps)
        for (d in ((g = a.defaultProps), g)) {
          undefined === c[d] && (c[d] = g[d]);
        }
      return {
        $$typeof: l,
        type: a,
        key: k,
        ref: h,
        props: c,
        _owner: K.current,
      };
    }

    function N(a, b) {
      return {
        $$typeof: l,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner,
      };
    }

    function O(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l;
    }

    function escape(a) {
      var b = {
        "=": "=0",
        ":": "=2",
      };
      return (
        "$" +
        a.replace(/[=:]/g, function (a) {
          return b[a];
        })
      );
    }

    var P = /\/+/g;

    function Q(a, b) {
      return "object" === typeof a && null !== a && null != a.key
        ? escape("" + a.key)
        : b.toString(36);
    }

    function R(a, b, e, d, c) {
      var k = typeof a;
      if ("undefined" === k || "boolean" === k) a = null;
      var h = false;
      if (null === a) h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;

          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                h = true;
            }
        }
      if (h)
        return (
          (h = a),
          (c = c(h)),
          (a = "" === d ? "." + Q(h, 0) : d),
          I(c)
            ? ((e = ""),
              null != a && (e = a.replace(P, "$&/") + "/"),
              R(c, b, e, "", function (a) {
                return a;
              }))
            : null != c &&
              (O(c) &&
                (c = N(
                  c,
                  e +
                    (!c.key || (h && h.key === c.key)
                      ? ""
                      : ("" + c.key).replace(P, "$&/") + "/") +
                    a
                )),
              b.push(c)),
          1
        );
      h = 0;
      d = "" === d ? "." : d + ":";
      if (I(a))
        for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = d + Q(k, g);
          h += R(k, b, e, f, c);
        }
      else if (((f = A(a)), "function" === typeof f))
        for (a = f.call(a), g = 0; !(k = a.next()).done; ) {
          (k = k.value), (f = d + Q(k, g++)), (h += R(k, b, e, f, c));
        }
      else if ("object" === k)
        throw (
          ((b = String(a)),
          Error(
            "Objects are not valid as a React child (found: " +
              ("[object Object]" === b
                ? "object with keys {" + Object.keys(a).join(", ") + "}"
                : b) +
              "). If you meant to render a collection of children, use an array instead."
          ))
        );
      return h;
    }

    function S(a, b, e) {
      if (null == a) return a;
      var d = [],
        c = 0;
      R(a, d, "", "", function (a) {
        return b.call(e, a, c++);
      });
      return d;
    }

    function T(a) {
      if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(
          function (b) {
            if (0 === a._status || -1 === a._status)
              (a._status = 1), (a._result = b);
          },
          function (b) {
            if (0 === a._status || -1 === a._status)
              (a._status = 2), (a._result = b);
          }
        );
        -1 === a._status && ((a._status = 0), (a._result = b));
      }

      if (1 === a._status) return a._result.default;
      throw a._result;
    }

    var U = {
        current: null,
      },
      V = {
        transition: null,
      },
      W = {
        ReactCurrentDispatcher: U,
        ReactCurrentBatchConfig: V,
        ReactCurrentOwner: K,
      };
    exports.Children = {
      map: S,
      forEach: function forEach(a, b, e) {
        S(
          a,
          function () {
            b.apply(this, arguments);
          },
          e
        );
      },
      count: function count(a) {
        var b = 0;
        S(a, function () {
          b++;
        });
        return b;
      },
      toArray: function toArray(a) {
        return (
          S(a, function (a) {
            return a;
          }) || []
        );
      },
      only: function only(a) {
        if (!O(a))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return a;
      },
    };
    exports.Component = E;
    exports.Fragment = p;
    exports.Profiler = r;
    exports.PureComponent = G;
    exports.StrictMode = q;
    exports.Suspense = w;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;

    exports.cloneElement = function (a, b, e) {
      if (null === a || undefined === a)
        throw Error(
          "React.cloneElement(...): The argument must be a React element, but you passed " +
            a +
            "."
        );
      var d = C({}, a.props),
        c = a.key,
        k = a.ref,
        h = a._owner;

      if (null != b) {
        undefined !== b.ref && ((k = b.ref), (h = K.current));
        undefined !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

        for (f in b) {
          J.call(b, f) &&
            !L.hasOwnProperty(f) &&
            (d[f] = undefined === b[f] && undefined !== g ? g[f] : b[f]);
        }
      }

      var f = arguments.length - 2;
      if (1 === f) d.children = e;
      else if (1 < f) {
        g = Array(f);

        for (var m = 0; m < f; m++) {
          g[m] = arguments[m + 2];
        }

        d.children = g;
      }
      return {
        $$typeof: l,
        type: a.type,
        key: c,
        ref: k,
        props: d,
        _owner: h,
      };
    };

    exports.createContext = function (a) {
      a = {
        $$typeof: u,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null,
      };
      a.Provider = {
        $$typeof: t,
        _context: a,
      };
      return (a.Consumer = a);
    };

    exports.createElement = M;

    exports.createFactory = function (a) {
      var b = M.bind(null, a);
      b.type = a;
      return b;
    };

    exports.createRef = function () {
      return {
        current: null,
      };
    };

    exports.forwardRef = function (a) {
      return {
        $$typeof: v,
        render: a,
      };
    };

    exports.isValidElement = O;

    exports.lazy = function (a) {
      return {
        $$typeof: y,
        _payload: {
          _status: -1,
          _result: a,
        },
        _init: T,
      };
    };

    exports.memo = function (a, b) {
      return {
        $$typeof: x,
        type: a,
        compare: undefined === b ? null : b,
      };
    };

    exports.startTransition = function (a) {
      var b = V.transition;
      V.transition = {};

      try {
        a();
      } finally {
        V.transition = b;
      }
    };

    exports.unstable_act = function () {
      throw Error("act(...) is not supported in production builds of React.");
    };

    exports.useCallback = function (a, b) {
      return U.current.useCallback(a, b);
    };

    exports.useContext = function (a) {
      return U.current.useContext(a);
    };

    exports.useDebugValue = function () {};

    exports.useDeferredValue = function (a) {
      return U.current.useDeferredValue(a);
    };

    exports.useEffect = function (a, b) {
      return U.current.useEffect(a, b);
    };

    exports.useId = function () {
      return U.current.useId();
    };

    exports.useImperativeHandle = function (a, b, e) {
      return U.current.useImperativeHandle(a, b, e);
    };

    exports.useInsertionEffect = function (a, b) {
      return U.current.useInsertionEffect(a, b);
    };

    exports.useLayoutEffect = function (a, b) {
      return U.current.useLayoutEffect(a, b);
    };

    exports.useMemo = function (a, b) {
      return U.current.useMemo(a, b);
    };

    exports.useReducer = function (a, b, e) {
      return U.current.useReducer(a, b, e);
    };

    exports.useRef = function (a) {
      return U.current.useRef(a);
    };

    exports.useState = function (a) {
      return U.current.useState(a);
    };

    exports.useSyncExternalStore = function (a, b, e) {
      return U.current.useSyncExternalStore(a, b, e);
    };

    exports.useTransition = function () {
      return U.current.useTransition();
    };

    exports.version = "18.1.0";
  },
  2,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var invariant = _$$_REQUIRE(_dependencyMap[0]);

    var warnOnce = _$$_REQUIRE(_dependencyMap[1]);

    module.exports = {
      get AccessibilityInfo() {
        return _$$_REQUIRE(_dependencyMap[2]).default;
      },

      get ActivityIndicator() {
        return _$$_REQUIRE(_dependencyMap[3]);
      },

      get Button() {
        return _$$_REQUIRE(_dependencyMap[4]);
      },

      get DatePickerIOS() {
        warnOnce(
          "DatePickerIOS-merged",
          "DatePickerIOS has been merged with DatePickerAndroid and will be removed in a future release. It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. See https://github.com/react-native-datetimepicker/datetimepicker"
        );
        return _$$_REQUIRE(_dependencyMap[5]);
      },

      get DrawerLayoutAndroid() {
        return _$$_REQUIRE(_dependencyMap[6]);
      },

      get FlatList() {
        return _$$_REQUIRE(_dependencyMap[7]);
      },

      get Image() {
        return _$$_REQUIRE(_dependencyMap[8]);
      },

      get ImageBackground() {
        return _$$_REQUIRE(_dependencyMap[9]);
      },

      get InputAccessoryView() {
        return _$$_REQUIRE(_dependencyMap[10]);
      },

      get KeyboardAvoidingView() {
        return _$$_REQUIRE(_dependencyMap[11]).default;
      },

      get MaskedViewIOS() {
        warnOnce(
          "maskedviewios-moved",
          "MaskedViewIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. See https://github.com/react-native-masked-view/masked-view"
        );
        return _$$_REQUIRE(_dependencyMap[12]);
      },

      get Modal() {
        return _$$_REQUIRE(_dependencyMap[13]);
      },

      get Pressable() {
        return _$$_REQUIRE(_dependencyMap[14]).default;
      },

      get ProgressBarAndroid() {
        warnOnce(
          "progress-bar-android-moved",
          "ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. See https://github.com/react-native-progress-view/progress-bar-android"
        );
        return _$$_REQUIRE(_dependencyMap[15]);
      },

      get ProgressViewIOS() {
        warnOnce(
          "progress-view-ios-moved",
          "ProgressViewIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. See https://github.com/react-native-progress-view/progress-view"
        );
        return _$$_REQUIRE(_dependencyMap[16]);
      },

      get RefreshControl() {
        return _$$_REQUIRE(_dependencyMap[17]);
      },

      get SafeAreaView() {
        return _$$_REQUIRE(_dependencyMap[18]).default;
      },

      get ScrollView() {
        return _$$_REQUIRE(_dependencyMap[19]);
      },

      get SectionList() {
        return _$$_REQUIRE(_dependencyMap[20]).default;
      },

      get Slider() {
        warnOnce(
          "slider-moved",
          "Slider has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. See https://github.com/callstack/react-native-slider"
        );
        return _$$_REQUIRE(_dependencyMap[21]);
      },

      get StatusBar() {
        return _$$_REQUIRE(_dependencyMap[22]);
      },

      get Switch() {
        return _$$_REQUIRE(_dependencyMap[23]).default;
      },

      get Text() {
        return _$$_REQUIRE(_dependencyMap[24]);
      },

      get TextInput() {
        return _$$_REQUIRE(_dependencyMap[25]);
      },

      get Touchable() {
        return _$$_REQUIRE(_dependencyMap[26]);
      },

      get TouchableHighlight() {
        return _$$_REQUIRE(_dependencyMap[27]);
      },

      get TouchableNativeFeedback() {
        return _$$_REQUIRE(_dependencyMap[28]);
      },

      get TouchableOpacity() {
        return _$$_REQUIRE(_dependencyMap[29]);
      },

      get TouchableWithoutFeedback() {
        return _$$_REQUIRE(_dependencyMap[30]);
      },

      get View() {
        return _$$_REQUIRE(_dependencyMap[31]);
      },

      get VirtualizedList() {
        return _$$_REQUIRE(_dependencyMap[32]);
      },

      get VirtualizedSectionList() {
        return _$$_REQUIRE(_dependencyMap[33]);
      },

      get ActionSheetIOS() {
        return _$$_REQUIRE(_dependencyMap[34]);
      },

      get Alert() {
        return _$$_REQUIRE(_dependencyMap[35]);
      },

      get Animated() {
        return _$$_REQUIRE(_dependencyMap[36]);
      },

      get Appearance() {
        return _$$_REQUIRE(_dependencyMap[37]);
      },

      get AppRegistry() {
        return _$$_REQUIRE(_dependencyMap[38]);
      },

      get AppState() {
        return _$$_REQUIRE(_dependencyMap[39]);
      },

      get AsyncStorage() {
        warnOnce(
          "async-storage-moved",
          "AsyncStorage has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. See https://github.com/react-native-async-storage/async-storage"
        );
        return _$$_REQUIRE(_dependencyMap[40]);
      },

      get BackHandler() {
        return _$$_REQUIRE(_dependencyMap[41]);
      },

      get Clipboard() {
        warnOnce(
          "clipboard-moved",
          "Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. See https://github.com/react-native-clipboard/clipboard"
        );
        return _$$_REQUIRE(_dependencyMap[42]);
      },

      get DeviceInfo() {
        return _$$_REQUIRE(_dependencyMap[43]);
      },

      get DevSettings() {
        return _$$_REQUIRE(_dependencyMap[44]);
      },

      get Dimensions() {
        return _$$_REQUIRE(_dependencyMap[45]);
      },

      get Easing() {
        return _$$_REQUIRE(_dependencyMap[46]);
      },

      get findNodeHandle() {
        return _$$_REQUIRE(_dependencyMap[47]).findNodeHandle;
      },

      get I18nManager() {
        return _$$_REQUIRE(_dependencyMap[48]);
      },

      get ImagePickerIOS() {
        warnOnce(
          "imagePickerIOS-moved",
          "ImagePickerIOS has been extracted from react-native core and will be removed in a future release. Please upgrade to use either '@react-native-community/react-native-image-picker' or 'expo-image-picker'. If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. See https://github.com/rnc-archive/react-native-image-picker-ios"
        );
        return _$$_REQUIRE(_dependencyMap[49]);
      },

      get InteractionManager() {
        return _$$_REQUIRE(_dependencyMap[50]);
      },

      get Keyboard() {
        return _$$_REQUIRE(_dependencyMap[51]);
      },

      get LayoutAnimation() {
        return _$$_REQUIRE(_dependencyMap[52]);
      },

      get Linking() {
        return _$$_REQUIRE(_dependencyMap[53]);
      },

      get LogBox() {
        return _$$_REQUIRE(_dependencyMap[54]);
      },

      get NativeDialogManagerAndroid() {
        return _$$_REQUIRE(_dependencyMap[55]).default;
      },

      get NativeEventEmitter() {
        return _$$_REQUIRE(_dependencyMap[56]).default;
      },

      get Networking() {
        return _$$_REQUIRE(_dependencyMap[57]);
      },

      get PanResponder() {
        return _$$_REQUIRE(_dependencyMap[58]);
      },

      get PermissionsAndroid() {
        return _$$_REQUIRE(_dependencyMap[59]);
      },

      get PixelRatio() {
        return _$$_REQUIRE(_dependencyMap[60]);
      },

      get PushNotificationIOS() {
        warnOnce(
          "pushNotificationIOS-moved",
          "PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. See https://github.com/react-native-push-notification-ios/push-notification-ios"
        );
        return _$$_REQUIRE(_dependencyMap[61]);
      },

      get Settings() {
        return _$$_REQUIRE(_dependencyMap[62]);
      },

      get Share() {
        return _$$_REQUIRE(_dependencyMap[63]);
      },

      get StyleSheet() {
        return _$$_REQUIRE(_dependencyMap[64]);
      },

      get Systrace() {
        return _$$_REQUIRE(_dependencyMap[65]);
      },

      get ToastAndroid() {
        return _$$_REQUIRE(_dependencyMap[66]);
      },

      get TurboModuleRegistry() {
        return _$$_REQUIRE(_dependencyMap[67]);
      },

      get UIManager() {
        return _$$_REQUIRE(_dependencyMap[68]);
      },

      get unstable_batchedUpdates() {
        return _$$_REQUIRE(_dependencyMap[47]).unstable_batchedUpdates;
      },

      get useColorScheme() {
        return _$$_REQUIRE(_dependencyMap[69]).default;
      },

      get useWindowDimensions() {
        return _$$_REQUIRE(_dependencyMap[70]).default;
      },

      get UTFSequence() {
        return _$$_REQUIRE(_dependencyMap[71]);
      },

      get Vibration() {
        return _$$_REQUIRE(_dependencyMap[72]);
      },

      get YellowBox() {
        return _$$_REQUIRE(_dependencyMap[73]);
      },

      get DeviceEventEmitter() {
        return _$$_REQUIRE(_dependencyMap[74]).default;
      },

      get DynamicColorIOS() {
        return _$$_REQUIRE(_dependencyMap[75]).DynamicColorIOS;
      },

      get NativeAppEventEmitter() {
        return _$$_REQUIRE(_dependencyMap[76]);
      },

      get NativeModules() {
        return _$$_REQUIRE(_dependencyMap[77]);
      },

      get Platform() {
        return _$$_REQUIRE(_dependencyMap[78]);
      },

      get PlatformColor() {
        return _$$_REQUIRE(_dependencyMap[79]).PlatformColor;
      },

      get processColor() {
        return _$$_REQUIRE(_dependencyMap[80]);
      },

      get requireNativeComponent() {
        return _$$_REQUIRE(_dependencyMap[81]);
      },

      get RootTagContext() {
        return _$$_REQUIRE(_dependencyMap[82]).RootTagContext;
      },

      get unstable_enableLogBox() {
        return function () {
          return console.warn(
            "LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version."
          );
        };
      },

      get ColorPropType() {
        invariant(
          false,
          "ColorPropType has been removed from React Native. Migrate to ColorPropType exported from 'deprecated-react-native-prop-types'."
        );
      },

      get EdgeInsetsPropType() {
        invariant(
          false,
          "EdgeInsetsPropType has been removed from React Native. Migrate to EdgeInsetsPropType exported from 'deprecated-react-native-prop-types'."
        );
      },

      get PointPropType() {
        invariant(
          false,
          "PointPropType has been removed from React Native. Migrate to PointPropType exported from 'deprecated-react-native-prop-types'."
        );
      },

      get ViewPropTypes() {
        invariant(
          false,
          "ViewPropTypes has been removed from React Native. Migrate to ViewPropTypes exported from 'deprecated-react-native-prop-types'."
        );
      },
    };
  },
  3,
  [
    4, 5, 6, 174, 187, 280, 281, 238, 267, 287, 288, 290, 291, 293, 301, 181,
    303, 244, 304, 247, 276, 306, 282, 308, 188, 312, 314, 318, 200, 201, 319,
    176, 242, 277, 320, 102, 202, 322, 325, 339, 342, 337, 345, 347, 348, 153,
    229, 18, 299, 350, 212, 249, 250, 352, 355, 104, 82, 81, 356, 358, 152, 360,
    362, 363, 175, 25, 365, 42, 142, 367, 370, 371, 372, 374, 8, 375, 112, 43,
    54, 138, 135, 184, 298,
  ]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var invariant = function invariant(condition, format, a, b, c, d, e, f) {
      if (!condition) {
        var error;

        if (format === undefined) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function () {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }

        error.framesToPop = 1;
        throw error;
      }
    };

    module.exports = invariant;
  },
  4,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var warnedKeys = {};

    function warnOnce(key, message) {
      if (warnedKeys[key]) {
        return;
      }

      console.warn(message);
      warnedKeys[key] = true;
    }

    module.exports = warnOnce;
  },
  5,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ReactNative = _$$_REQUIRE(_dependencyMap[2]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _NativeAccessibilityInfo = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _NativeAccessibilityManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _legacySendAccessibilityEvent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var EventNames =
      _Platform.default.OS === "android"
        ? new Map([
            ["change", "touchExplorationDidChange"],
            ["reduceMotionChanged", "reduceMotionDidChange"],
            ["screenReaderChanged", "touchExplorationDidChange"],
            ["accessibilityServiceChanged", "accessibilityServiceDidChange"],
          ])
        : new Map([
            ["announcementFinished", "announcementFinished"],
            ["boldTextChanged", "boldTextChanged"],
            ["change", "screenReaderChanged"],
            ["grayscaleChanged", "grayscaleChanged"],
            ["invertColorsChanged", "invertColorsChanged"],
            ["reduceMotionChanged", "reduceMotionChanged"],
            ["reduceTransparencyChanged", "reduceTransparencyChanged"],
            ["screenReaderChanged", "screenReaderChanged"],
          ]);
    var AccessibilityInfo = {
      isBoldTextEnabled: function isBoldTextEnabled() {
        if (_Platform.default.OS === "android") {
          return Promise.resolve(false);
        } else {
          return new Promise(function (resolve, reject) {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentBoldTextState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          });
        }
      },
      isGrayscaleEnabled: function isGrayscaleEnabled() {
        if (_Platform.default.OS === "android") {
          return Promise.resolve(false);
        } else {
          return new Promise(function (resolve, reject) {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentGrayscaleState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          });
        }
      },
      isInvertColorsEnabled: function isInvertColorsEnabled() {
        if (_Platform.default.OS === "android") {
          return Promise.resolve(false);
        } else {
          return new Promise(function (resolve, reject) {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentInvertColorsState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          });
        }
      },
      isReduceMotionEnabled: function isReduceMotionEnabled() {
        return new Promise(function (resolve, reject) {
          if (_Platform.default.OS === "android") {
            if (_NativeAccessibilityInfo.default != null) {
              _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);
            } else {
              reject(null);
            }
          } else {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentReduceMotionState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          }
        });
      },
      isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {
        if (_Platform.default.OS === "android") {
          return Promise.resolve(false);
        } else {
          return new Promise(function (resolve, reject) {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          });
        }
      },
      isScreenReaderEnabled: function isScreenReaderEnabled() {
        return new Promise(function (resolve, reject) {
          if (_Platform.default.OS === "android") {
            if (_NativeAccessibilityInfo.default != null) {
              _NativeAccessibilityInfo.default.isTouchExplorationEnabled(
                resolve
              );
            } else {
              reject(null);
            }
          } else {
            if (_NativeAccessibilityManager.default != null) {
              _NativeAccessibilityManager.default.getCurrentVoiceOverState(
                resolve,
                reject
              );
            } else {
              reject(null);
            }
          }
        });
      },
      isAccessibilityServiceEnabled: function isAccessibilityServiceEnabled() {
        return new Promise(function (resolve, reject) {
          if (_Platform.default.OS === "android") {
            if (
              _NativeAccessibilityInfo.default != null &&
              _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled !=
                null
            ) {
              _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(
                resolve
              );
            } else {
              reject(null);
            }
          } else {
            reject(null);
          }
        });
      },
      addEventListener: function addEventListener(eventName, handler) {
        var deviceEventName = EventNames.get(eventName);
        return deviceEventName == null
          ? {
              remove: function remove() {},
            }
          : _RCTDeviceEventEmitter.default.addListener(
              deviceEventName,
              handler
            );
      },
      setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
        (0, _legacySendAccessibilityEvent.default)(reactTag, "focus");
      },
      sendAccessibilityEvent_unstable: function sendAccessibilityEvent_unstable(
        handle,
        eventType
      ) {
        if (_Platform.default.OS === "ios" && eventType === "click") {
          return;
        }

        (0, _ReactNative.sendAccessibilityEvent)(handle, eventType);
      },
      announceForAccessibility: function announceForAccessibility(
        announcement
      ) {
        if (_Platform.default.OS === "android") {
          _NativeAccessibilityInfo.default == null
            ? undefined
            : _NativeAccessibilityInfo.default.announceForAccessibility(
                announcement
              );
        } else {
          _NativeAccessibilityManager.default == null
            ? undefined
            : _NativeAccessibilityManager.default.announceForAccessibility(
                announcement
              );
        }
      },
      announceForAccessibilityWithOptions:
        function announceForAccessibilityWithOptions(announcement, options) {
          if (_Platform.default.OS === "android") {
            _NativeAccessibilityInfo.default == null
              ? undefined
              : _NativeAccessibilityInfo.default.announceForAccessibility(
                  announcement
                );
          } else {
            if (
              _NativeAccessibilityManager.default != null &&
              _NativeAccessibilityManager.default
                .announceForAccessibilityWithOptions
            ) {
              _NativeAccessibilityManager.default == null
                ? undefined
                : _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(
                    announcement,
                    options
                  );
            } else {
              _NativeAccessibilityManager.default == null
                ? undefined
                : _NativeAccessibilityManager.default.announceForAccessibility(
                    announcement
                  );
            }
          }
        },
      getRecommendedTimeoutMillis: function getRecommendedTimeoutMillis(
        originalTimeout
      ) {
        if (_Platform.default.OS === "android") {
          return new Promise(function (resolve, reject) {
            if (
              _NativeAccessibilityInfo.default != null &&
              _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis
            ) {
              _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(
                originalTimeout,
                resolve
              );
            } else {
              resolve(originalTimeout);
            }
          });
        } else {
          return Promise.resolve(originalTimeout);
        }
      },
    };
    var _default = AccessibilityInfo;
    exports.default = _default;
  },
  6,
  [7, 8, 18, 54, 172, 173, 168]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }

    (module.exports = _interopRequireDefault),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  7,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _default = new _EventEmitter.default();

    exports.default = _default;
  },
  8,
  [7, 9]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _toConsumableArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var EventEmitter = (function () {
      function EventEmitter() {
        (0, _classCallCheck2.default)(this, EventEmitter);
        this._registry = {};
      }

      (0, _createClass2.default)(EventEmitter, [
        {
          key: "addListener",
          value: function addListener(eventType, listener, context) {
            var registrations = allocate(this._registry, eventType);
            var registration = {
              context: context,
              listener: listener,
              remove: function remove() {
                registrations.delete(registration);
              },
            };
            registrations.add(registration);
            return registration;
          },
        },
        {
          key: "emit",
          value: function emit(eventType) {
            var registrations = this._registry[eventType];

            if (registrations != null) {
              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }

              for (var registration of (0, _toConsumableArray2.default)(
                registrations
              )) {
                registration.listener.apply(registration.context, args);
              }
            }
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners(eventType) {
            if (eventType == null) {
              this._registry = {};
            } else {
              delete this._registry[eventType];
            }
          },
        },
        {
          key: "listenerCount",
          value: function listenerCount(eventType) {
            var registrations = this._registry[eventType];
            return registrations == null ? 0 : registrations.size;
          },
        },
      ]);
      return EventEmitter;
    })();

    exports.default = EventEmitter;

    function allocate(registry, eventType) {
      var registrations = registry[eventType];

      if (registrations == null) {
        registrations = new Set();
        registry[eventType] = registrations;
      }

      return registrations;
    }
  },
  9,
  [7, 10, 16, 17]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

    var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

    var unsupportedIterableToArray = _$$_REQUIRE(_dependencyMap[2]);

    var nonIterableSpread = _$$_REQUIRE(_dependencyMap[3]);

    function _toConsumableArray(arr) {
      return (
        arrayWithoutHoles(arr) ||
        iterableToArray(arr) ||
        unsupportedIterableToArray(arr) ||
        nonIterableSpread()
      );
    }

    (module.exports = _toConsumableArray),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  10,
  [11, 13, 14, 15]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var arrayLikeToArray = _$$_REQUIRE(_dependencyMap[0]);

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return arrayLikeToArray(arr);
    }

    (module.exports = _arrayWithoutHoles),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  11,
  [12]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    (module.exports = _arrayLikeToArray),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  12,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _iterableToArray(iter) {
      if (
        (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null) ||
        iter["@@iterator"] != null
      )
        return Array.from(iter);
    }

    (module.exports = _iterableToArray),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  13,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var arrayLikeToArray = _$$_REQUIRE(_dependencyMap[0]);

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (
        n === "Arguments" ||
        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
      )
        return arrayLikeToArray(o, minLen);
    }

    (module.exports = _unsupportedIterableToArray),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  14,
  [12]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _nonIterableSpread() {
      throw new TypeError(
        "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
      );
    }

    (module.exports = _nonIterableSpread),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  15,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    (module.exports = _classCallCheck),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  16,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false,
      });
      return Constructor;
    }

    (module.exports = _createClass),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  17,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var ReactNative;
    {
      ReactNative = _$$_REQUIRE(_dependencyMap[0]);
    }
    module.exports = ReactNative;
  },
  18,
  [19]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    _$$_REQUIRE(_dependencyMap[0]);

    var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[1]),
      React = _$$_REQUIRE(_dependencyMap[2]),
      Scheduler = _$$_REQUIRE(_dependencyMap[3]);

    function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    }

    var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        },
      };

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl.apply(reporter, arguments);
    }

    function invokeGuardedCallbackAndCatchFirstError(
      name,
      func,
      context,
      a,
      b,
      c,
      d,
      e,
      f
    ) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
        } else
          throw Error(
            "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."
          );

        hasRethrowError || ((hasRethrowError = true), (rethrowError = error));
      }
    }

    var isArrayImpl = Array.isArray,
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

    function executeDispatch(event, listener, inst) {
      var type = event.type || "unknown-event";
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }

    function executeDirectDispatch(event) {
      var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
      if (isArrayImpl(dispatchListener))
        throw Error("executeDirectDispatch(...): Invalid `event`.");
      event.currentTarget = dispatchListener
        ? getNodeFromInstance(dispatchInstance)
        : null;
      dispatchListener = dispatchListener ? dispatchListener(event) : null;
      event.currentTarget = null;
      event._dispatchListeners = null;
      event._dispatchInstances = null;
      return dispatchListener;
    }

    var assign = Object.assign;

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }

    function SyntheticEvent(
      dispatchConfig,
      targetInst,
      nativeEvent,
      nativeEventTarget
    ) {
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      this._dispatchInstances = this._dispatchListeners = null;
      dispatchConfig = this.constructor.Interface;

      for (var propName in dispatchConfig) {
        dispatchConfig.hasOwnProperty(propName) &&
          ((targetInst = dispatchConfig[propName])
            ? (this[propName] = targetInst(nativeEvent))
            : "target" === propName
            ? (this.target = nativeEventTarget)
            : (this[propName] = nativeEvent[propName]));
      }

      this.isDefaultPrevented = (
        null != nativeEvent.defaultPrevented
          ? nativeEvent.defaultPrevented
          : false === nativeEvent.returnValue
      )
        ? functionThatReturnsTrue
        : functionThatReturnsFalse;
      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    assign(SyntheticEvent.prototype, {
      preventDefault: function preventDefault() {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        event &&
          (event.preventDefault
            ? event.preventDefault()
            : "unknown" !== typeof event.returnValue &&
              (event.returnValue = false),
          (this.isDefaultPrevented = functionThatReturnsTrue));
      },
      stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event &&
          (event.stopPropagation
            ? event.stopPropagation()
            : "unknown" !== typeof event.cancelBubble &&
              (event.cancelBubble = true),
          (this.isPropagationStopped = functionThatReturnsTrue));
      },
      persist: function persist() {
        this.isPersistent = functionThatReturnsTrue;
      },
      isPersistent: functionThatReturnsFalse,
      destructor: function destructor() {
        var Interface = this.constructor.Interface,
          propName;

        for (propName in Interface) {
          this[propName] = null;
        }

        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented =
          functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
      },
    });
    SyntheticEvent.Interface = {
      type: null,
      target: null,
      currentTarget: function currentTarget() {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null,
    };

    SyntheticEvent.extend = function (Interface) {
      function E() {}

      function Class() {
        return Super.apply(this, arguments);
      }

      var Super = this;
      E.prototype = Super.prototype;
      var prototype = new E();
      assign(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);

    function createOrGetPooledEvent(
      dispatchConfig,
      targetInst,
      nativeEvent,
      nativeInst
    ) {
      if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(
          instance,
          dispatchConfig,
          targetInst,
          nativeEvent,
          nativeInst
        );
        return instance;
      }

      return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      if (!(event instanceof this))
        throw Error(
          "Trying to release an event instance into a pool of a different type."
        );
      event.destructor();
      10 > this.eventPool.length && this.eventPool.push(event);
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.getPooled = createOrGetPooledEvent;
      EventConstructor.eventPool = [];
      EventConstructor.release = releasePooledEvent;
    }

    var ResponderSyntheticEvent = SyntheticEvent.extend({
      touchHistory: function touchHistory() {
        return null;
      },
    });

    function isStartish(topLevelType) {
      return "topTouchStart" === topLevelType;
    }

    function isMoveish(topLevelType) {
      return "topTouchMove" === topLevelType;
    }

    var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0,
      };

    function timestampForTouch(touch) {
      return touch.timeStamp || touch.timestamp;
    }

    function getTouchIdentifier(_ref) {
      _ref = _ref.identifier;
      if (null == _ref) throw Error("Touch object is missing identifier.");
      return _ref;
    }

    function recordTouchStart(touch) {
      var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
      touchRecord
        ? ((touchRecord.touchActive = true),
          (touchRecord.startPageX = touch.pageX),
          (touchRecord.startPageY = touch.pageY),
          (touchRecord.startTimeStamp = timestampForTouch(touch)),
          (touchRecord.currentPageX = touch.pageX),
          (touchRecord.currentPageY = touch.pageY),
          (touchRecord.currentTimeStamp = timestampForTouch(touch)),
          (touchRecord.previousPageX = touch.pageX),
          (touchRecord.previousPageY = touch.pageY),
          (touchRecord.previousTimeStamp = timestampForTouch(touch)))
        : ((touchRecord = {
            touchActive: true,
            startPageX: touch.pageX,
            startPageY: touch.pageY,
            startTimeStamp: timestampForTouch(touch),
            currentPageX: touch.pageX,
            currentPageY: touch.pageY,
            currentTimeStamp: timestampForTouch(touch),
            previousPageX: touch.pageX,
            previousPageY: touch.pageY,
            previousTimeStamp: timestampForTouch(touch),
          }),
          (touchBank[identifier] = touchRecord));
      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
    }

    function recordTouchMove(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];
      touchRecord &&
        ((touchRecord.touchActive = true),
        (touchRecord.previousPageX = touchRecord.currentPageX),
        (touchRecord.previousPageY = touchRecord.currentPageY),
        (touchRecord.previousTimeStamp = touchRecord.currentTimeStamp),
        (touchRecord.currentPageX = touch.pageX),
        (touchRecord.currentPageY = touch.pageY),
        (touchRecord.currentTimeStamp = timestampForTouch(touch)),
        (touchHistory.mostRecentTimeStamp = timestampForTouch(touch)));
    }

    function recordTouchEnd(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];
      touchRecord &&
        ((touchRecord.touchActive = false),
        (touchRecord.previousPageX = touchRecord.currentPageX),
        (touchRecord.previousPageY = touchRecord.currentPageY),
        (touchRecord.previousTimeStamp = touchRecord.currentTimeStamp),
        (touchRecord.currentPageX = touch.pageX),
        (touchRecord.currentPageY = touch.pageY),
        (touchRecord.currentTimeStamp = timestampForTouch(touch)),
        (touchHistory.mostRecentTimeStamp = timestampForTouch(touch)));
    }

    var instrumentationCallback,
      ResponderTouchHistoryStore = {
        instrument: function instrument(callback) {
          instrumentationCallback = callback;
        },
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          null != instrumentationCallback &&
            instrumentationCallback(topLevelType, nativeEvent);
          if (isMoveish(topLevelType))
            nativeEvent.changedTouches.forEach(recordTouchMove);
          else if (isStartish(topLevelType))
            nativeEvent.changedTouches.forEach(recordTouchStart),
              (touchHistory.numberActiveTouches = nativeEvent.touches.length),
              1 === touchHistory.numberActiveTouches &&
                (touchHistory.indexOfSingleActiveTouch =
                  nativeEvent.touches[0].identifier);
          else if (
            "topTouchEnd" === topLevelType ||
            "topTouchCancel" === topLevelType
          )
            if (
              (nativeEvent.changedTouches.forEach(recordTouchEnd),
              (touchHistory.numberActiveTouches = nativeEvent.touches.length),
              1 === touchHistory.numberActiveTouches)
            )
              for (
                topLevelType = 0;
                topLevelType < touchBank.length;
                topLevelType++
              ) {
                if (
                  ((nativeEvent = touchBank[topLevelType]),
                  null != nativeEvent && nativeEvent.touchActive)
                ) {
                  touchHistory.indexOfSingleActiveTouch = topLevelType;
                  break;
                }
              }
        },
        touchHistory: touchHistory,
      };

    function accumulate(current, next) {
      if (null == next)
        throw Error(
          "accumulate(...): Accumulated items must not be null or undefined."
        );
      return null == current
        ? next
        : isArrayImpl(current)
        ? current.concat(next)
        : isArrayImpl(next)
        ? [current].concat(next)
        : [current, next];
    }

    function accumulateInto(current, next) {
      if (null == next)
        throw Error(
          "accumulateInto(...): Accumulated items must not be null or undefined."
        );
      if (null == current) return next;

      if (isArrayImpl(current)) {
        if (isArrayImpl(next))
          return current.push.apply(current, next), current;
        current.push(next);
        return current;
      }

      return isArrayImpl(next) ? [current].concat(next) : [current, next];
    }

    function forEachAccumulated(arr, cb, scope) {
      Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
    }

    var responderInst = null,
      trackedTouchCount = 0;

    function changeResponder(nextResponderInst, blockHostResponder) {
      var oldResponderInst = responderInst;
      responderInst = nextResponderInst;
      if (null !== ResponderEventPlugin.GlobalResponderHandler)
        ResponderEventPlugin.GlobalResponderHandler.onChange(
          oldResponderInst,
          nextResponderInst,
          blockHostResponder
        );
    }

    var eventTypes = {
      startShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onStartShouldSetResponder",
          captured: "onStartShouldSetResponderCapture",
        },
        dependencies: startDependencies,
      },
      scrollShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onScrollShouldSetResponder",
          captured: "onScrollShouldSetResponderCapture",
        },
        dependencies: ["topScroll"],
      },
      selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onSelectionChangeShouldSetResponder",
          captured: "onSelectionChangeShouldSetResponderCapture",
        },
        dependencies: ["topSelectionChange"],
      },
      moveShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onMoveShouldSetResponder",
          captured: "onMoveShouldSetResponderCapture",
        },
        dependencies: moveDependencies,
      },
      responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies,
      },
      responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies,
      },
      responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies,
      },
      responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies,
      },
      responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: [],
      },
      responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: [],
      },
      responderReject: {
        registrationName: "onResponderReject",
        dependencies: [],
      },
      responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: [],
      },
    };

    function getParent(inst) {
      do {
        inst = inst.return;
      } while (inst && 5 !== inst.tag);

      return inst ? inst : null;
    }

    function traverseTwoPhase(inst, fn, arg) {
      for (var path = []; inst; ) {
        path.push(inst), (inst = getParent(inst));
      }

      for (inst = path.length; 0 < inst--; ) {
        fn(path[inst], "captured", arg);
      }

      for (inst = 0; inst < path.length; inst++) {
        fn(path[inst], "bubbled", arg);
      }
    }

    function getListener(inst, registrationName) {
      inst = inst.stateNode;
      if (null === inst) return null;
      inst = getFiberCurrentPropsFromNode(inst);
      if (null === inst) return null;
      if ((inst = inst[registrationName]) && "function" !== typeof inst)
        throw Error(
          "Expected `" +
            registrationName +
            "` listener to be a function, instead got a value of `" +
            typeof inst +
            "` type."
        );
      return inst;
    }

    function accumulateDirectionalDispatches(inst, phase, event) {
      if (
        (phase = getListener(
          inst,
          event.dispatchConfig.phasedRegistrationNames[phase]
        ))
      )
        (event._dispatchListeners = accumulateInto(
          event._dispatchListeners,
          phase
        )),
          (event._dispatchInstances = accumulateInto(
            event._dispatchInstances,
            inst
          ));
    }

    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;

        if (inst && event && event.dispatchConfig.registrationName) {
          var listener = getListener(
            inst,
            event.dispatchConfig.registrationName
          );
          listener &&
            ((event._dispatchListeners = accumulateInto(
              event._dispatchListeners,
              listener
            )),
            (event._dispatchInstances = accumulateInto(
              event._dispatchInstances,
              inst
            )));
        }
      }
    }

    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent(targetInst) : null;
        traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
      }
    }

    function accumulateTwoPhaseDispatchesSingle(event) {
      event &&
        event.dispatchConfig.phasedRegistrationNames &&
        traverseTwoPhase(
          event._targetInst,
          accumulateDirectionalDispatches,
          event
        );
    }

    var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(
          topLevelType,
          targetInst,
          nativeEvent,
          nativeEventTarget
        ) {
          if (isStartish(topLevelType)) trackedTouchCount += 1;
          else if (
            "topTouchEnd" === topLevelType ||
            "topTouchCancel" === topLevelType
          )
            if (0 <= trackedTouchCount) --trackedTouchCount;
            else return null;
          ResponderTouchHistoryStore.recordTouchTrack(
            topLevelType,
            nativeEvent
          );

          if (
            targetInst &&
            (("topScroll" === topLevelType &&
              !nativeEvent.responderIgnoreScroll) ||
              (0 < trackedTouchCount &&
                "topSelectionChange" === topLevelType) ||
              isStartish(topLevelType) ||
              isMoveish(topLevelType))
          ) {
            var shouldSetEventType = isStartish(topLevelType)
              ? eventTypes.startShouldSetResponder
              : isMoveish(topLevelType)
              ? eventTypes.moveShouldSetResponder
              : "topSelectionChange" === topLevelType
              ? eventTypes.selectionChangeShouldSetResponder
              : eventTypes.scrollShouldSetResponder;
            if (responderInst)
              b: {
                var JSCompiler_temp = responderInst;

                for (
                  var depthA = 0, tempA = JSCompiler_temp;
                  tempA;
                  tempA = getParent(tempA)
                ) {
                  depthA++;
                }

                tempA = 0;

                for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
                  tempA++;
                }

                for (; 0 < depthA - tempA; ) {
                  (JSCompiler_temp = getParent(JSCompiler_temp)), depthA--;
                }

                for (; 0 < tempA - depthA; ) {
                  (targetInst = getParent(targetInst)), tempA--;
                }

                for (; depthA--; ) {
                  if (
                    JSCompiler_temp === targetInst ||
                    JSCompiler_temp === targetInst.alternate
                  )
                    break b;
                  JSCompiler_temp = getParent(JSCompiler_temp);
                  targetInst = getParent(targetInst);
                }

                JSCompiler_temp = null;
              }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(
              shouldSetEventType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            shouldSetEventType.touchHistory =
              ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp
              ? forEachAccumulated(
                  shouldSetEventType,
                  accumulateTwoPhaseDispatchesSingleSkipTarget
                )
              : forEachAccumulated(
                  shouldSetEventType,
                  accumulateTwoPhaseDispatchesSingle
                );

            b: {
              JSCompiler_temp = shouldSetEventType._dispatchListeners;
              targetInst = shouldSetEventType._dispatchInstances;
              if (isArrayImpl(JSCompiler_temp))
                for (
                  depthA = 0;
                  depthA < JSCompiler_temp.length &&
                  !shouldSetEventType.isPropagationStopped();
                  depthA++
                ) {
                  if (
                    JSCompiler_temp[depthA](
                      shouldSetEventType,
                      targetInst[depthA]
                    )
                  ) {
                    JSCompiler_temp = targetInst[depthA];
                    break b;
                  }
                }
              else if (
                JSCompiler_temp &&
                JSCompiler_temp(shouldSetEventType, targetInst)
              ) {
                JSCompiler_temp = targetInst;
                break b;
              }
              JSCompiler_temp = null;
            }

            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() ||
              shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
              if (
                ((shouldSetEventType = ResponderSyntheticEvent.getPooled(
                  eventTypes.responderGrant,
                  JSCompiler_temp,
                  nativeEvent,
                  nativeEventTarget
                )),
                (shouldSetEventType.touchHistory =
                  ResponderTouchHistoryStore.touchHistory),
                forEachAccumulated(
                  shouldSetEventType,
                  accumulateDirectDispatchesSingle
                ),
                (targetInst =
                  true === executeDirectDispatch(shouldSetEventType)),
                responderInst)
              ) {
                if (
                  ((depthA = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderTerminationRequest,
                    responderInst,
                    nativeEvent,
                    nativeEventTarget
                  )),
                  (depthA.touchHistory =
                    ResponderTouchHistoryStore.touchHistory),
                  forEachAccumulated(depthA, accumulateDirectDispatchesSingle),
                  (tempA =
                    !depthA._dispatchListeners ||
                    executeDirectDispatch(depthA)),
                  depthA.isPersistent() || depthA.constructor.release(depthA),
                  tempA)
                ) {
                  depthA = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderTerminate,
                    responderInst,
                    nativeEvent,
                    nativeEventTarget
                  );
                  depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                  forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                  var JSCompiler_temp$jscomp$0 = accumulate(
                    JSCompiler_temp$jscomp$0,
                    [shouldSetEventType, depthA]
                  );
                  changeResponder(JSCompiler_temp, targetInst);
                } else
                  (shouldSetEventType = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderReject,
                    JSCompiler_temp,
                    nativeEvent,
                    nativeEventTarget
                  )),
                    (shouldSetEventType.touchHistory =
                      ResponderTouchHistoryStore.touchHistory),
                    forEachAccumulated(
                      shouldSetEventType,
                      accumulateDirectDispatchesSingle
                    ),
                    (JSCompiler_temp$jscomp$0 = accumulate(
                      JSCompiler_temp$jscomp$0,
                      shouldSetEventType
                    ));
              } else
                (JSCompiler_temp$jscomp$0 = accumulate(
                  JSCompiler_temp$jscomp$0,
                  shouldSetEventType
                )),
                  changeResponder(JSCompiler_temp, targetInst);
            } else JSCompiler_temp$jscomp$0 = null;
          } else JSCompiler_temp$jscomp$0 = null;

          shouldSetEventType = responderInst && isStartish(topLevelType);
          JSCompiler_temp = responderInst && isMoveish(topLevelType);
          targetInst =
            responderInst &&
            ("topTouchEnd" === topLevelType ||
              "topTouchCancel" === topLevelType);
          if (
            (shouldSetEventType = shouldSetEventType
              ? eventTypes.responderStart
              : JSCompiler_temp
              ? eventTypes.responderMove
              : targetInst
              ? eventTypes.responderEnd
              : null)
          )
            (shouldSetEventType = ResponderSyntheticEvent.getPooled(
              shouldSetEventType,
              responderInst,
              nativeEvent,
              nativeEventTarget
            )),
              (shouldSetEventType.touchHistory =
                ResponderTouchHistoryStore.touchHistory),
              forEachAccumulated(
                shouldSetEventType,
                accumulateDirectDispatchesSingle
              ),
              (JSCompiler_temp$jscomp$0 = accumulate(
                JSCompiler_temp$jscomp$0,
                shouldSetEventType
              ));
          shouldSetEventType =
            responderInst && "topTouchCancel" === topLevelType;
          if (
            (topLevelType =
              responderInst &&
              !shouldSetEventType &&
              ("topTouchEnd" === topLevelType ||
                "topTouchCancel" === topLevelType))
          )
            a: {
              if (
                (topLevelType = nativeEvent.touches) &&
                0 !== topLevelType.length
              )
                for (
                  JSCompiler_temp = 0;
                  JSCompiler_temp < topLevelType.length;
                  JSCompiler_temp++
                ) {
                  if (
                    ((targetInst = topLevelType[JSCompiler_temp].target),
                    null !== targetInst &&
                      undefined !== targetInst &&
                      0 !== targetInst)
                  ) {
                    depthA = getInstanceFromNode(targetInst);

                    b: {
                      for (targetInst = responderInst; depthA; ) {
                        if (
                          targetInst === depthA ||
                          targetInst === depthA.alternate
                        ) {
                          targetInst = true;
                          break b;
                        }

                        depthA = getParent(depthA);
                      }

                      targetInst = false;
                    }

                    if (targetInst) {
                      topLevelType = false;
                      break a;
                    }
                  }
                }
              topLevelType = true;
            }
          if (
            (topLevelType = shouldSetEventType
              ? eventTypes.responderTerminate
              : topLevelType
              ? eventTypes.responderRelease
              : null)
          )
            (nativeEvent = ResponderSyntheticEvent.getPooled(
              topLevelType,
              responderInst,
              nativeEvent,
              nativeEventTarget
            )),
              (nativeEvent.touchHistory =
                ResponderTouchHistoryStore.touchHistory),
              forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle),
              (JSCompiler_temp$jscomp$0 = accumulate(
                JSCompiler_temp$jscomp$0,
                nativeEvent
              )),
              changeResponder(null);
          return JSCompiler_temp$jscomp$0;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(
            GlobalResponderHandler
          ) {
            ResponderEventPlugin.GlobalResponderHandler =
              GlobalResponderHandler;
          },
        },
      },
      eventPluginOrder = null,
      namesToPlugins = {};

    function recomputePluginOrdering() {
      if (eventPluginOrder)
        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
          if (-1 >= pluginIndex)
            throw Error(
              "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" +
                (pluginName + "`.")
            );

          if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents)
              throw Error(
                "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" +
                  (pluginName + "` does not.")
              );
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;

            for (var eventName in pluginIndex) {
              var JSCompiler_inline_result = undefined;
              var dispatchConfig = pluginIndex[eventName],
                eventName$jscomp$0 = eventName;
              if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0))
                throw Error(
                  "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" +
                    (eventName$jscomp$0 + "`.")
                );
              eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
              var phasedRegistrationNames =
                dispatchConfig.phasedRegistrationNames;

              if (phasedRegistrationNames) {
                for (JSCompiler_inline_result in phasedRegistrationNames) {
                  phasedRegistrationNames.hasOwnProperty(
                    JSCompiler_inline_result
                  ) &&
                    publishRegistrationName(
                      phasedRegistrationNames[JSCompiler_inline_result],
                      pluginModule,
                      eventName$jscomp$0
                    );
                }

                JSCompiler_inline_result = true;
              } else
                dispatchConfig.registrationName
                  ? (publishRegistrationName(
                      dispatchConfig.registrationName,
                      pluginModule,
                      eventName$jscomp$0
                    ),
                    (JSCompiler_inline_result = true))
                  : (JSCompiler_inline_result = false);

              if (!JSCompiler_inline_result)
                throw Error(
                  "EventPluginRegistry: Failed to publish event `" +
                    eventName +
                    "` for plugin `" +
                    pluginName +
                    "`."
                );
            }
          }
        }
    }

    function publishRegistrationName(registrationName, pluginModule) {
      if (registrationNameModules[registrationName])
        throw Error(
          "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" +
            (registrationName + "`.")
        );
      registrationNameModules[registrationName] = pluginModule;
    }

    var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

    function getListeners(
      inst,
      registrationName,
      phase,
      dispatchToImperativeListeners
    ) {
      var stateNode = inst.stateNode;
      if (null === stateNode) return null;
      inst = getFiberCurrentPropsFromNode(stateNode);
      if (null === inst) return null;
      if ((inst = inst[registrationName]) && "function" !== typeof inst)
        throw Error(
          "Expected `" +
            registrationName +
            "` listener to be a function, instead got a value of `" +
            typeof inst +
            "` type."
        );
      if (
        !(
          dispatchToImperativeListeners &&
          stateNode.canonical &&
          stateNode.canonical._eventListeners
        )
      )
        return inst;
      var listeners = [];
      inst && listeners.push(inst);
      var requestedPhaseIsCapture = "captured" === phase,
        mangledImperativeRegistrationName = requestedPhaseIsCapture
          ? "rn:" + registrationName.replace(/Capture$/, "")
          : "rn:" + registrationName;
      stateNode.canonical._eventListeners[mangledImperativeRegistrationName] &&
        0 <
          stateNode.canonical._eventListeners[mangledImperativeRegistrationName]
            .length &&
        stateNode.canonical._eventListeners[
          mangledImperativeRegistrationName
        ].forEach(function (listenerObj) {
          if (
            (null != listenerObj.options.capture &&
              listenerObj.options.capture) === requestedPhaseIsCapture
          ) {
            var listenerFnWrapper = function listenerFnWrapper(syntheticEvent) {
              var eventInst = new ReactNativePrivateInterface.CustomEvent(
                mangledImperativeRegistrationName,
                {
                  detail: syntheticEvent.nativeEvent,
                }
              );
              eventInst.isTrusted = true;
              eventInst.setSyntheticEvent(syntheticEvent);

              for (
                var _len = arguments.length,
                  args = Array(1 < _len ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }

              listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
            };

            listenerObj.options.once
              ? listeners.push(function () {
                  stateNode.canonical.removeEventListener_unstable(
                    mangledImperativeRegistrationName,
                    listenerObj.listener,
                    listenerObj.capture
                  );
                  listenerObj.invalidated ||
                    ((listenerObj.invalidated = true),
                    listenerObj.listener.apply(listenerObj, arguments));
                })
              : listeners.push(listenerFnWrapper);
          }
        });
      return 0 === listeners.length
        ? null
        : 1 === listeners.length
        ? listeners[0]
        : listeners;
    }

    var customBubblingEventTypes =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry
          .customBubblingEventTypes,
      customDirectEventTypes =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry
          .customDirectEventTypes;

    function accumulateListenersAndInstances(inst, event, listeners) {
      var listenersLength = listeners
        ? isArrayImpl(listeners)
          ? listeners.length
          : 1
        : 0;
      if (0 < listenersLength)
        if (
          ((event._dispatchListeners = accumulateInto(
            event._dispatchListeners,
            listeners
          )),
          null == event._dispatchInstances && 1 === listenersLength)
        )
          event._dispatchInstances = inst;
        else
          for (
            event._dispatchInstances = event._dispatchInstances || [],
              isArrayImpl(event._dispatchInstances) ||
                (event._dispatchInstances = [event._dispatchInstances]),
              listeners = 0;
            listeners < listenersLength;
            listeners++
          ) {
            event._dispatchInstances.push(inst);
          }
    }

    function accumulateDirectionalDispatches$1(inst, phase, event) {
      phase = getListeners(
        inst,
        event.dispatchConfig.phasedRegistrationNames[phase],
        phase,
        true
      );
      accumulateListenersAndInstances(inst, event, phase);
    }

    function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
      for (var path = []; inst; ) {
        path.push(inst);

        do {
          inst = inst.return;
        } while (inst && 5 !== inst.tag);

        inst = inst ? inst : null;
      }

      for (inst = path.length; 0 < inst--; ) {
        fn(path[inst], "captured", arg);
      }

      if (skipBubbling) fn(path[0], "bubbled", arg);
      else
        for (inst = 0; inst < path.length; inst++) {
          fn(path[inst], "bubbled", arg);
        }
    }

    function accumulateTwoPhaseDispatchesSingle$1(event) {
      event &&
        event.dispatchConfig.phasedRegistrationNames &&
        traverseTwoPhase$1(
          event._targetInst,
          accumulateDirectionalDispatches$1,
          event,
          false
        );
    }

    function accumulateDirectDispatchesSingle$1(event) {
      if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;

        if (inst && event && event.dispatchConfig.registrationName) {
          var listeners = getListeners(
            inst,
            event.dispatchConfig.registrationName,
            "bubbled",
            false
          );
          accumulateListenersAndInstances(inst, event, listeners);
        }
      }
    }

    if (eventPluginOrder)
      throw Error(
        "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."
      );
    eventPluginOrder = Array.prototype.slice.call([
      "ResponderEventPlugin",
      "ReactNativeBridgeEventPlugin",
    ]);
    recomputePluginOrdering();
    var injectedNamesToPlugins$jscomp$inline_225 = {
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: {
          eventTypes: {},
          extractEvents: function extractEvents(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
              directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig)
              throw Error(
                'Unsupported top level event type "' +
                  topLevelType +
                  '" dispatched'
              );
            topLevelType = SyntheticEvent.getPooled(
              bubbleDispatchConfig || directDispatchConfig,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            if (bubbleDispatchConfig)
              null != topLevelType &&
              null != topLevelType.dispatchConfig.phasedRegistrationNames &&
              topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling
                ? topLevelType &&
                  topLevelType.dispatchConfig.phasedRegistrationNames &&
                  traverseTwoPhase$1(
                    topLevelType._targetInst,
                    accumulateDirectionalDispatches$1,
                    topLevelType,
                    true
                  )
                : forEachAccumulated(
                    topLevelType,
                    accumulateTwoPhaseDispatchesSingle$1
                  );
            else if (directDispatchConfig)
              forEachAccumulated(
                topLevelType,
                accumulateDirectDispatchesSingle$1
              );
            else return null;
            return topLevelType;
          },
        },
      },
      isOrderingDirty$jscomp$inline_226 = false,
      pluginName$jscomp$inline_227;

    for (pluginName$jscomp$inline_227 in injectedNamesToPlugins$jscomp$inline_225) {
      if (
        injectedNamesToPlugins$jscomp$inline_225.hasOwnProperty(
          pluginName$jscomp$inline_227
        )
      ) {
        var pluginModule$jscomp$inline_228 =
          injectedNamesToPlugins$jscomp$inline_225[
            pluginName$jscomp$inline_227
          ];

        if (
          !namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_227) ||
          namesToPlugins[pluginName$jscomp$inline_227] !==
            pluginModule$jscomp$inline_228
        ) {
          if (namesToPlugins[pluginName$jscomp$inline_227])
            throw Error(
              "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" +
                (pluginName$jscomp$inline_227 + "`.")
            );
          namesToPlugins[pluginName$jscomp$inline_227] =
            pluginModule$jscomp$inline_228;
          isOrderingDirty$jscomp$inline_226 = true;
        }
      }
    }

    isOrderingDirty$jscomp$inline_226 && recomputePluginOrdering();
    var instanceCache = new Map(),
      instanceProps = new Map();

    function getInstanceFromTag(tag) {
      return instanceCache.get(tag) || null;
    }

    function batchedUpdatesImpl(fn, bookkeeping) {
      return fn(bookkeeping);
    }

    var isInsideEventHandler = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isInsideEventHandler) return fn(bookkeeping);
      isInsideEventHandler = true;

      try {
        return batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        isInsideEventHandler = false;
      }
    }

    var eventQueue = null;

    function executeDispatchesAndReleaseTopLevel(e) {
      if (e) {
        var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners))
          for (
            var i = 0;
            i < dispatchListeners.length && !e.isPropagationStopped();
            i++
          ) {
            executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
          }
        else
          dispatchListeners &&
            executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
      }
    }

    var EMPTY_NATIVE_EVENT = {};

    function _receiveRootNodeIDEvent(
      rootNodeID,
      topLevelType,
      nativeEventParam
    ) {
      var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID),
        target = null;
      null != inst && (target = inst.stateNode);
      batchedUpdates(function () {
        var JSCompiler_inline_result = target;

        for (
          var events = null, legacyPlugins = plugins, i = 0;
          i < legacyPlugins.length;
          i++
        ) {
          var possiblePlugin = legacyPlugins[i];
          possiblePlugin &&
            (possiblePlugin = possiblePlugin.extractEvents(
              topLevelType,
              inst,
              nativeEvent,
              JSCompiler_inline_result
            )) &&
            (events = accumulateInto(events, possiblePlugin));
        }

        JSCompiler_inline_result = events;
        null !== JSCompiler_inline_result &&
          (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
        JSCompiler_inline_result = eventQueue;
        eventQueue = null;

        if (JSCompiler_inline_result) {
          forEachAccumulated(
            JSCompiler_inline_result,
            executeDispatchesAndReleaseTopLevel
          );
          if (eventQueue)
            throw Error(
              "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."
            );
          if (hasRethrowError)
            throw (
              ((JSCompiler_inline_result = rethrowError),
              (hasRethrowError = false),
              (rethrowError = null),
              JSCompiler_inline_result)
            );
        }
      });
    }

    ReactNativePrivateInterface.RCTEventEmitter.register({
      receiveEvent: function receiveEvent(
        rootNodeID,
        topLevelType,
        nativeEventParam
      ) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      },
      receiveTouches: function receiveTouches(
        eventTopLevelType,
        touches,
        changedIndices
      ) {
        if (
          "topTouchEnd" === eventTopLevelType ||
          "topTouchCancel" === eventTopLevelType
        ) {
          var JSCompiler_temp = [];

          for (var i = 0; i < changedIndices.length; i++) {
            var index$0 = changedIndices[i];
            JSCompiler_temp.push(touches[index$0]);
            touches[index$0] = null;
          }

          for (i = changedIndices = 0; i < touches.length; i++) {
            (index$0 = touches[i]),
              null !== index$0 && (touches[changedIndices++] = index$0);
          }

          touches.length = changedIndices;
        } else
          for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
            JSCompiler_temp.push(touches[changedIndices[i]]);
          }

        for (
          changedIndices = 0;
          changedIndices < JSCompiler_temp.length;
          changedIndices++
        ) {
          i = JSCompiler_temp[changedIndices];
          i.changedTouches = JSCompiler_temp;
          i.touches = touches;
          index$0 = null;
          var target = i.target;
          null === target ||
            undefined === target ||
            1 > target ||
            (index$0 = target);

          _receiveRootNodeIDEvent(index$0, eventTopLevelType, i);
        }
      },
    });

    getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(
      stateNode
    ) {
      return instanceProps.get(stateNode._nativeTag) || null;
    };

    getInstanceFromNode = getInstanceFromTag;

    getNodeFromInstance = function getNodeFromInstance(inst) {
      inst = inst.stateNode;
      var tag = inst._nativeTag;
      undefined === tag && ((inst = inst.canonical), (tag = inst._nativeTag));
      if (!tag) throw Error("All native instances should have a tag.");
      return inst;
    };

    ResponderEventPlugin.injection.injectGlobalResponderHandler({
      onChange: function onChange(from, to, blockNativeResponder) {
        null !== to
          ? ReactNativePrivateInterface.UIManager.setJSResponder(
              to.stateNode._nativeTag,
              blockNativeResponder
            )
          : ReactNativePrivateInterface.UIManager.clearJSResponder();
      },
    });
    var ReactSharedInternals =
        React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      REACT_ELEMENT_TYPE = Symbol.for("react.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;

    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable =
        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
        maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }

    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.displayName || type.name || null;
      if ("string" === typeof type) return type;

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";

        case REACT_PORTAL_TYPE:
          return "Portal";

        case REACT_PROFILER_TYPE:
          return "Profiler";

        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";

        case REACT_SUSPENSE_TYPE:
          return "Suspense";

        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }

      if ("object" === typeof type)
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Consumer";

          case REACT_PROVIDER_TYPE:
            return (type._context.displayName || "Context") + ".Provider";

          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;

          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );

          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;

            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }

    function getComponentNameFromFiber(fiber) {
      var type = fiber.type;

      switch (fiber.tag) {
        case 24:
          return "Cache";

        case 9:
          return (type.displayName || "Context") + ".Consumer";

        case 10:
          return (type._context.displayName || "Context") + ".Provider";

        case 18:
          return "DehydratedFragment";

        case 11:
          return (
            (fiber = type.render),
            (fiber = fiber.displayName || fiber.name || ""),
            type.displayName ||
              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
          );

        case 7:
          return "Fragment";

        case 5:
          return type;

        case 4:
          return "Portal";

        case 3:
          return "Root";

        case 6:
          return "Text";

        case 16:
          return getComponentNameFromType(type);

        case 8:
          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";

        case 22:
          return "Offscreen";

        case 12:
          return "Profiler";

        case 21:
          return "Scope";

        case 13:
          return "Suspense";

        case 19:
          return "SuspenseList";

        case 25:
          return "TracingMarker";

        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof type)
            return type.displayName || type.name || null;
          if ("string" === typeof type) return type;
      }

      return null;
    }

    function getNearestMountedFiber(fiber) {
      var node = fiber,
        nearestMounted = fiber;
      if (fiber.alternate)
        for (; node.return; ) {
          node = node.return;
        }
      else {
        fiber = node;

        do {
          (node = fiber),
            0 !== (node.flags & 4098) && (nearestMounted = node.return),
            (fiber = node.return);
        } while (fiber);
      }
      return 3 === node.tag ? nearestMounted : null;
    }

    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw Error("Unable to find node on an unmounted component.");
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate)
          throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
      }

      for (var a = fiber, b = alternate; ; ) {
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;

        if (null === parentB) {
          b = parentA.return;

          if (null !== b) {
            a = b;
            continue;
          }

          break;
        }

        if (parentA.child === parentB.child) {
          for (parentB = parentA.child; parentB; ) {
            if (parentB === a) return assertIsMounted(parentA), fiber;
            if (parentB === b) return assertIsMounted(parentA), alternate;
            parentB = parentB.sibling;
          }

          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.return !== b.return) (a = parentA), (b = parentB);
        else {
          for (var didFindChild = false, child$1 = parentA.child; child$1; ) {
            if (child$1 === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (child$1 === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            child$1 = child$1.sibling;
          }

          if (!didFindChild) {
            for (child$1 = parentB.child; child$1; ) {
              if (child$1 === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (child$1 === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              child$1 = child$1.sibling;
            }

            if (!didFindChild)
              throw Error(
                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
              );
          }
        }
        if (a.alternate !== b)
          throw Error(
            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
          );
      }

      if (3 !== a.tag)
        throw Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? fiber : alternate;
    }

    function findCurrentHostFiber(parent) {
      parent = findCurrentFiberUsingSlowPath(parent);
      return null !== parent ? findCurrentHostFiberImpl(parent) : null;
    }

    function findCurrentHostFiberImpl(node) {
      if (5 === node.tag || 6 === node.tag) return node;

      for (node = node.child; null !== node; ) {
        var match = findCurrentHostFiberImpl(node);
        if (null !== match) return match;
        node = node.sibling;
      }

      return null;
    }

    var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0,
      deepDifferOptions = {
        unsafelyIgnoreFunctions: true,
      };

    function defaultDiffer(prevProp, nextProp) {
      return "object" !== typeof nextProp || null === nextProp
        ? true
        : ReactNativePrivateInterface.deepDiffer(
            prevProp,
            nextProp,
            deepDifferOptions
          );
    }

    function restoreDeletedValuesInNestedArray(
      updatePayload,
      node,
      validAttributes
    ) {
      if (isArrayImpl(node))
        for (var i = node.length; i-- && 0 < removedKeyCount; ) {
          restoreDeletedValuesInNestedArray(
            updatePayload,
            node[i],
            validAttributes
          );
        }
      else if (node && 0 < removedKeyCount)
        for (i in removedKeys) {
          if (removedKeys[i]) {
            var nextProp = node[i];

            if (undefined !== nextProp) {
              var attributeConfig = validAttributes[i];

              if (attributeConfig) {
                "function" === typeof nextProp && (nextProp = true);
                "undefined" === typeof nextProp && (nextProp = null);
                if ("object" !== typeof attributeConfig)
                  updatePayload[i] = nextProp;
                else if (
                  "function" === typeof attributeConfig.diff ||
                  "function" === typeof attributeConfig.process
                )
                  (nextProp =
                    "function" === typeof attributeConfig.process
                      ? attributeConfig.process(nextProp)
                      : nextProp),
                    (updatePayload[i] = nextProp);
                removedKeys[i] = false;
                removedKeyCount--;
              }
            }
          }
        }
    }

    function diffNestedProperty(
      updatePayload,
      prevProp,
      nextProp,
      validAttributes
    ) {
      if (!updatePayload && prevProp === nextProp) return updatePayload;
      if (!prevProp || !nextProp)
        return nextProp
          ? addNestedProperty(updatePayload, nextProp, validAttributes)
          : prevProp
          ? clearNestedProperty(updatePayload, prevProp, validAttributes)
          : updatePayload;
      if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp))
        return diffProperties(
          updatePayload,
          prevProp,
          nextProp,
          validAttributes
        );

      if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength =
            prevProp.length < nextProp.length
              ? prevProp.length
              : nextProp.length,
          i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(
            updatePayload,
            prevProp[i],
            nextProp[i],
            validAttributes
          );
        }

        for (; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(
            updatePayload,
            prevProp[i],
            validAttributes
          );
        }

        for (; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(
            updatePayload,
            nextProp[i],
            validAttributes
          );
        }

        return updatePayload;
      }

      return isArrayImpl(prevProp)
        ? diffProperties(
            updatePayload,
            ReactNativePrivateInterface.flattenStyle(prevProp),
            nextProp,
            validAttributes
          )
        : diffProperties(
            updatePayload,
            prevProp,
            ReactNativePrivateInterface.flattenStyle(nextProp),
            validAttributes
          );
    }

    function addNestedProperty(updatePayload, nextProp, validAttributes) {
      if (!nextProp) return updatePayload;
      if (!isArrayImpl(nextProp))
        return diffProperties(
          updatePayload,
          emptyObject,
          nextProp,
          validAttributes
        );

      for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(
          updatePayload,
          nextProp[i],
          validAttributes
        );
      }

      return updatePayload;
    }

    function clearNestedProperty(updatePayload, prevProp, validAttributes) {
      if (!prevProp) return updatePayload;
      if (!isArrayImpl(prevProp))
        return diffProperties(
          updatePayload,
          prevProp,
          emptyObject,
          validAttributes
        );

      for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(
          updatePayload,
          prevProp[i],
          validAttributes
        );
      }

      return updatePayload;
    }

    function diffProperties(
      updatePayload,
      prevProps,
      nextProps,
      validAttributes
    ) {
      var attributeConfig, propKey;

      for (propKey in nextProps) {
        if ((attributeConfig = validAttributes[propKey])) {
          var prevProp = prevProps[propKey];
          var nextProp = nextProps[propKey];
          "function" === typeof nextProp &&
            ((nextProp = true),
            "function" === typeof prevProp && (prevProp = true));
          "undefined" === typeof nextProp &&
            ((nextProp = null),
            "undefined" === typeof prevProp && (prevProp = null));
          removedKeys && (removedKeys[propKey] = false);
          if (updatePayload && undefined !== updatePayload[propKey]) {
            if ("object" !== typeof attributeConfig)
              updatePayload[propKey] = nextProp;
            else {
              if (
                "function" === typeof attributeConfig.diff ||
                "function" === typeof attributeConfig.process
              )
                (attributeConfig =
                  "function" === typeof attributeConfig.process
                    ? attributeConfig.process(nextProp)
                    : nextProp),
                  (updatePayload[propKey] = attributeConfig);
            }
          } else if (prevProp !== nextProp)
            if ("object" !== typeof attributeConfig)
              defaultDiffer(prevProp, nextProp) &&
                ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
            else if (
              "function" === typeof attributeConfig.diff ||
              "function" === typeof attributeConfig.process
            ) {
              if (
                undefined === prevProp ||
                ("function" === typeof attributeConfig.diff
                  ? attributeConfig.diff(prevProp, nextProp)
                  : defaultDiffer(prevProp, nextProp))
              )
                (attributeConfig =
                  "function" === typeof attributeConfig.process
                    ? attributeConfig.process(nextProp)
                    : nextProp),
                  ((updatePayload || (updatePayload = {}))[propKey] =
                    attributeConfig);
            } else
              (removedKeys = null),
                (removedKeyCount = 0),
                (updatePayload = diffNestedProperty(
                  updatePayload,
                  prevProp,
                  nextProp,
                  attributeConfig
                )),
                0 < removedKeyCount &&
                  updatePayload &&
                  (restoreDeletedValuesInNestedArray(
                    updatePayload,
                    nextProp,
                    attributeConfig
                  ),
                  (removedKeys = null));
        }
      }

      for (var propKey$3 in prevProps) {
        undefined === nextProps[propKey$3] &&
          (!(attributeConfig = validAttributes[propKey$3]) ||
            (updatePayload && undefined !== updatePayload[propKey$3]) ||
            ((prevProp = prevProps[propKey$3]),
            undefined !== prevProp &&
              ("object" !== typeof attributeConfig ||
              "function" === typeof attributeConfig.diff ||
              "function" === typeof attributeConfig.process
                ? (((updatePayload || (updatePayload = {}))[propKey$3] = null),
                  removedKeys || (removedKeys = {}),
                  removedKeys[propKey$3] ||
                    ((removedKeys[propKey$3] = true), removedKeyCount++))
                : (updatePayload = clearNestedProperty(
                    updatePayload,
                    prevProp,
                    attributeConfig
                  )))));
      }

      return updatePayload;
    }

    function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
      return function () {
        if (
          callback &&
          ("boolean" !== typeof context.__isMounted || context.__isMounted)
        )
          return callback.apply(context, arguments);
      };
    }

    var ReactNativeFiberHostComponent = (function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        var _proto = ReactNativeFiberHostComponent.prototype;

        _proto.blur = function () {
          ReactNativePrivateInterface.TextInputState.blurTextInput(this);
        };

        _proto.focus = function () {
          ReactNativePrivateInterface.TextInputState.focusTextInput(this);
        };

        _proto.measure = function (callback) {
          ReactNativePrivateInterface.UIManager.measure(
            this._nativeTag,
            mountSafeCallback_NOT_REALLY_SAFE(this, callback)
          );
        };

        _proto.measureInWindow = function (callback) {
          ReactNativePrivateInterface.UIManager.measureInWindow(
            this._nativeTag,
            mountSafeCallback_NOT_REALLY_SAFE(this, callback)
          );
        };

        _proto.measureLayout = function (
          relativeToNativeNode,
          onSuccess,
          onFail
        ) {
          if ("number" === typeof relativeToNativeNode)
            var relativeNode = relativeToNativeNode;
          else
            relativeToNativeNode._nativeTag &&
              (relativeNode = relativeToNativeNode._nativeTag);
          null != relativeNode &&
            ReactNativePrivateInterface.UIManager.measureLayout(
              this._nativeTag,
              relativeNode,
              mountSafeCallback_NOT_REALLY_SAFE(this, onFail),
              mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)
            );
        };

        _proto.setNativeProps = function (nativeProps) {
          nativeProps = diffProperties(
            null,
            emptyObject,
            nativeProps,
            this.viewConfig.validAttributes
          );
          null != nativeProps &&
            ReactNativePrivateInterface.UIManager.updateView(
              this._nativeTag,
              this.viewConfig.uiViewClassName,
              nativeProps
            );
        };

        return ReactNativeFiberHostComponent;
      })(),
      scheduleCallback = Scheduler.unstable_scheduleCallback,
      cancelCallback = Scheduler.unstable_cancelCallback,
      shouldYield = Scheduler.unstable_shouldYield,
      requestPaint = Scheduler.unstable_requestPaint,
      now = Scheduler.unstable_now,
      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      NormalPriority = Scheduler.unstable_NormalPriority,
      IdlePriority = Scheduler.unstable_IdlePriority,
      rendererID = null,
      injectedHook = null;

    function onCommitRoot(root) {
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
        try {
          injectedHook.onCommitFiberRoot(
            rendererID,
            root,
            undefined,
            128 === (root.current.flags & 128)
          );
        } catch (err) {}
    }

    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
      log = Math.log,
      LN2 = Math.LN2;

    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
    }

    var nextTransitionLane = 64,
      nextRetryLane = 4194304;

    function getHighestPriorityLanes(lanes) {
      switch (lanes & -lanes) {
        case 1:
          return 1;

        case 2:
          return 2;

        case 4:
          return 4;

        case 8:
          return 8;

        case 16:
          return 16;

        case 32:
          return 32;

        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & 4194240;

        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return lanes & 130023424;

        case 134217728:
          return 134217728;

        case 268435456:
          return 268435456;

        case 536870912:
          return 536870912;

        case 1073741824:
          return 1073741824;

        default:
          return lanes;
      }
    }

    function getNextLanes(root, wipLanes) {
      var pendingLanes = root.pendingLanes;
      if (0 === pendingLanes) return 0;
      var nextLanes = 0,
        suspendedLanes = root.suspendedLanes,
        pingedLanes = root.pingedLanes,
        nonIdlePendingLanes = pendingLanes & 268435455;

      if (0 !== nonIdlePendingLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        0 !== nonIdleUnblockedLanes
          ? (nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes))
          : ((pingedLanes &= nonIdlePendingLanes),
            0 !== pingedLanes &&
              (nextLanes = getHighestPriorityLanes(pingedLanes)));
      } else
        (nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
          0 !== nonIdlePendingLanes
            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
            : 0 !== pingedLanes &&
              (nextLanes = getHighestPriorityLanes(pingedLanes));

      if (0 === nextLanes) return 0;
      if (
        0 !== wipLanes &&
        wipLanes !== nextLanes &&
        0 === (wipLanes & suspendedLanes) &&
        ((suspendedLanes = nextLanes & -nextLanes),
        (pingedLanes = wipLanes & -wipLanes),
        suspendedLanes >= pingedLanes ||
          (16 === suspendedLanes && 0 !== (pingedLanes & 4194240)))
      )
        return wipLanes;
      0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
      wipLanes = root.entangledLanes;
      if (0 !== wipLanes)
        for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes; ) {
          (pendingLanes = 31 - clz32(wipLanes)),
            (suspendedLanes = 1 << pendingLanes),
            (nextLanes |= root[pendingLanes]),
            (wipLanes &= ~suspendedLanes);
        }
      return nextLanes;
    }

    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case 1:
        case 2:
        case 4:
          return currentTime + 250;

        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5e3;

        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;

        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;

        default:
          return -1;
      }
    }

    function getLanesToRetrySynchronouslyOnError(root) {
      root = root.pendingLanes & -1073741825;
      return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
    }

    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
      return lane;
    }

    function createLaneMap(initial) {
      for (var laneMap = [], i = 0; 31 > i; i++) {
        laneMap.push(initial);
      }

      return laneMap;
    }

    function markRootUpdated(root, updateLane, eventTime) {
      root.pendingLanes |= updateLane;
      536870912 !== updateLane &&
        ((root.suspendedLanes = 0), (root.pingedLanes = 0));
      root = root.eventTimes;
      updateLane = 31 - clz32(updateLane);
      root[updateLane] = eventTime;
    }

    function markRootFinished(root, remainingLanes) {
      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
      root.pendingLanes = remainingLanes;
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.mutableReadLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      remainingLanes = root.entanglements;
      var eventTimes = root.eventTimes;

      for (root = root.expirationTimes; 0 < noLongerPendingLanes; ) {
        var index$8 = 31 - clz32(noLongerPendingLanes),
          lane = 1 << index$8;
        remainingLanes[index$8] = 0;
        eventTimes[index$8] = -1;
        root[index$8] = -1;
        noLongerPendingLanes &= ~lane;
      }
    }

    function markRootEntangled(root, entangledLanes) {
      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);

      for (root = root.entanglements; rootEntangledLanes; ) {
        var index$9 = 31 - clz32(rootEntangledLanes),
          lane = 1 << index$9;
        (lane & entangledLanes) | (root[index$9] & entangledLanes) &&
          (root[index$9] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }

    var currentUpdatePriority = 0;

    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return 1 < lanes
        ? 4 < lanes
          ? 0 !== (lanes & 268435455)
            ? 16
            : 536870912
          : 4
        : 1;
    }

    function shim() {
      throw Error(
        "The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."
      );
    }

    var getViewConfigForType =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      UPDATE_SIGNAL = {},
      nextReactTag = 3;

    function allocateTag() {
      var tag = nextReactTag;
      1 === tag % 10 && (tag += 2);
      nextReactTag = tag + 2;
      return tag;
    }

    function recursivelyUncacheFiberNode(node) {
      if ("number" === typeof node)
        instanceCache.delete(node), instanceProps.delete(node);
      else {
        var tag = node._nativeTag;
        instanceCache.delete(tag);
        instanceProps.delete(tag);

        node._children.forEach(recursivelyUncacheFiberNode);
      }
    }

    function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return false;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      ReactNativePrivateInterface.UIManager.setChildren(
        parentInstance._nativeTag,
        nativeTags
      );
      return false;
    }

    var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

    function describeComponentFrame(name, source, ownerName) {
      source = "";
      ownerName && (source = " (created by " + ownerName + ")");
      return "\n    in " + (name || "Unknown") + source;
    }

    function describeFunctionComponentFrame(fn, source) {
      return fn
        ? describeComponentFrame(
            fn.displayName || fn.name || null,
            source,
            null
          )
        : "";
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty,
      valueStack = [],
      index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue,
      };
    }

    function pop(cursor) {
      0 > index ||
        ((cursor.current = valueStack[index]),
        (valueStack[index] = null),
        index--);
    }

    function push(cursor, value) {
      index++;
      valueStack[index] = cursor.current;
      cursor.current = value;
    }

    var emptyContextObject = {},
      contextStackCursor = createCursor(emptyContextObject),
      didPerformWorkStackCursor = createCursor(false),
      previousContext = emptyContextObject;

    function getMaskedContext(workInProgress, unmaskedContext) {
      var contextTypes = workInProgress.type.contextTypes;
      if (!contextTypes) return emptyContextObject;
      var instance = workInProgress.stateNode;
      if (
        instance &&
        instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext
      )
        return instance.__reactInternalMemoizedMaskedChildContext;
      var context = {},
        key;

      for (key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      instance &&
        ((workInProgress = workInProgress.stateNode),
        (workInProgress.__reactInternalMemoizedUnmaskedChildContext =
          unmaskedContext),
        (workInProgress.__reactInternalMemoizedMaskedChildContext = context));
      return context;
    }

    function isContextProvider(type) {
      type = type.childContextTypes;
      return null !== type && undefined !== type;
    }

    function popContext() {
      pop(didPerformWorkStackCursor);
      pop(contextStackCursor);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      if (contextStackCursor.current !== emptyContextObject)
        throw Error(
          "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."
        );
      push(contextStackCursor, context);
      push(didPerformWorkStackCursor, didChange);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      type = type.childContextTypes;
      if ("function" !== typeof instance.getChildContext) return parentContext;
      instance = instance.getChildContext();

      for (var contextKey in instance) {
        if (!(contextKey in type))
          throw Error(
            (getComponentNameFromFiber(fiber) || "Unknown") +
              '.getChildContext(): key "' +
              contextKey +
              '" is not defined in childContextTypes.'
          );
      }

      return assign({}, parentContext, instance);
    }

    function pushContextProvider(workInProgress) {
      workInProgress =
        ((workInProgress = workInProgress.stateNode) &&
          workInProgress.__reactInternalMemoizedMergedChildContext) ||
        emptyContextObject;
      previousContext = contextStackCursor.current;
      push(contextStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      if (!instance)
        throw Error(
          "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."
        );
      didChange
        ? ((workInProgress = processChildContext(
            workInProgress,
            type,
            previousContext
          )),
          (instance.__reactInternalMemoizedMergedChildContext = workInProgress),
          pop(didPerformWorkStackCursor),
          pop(contextStackCursor),
          push(contextStackCursor, workInProgress))
        : pop(didPerformWorkStackCursor);
      push(didPerformWorkStackCursor, didChange);
    }

    function is(x, y) {
      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
    }

    var objectIs = "function" === typeof Object.is ? Object.is : is,
      syncQueue = null,
      includesLegacySyncCallbacks = false,
      isFlushingSyncQueue = false;

    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && null !== syncQueue) {
        isFlushingSyncQueue = true;
        var i = 0,
          previousUpdatePriority = currentUpdatePriority;

        try {
          var queue = syncQueue;

          for (currentUpdatePriority = 1; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }

          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error) {
          throw (
            (null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)),
            scheduleCallback(ImmediatePriority, flushSyncCallbacks),
            error)
          );
        } finally {
          (currentUpdatePriority = previousUpdatePriority),
            (isFlushingSyncQueue = false);
        }
      }

      return null;
    }

    var forkStack = [],
      forkStackIndex = 0,
      treeForkProvider = null,
      idStack = [],
      idStackIndex = 0,
      treeContextProvider = null;

    function popTreeContext(workInProgress) {
      for (; workInProgress === treeForkProvider; ) {
        (treeForkProvider = forkStack[--forkStackIndex]),
          (forkStack[forkStackIndex] = null),
          --forkStackIndex,
          (forkStack[forkStackIndex] = null);
      }

      for (; workInProgress === treeContextProvider; ) {
        (treeContextProvider = idStack[--idStackIndex]),
          (idStack[idStackIndex] = null),
          --idStackIndex,
          (idStack[idStackIndex] = null),
          --idStackIndex,
          (idStack[idStackIndex] = null);
      }
    }

    var hydrationErrors = null,
      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) return true;
      if (
        "object" !== typeof objA ||
        null === objA ||
        "object" !== typeof objB ||
        null === objB
      )
        return false;
      var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;

      for (keysB = 0; keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (
          !hasOwnProperty.call(objB, currentKey) ||
          !objectIs(objA[currentKey], objB[currentKey])
        )
          return false;
      }

      return true;
    }

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case 5:
          return describeComponentFrame(fiber.type, null, null);

        case 16:
          return describeComponentFrame("Lazy", null, null);

        case 13:
          return describeComponentFrame("Suspense", null, null);

        case 19:
          return describeComponentFrame("SuspenseList", null, null);

        case 0:
        case 2:
        case 15:
          return describeFunctionComponentFrame(fiber.type, null);

        case 11:
          return describeFunctionComponentFrame(fiber.type.render, null);

        case 1:
          return (
            (fiber = describeFunctionComponentFrame(fiber.type, null)), fiber
          );

        default:
          return "";
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      try {
        var info = "";

        do {
          (info += describeFiber(workInProgress)),
            (workInProgress = workInProgress.return);
        } while (workInProgress);

        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        baseProps = assign({}, baseProps);
        Component = Component.defaultProps;

        for (var propName in Component) {
          undefined === baseProps[propName] &&
            (baseProps[propName] = Component[propName]);
        }

        return baseProps;
      }

      return baseProps;
    }

    var valueCursor = createCursor(null),
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastFullyObservedContext = null;

    function resetContextDependencies() {
      lastFullyObservedContext =
        lastContextDependency =
        currentlyRenderingFiber =
          null;
    }

    function popProvider(context) {
      var currentValue = valueCursor.current;
      pop(valueCursor);
      context._currentValue = currentValue;
    }

    function scheduleContextWorkOnParentPath(
      parent,
      renderLanes,
      propagationRoot
    ) {
      for (; null !== parent; ) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes
          ? ((parent.childLanes |= renderLanes),
            null !== alternate && (alternate.childLanes |= renderLanes))
          : null !== alternate &&
            (alternate.childLanes & renderLanes) !== renderLanes &&
            (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
      }
    }

    function prepareToReadContext(workInProgress, renderLanes) {
      currentlyRenderingFiber = workInProgress;
      lastFullyObservedContext = lastContextDependency = null;
      workInProgress = workInProgress.dependencies;
      null !== workInProgress &&
        null !== workInProgress.firstContext &&
        (0 !== (workInProgress.lanes & renderLanes) &&
          (didReceiveUpdate = true),
        (workInProgress.firstContext = null));
    }

    function readContext(context) {
      var value = context._currentValue;
      if (lastFullyObservedContext !== context)
        if (
          ((context = {
            context: context,
            memoizedValue: value,
            next: null,
          }),
          null === lastContextDependency)
        ) {
          if (null === currentlyRenderingFiber)
            throw Error(
              "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
            );
          lastContextDependency = context;
          currentlyRenderingFiber.dependencies = {
            lanes: 0,
            firstContext: context,
          };
        } else lastContextDependency = lastContextDependency.next = context;
      return value;
    }

    var interleavedQueues = null,
      hasForceUpdate = false;

    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: 0,
        },
        effects: null,
      };
    }

    function cloneUpdateQueue(current, workInProgress) {
      current = current.updateQueue;
      workInProgress.updateQueue === current &&
        (workInProgress.updateQueue = {
          baseState: current.baseState,
          firstBaseUpdate: current.firstBaseUpdate,
          lastBaseUpdate: current.lastBaseUpdate,
          shared: current.shared,
          effects: current.effects,
        });
    }

    function createUpdate(eventTime, lane) {
      return {
        eventTime: eventTime,
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null,
      };
    }

    function enqueueUpdate(fiber, update) {
      var updateQueue = fiber.updateQueue;
      null !== updateQueue &&
        ((updateQueue = updateQueue.shared),
        isInterleavedUpdate(fiber)
          ? ((fiber = updateQueue.interleaved),
            null === fiber
              ? ((update.next = update),
                null === interleavedQueues
                  ? (interleavedQueues = [updateQueue])
                  : interleavedQueues.push(updateQueue))
              : ((update.next = fiber.next), (fiber.next = update)),
            (updateQueue.interleaved = update))
          : ((fiber = updateQueue.pending),
            null === fiber
              ? (update.next = update)
              : ((update.next = fiber.next), (fiber.next = update)),
            (updateQueue.pending = update)));
    }

    function entangleTransitions(root, fiber, lane) {
      fiber = fiber.updateQueue;

      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194240))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
      }
    }

    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      var queue = workInProgress.updateQueue,
        current = workInProgress.alternate;

      if (
        null !== current &&
        ((current = current.updateQueue), queue === current)
      ) {
        var newFirst = null,
          newLast = null;
        queue = queue.firstBaseUpdate;

        if (null !== queue) {
          do {
            var clone = {
              eventTime: queue.eventTime,
              lane: queue.lane,
              tag: queue.tag,
              payload: queue.payload,
              callback: queue.callback,
              next: null,
            };
            null === newLast
              ? (newFirst = newLast = clone)
              : (newLast = newLast.next = clone);
            queue = queue.next;
          } while (null !== queue);

          null === newLast
            ? (newFirst = newLast = capturedUpdate)
            : (newLast = newLast.next = capturedUpdate);
        } else newFirst = newLast = capturedUpdate;

        queue = {
          baseState: current.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: current.shared,
          effects: current.effects,
        };
        workInProgress.updateQueue = queue;
        return;
      }

      workInProgress = queue.lastBaseUpdate;
      null === workInProgress
        ? (queue.firstBaseUpdate = capturedUpdate)
        : (workInProgress.next = capturedUpdate);
      queue.lastBaseUpdate = capturedUpdate;
    }

    function processUpdateQueue(
      workInProgress$jscomp$0,
      props,
      instance,
      renderLanes
    ) {
      var queue = workInProgress$jscomp$0.updateQueue;
      hasForceUpdate = false;
      var firstBaseUpdate = queue.firstBaseUpdate,
        lastBaseUpdate = queue.lastBaseUpdate,
        pendingQueue = queue.shared.pending;

      if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue,
          firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate
          ? (firstBaseUpdate = firstPendingUpdate)
          : (lastBaseUpdate.next = firstPendingUpdate);
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current &&
          ((current = current.updateQueue),
          (pendingQueue = current.lastBaseUpdate),
          pendingQueue !== lastBaseUpdate &&
            (null === pendingQueue
              ? (current.firstBaseUpdate = firstPendingUpdate)
              : (pendingQueue.next = firstPendingUpdate),
            (current.lastBaseUpdate = lastPendingUpdate)));
      }

      if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;

        do {
          var updateLane = pendingQueue.lane,
            updateEventTime = pendingQueue.eventTime;

          if ((renderLanes & updateLane) === updateLane) {
            null !== current &&
              (current = current.next =
                {
                  eventTime: updateEventTime,
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: pendingQueue.callback,
                  next: null,
                });

            a: {
              var workInProgress = workInProgress$jscomp$0,
                update = pendingQueue;
              updateLane = props;
              updateEventTime = instance;

              switch (update.tag) {
                case 1:
                  workInProgress = update.payload;

                  if ("function" === typeof workInProgress) {
                    newState = workInProgress.call(
                      updateEventTime,
                      newState,
                      updateLane
                    );
                    break a;
                  }

                  newState = workInProgress;
                  break a;

                case 3:
                  workInProgress.flags = (workInProgress.flags & -65537) | 128;

                case 0:
                  workInProgress = update.payload;
                  updateLane =
                    "function" === typeof workInProgress
                      ? workInProgress.call(
                          updateEventTime,
                          newState,
                          updateLane
                        )
                      : workInProgress;
                  if (null === updateLane || undefined === updateLane) break a;
                  newState = assign({}, newState, updateLane);
                  break a;

                case 2:
                  hasForceUpdate = true;
              }
            }

            null !== pendingQueue.callback &&
              0 !== pendingQueue.lane &&
              ((workInProgress$jscomp$0.flags |= 64),
              (updateLane = queue.effects),
              null === updateLane
                ? (queue.effects = [pendingQueue])
                : updateLane.push(pendingQueue));
          } else
            (updateEventTime = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: pendingQueue.callback,
              next: null,
            }),
              null === current
                ? ((firstPendingUpdate = current = updateEventTime),
                  (lastPendingUpdate = newState))
                : (current = current.next = updateEventTime),
              (lastBaseUpdate |= updateLane);

          pendingQueue = pendingQueue.next;
          if (null === pendingQueue)
            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
              break;
            else
              (updateLane = pendingQueue),
                (pendingQueue = updateLane.next),
                (updateLane.next = null),
                (queue.lastBaseUpdate = updateLane),
                (queue.shared.pending = null);
        } while (1);

        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        props = queue.shared.interleaved;

        if (null !== props) {
          queue = props;

          do {
            (lastBaseUpdate |= queue.lane), (queue = queue.next);
          } while (queue !== props);
        } else null === firstBaseUpdate && (queue.shared.lanes = 0);

        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
      }
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      finishedWork = finishedQueue.effects;
      finishedQueue.effects = null;
      if (null !== finishedWork)
        for (
          finishedQueue = 0;
          finishedQueue < finishedWork.length;
          finishedQueue++
        ) {
          var effect = finishedWork[finishedQueue],
            callback = effect.callback;

          if (null !== callback) {
            effect.callback = null;
            if ("function" !== typeof callback)
              throw Error(
                "Invalid argument passed as callback. Expected a function. Instead received: " +
                  callback
              );
            callback.call(instance);
          }
        }
    }

    var emptyRefsObject = new React.Component().refs;

    function applyDerivedStateFromProps(
      workInProgress,
      ctor,
      getDerivedStateFromProps,
      nextProps
    ) {
      ctor = workInProgress.memoizedState;
      getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
      getDerivedStateFromProps =
        null === getDerivedStateFromProps ||
        undefined === getDerivedStateFromProps
          ? ctor
          : assign({}, ctor, getDerivedStateFromProps);
      workInProgress.memoizedState = getDerivedStateFromProps;
      0 === workInProgress.lanes &&
        (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
    }

    var classComponentUpdater = {
      isMounted: function isMounted(component) {
        return (component = component._reactInternals)
          ? getNearestMountedFiber(component) === component
          : false;
      },
      enqueueSetState: function enqueueSetState(inst, payload, callback) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.payload = payload;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        payload = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== payload && entangleTransitions(payload, inst, lane);
      },
      enqueueReplaceState: function enqueueReplaceState(
        inst,
        payload,
        callback
      ) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.tag = 1;
        update.payload = payload;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        payload = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== payload && entangleTransitions(payload, inst, lane);
      },
      enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.tag = 2;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        callback = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== callback && entangleTransitions(callback, inst, lane);
      },
    };

    function checkShouldComponentUpdate(
      workInProgress,
      ctor,
      oldProps,
      newProps,
      oldState,
      newState,
      nextContext
    ) {
      workInProgress = workInProgress.stateNode;
      return "function" === typeof workInProgress.shouldComponentUpdate
        ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
        : ctor.prototype && ctor.prototype.isPureReactComponent
        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
        : true;
    }

    function constructClassInstance(workInProgress, ctor, props) {
      var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
      var context = ctor.contextType;
      "object" === typeof context && null !== context
        ? (context = readContext(context))
        : ((unmaskedContext = isContextProvider(ctor)
            ? previousContext
            : contextStackCursor.current),
          (isLegacyContextConsumer = ctor.contextTypes),
          (context = (isLegacyContextConsumer =
            null !== isLegacyContextConsumer &&
            undefined !== isLegacyContextConsumer)
            ? getMaskedContext(workInProgress, unmaskedContext)
            : emptyContextObject));
      ctor = new ctor(props, context);
      workInProgress.memoizedState =
        null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
      ctor.updater = classComponentUpdater;
      workInProgress.stateNode = ctor;
      ctor._reactInternals = workInProgress;
      isLegacyContextConsumer &&
        ((workInProgress = workInProgress.stateNode),
        (workInProgress.__reactInternalMemoizedUnmaskedChildContext =
          unmaskedContext),
        (workInProgress.__reactInternalMemoizedMaskedChildContext = context));
      return ctor;
    }

    function callComponentWillReceiveProps(
      workInProgress,
      instance,
      newProps,
      nextContext
    ) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps &&
        instance.componentWillReceiveProps(newProps, nextContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== workInProgress &&
        classComponentUpdater.enqueueReplaceState(
          instance,
          instance.state,
          null
        );
    }

    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress);
      var contextType = ctor.contextType;
      "object" === typeof contextType && null !== contextType
        ? (instance.context = readContext(contextType))
        : ((contextType = isContextProvider(ctor)
            ? previousContext
            : contextStackCursor.current),
          (instance.context = getMaskedContext(workInProgress, contextType)));
      instance.state = workInProgress.memoizedState;
      contextType = ctor.getDerivedStateFromProps;
      "function" === typeof contextType &&
        (applyDerivedStateFromProps(
          workInProgress,
          ctor,
          contextType,
          newProps
        ),
        (instance.state = workInProgress.memoizedState));
      "function" === typeof ctor.getDerivedStateFromProps ||
        "function" === typeof instance.getSnapshotBeforeUpdate ||
        ("function" !== typeof instance.UNSAFE_componentWillMount &&
          "function" !== typeof instance.componentWillMount) ||
        ((ctor = instance.state),
        "function" === typeof instance.componentWillMount &&
          instance.componentWillMount(),
        "function" === typeof instance.UNSAFE_componentWillMount &&
          instance.UNSAFE_componentWillMount(),
        ctor !== instance.state &&
          classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          ),
        processUpdateQueue(workInProgress, newProps, instance, renderLanes),
        (instance.state = workInProgress.memoizedState));
      "function" === typeof instance.componentDidMount &&
        (workInProgress.flags |= 4);
    }

    function coerceRef(returnFiber, current, element) {
      returnFiber = element.ref;

      if (
        null !== returnFiber &&
        "function" !== typeof returnFiber &&
        "object" !== typeof returnFiber
      ) {
        if (element._owner) {
          element = element._owner;

          if (element) {
            if (1 !== element.tag)
              throw Error(
                "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
              );
            var inst = element.stateNode;
          }

          if (!inst)
            throw Error(
              "Missing owner for string ref " +
                returnFiber +
                ". This error is likely caused by a bug in React. Please file an issue."
            );
          var resolvedInst = inst,
            stringRef = "" + returnFiber;
          if (
            null !== current &&
            null !== current.ref &&
            "function" === typeof current.ref &&
            current.ref._stringRef === stringRef
          )
            return current.ref;

          current = function current(value) {
            var refs = resolvedInst.refs;
            refs === emptyRefsObject && (refs = resolvedInst.refs = {});
            null === value ? delete refs[stringRef] : (refs[stringRef] = value);
          };

          current._stringRef = stringRef;
          return current;
        }

        if ("string" !== typeof returnFiber)
          throw Error(
            "Expected ref to be a function, a string, an object returned by React.createRef(), or null."
          );
        if (!element._owner)
          throw Error(
            "Element ref was specified as a string (" +
              returnFiber +
              ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
          );
      }

      return returnFiber;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error(
        "Objects are not valid as a React child (found: " +
          ("[object Object]" === returnFiber
            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
            : returnFiber) +
          "). If you meant to render a collection of children, use an array instead."
      );
    }

    function resolveLazy(lazyType) {
      var init = lazyType._init;
      return init(lazyType._payload);
    }

    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          null === deletions
            ? ((returnFiber.deletions = [childToDelete]),
              (returnFiber.flags |= 16))
            : deletions.push(childToDelete);
        }
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;

        for (; null !== currentFirstChild; ) {
          deleteChild(returnFiber, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (returnFiber = new Map(); null !== currentFirstChild; ) {
          null !== currentFirstChild.key
            ? returnFiber.set(currentFirstChild.key, currentFirstChild)
            : returnFiber.set(currentFirstChild.index, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        }

        return returnFiber;
      }

      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects)
          return (newFiber.flags |= 1048576), lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex)
          return (
            (newIndex = newIndex.index),
            newIndex < lastPlacedIndex
              ? ((newFiber.flags |= 2), lastPlacedIndex)
              : newIndex
          );
        newFiber.flags |= 2;
        return lastPlacedIndex;
      }

      function placeSingleChild(newFiber) {
        shouldTrackSideEffects &&
          null === newFiber.alternate &&
          (newFiber.flags |= 2);
        return newFiber;
      }

      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag)
          return (
            (current = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            )),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
      }

      function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return updateFragment(
            returnFiber,
            current,
            element.props.children,
            lanes,
            element.key
          );
        if (
          null !== current &&
          (current.elementType === elementType ||
            ("object" === typeof elementType &&
              null !== elementType &&
              elementType.$$typeof === REACT_LAZY_TYPE &&
              resolveLazy(elementType) === current.type))
        )
          return (
            (lanes = useFiber(current, element.props)),
            (lanes.ref = coerceRef(returnFiber, current, element)),
            (lanes.return = returnFiber),
            lanes
          );
        lanes = createFiberFromTypeAndProps(
          element.type,
          element.key,
          element.props,
          null,
          returnFiber.mode,
          lanes
        );
        lanes.ref = coerceRef(returnFiber, current, element);
        lanes.return = returnFiber;
        return lanes;
      }

      function updatePortal(returnFiber, current, portal, lanes) {
        if (
          null === current ||
          4 !== current.tag ||
          current.stateNode.containerInfo !== portal.containerInfo ||
          current.stateNode.implementation !== portal.implementation
        )
          return (
            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
      }

      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag)
          return (
            (current = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            )),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
      }

      function createChild(returnFiber, newChild, lanes) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return (
            (newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            )),
            (newChild.return = returnFiber),
            newChild
          );

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                )),
                (lanes.ref = coerceRef(returnFiber, null, newChild)),
                (lanes.return = returnFiber),
                lanes
              );

            case REACT_PORTAL_TYPE:
              return (
                (newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                (newChild.return = returnFiber),
                newChild
              );

            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return createChild(returnFiber, init(newChild._payload), lanes);
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (newChild = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              )),
              (newChild.return = returnFiber),
              newChild
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return null !== key
            ? null
            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key
                ? updateElement(returnFiber, oldFiber, newChild, lanes)
                : null;

            case REACT_PORTAL_TYPE:
              return newChild.key === key
                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
                : null;

            case REACT_LAZY_TYPE:
              return (
                (key = newChild._init),
                updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes)
              );
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return null !== key
              ? null
              : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function updateFromMap(
        existingChildren,
        returnFiber,
        newIdx,
        newChild,
        lanes
      ) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return (
            (existingChildren = existingChildren.get(newIdx) || null),
            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
          );

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (existingChildren =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                updateElement(returnFiber, existingChildren, newChild, lanes)
              );

            case REACT_PORTAL_TYPE:
              return (
                (existingChildren =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                updatePortal(returnFiber, existingChildren, newChild, lanes)
              );

            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                init(newChild._payload),
                lanes
              );
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (existingChildren = existingChildren.get(newIdx) || null),
              updateFragment(
                returnFiber,
                existingChildren,
                newChild,
                lanes,
                null
              )
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function reconcileChildrenArray(
        returnFiber,
        currentFirstChild,
        newChildren,
        lanes
      ) {
        for (
          var resultingFirstChild = null,
            previousNewFiber = null,
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null;
          null !== oldFiber && newIdx < newChildren.length;
          newIdx++
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(
            returnFiber,
            oldFiber,
            newChildren[newIdx],
            lanes
          );

          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }

          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (resultingFirstChild = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length)
          return (
            deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild
          );

        if (null === oldFiber) {
          for (; newIdx < newChildren.length; newIdx++) {
            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
              null !== oldFiber &&
                ((currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (resultingFirstChild = oldFiber)
                  : (previousNewFiber.sibling = oldFiber),
                (previousNewFiber = oldFiber));
          }

          return resultingFirstChild;
        }

        for (
          oldFiber = mapRemainingChildren(returnFiber, oldFiber);
          newIdx < newChildren.length;
          newIdx++
        ) {
          (nextOldFiber = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            newChildren[newIdx],
            lanes
          )),
            null !== nextOldFiber &&
              (shouldTrackSideEffects &&
                null !== nextOldFiber.alternate &&
                oldFiber.delete(
                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
                ),
              (currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              )),
              null === previousNewFiber
                ? (resultingFirstChild = nextOldFiber)
                : (previousNewFiber.sibling = nextOldFiber),
              (previousNewFiber = nextOldFiber));
        }

        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        return resultingFirstChild;
      }

      function reconcileChildrenIterator(
        returnFiber,
        currentFirstChild,
        newChildrenIterable,
        lanes
      ) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if ("function" !== typeof iteratorFn)
          throw Error(
            "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
          );
        newChildrenIterable = iteratorFn.call(newChildrenIterable);
        if (null == newChildrenIterable)
          throw Error("An iterable object provided no iterator.");

        for (
          var previousNewFiber = (iteratorFn = null),
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null,
            step = newChildrenIterable.next();
          null !== oldFiber && !step.done;
          newIdx++, step = newChildrenIterable.next()
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }

          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (iteratorFn = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done)
          return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

        if (null === oldFiber) {
          for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
            (step = createChild(returnFiber, step.value, lanes)),
              null !== step &&
                ((currentFirstChild = placeChild(
                  step,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (iteratorFn = step)
                  : (previousNewFiber.sibling = step),
                (previousNewFiber = step));
          }

          return iteratorFn;
        }

        for (
          oldFiber = mapRemainingChildren(returnFiber, oldFiber);
          !step.done;
          newIdx++, step = newChildrenIterable.next()
        ) {
          (step = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            step.value,
            lanes
          )),
            null !== step &&
              (shouldTrackSideEffects &&
                null !== step.alternate &&
                oldFiber.delete(null === step.key ? newIdx : step.key),
              (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
              null === previousNewFiber
                ? (iteratorFn = step)
                : (previousNewFiber.sibling = step),
              (previousNewFiber = step));
        }

        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        return iteratorFn;
      }

      function reconcileChildFibers(
        returnFiber,
        currentFirstChild,
        newChild,
        lanes
      ) {
        "object" === typeof newChild &&
          null !== newChild &&
          newChild.type === REACT_FRAGMENT_TYPE &&
          null === newChild.key &&
          (newChild = newChild.props.children);

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              a: {
                for (
                  var key = newChild.key, child = currentFirstChild;
                  null !== child;

                ) {
                  if (child.key === key) {
                    key = newChild.type;

                    if (key === REACT_FRAGMENT_TYPE) {
                      if (7 === child.tag) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        currentFirstChild = useFiber(
                          child,
                          newChild.props.children
                        );
                        currentFirstChild.return = returnFiber;
                        returnFiber = currentFirstChild;
                        break a;
                      }
                    } else if (
                      child.elementType === key ||
                      ("object" === typeof key &&
                        null !== key &&
                        key.$$typeof === REACT_LAZY_TYPE &&
                        resolveLazy(key) === child.type)
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props);
                      currentFirstChild.ref = coerceRef(
                        returnFiber,
                        child,
                        newChild
                      );
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                    deleteRemainingChildren(returnFiber, child);
                    break;
                  } else deleteChild(returnFiber, child);

                  child = child.sibling;
                }

                newChild.type === REACT_FRAGMENT_TYPE
                  ? ((currentFirstChild = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    )),
                    (currentFirstChild.return = returnFiber),
                    (returnFiber = currentFirstChild))
                  : ((lanes = createFiberFromTypeAndProps(
                      newChild.type,
                      newChild.key,
                      newChild.props,
                      null,
                      returnFiber.mode,
                      lanes
                    )),
                    (lanes.ref = coerceRef(
                      returnFiber,
                      currentFirstChild,
                      newChild
                    )),
                    (lanes.return = returnFiber),
                    (returnFiber = lanes));
              }

              return placeSingleChild(returnFiber);

            case REACT_PORTAL_TYPE:
              a: {
                for (child = newChild.key; null !== currentFirstChild; ) {
                  if (currentFirstChild.key === child) {
                    if (
                      4 === currentFirstChild.tag &&
                      currentFirstChild.stateNode.containerInfo ===
                        newChild.containerInfo &&
                      currentFirstChild.stateNode.implementation ===
                        newChild.implementation
                    ) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      currentFirstChild = useFiber(
                        currentFirstChild,
                        newChild.children || []
                      );
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  } else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }

                currentFirstChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                );
                currentFirstChild.return = returnFiber;
                returnFiber = currentFirstChild;
              }

              return placeSingleChild(returnFiber);

            case REACT_LAZY_TYPE:
              return (
                (child = newChild._init),
                reconcileChildFibers(
                  returnFiber,
                  currentFirstChild,
                  child(newChild._payload),
                  lanes
                )
              );
          }

          if (isArrayImpl(newChild))
            return reconcileChildrenArray(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          if (getIteratorFn(newChild))
            return reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
          ? ((newChild = "" + newChild),
            null !== currentFirstChild && 6 === currentFirstChild.tag
              ? (deleteRemainingChildren(
                  returnFiber,
                  currentFirstChild.sibling
                ),
                (currentFirstChild = useFiber(currentFirstChild, newChild)),
                (currentFirstChild.return = returnFiber),
                (returnFiber = currentFirstChild))
              : (deleteRemainingChildren(returnFiber, currentFirstChild),
                (currentFirstChild = createFiberFromText(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                (currentFirstChild.return = returnFiber),
                (returnFiber = currentFirstChild)),
            placeSingleChild(returnFiber))
          : deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = createCursor(NO_CONTEXT),
      contextFiberStackCursor = createCursor(NO_CONTEXT),
      rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      if (c === NO_CONTEXT)
        throw Error(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        );
      return c;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance);
      push(contextFiberStackCursor, fiber);
      push(contextStackCursor$1, NO_CONTEXT);
      pop(contextStackCursor$1);
      push(contextStackCursor$1, {
        isInAParentText: false,
      });
    }

    function popHostContainer() {
      pop(contextStackCursor$1);
      pop(contextFiberStackCursor);
      pop(rootInstanceStackCursor);
    }

    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var JSCompiler_inline_result = fiber.type;
      JSCompiler_inline_result =
        "AndroidTextInput" === JSCompiler_inline_result ||
        "RCTMultilineTextInputView" === JSCompiler_inline_result ||
        "RCTSinglelineTextInputView" === JSCompiler_inline_result ||
        "RCTText" === JSCompiler_inline_result ||
        "RCTVirtualText" === JSCompiler_inline_result;
      JSCompiler_inline_result =
        context.isInAParentText !== JSCompiler_inline_result
          ? {
              isInAParentText: JSCompiler_inline_result,
            }
          : context;
      context !== JSCompiler_inline_result &&
        (push(contextFiberStackCursor, fiber),
        push(contextStackCursor$1, JSCompiler_inline_result));
    }

    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber &&
        (pop(contextStackCursor$1), pop(contextFiberStackCursor));
    }

    var suspenseStackCursor = createCursor(0);

    function findFirstSuspended(row) {
      for (var node = row; null !== node; ) {
        if (13 === node.tag) {
          var state = node.memoizedState;
          if (null !== state && (null === state.dehydrated || shim() || shim()))
            return node;
        } else if (
          19 === node.tag &&
          undefined !== node.memoizedProps.revealOrder
        ) {
          if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === row) break;

        for (; null === node.sibling; ) {
          if (null === node.return || node.return === row) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }

      return null;
    }

    var workInProgressSources = [];

    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        workInProgressSources[i]._workInProgressVersionPrimary = null;
      }

      workInProgressSources.length = 0;
    }

    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
      renderLanes = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      workInProgressHook = null,
      didScheduleRenderPhaseUpdate = false,
      didScheduleRenderPhaseUpdateDuringThisPass = false,
      globalClientIdCounter = 0;

    function throwInvalidHookError() {
      throw Error(
        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
      );
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (null === prevDeps) return false;

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (!objectIs(nextDeps[i], prevDeps[i])) return false;
      }

      return true;
    }

    function renderWithHooks(
      current,
      workInProgress,
      Component,
      props,
      secondArg,
      nextRenderLanes
    ) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = 0;
      ReactCurrentDispatcher$1.current =
        null === current || null === current.memoizedState
          ? HooksDispatcherOnMount
          : HooksDispatcherOnUpdate;
      current = Component(props, secondArg);

      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        nextRenderLanes = 0;

        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (25 <= nextRenderLanes)
            throw Error(
              "Too many re-renders. React limits the number of renders to prevent an infinite loop."
            );
          nextRenderLanes += 1;
          workInProgressHook = currentHook = null;
          workInProgress.updateQueue = null;
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
          current = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }

      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      workInProgress = null !== currentHook && null !== currentHook.next;
      renderLanes = 0;
      workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
      didScheduleRenderPhaseUpdate = false;
      if (workInProgress)
        throw Error(
          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
        );
      return current;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null,
      };
      null === workInProgressHook
        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
        : (workInProgressHook = workInProgressHook.next = hook);
      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook =
          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
      } else nextCurrentHook = currentHook.next;

      var nextWorkInProgressHook =
        null === workInProgressHook
          ? currentlyRenderingFiber$1.memoizedState
          : workInProgressHook.next;
      if (null !== nextWorkInProgressHook)
        (workInProgressHook = nextWorkInProgressHook),
          (currentHook = nextCurrentHook);
      else {
        if (null === nextCurrentHook)
          throw Error("Rendered more hooks than during the previous render.");
        currentHook = nextCurrentHook;
        nextCurrentHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null,
        };
        null === workInProgressHook
          ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
              nextCurrentHook)
          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
      }
      return workInProgressHook;
    }

    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }

    function updateReducer(reducer) {
      var hook = updateWorkInProgressHook(),
        queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. This is likely a bug in React. Please file an issue."
        );
      queue.lastRenderedReducer = reducer;
      var current = currentHook,
        baseQueue = current.baseQueue,
        pendingQueue = queue.pending;

      if (null !== pendingQueue) {
        if (null !== baseQueue) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }

        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }

      if (null !== baseQueue) {
        pendingQueue = baseQueue.next;
        current = current.baseState;
        var newBaseQueueFirst = (baseFirst = null),
          newBaseQueueLast = null,
          update = pendingQueue;

        do {
          var updateLane = update.lane;
          if ((renderLanes & updateLane) === updateLane)
            null !== newBaseQueueLast &&
              (newBaseQueueLast = newBaseQueueLast.next =
                {
                  lane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null,
                }),
              (current = update.hasEagerState
                ? update.eagerState
                : reducer(current, update.action));
          else {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null,
            };
            null === newBaseQueueLast
              ? ((newBaseQueueFirst = newBaseQueueLast = clone),
                (baseFirst = current))
              : (newBaseQueueLast = newBaseQueueLast.next = clone);
            currentlyRenderingFiber$1.lanes |= updateLane;
            workInProgressRootSkippedLanes |= updateLane;
          }
          update = update.next;
        } while (null !== update && update !== pendingQueue);

        null === newBaseQueueLast
          ? (baseFirst = current)
          : (newBaseQueueLast.next = newBaseQueueFirst);
        objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = current;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = current;
      }

      reducer = queue.interleaved;

      if (null !== reducer) {
        baseQueue = reducer;

        do {
          (pendingQueue = baseQueue.lane),
            (currentlyRenderingFiber$1.lanes |= pendingQueue),
            (workInProgressRootSkippedLanes |= pendingQueue),
            (baseQueue = baseQueue.next);
        } while (baseQueue !== reducer);
      } else null === baseQueue && (queue.lanes = 0);

      return [hook.memoizedState, queue.dispatch];
    }

    function rerenderReducer(reducer) {
      var hook = updateWorkInProgressHook(),
        queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. This is likely a bug in React. Please file an issue."
        );
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch,
        lastRenderPhaseUpdate = queue.pending,
        newState = hook.memoizedState;

      if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);

        do {
          (newState = reducer(newState, update.action)), (update = update.next);
        } while (update !== lastRenderPhaseUpdate);

        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
      }

      return [newState, dispatch];
    }

    function updateMutableSource() {}

    function updateSyncExternalStore(subscribe, getSnapshot) {
      var fiber = currentlyRenderingFiber$1,
        hook = updateWorkInProgressHook(),
        nextSnapshot = getSnapshot(),
        snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
      snapshotChanged &&
        ((hook.memoizedState = nextSnapshot), (didReceiveUpdate = true));
      hook = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe,
      ]);

      if (
        hook.getSnapshot !== getSnapshot ||
        snapshotChanged ||
        (null !== workInProgressHook &&
          workInProgressHook.memoizedState.tag & 1)
      ) {
        fiber.flags |= 2048;
        pushEffect(
          9,
          updateStoreInstance.bind(
            null,
            fiber,
            hook,
            nextSnapshot,
            getSnapshot
          ),
          undefined,
          null
        );
        if (null === workInProgressRoot)
          throw Error(
            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
          );
        0 !== (renderLanes & 30) ||
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }

      return nextSnapshot;
    }

    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot,
      };
      getSnapshot = currentlyRenderingFiber$1.updateQueue;
      null === getSnapshot
        ? ((getSnapshot = {
            lastEffect: null,
            stores: null,
          }),
          (currentlyRenderingFiber$1.updateQueue = getSnapshot),
          (getSnapshot.stores = [fiber]))
        : ((renderedSnapshot = getSnapshot.stores),
          null === renderedSnapshot
            ? (getSnapshot.stores = [fiber])
            : renderedSnapshot.push(fiber));
    }

    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && scheduleUpdateOnFiber(fiber, 1, -1);
    }

    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function () {
        checkIfSnapshotChanged(inst) && scheduleUpdateOnFiber(fiber, 1, -1);
      });
    }

    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;

      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return true;
      }
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState,
      };
      hook.queue = initialState;
      initialState = initialState.dispatch = dispatchSetState.bind(
        null,
        currentlyRenderingFiber$1,
        initialState
      );
      return [hook.memoizedState, initialState];
    }

    function pushEffect(tag, create, destroy, deps) {
      tag = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        next: null,
      };
      create = currentlyRenderingFiber$1.updateQueue;
      null === create
        ? ((create = {
            lastEffect: null,
            stores: null,
          }),
          (currentlyRenderingFiber$1.updateQueue = create),
          (create.lastEffect = tag.next = tag))
        : ((destroy = create.lastEffect),
          null === destroy
            ? (create.lastEffect = tag.next = tag)
            : ((deps = destroy.next),
              (destroy.next = tag),
              (tag.next = deps),
              (create.lastEffect = tag)));
      return tag;
    }

    function updateRef() {
      return updateWorkInProgressHook().memoizedState;
    }

    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(
        1 | hookFlags,
        create,
        undefined,
        undefined === deps ? null : deps
      );
    }

    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var destroy = undefined;

      if (null !== currentHook) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
          hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
          return;
        }
      }

      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
    }

    function mountEffect(create, deps) {
      return mountEffectImpl(8390656, 8, create, deps);
    }

    function updateEffect(create, deps) {
      return updateEffectImpl(2048, 8, create, deps);
    }

    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(4, 2, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(4, 4, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if ("function" === typeof ref)
        return (
          (create = create()),
          ref(create),
          function () {
            ref(null);
          }
        );
      if (null !== ref && undefined !== ref)
        return (
          (create = create()),
          (ref.current = create),
          function () {
            ref.current = null;
          }
        );
    }

    function updateImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(
        4,
        4,
        imperativeHandleEffect.bind(null, create, ref),
        deps
      );
    }

    function mountDebugValue() {}

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (
        null !== prevState &&
        null !== deps &&
        areHookInputsEqual(deps, prevState[1])
      )
        return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (
        null !== prevState &&
        null !== deps &&
        areHookInputsEqual(deps, prevState[1])
      )
        return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }

    function updateDeferredValueImpl(hook, prevValue, value) {
      if (0 === (renderLanes & 21))
        return (
          hook.baseState &&
            ((hook.baseState = false), (didReceiveUpdate = true)),
          (hook.memoizedState = value)
        );
      objectIs(value, prevValue) ||
        ((value = claimNextTransitionLane()),
        (currentlyRenderingFiber$1.lanes |= value),
        (workInProgressRootSkippedLanes |= value),
        (hook.baseState = true));
      return prevValue;
    }

    function startTransition(setPending, callback) {
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority =
        0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = {};

      try {
        setPending(false), callback();
      } finally {
        (currentUpdatePriority = previousPriority),
          (ReactCurrentBatchConfig$1.transition = prevTransition);
      }
    }

    function updateId() {
      return updateWorkInProgressHook().memoizedState;
    }

    function dispatchReducerAction(fiber, queue, action) {
      var lane = requestUpdateLane(fiber);
      action = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null,
      };
      isRenderPhaseUpdate(fiber)
        ? enqueueRenderPhaseUpdate(queue, action)
        : (enqueueUpdate$1(fiber, queue, action),
          (action = requestEventTime()),
          (fiber = scheduleUpdateOnFiber(fiber, lane, action)),
          null !== fiber && entangleTransitionUpdate(fiber, queue, lane));
    }

    function dispatchSetState(fiber, queue, action) {
      var lane = requestUpdateLane(fiber),
        update = {
          lane: lane,
          action: action,
          hasEagerState: false,
          eagerState: null,
          next: null,
        };
      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
      else {
        enqueueUpdate$1(fiber, queue, update);
        var alternate = fiber.alternate;
        if (
          0 === fiber.lanes &&
          (null === alternate || 0 === alternate.lanes) &&
          ((alternate = queue.lastRenderedReducer), null !== alternate)
        )
          try {
            var currentState = queue.lastRenderedState,
              eagerState = alternate(currentState, action);
            update.hasEagerState = true;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return;
          } catch (error) {
          } finally {
          }
        action = requestEventTime();
        fiber = scheduleUpdateOnFiber(fiber, lane, action);
        null !== fiber && entangleTransitionUpdate(fiber, queue, lane);
      }
    }

    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return (
        fiber === currentlyRenderingFiber$1 ||
        (null !== alternate && alternate === currentlyRenderingFiber$1)
      );
    }

    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass =
        didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      null === pending
        ? (update.next = update)
        : ((update.next = pending.next), (pending.next = update));
      queue.pending = update;
    }

    function enqueueUpdate$1(fiber, queue, update) {
      isInterleavedUpdate(fiber)
        ? ((fiber = queue.interleaved),
          null === fiber
            ? ((update.next = update),
              null === interleavedQueues
                ? (interleavedQueues = [queue])
                : interleavedQueues.push(queue))
            : ((update.next = fiber.next), (fiber.next = update)),
          (queue.interleaved = update))
        : ((fiber = queue.pending),
          null === fiber
            ? (update.next = update)
            : ((update.next = fiber.next), (fiber.next = update)),
          (queue.pending = update));
    }

    function entangleTransitionUpdate(root, queue, lane) {
      if (0 !== (lane & 4194240)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
      }
    }

    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnMount = {
        readContext: readContext,
        useCallback: function useCallback(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            undefined === deps ? null : deps,
          ];
          return callback;
        },
        useContext: readContext,
        useEffect: mountEffect,
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          deps =
            null !== deps && undefined !== deps ? deps.concat([ref]) : null;
          return mountEffectImpl(
            4,
            4,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          return mountEffectImpl(4, 4, create, deps);
        },
        useInsertionEffect: function useInsertionEffect(create, deps) {
          return mountEffectImpl(4, 2, create, deps);
        },
        useMemo: function useMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = undefined === deps ? null : deps;
          nextCreate = nextCreate();
          hook.memoizedState = [nextCreate, deps];
          return nextCreate;
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          initialArg = undefined !== init ? init(initialArg) : initialArg;
          hook.memoizedState = hook.baseState = initialArg;
          reducer = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialArg,
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber$1,
            reducer
          );
          return [hook.memoizedState, reducer];
        },
        useRef: function useRef(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = {
            current: initialValue,
          };
          return (hook.memoizedState = initialValue);
        },
        useState: mountState,
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          return (mountWorkInProgressHook().memoizedState = value);
        },
        useTransition: function useTransition() {
          var _mountState = mountState(false),
            isPending = _mountState[0];

          _mountState = startTransition.bind(null, _mountState[1]);
          mountWorkInProgressHook().memoizedState = _mountState;
          return [isPending, _mountState];
        },
        useMutableSource: function useMutableSource() {},
        useSyncExternalStore: function useSyncExternalStore(
          subscribe,
          getSnapshot
        ) {
          var fiber = currentlyRenderingFiber$1,
            hook = mountWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          0 !== (renderLanes & 30) ||
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot,
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe,
          ]);
          fiber.flags |= 2048;
          pushEffect(
            9,
            updateStoreInstance.bind(
              null,
              fiber,
              inst,
              nextSnapshot,
              getSnapshot
            ),
            undefined,
            null
          );
          return nextSnapshot;
        },
        useId: function useId() {
          var hook = mountWorkInProgressHook(),
            identifierPrefix = workInProgressRoot.identifierPrefix,
            globalClientId = globalClientIdCounter++;
          identifierPrefix =
            ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          return (hook.memoizedState = identifierPrefix);
        },
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnUpdate = {
        readContext: readContext,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: updateReducer,
        useRef: updateRef,
        useState: function useState() {
          return updateReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value
          );
        },
        useTransition: function useTransition() {
          var isPending = updateReducer(basicStateReducer)[0],
            start = updateWorkInProgressHook().memoizedState;
          return [isPending, start];
        },
        useMutableSource: updateMutableSource,
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnRerender = {
        readContext: readContext,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: rerenderReducer,
        useRef: updateRef,
        useState: function useState() {
          return rerenderReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          return null === currentHook
            ? (hook.memoizedState = value)
            : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
        },
        useTransition: function useTransition() {
          var isPending = rerenderReducer(basicStateReducer)[0],
            start = updateWorkInProgressHook().memoizedState;
          return [isPending, start];
        },
        useMutableSource: updateMutableSource,
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        unstable_isNewReconciler: false,
      };

    function createCapturedValue(value, source) {
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source),
      };
    }

    if (
      "function" !==
      typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog
    )
      throw Error(
        "Expected ReactFiberErrorDialog.showErrorDialog to be a function."
      );

    function logCapturedError(boundary, errorInfo) {
      try {
        false !==
          ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
            componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
            error: errorInfo.value,
            errorBoundary:
              null !== boundary && 1 === boundary.tag
                ? boundary.stateNode
                : null,
          }) && console.error(errorInfo.value);
      } catch (e) {
        setTimeout(function () {
          throw e;
        });
      }
    }

    var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      lane.payload = {
        element: null,
      };
      var error = errorInfo.value;

      lane.callback = function () {
        hasUncaughtError ||
          ((hasUncaughtError = true), (firstUncaughtError = error));
        logCapturedError(fiber, errorInfo);
      };

      return lane;
    }

    function createClassErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;

        lane.payload = function () {
          return getDerivedStateFromError(error);
        };

        lane.callback = function () {
          logCapturedError(fiber, errorInfo);
        };
      }

      var inst = fiber.stateNode;
      null !== inst &&
        "function" === typeof inst.componentDidCatch &&
        (lane.callback = function () {
          logCapturedError(fiber, errorInfo);
          "function" !== typeof getDerivedStateFromError &&
            (null === legacyErrorBoundariesThatAlreadyFailed
              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
              : legacyErrorBoundariesThatAlreadyFailed.add(this));
          var stack = errorInfo.stack;
          this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : "",
          });
        });
      return lane;
    }

    function attachPingListener(root, wakeable, lanes) {
      var pingCache = root.pingCache;

      if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else
        (threadIDs = pingCache.get(wakeable)),
          undefined === threadIDs &&
            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));

      threadIDs.has(lanes) ||
        (threadIDs.add(lanes),
        (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
        wakeable.then(root, root));
    }

    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

    function reconcileChildren(
      current,
      workInProgress,
      nextChildren,
      renderLanes
    ) {
      workInProgress.child =
        null === current
          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
          : reconcileChildFibers(
              workInProgress,
              current.child,
              nextChildren,
              renderLanes
            );
    }

    function updateForwardRef(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      Component = Component.render;
      var ref = workInProgress.ref;
      prepareToReadContext(workInProgress, renderLanes);
      nextProps = renderWithHooks(
        current,
        workInProgress,
        Component,
        nextProps,
        ref,
        renderLanes
      );
      if (null !== current && !didReceiveUpdate)
        return (
          (workInProgress.updateQueue = current.updateQueue),
          (workInProgress.flags &= -2053),
          (current.lanes &= ~renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      return workInProgress.child;
    }

    function updateMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null === current) {
        var type = Component.type;
        if (
          "function" === typeof type &&
          !shouldConstruct(type) &&
          undefined === type.defaultProps &&
          null === Component.compare &&
          undefined === Component.defaultProps
        )
          return (
            (workInProgress.tag = 15),
            (workInProgress.type = type),
            updateSimpleMemoComponent(
              current,
              workInProgress,
              type,
              nextProps,
              renderLanes
            )
          );
        current = createFiberFromTypeAndProps(
          Component.type,
          null,
          nextProps,
          workInProgress,
          workInProgress.mode,
          renderLanes
        );
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return (workInProgress.child = current);
      }

      type = current.child;

      if (0 === (current.lanes & renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (
          Component(prevProps, nextProps) &&
          current.ref === workInProgress.ref
        )
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          );
      }

      workInProgress.flags |= 1;
      current = createWorkInProgress(type, nextProps);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return (workInProgress.child = current);
    }

    function updateSimpleMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null !== current) {
        var prevProps = current.memoizedProps;
        if (
          shallowEqual(prevProps, nextProps) &&
          current.ref === workInProgress.ref
        )
          if (
            ((didReceiveUpdate = false),
            (workInProgress.pendingProps = nextProps = prevProps),
            0 !== (current.lanes & renderLanes))
          )
            0 !== (current.flags & 131072) && (didReceiveUpdate = true);
          else
            return (
              (workInProgress.lanes = current.lanes),
              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
            );
      }

      return updateFunctionComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      );
    }

    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        nextChildren = nextProps.children,
        prevState = null !== current ? current.memoizedState : null;
      if ("hidden" === nextProps.mode) {
        if (0 === (workInProgress.mode & 1))
          (workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null,
          }),
            push(subtreeRenderLanesCursor, subtreeRenderLanes),
            (subtreeRenderLanes |= renderLanes);
        else {
          if (0 === (renderLanes & 1073741824))
            return (
              (current =
                null !== prevState
                  ? prevState.baseLanes | renderLanes
                  : renderLanes),
              (workInProgress.lanes = workInProgress.childLanes = 1073741824),
              (workInProgress.memoizedState = {
                baseLanes: current,
                cachePool: null,
                transitions: null,
              }),
              (workInProgress.updateQueue = null),
              push(subtreeRenderLanesCursor, subtreeRenderLanes),
              (subtreeRenderLanes |= current),
              null
            );
          workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null,
          };
          nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
          push(subtreeRenderLanesCursor, subtreeRenderLanes);
          subtreeRenderLanes |= nextProps;
        }
      } else
        null !== prevState
          ? ((nextProps = prevState.baseLanes | renderLanes),
            (workInProgress.memoizedState = null))
          : (nextProps = renderLanes),
          push(subtreeRenderLanesCursor, subtreeRenderLanes),
          (subtreeRenderLanes |= nextProps);
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (
        (null === current && null !== ref) ||
        (null !== current && current.ref !== ref)
      )
        workInProgress.flags |= 512;
    }

    function updateFunctionComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      var context = isContextProvider(Component)
        ? previousContext
        : contextStackCursor.current;
      context = getMaskedContext(workInProgress, context);
      prepareToReadContext(workInProgress, renderLanes);
      Component = renderWithHooks(
        current,
        workInProgress,
        Component,
        nextProps,
        context,
        renderLanes
      );
      if (null !== current && !didReceiveUpdate)
        return (
          (workInProgress.updateQueue = current.updateQueue),
          (workInProgress.flags &= -2053),
          (current.lanes &= ~renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, Component, renderLanes);
      return workInProgress.child;
    }

    function updateClassComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (isContextProvider(Component)) {
        var hasContext = true;
        pushContextProvider(workInProgress);
      } else hasContext = false;

      prepareToReadContext(workInProgress, renderLanes);
      if (null === workInProgress.stateNode)
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress),
          constructClassInstance(workInProgress, Component, nextProps),
          mountClassInstance(workInProgress, Component, nextProps, renderLanes),
          (nextProps = true);
      else if (null === current) {
        var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context,
          contextType = Component.contextType;
        "object" === typeof contextType && null !== contextType
          ? (contextType = readContext(contextType))
          : ((contextType = isContextProvider(Component)
              ? previousContext
              : contextStackCursor.current),
            (contextType = getMaskedContext(workInProgress, contextType)));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles =
            "function" === typeof getDerivedStateFromProps ||
            "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles ||
          ("function" !== typeof instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof instance.componentWillReceiveProps) ||
          ((oldProps !== nextProps || oldContext !== contextType) &&
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              nextProps,
              contextType
            ));
        hasForceUpdate = false;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        oldContext = workInProgress.memoizedState;
        oldProps !== nextProps ||
        oldState !== oldContext ||
        didPerformWorkStackCursor.current ||
        hasForceUpdate
          ? ("function" === typeof getDerivedStateFromProps &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                getDerivedStateFromProps,
                nextProps
              ),
              (oldContext = workInProgress.memoizedState)),
            (oldProps =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                oldProps,
                nextProps,
                oldState,
                oldContext,
                contextType
              ))
              ? (hasNewLifecycles ||
                  ("function" !== typeof instance.UNSAFE_componentWillMount &&
                    "function" !== typeof instance.componentWillMount) ||
                  ("function" === typeof instance.componentWillMount &&
                    instance.componentWillMount(),
                  "function" === typeof instance.UNSAFE_componentWillMount &&
                    instance.UNSAFE_componentWillMount()),
                "function" === typeof instance.componentDidMount &&
                  (workInProgress.flags |= 4))
              : ("function" === typeof instance.componentDidMount &&
                  (workInProgress.flags |= 4),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = oldContext)),
            (instance.props = nextProps),
            (instance.state = oldContext),
            (instance.context = contextType),
            (nextProps = oldProps))
          : ("function" === typeof instance.componentDidMount &&
              (workInProgress.flags |= 4),
            (nextProps = false));
      } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        oldProps = workInProgress.memoizedProps;
        contextType =
          workInProgress.type === workInProgress.elementType
            ? oldProps
            : resolveDefaultProps(workInProgress.type, oldProps);
        instance.props = contextType;
        hasNewLifecycles = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        "object" === typeof oldContext && null !== oldContext
          ? (oldContext = readContext(oldContext))
          : ((oldContext = isContextProvider(Component)
              ? previousContext
              : contextStackCursor.current),
            (oldContext = getMaskedContext(workInProgress, oldContext)));
        var getDerivedStateFromProps$jscomp$0 =
          Component.getDerivedStateFromProps;
        (getDerivedStateFromProps =
          "function" === typeof getDerivedStateFromProps$jscomp$0 ||
          "function" === typeof instance.getSnapshotBeforeUpdate) ||
          ("function" !== typeof instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof instance.componentWillReceiveProps) ||
          ((oldProps !== hasNewLifecycles || oldState !== oldContext) &&
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              nextProps,
              oldContext
            ));
        hasForceUpdate = false;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        var newState = workInProgress.memoizedState;
        oldProps !== hasNewLifecycles ||
        oldState !== newState ||
        didPerformWorkStackCursor.current ||
        hasForceUpdate
          ? ("function" === typeof getDerivedStateFromProps$jscomp$0 &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                getDerivedStateFromProps$jscomp$0,
                nextProps
              ),
              (newState = workInProgress.memoizedState)),
            (contextType =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                contextType,
                nextProps,
                oldState,
                newState,
                oldContext
              ) ||
              false)
              ? (getDerivedStateFromProps ||
                  ("function" !== typeof instance.UNSAFE_componentWillUpdate &&
                    "function" !== typeof instance.componentWillUpdate) ||
                  ("function" === typeof instance.componentWillUpdate &&
                    instance.componentWillUpdate(
                      nextProps,
                      newState,
                      oldContext
                    ),
                  "function" === typeof instance.UNSAFE_componentWillUpdate &&
                    instance.UNSAFE_componentWillUpdate(
                      nextProps,
                      newState,
                      oldContext
                    )),
                "function" === typeof instance.componentDidUpdate &&
                  (workInProgress.flags |= 4),
                "function" === typeof instance.getSnapshotBeforeUpdate &&
                  (workInProgress.flags |= 1024))
              : ("function" !== typeof instance.componentDidUpdate ||
                  (oldProps === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 4),
                "function" !== typeof instance.getSnapshotBeforeUpdate ||
                  (oldProps === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 1024),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = newState)),
            (instance.props = nextProps),
            (instance.state = newState),
            (instance.context = oldContext),
            (nextProps = contextType))
          : ("function" !== typeof instance.componentDidUpdate ||
              (oldProps === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 4),
            "function" !== typeof instance.getSnapshotBeforeUpdate ||
              (oldProps === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 1024),
            (nextProps = false));
      }
      return finishClassComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        hasContext,
        renderLanes
      );
    }

    function finishClassComponent(
      current,
      workInProgress,
      Component,
      shouldUpdate,
      hasContext,
      renderLanes
    ) {
      markRef(current, workInProgress);
      var didCaptureError = 0 !== (workInProgress.flags & 128);
      if (!shouldUpdate && !didCaptureError)
        return (
          hasContext &&
            invalidateContextProvider(workInProgress, Component, false),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner$1.current = workInProgress;
      var nextChildren =
        didCaptureError &&
        "function" !== typeof Component.getDerivedStateFromError
          ? null
          : shouldUpdate.render();
      workInProgress.flags |= 1;
      null !== current && didCaptureError
        ? ((workInProgress.child = reconcileChildFibers(
            workInProgress,
            current.child,
            null,
            renderLanes
          )),
          (workInProgress.child = reconcileChildFibers(
            workInProgress,
            null,
            nextChildren,
            renderLanes
          )))
        : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      workInProgress.memoizedState = shouldUpdate.state;
      hasContext && invalidateContextProvider(workInProgress, Component, true);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext
        ? pushTopLevelContextObject(
            workInProgress,
            root.pendingContext,
            root.pendingContext !== root.context
          )
        : root.context &&
          pushTopLevelContextObject(workInProgress, root.context, false);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: 0,
    };

    function mountSuspenseOffscreenState(renderLanes) {
      return {
        baseLanes: renderLanes,
        cachePool: null,
        transitions: null,
      };
    }

    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        showFallback = false,
        didSuspend = 0 !== (workInProgress.flags & 128),
        JSCompiler_temp;
      (JSCompiler_temp = didSuspend) ||
        (JSCompiler_temp =
          null !== current && null === current.memoizedState
            ? false
            : 0 !== (suspenseContext & 2));
      if (JSCompiler_temp)
        (showFallback = true), (workInProgress.flags &= -129);
      else if (null === current || null !== current.memoizedState)
        suspenseContext |= 1;
      push(suspenseStackCursor, suspenseContext & 1);

      if (null === current) {
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated)
          return (
            0 === (workInProgress.mode & 1)
              ? (workInProgress.lanes = 1)
              : shim()
              ? (workInProgress.lanes = 8)
              : (workInProgress.lanes = 1073741824),
            null
          );
        didSuspend = nextProps.children;
        current = nextProps.fallback;
        return showFallback
          ? ((nextProps = workInProgress.mode),
            (showFallback = workInProgress.child),
            (didSuspend = {
              mode: "hidden",
              children: didSuspend,
            }),
            0 === (nextProps & 1) && null !== showFallback
              ? ((showFallback.childLanes = 0),
                (showFallback.pendingProps = didSuspend))
              : (showFallback = createFiberFromOffscreen(
                  didSuspend,
                  nextProps,
                  0,
                  null
                )),
            (current = createFiberFromFragment(
              current,
              nextProps,
              renderLanes,
              null
            )),
            (showFallback.return = workInProgress),
            (current.return = workInProgress),
            (showFallback.sibling = current),
            (workInProgress.child = showFallback),
            (workInProgress.child.memoizedState =
              mountSuspenseOffscreenState(renderLanes)),
            (workInProgress.memoizedState = SUSPENDED_MARKER),
            current)
          : mountSuspensePrimaryChildren(workInProgress, didSuspend);
      }

      suspenseContext = current.memoizedState;
      if (
        null !== suspenseContext &&
        ((JSCompiler_temp = suspenseContext.dehydrated),
        null !== JSCompiler_temp)
      )
        return updateDehydratedSuspenseComponent(
          current,
          workInProgress,
          didSuspend,
          nextProps,
          JSCompiler_temp,
          suspenseContext,
          renderLanes
        );

      if (showFallback) {
        showFallback = nextProps.fallback;
        didSuspend = workInProgress.mode;
        suspenseContext = current.child;
        JSCompiler_temp = suspenseContext.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: nextProps.children,
        };
        0 === (didSuspend & 1) && workInProgress.child !== suspenseContext
          ? ((nextProps = workInProgress.child),
            (nextProps.childLanes = 0),
            (nextProps.pendingProps = primaryChildProps),
            (workInProgress.deletions = null))
          : ((nextProps = createWorkInProgress(
              suspenseContext,
              primaryChildProps
            )),
            (nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064));
        null !== JSCompiler_temp
          ? (showFallback = createWorkInProgress(JSCompiler_temp, showFallback))
          : ((showFallback = createFiberFromFragment(
              showFallback,
              didSuspend,
              renderLanes,
              null
            )),
            (showFallback.flags |= 2));
        showFallback.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = showFallback;
        workInProgress.child = nextProps;
        nextProps = showFallback;
        showFallback = workInProgress.child;
        didSuspend = current.child.memoizedState;
        didSuspend =
          null === didSuspend
            ? mountSuspenseOffscreenState(renderLanes)
            : {
                baseLanes: didSuspend.baseLanes | renderLanes,
                cachePool: null,
                transitions: didSuspend.transitions,
              };
        showFallback.memoizedState = didSuspend;
        showFallback.childLanes = current.childLanes & ~renderLanes;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
      }

      showFallback = current.child;
      current = showFallback.sibling;
      nextProps = createWorkInProgress(showFallback, {
        mode: "visible",
        children: nextProps.children,
      });
      0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
      nextProps.return = workInProgress;
      nextProps.sibling = null;
      null !== current &&
        ((renderLanes = workInProgress.deletions),
        null === renderLanes
          ? ((workInProgress.deletions = [current]),
            (workInProgress.flags |= 16))
          : renderLanes.push(current));
      workInProgress.child = nextProps;
      workInProgress.memoizedState = null;
      return nextProps;
    }

    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
      primaryChildren = createFiberFromOffscreen(
        {
          mode: "visible",
          children: primaryChildren,
        },
        workInProgress.mode,
        0,
        null
      );
      primaryChildren.return = workInProgress;
      return (workInProgress.child = primaryChildren);
    }

    function retrySuspenseComponentWithoutHydrating(
      current,
      workInProgress,
      renderLanes,
      recoverableError
    ) {
      null !== recoverableError &&
        (null === hydrationErrors
          ? (hydrationErrors = [recoverableError])
          : hydrationErrors.push(recoverableError));
      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      current = mountSuspensePrimaryChildren(
        workInProgress,
        workInProgress.pendingProps.children
      );
      current.flags |= 2;
      workInProgress.memoizedState = null;
      return current;
    }

    function updateDehydratedSuspenseComponent(
      current,
      workInProgress,
      didSuspend,
      nextProps,
      suspenseInstance,
      suspenseState,
      renderLanes
    ) {
      if (didSuspend) {
        if (workInProgress.flags & 256)
          return (
            (workInProgress.flags &= -257),
            retrySuspenseComponentWithoutHydrating(
              current,
              workInProgress,
              renderLanes,
              Error(
                "There was an error while hydrating this Suspense boundary. Switched to client rendering."
              )
            )
          );
        if (null !== workInProgress.memoizedState)
          return (
            (workInProgress.child = current.child),
            (workInProgress.flags |= 128),
            null
          );
        suspenseState = nextProps.fallback;
        didSuspend = workInProgress.mode;
        nextProps = createFiberFromOffscreen(
          {
            mode: "visible",
            children: nextProps.children,
          },
          didSuspend,
          0,
          null
        );
        suspenseState = createFiberFromFragment(
          suspenseState,
          didSuspend,
          renderLanes,
          null
        );
        suspenseState.flags |= 2;
        nextProps.return = workInProgress;
        suspenseState.return = workInProgress;
        nextProps.sibling = suspenseState;
        workInProgress.child = nextProps;
        0 !== (workInProgress.mode & 1) &&
          reconcileChildFibers(
            workInProgress,
            current.child,
            null,
            renderLanes
          );
        workInProgress.child.memoizedState =
          mountSuspenseOffscreenState(renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return suspenseState;
      }

      if (0 === (workInProgress.mode & 1))
        return retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress,
          renderLanes,
          null
        );
      if (shim())
        return (
          (suspenseState = shim().errorMessage),
          retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes,
            suspenseState
              ? Error(suspenseState)
              : Error(
                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
                )
          )
        );
      didSuspend = 0 !== (renderLanes & current.childLanes);

      if (didReceiveUpdate || didSuspend) {
        nextProps = workInProgressRoot;

        if (null !== nextProps) {
          switch (renderLanes & -renderLanes) {
            case 4:
              didSuspend = 2;
              break;

            case 16:
              didSuspend = 8;
              break;

            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              didSuspend = 32;
              break;

            case 536870912:
              didSuspend = 268435456;
              break;

            default:
              didSuspend = 0;
          }

          nextProps =
            0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes))
              ? 0
              : didSuspend;
          0 !== nextProps &&
            nextProps !== suspenseState.retryLane &&
            ((suspenseState.retryLane = nextProps),
            scheduleUpdateOnFiber(current, nextProps, -1));
        }

        renderDidSuspendDelayIfPossible();
        return retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress,
          renderLanes,
          Error(
            "This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."
          )
        );
      }

      if (shim())
        return (
          (workInProgress.flags |= 128),
          (workInProgress.child = current.child),
          retryDehydratedSuspenseBoundary.bind(null, current),
          shim(),
          null
        );
      current = mountSuspensePrimaryChildren(
        workInProgress,
        nextProps.children
      );
      current.flags |= 4096;
      return current;
    }

    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
      fiber.lanes |= renderLanes;
      var alternate = fiber.alternate;
      null !== alternate && (alternate.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(
        fiber.return,
        renderLanes,
        propagationRoot
      );
    }

    function initSuspenseListRenderState(
      workInProgress,
      isBackwards,
      tail,
      lastContentRow,
      tailMode
    ) {
      var renderState = workInProgress.memoizedState;
      null === renderState
        ? (workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
          })
        : ((renderState.isBackwards = isBackwards),
          (renderState.rendering = null),
          (renderState.renderingStartTime = 0),
          (renderState.last = lastContentRow),
          (renderState.tail = tail),
          (renderState.tailMode = tailMode));
    }

    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
      reconcileChildren(
        current,
        workInProgress,
        nextProps.children,
        renderLanes
      );
      nextProps = suspenseStackCursor.current;
      if (0 !== (nextProps & 2))
        (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
      else {
        if (null !== current && 0 !== (current.flags & 128))
          a: for (current = workInProgress.child; null !== current; ) {
            if (13 === current.tag)
              null !== current.memoizedState &&
                scheduleSuspenseWorkOnFiber(
                  current,
                  renderLanes,
                  workInProgress
                );
            else if (19 === current.tag)
              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
            if (current === workInProgress) break a;

            for (; null === current.sibling; ) {
              if (null === current.return || current.return === workInProgress)
                break a;
              current = current.return;
            }

            current.sibling.return = current.return;
            current = current.sibling;
          }
        nextProps &= 1;
      }
      push(suspenseStackCursor, nextProps);
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
      else
        switch (revealOrder) {
          case "forwards":
            renderLanes = workInProgress.child;

            for (revealOrder = null; null !== renderLanes; ) {
              (current = renderLanes.alternate),
                null !== current &&
                  null === findFirstSuspended(current) &&
                  (revealOrder = renderLanes),
                (renderLanes = renderLanes.sibling);
            }

            renderLanes = revealOrder;
            null === renderLanes
              ? ((revealOrder = workInProgress.child),
                (workInProgress.child = null))
              : ((revealOrder = renderLanes.sibling),
                (renderLanes.sibling = null));
            initSuspenseListRenderState(
              workInProgress,
              false,
              revealOrder,
              renderLanes,
              tailMode
            );
            break;

          case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;

            for (workInProgress.child = null; null !== revealOrder; ) {
              current = revealOrder.alternate;

              if (null !== current && null === findFirstSuspended(current)) {
                workInProgress.child = revealOrder;
                break;
              }

              current = revealOrder.sibling;
              revealOrder.sibling = renderLanes;
              renderLanes = revealOrder;
              revealOrder = current;
            }

            initSuspenseListRenderState(
              workInProgress,
              true,
              renderLanes,
              null,
              tailMode
            );
            break;

          case "together":
            initSuspenseListRenderState(
              workInProgress,
              false,
              null,
              null,
              undefined
            );
            break;

          default:
            workInProgress.memoizedState = null;
        }
      return workInProgress.child;
    }

    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
      0 === (workInProgress.mode & 1) &&
        null !== current &&
        ((current.alternate = null),
        (workInProgress.alternate = null),
        (workInProgress.flags |= 2));
    }

    function bailoutOnAlreadyFinishedWork(
      current,
      workInProgress,
      renderLanes
    ) {
      null !== current && (workInProgress.dependencies = current.dependencies);
      workInProgressRootSkippedLanes |= workInProgress.lanes;
      if (0 === (renderLanes & workInProgress.childLanes)) return null;
      if (null !== current && workInProgress.child !== current.child)
        throw Error("Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;

        for (renderLanes.return = workInProgress; null !== current.sibling; ) {
          (current = current.sibling),
            (renderLanes = renderLanes.sibling =
              createWorkInProgress(current, current.pendingProps)),
            (renderLanes.return = workInProgress);
        }

        renderLanes.sibling = null;
      }

      return workInProgress.child;
    }

    function attemptEarlyBailoutIfNoScheduledUpdate(
      current,
      workInProgress,
      renderLanes
    ) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 5:
          pushHostContext(workInProgress);
          break;

        case 1:
          isContextProvider(workInProgress.type) &&
            pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(
            workInProgress,
            workInProgress.stateNode.containerInfo
          );
          break;

        case 10:
          var context = workInProgress.type._context,
            nextValue = workInProgress.memoizedProps.value;
          push(valueCursor, context._currentValue);
          context._currentValue = nextValue;
          break;

        case 13:
          context = workInProgress.memoizedState;

          if (null !== context) {
            if (null !== context.dehydrated)
              return (
                push(suspenseStackCursor, suspenseStackCursor.current & 1),
                (workInProgress.flags |= 128),
                null
              );
            if (0 !== (renderLanes & workInProgress.child.childLanes))
              return updateSuspenseComponent(
                current,
                workInProgress,
                renderLanes
              );
            push(suspenseStackCursor, suspenseStackCursor.current & 1);
            current = bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            );
            return null !== current ? current.sibling : null;
          }

          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          break;

        case 19:
          context = 0 !== (renderLanes & workInProgress.childLanes);

          if (0 !== (current.flags & 128)) {
            if (context)
              return updateSuspenseListComponent(
                current,
                workInProgress,
                renderLanes
              );
            workInProgress.flags |= 128;
          }

          nextValue = workInProgress.memoizedState;
          null !== nextValue &&
            ((nextValue.rendering = null),
            (nextValue.tail = null),
            (nextValue.lastEffect = null));
          push(suspenseStackCursor, suspenseStackCursor.current);
          if (context) break;
          else return null;

        case 22:
        case 23:
          return (
            (workInProgress.lanes = 0),
            updateOffscreenComponent(current, workInProgress, renderLanes)
          );
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    var appendAllChildren,
      updateHostContainer,
      updateHostComponent$1,
      updateHostText$1;

    appendAllChildren = function appendAllChildren(parent, workInProgress) {
      for (var node = workInProgress.child; null !== node; ) {
        if (5 === node.tag || 6 === node.tag)
          parent._children.push(node.stateNode);
        else if (4 !== node.tag && null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) break;

        for (; null === node.sibling; ) {
          if (null === node.return || node.return === workInProgress) return;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    };

    updateHostContainer = function updateHostContainer() {};

    updateHostComponent$1 = function updateHostComponent$1(
      current,
      workInProgress,
      type,
      newProps
    ) {
      current.memoizedProps !== newProps &&
        (requiredContext(contextStackCursor$1.current),
        (workInProgress.updateQueue = UPDATE_SIGNAL)) &&
        (workInProgress.flags |= 4);
    };

    updateHostText$1 = function updateHostText$1(
      current,
      workInProgress,
      oldText,
      newText
    ) {
      oldText !== newText && (workInProgress.flags |= 4);
    };

    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      switch (renderState.tailMode) {
        case "hidden":
          hasRenderedATailFallback = renderState.tail;

          for (var lastTailNode = null; null !== hasRenderedATailFallback; ) {
            null !== hasRenderedATailFallback.alternate &&
              (lastTailNode = hasRenderedATailFallback),
              (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
          }

          null === lastTailNode
            ? (renderState.tail = null)
            : (lastTailNode.sibling = null);
          break;

        case "collapsed":
          lastTailNode = renderState.tail;

          for (var lastTailNode$60 = null; null !== lastTailNode; ) {
            null !== lastTailNode.alternate && (lastTailNode$60 = lastTailNode),
              (lastTailNode = lastTailNode.sibling);
          }

          null === lastTailNode$60
            ? hasRenderedATailFallback || null === renderState.tail
              ? (renderState.tail = null)
              : (renderState.tail.sibling = null)
            : (lastTailNode$60.sibling = null);
      }
    }

    function bubbleProperties(completedWork) {
      var didBailout =
          null !== completedWork.alternate &&
          completedWork.alternate.child === completedWork.child,
        newChildLanes = 0,
        subtreeFlags = 0;
      if (didBailout)
        for (var child$61 = completedWork.child; null !== child$61; ) {
          (newChildLanes |= child$61.lanes | child$61.childLanes),
            (subtreeFlags |= child$61.subtreeFlags & 14680064),
            (subtreeFlags |= child$61.flags & 14680064),
            (child$61.return = completedWork),
            (child$61 = child$61.sibling);
        }
      else
        for (child$61 = completedWork.child; null !== child$61; ) {
          (newChildLanes |= child$61.lanes | child$61.childLanes),
            (subtreeFlags |= child$61.subtreeFlags),
            (subtreeFlags |= child$61.flags),
            (child$61.return = completedWork),
            (child$61 = child$61.sibling);
        }
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }

    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      popTreeContext(workInProgress);

      switch (workInProgress.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress), null;

        case 1:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            bubbleProperties(workInProgress),
            null
          );

        case 3:
          return (
            (renderLanes = workInProgress.stateNode),
            popHostContainer(),
            pop(didPerformWorkStackCursor),
            pop(contextStackCursor),
            resetWorkInProgressVersions(),
            renderLanes.pendingContext &&
              ((renderLanes.context = renderLanes.pendingContext),
              (renderLanes.pendingContext = null)),
            (null !== current && null !== current.child) ||
              null === current ||
              (current.memoizedState.isDehydrated &&
                0 === (workInProgress.flags & 256)) ||
              ((workInProgress.flags |= 1024),
              null !== hydrationErrors &&
                (queueRecoverableErrors(hydrationErrors),
                (hydrationErrors = null))),
            updateHostContainer(current, workInProgress),
            bubbleProperties(workInProgress),
            null
          );

        case 5:
          popHostContext(workInProgress);
          renderLanes = requiredContext(rootInstanceStackCursor.current);
          var type = workInProgress.type;
          if (null !== current && null != workInProgress.stateNode)
            updateHostComponent$1(
              current,
              workInProgress,
              type,
              newProps,
              renderLanes
            ),
              current.ref !== workInProgress.ref &&
                (workInProgress.flags |= 512);
          else {
            if (!newProps) {
              if (null === workInProgress.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              bubbleProperties(workInProgress);
              return null;
            }

            requiredContext(contextStackCursor$1.current);
            current = allocateTag();
            type = getViewConfigForType(type);
            var updatePayload = diffProperties(
              null,
              emptyObject,
              newProps,
              type.validAttributes
            );
            ReactNativePrivateInterface.UIManager.createView(
              current,
              type.uiViewClassName,
              renderLanes,
              updatePayload
            );
            renderLanes = new ReactNativeFiberHostComponent(
              current,
              type,
              workInProgress
            );
            instanceCache.set(current, workInProgress);
            instanceProps.set(current, newProps);
            appendAllChildren(renderLanes, workInProgress, false, false);
            workInProgress.stateNode = renderLanes;
            finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
            null !== workInProgress.ref && (workInProgress.flags |= 512);
          }
          bubbleProperties(workInProgress);
          return null;

        case 6:
          if (current && null != workInProgress.stateNode)
            updateHostText$1(
              current,
              workInProgress,
              current.memoizedProps,
              newProps
            );
          else {
            if (
              "string" !== typeof newProps &&
              null === workInProgress.stateNode
            )
              throw Error(
                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
              );
            current = requiredContext(rootInstanceStackCursor.current);
            if (!requiredContext(contextStackCursor$1.current).isInAParentText)
              throw Error(
                "Text strings must be rendered within a <Text> component."
              );
            renderLanes = allocateTag();
            ReactNativePrivateInterface.UIManager.createView(
              renderLanes,
              "RCTRawText",
              current,
              {
                text: newProps,
              }
            );
            instanceCache.set(renderLanes, workInProgress);
            workInProgress.stateNode = renderLanes;
          }
          bubbleProperties(workInProgress);
          return null;

        case 13:
          pop(suspenseStackCursor);
          newProps = workInProgress.memoizedState;

          if (
            null === current ||
            (null !== current.memoizedState &&
              null !== current.memoizedState.dehydrated)
          ) {
            if (null !== newProps && null !== newProps.dehydrated) {
              if (null === current) {
                throw Error(
                  "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                );
              }

              type = false;
            } else
              null !== hydrationErrors &&
                (queueRecoverableErrors(hydrationErrors),
                (hydrationErrors = null)),
                (type = true);

            if (!type)
              return workInProgress.flags & 65536 ? workInProgress : null;
          }

          if (0 !== (workInProgress.flags & 128))
            return (workInProgress.lanes = renderLanes), workInProgress;
          renderLanes = null !== newProps;
          renderLanes !==
            (null !== current && null !== current.memoizedState) &&
            renderLanes &&
            ((workInProgress.child.flags |= 8192),
            0 !== (workInProgress.mode & 1) &&
              (null === current || 0 !== (suspenseStackCursor.current & 1)
                ? 0 === workInProgressRootExitStatus &&
                  (workInProgressRootExitStatus = 3)
                : renderDidSuspendDelayIfPossible()));
          null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
          bubbleProperties(workInProgress);
          return null;

        case 4:
          return (
            popHostContainer(),
            updateHostContainer(current, workInProgress),
            bubbleProperties(workInProgress),
            null
          );

        case 10:
          return (
            popProvider(workInProgress.type._context),
            bubbleProperties(workInProgress),
            null
          );

        case 17:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            bubbleProperties(workInProgress),
            null
          );

        case 19:
          pop(suspenseStackCursor);
          type = workInProgress.memoizedState;
          if (null === type) return bubbleProperties(workInProgress), null;
          newProps = 0 !== (workInProgress.flags & 128);
          updatePayload = type.rendering;
          if (null === updatePayload) {
            if (newProps) cutOffTailIfNeeded(type, false);
            else {
              if (
                0 !== workInProgressRootExitStatus ||
                (null !== current && 0 !== (current.flags & 128))
              )
                for (current = workInProgress.child; null !== current; ) {
                  updatePayload = findFirstSuspended(current);

                  if (null !== updatePayload) {
                    workInProgress.flags |= 128;
                    cutOffTailIfNeeded(type, false);
                    current = updatePayload.updateQueue;
                    null !== current &&
                      ((workInProgress.updateQueue = current),
                      (workInProgress.flags |= 4));
                    workInProgress.subtreeFlags = 0;
                    current = renderLanes;

                    for (
                      renderLanes = workInProgress.child;
                      null !== renderLanes;

                    ) {
                      (newProps = renderLanes),
                        (type = current),
                        (newProps.flags &= 14680066),
                        (updatePayload = newProps.alternate),
                        null === updatePayload
                          ? ((newProps.childLanes = 0),
                            (newProps.lanes = type),
                            (newProps.child = null),
                            (newProps.subtreeFlags = 0),
                            (newProps.memoizedProps = null),
                            (newProps.memoizedState = null),
                            (newProps.updateQueue = null),
                            (newProps.dependencies = null),
                            (newProps.stateNode = null))
                          : ((newProps.childLanes = updatePayload.childLanes),
                            (newProps.lanes = updatePayload.lanes),
                            (newProps.child = updatePayload.child),
                            (newProps.subtreeFlags = 0),
                            (newProps.deletions = null),
                            (newProps.memoizedProps =
                              updatePayload.memoizedProps),
                            (newProps.memoizedState =
                              updatePayload.memoizedState),
                            (newProps.updateQueue = updatePayload.updateQueue),
                            (newProps.type = updatePayload.type),
                            (type = updatePayload.dependencies),
                            (newProps.dependencies =
                              null === type
                                ? null
                                : {
                                    lanes: type.lanes,
                                    firstContext: type.firstContext,
                                  })),
                        (renderLanes = renderLanes.sibling);
                    }

                    push(
                      suspenseStackCursor,
                      (suspenseStackCursor.current & 1) | 2
                    );
                    return workInProgress.child;
                  }

                  current = current.sibling;
                }
              null !== type.tail &&
                now() > workInProgressRootRenderTargetTime &&
                ((workInProgress.flags |= 128),
                (newProps = true),
                cutOffTailIfNeeded(type, false),
                (workInProgress.lanes = 4194304));
            }
          } else {
            if (!newProps)
              if (
                ((current = findFirstSuspended(updatePayload)),
                null !== current)
              ) {
                if (
                  ((workInProgress.flags |= 128),
                  (newProps = true),
                  (current = current.updateQueue),
                  null !== current &&
                    ((workInProgress.updateQueue = current),
                    (workInProgress.flags |= 4)),
                  cutOffTailIfNeeded(type, true),
                  null === type.tail &&
                    "hidden" === type.tailMode &&
                    !updatePayload.alternate)
                )
                  return bubbleProperties(workInProgress), null;
              } else
                2 * now() - type.renderingStartTime >
                  workInProgressRootRenderTargetTime &&
                  1073741824 !== renderLanes &&
                  ((workInProgress.flags |= 128),
                  (newProps = true),
                  cutOffTailIfNeeded(type, false),
                  (workInProgress.lanes = 4194304));
            type.isBackwards
              ? ((updatePayload.sibling = workInProgress.child),
                (workInProgress.child = updatePayload))
              : ((current = type.last),
                null !== current
                  ? (current.sibling = updatePayload)
                  : (workInProgress.child = updatePayload),
                (type.last = updatePayload));
          }
          if (null !== type.tail)
            return (
              (workInProgress = type.tail),
              (type.rendering = workInProgress),
              (type.tail = workInProgress.sibling),
              (type.renderingStartTime = now()),
              (workInProgress.sibling = null),
              (current = suspenseStackCursor.current),
              push(
                suspenseStackCursor,
                newProps ? (current & 1) | 2 : current & 1
              ),
              workInProgress
            );
          bubbleProperties(workInProgress);
          return null;

        case 22:
        case 23:
          return (
            popRenderLanes(),
            (renderLanes = null !== workInProgress.memoizedState),
            null !== current &&
              (null !== current.memoizedState) !== renderLanes &&
              (workInProgress.flags |= 8192),
            renderLanes && 0 !== (workInProgress.mode & 1)
              ? 0 !== (subtreeRenderLanes & 1073741824) &&
                (bubbleProperties(workInProgress),
                workInProgress.subtreeFlags & 6 &&
                  (workInProgress.flags |= 8192))
              : bubbleProperties(workInProgress),
            null
          );

        case 24:
          return null;

        case 25:
          return null;
      }

      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    }

    function unwindWork(current, workInProgress) {
      popTreeContext(workInProgress);

      switch (workInProgress.tag) {
        case 1:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            (current = workInProgress.flags),
            current & 65536
              ? ((workInProgress.flags = (current & -65537) | 128),
                workInProgress)
              : null
          );

        case 3:
          return (
            popHostContainer(),
            pop(didPerformWorkStackCursor),
            pop(contextStackCursor),
            resetWorkInProgressVersions(),
            (current = workInProgress.flags),
            0 !== (current & 65536) && 0 === (current & 128)
              ? ((workInProgress.flags = (current & -65537) | 128),
                workInProgress)
              : null
          );

        case 5:
          return popHostContext(workInProgress), null;

        case 13:
          pop(suspenseStackCursor);
          current = workInProgress.memoizedState;
          if (
            null !== current &&
            null !== current.dehydrated &&
            null === workInProgress.alternate
          )
            throw Error(
              "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
            );
          current = workInProgress.flags;
          return current & 65536
            ? ((workInProgress.flags = (current & -65537) | 128),
              workInProgress)
            : null;

        case 19:
          return pop(suspenseStackCursor), null;

        case 4:
          return popHostContainer(), null;

        case 10:
          return popProvider(workInProgress.type._context), null;

        case 22:
        case 23:
          return popRenderLanes(), null;

        case 24:
          return null;

        default:
          return null;
      }
    }

    var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
      nextEffect = null;

    function safelyDetachRef(current, nearestMountedAncestor) {
      var ref = current.ref;
      if (null !== ref)
        if ("function" === typeof ref)
          try {
            ref(null);
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          }
        else ref.current = null;
    }

    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }

    var shouldFireAfterActiveInstanceBlur = false;

    function commitBeforeMutationEffects(root, firstChild) {
      for (nextEffect = firstChild; null !== nextEffect; ) {
        if (
          ((root = nextEffect),
          (firstChild = root.child),
          0 !== (root.subtreeFlags & 1028) && null !== firstChild)
        )
          (firstChild.return = root), (nextEffect = firstChild);
        else
          for (; null !== nextEffect; ) {
            root = nextEffect;

            try {
              var current = root.alternate;
              if (0 !== (root.flags & 1024))
                switch (root.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;

                  case 1:
                    if (null !== current) {
                      var prevProps = current.memoizedProps,
                        prevState = current.memoizedState,
                        instance = root.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(
                          root.elementType === root.type
                            ? prevProps
                            : resolveDefaultProps(root.type, prevProps),
                          prevState
                        );
                      instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }

                    break;

                  case 3:
                    break;

                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;

                  default:
                    throw Error(
                      "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                    );
                }
            } catch (error) {
              captureCommitPhaseError(root, root.return, error);
            }

            firstChild = root.sibling;

            if (null !== firstChild) {
              firstChild.return = root.return;
              nextEffect = firstChild;
              break;
            }

            nextEffect = root.return;
          }
      }

      current = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      return current;
    }

    function commitHookEffectListUnmount(
      flags,
      finishedWork,
      nearestMountedAncestor
    ) {
      var updateQueue = finishedWork.updateQueue;
      updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;

      if (null !== updateQueue) {
        var effect = (updateQueue = updateQueue.next);

        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = undefined;
            undefined !== destroy &&
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
          }

          effect = effect.next;
        } while (effect !== updateQueue);
      }
    }

    function commitHookEffectListMount(flags, finishedWork) {
      finishedWork = finishedWork.updateQueue;
      finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

      if (null !== finishedWork) {
        var effect = (finishedWork = finishedWork.next);

        do {
          if ((effect.tag & flags) === flags) {
            var create$73 = effect.create;
            effect.destroy = create$73();
          }

          effect = effect.next;
        } while (effect !== finishedWork);
      }
    }

    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      null !== alternate &&
        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      fiber.stateNode = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function getHostSibling(fiber) {
      a: for (;;) {
        for (; null === fiber.sibling; ) {
          if (null === fiber.return || isHostParent(fiber.return)) return null;
          fiber = fiber.return;
        }

        fiber.sibling.return = fiber.return;

        for (
          fiber = fiber.sibling;
          5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;

        ) {
          if (fiber.flags & 2) continue a;
          if (null === fiber.child || 4 === fiber.tag) continue a;
          else (fiber.child.return = fiber), (fiber = fiber.child);
        }

        if (!(fiber.flags & 2)) return fiber.stateNode;
      }
    }

    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag) {
        if (((node = node.stateNode), before)) {
          if ("number" === typeof parent)
            throw Error("Container does not support insertBefore operation");
        } else
          ReactNativePrivateInterface.UIManager.setChildren(parent, [
            "number" === typeof node ? node : node._nativeTag,
          ]);
      } else if (4 !== tag && ((node = node.child), null !== node))
        for (
          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
            node = node.sibling;
          null !== node;

        ) {
          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
            (node = node.sibling);
        }
    }

    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag) {
        if (((node = node.stateNode), before)) {
          tag = parent._children;
          var index = tag.indexOf(node);
          0 <= index
            ? (tag.splice(index, 1),
              (before = tag.indexOf(before)),
              tag.splice(before, 0, node),
              ReactNativePrivateInterface.UIManager.manageChildren(
                parent._nativeTag,
                [index],
                [before],
                [],
                [],
                []
              ))
            : ((before = tag.indexOf(before)),
              tag.splice(before, 0, node),
              ReactNativePrivateInterface.UIManager.manageChildren(
                parent._nativeTag,
                [],
                [],
                ["number" === typeof node ? node : node._nativeTag],
                [before],
                []
              ));
        } else
          (before = "number" === typeof node ? node : node._nativeTag),
            (tag = parent._children),
            (index = tag.indexOf(node)),
            0 <= index
              ? (tag.splice(index, 1),
                tag.push(node),
                ReactNativePrivateInterface.UIManager.manageChildren(
                  parent._nativeTag,
                  [index],
                  [tag.length - 1],
                  [],
                  [],
                  []
                ))
              : (tag.push(node),
                ReactNativePrivateInterface.UIManager.manageChildren(
                  parent._nativeTag,
                  [],
                  [],
                  [before],
                  [tag.length - 1],
                  []
                ));
      } else if (4 !== tag && ((node = node.child), null !== node))
        for (
          insertOrAppendPlacementNode(node, before, parent),
            node = node.sibling;
          null !== node;

        ) {
          insertOrAppendPlacementNode(node, before, parent),
            (node = node.sibling);
        }
    }

    var hostParent = null,
      hostParentIsContainer = false;

    function recursivelyTraverseDeletionEffects(
      finishedRoot,
      nearestMountedAncestor,
      parent
    ) {
      for (parent = parent.child; null !== parent; ) {
        commitDeletionEffectsOnFiber(
          finishedRoot,
          nearestMountedAncestor,
          parent
        ),
          (parent = parent.sibling);
      }
    }

    function commitDeletionEffectsOnFiber(
      finishedRoot,
      nearestMountedAncestor,
      deletedFiber
    ) {
      if (
        injectedHook &&
        "function" === typeof injectedHook.onCommitFiberUnmount
      )
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {}

      switch (deletedFiber.tag) {
        case 5:
          safelyDetachRef(deletedFiber, nearestMountedAncestor);

        case 6:
          var prevHostParent = hostParent,
            prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          null !== hostParent &&
            (hostParentIsContainer
              ? ((finishedRoot = hostParent),
                recursivelyUncacheFiberNode(deletedFiber.stateNode),
                ReactNativePrivateInterface.UIManager.manageChildren(
                  finishedRoot,
                  [],
                  [],
                  [],
                  [],
                  [0]
                ))
              : ((finishedRoot = hostParent),
                (nearestMountedAncestor = deletedFiber.stateNode),
                recursivelyUncacheFiberNode(nearestMountedAncestor),
                (deletedFiber = finishedRoot._children),
                (nearestMountedAncestor = deletedFiber.indexOf(
                  nearestMountedAncestor
                )),
                deletedFiber.splice(nearestMountedAncestor, 1),
                ReactNativePrivateInterface.UIManager.manageChildren(
                  finishedRoot._nativeTag,
                  [],
                  [],
                  [],
                  [],
                  [nearestMountedAncestor]
                )));
          break;

        case 18:
          null !== hostParent && shim(hostParent, deletedFiber.stateNode);
          break;

        case 4:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = true;
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;

        case 0:
        case 11:
        case 14:
        case 15:
          prevHostParent = deletedFiber.updateQueue;

          if (
            null !== prevHostParent &&
            ((prevHostParent = prevHostParent.lastEffect),
            null !== prevHostParent)
          ) {
            prevHostParentIsContainer = prevHostParent = prevHostParent.next;

            do {
              var _effect = prevHostParentIsContainer,
                destroy = _effect.destroy;
              _effect = _effect.tag;
              undefined !== destroy &&
                (0 !== (_effect & 2)
                  ? safelyCallDestroy(
                      deletedFiber,
                      nearestMountedAncestor,
                      destroy
                    )
                  : 0 !== (_effect & 4) &&
                    safelyCallDestroy(
                      deletedFiber,
                      nearestMountedAncestor,
                      destroy
                    ));
              prevHostParentIsContainer = prevHostParentIsContainer.next;
            } while (prevHostParentIsContainer !== prevHostParent);
          }

          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 1:
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          prevHostParent = deletedFiber.stateNode;
          if ("function" === typeof prevHostParent.componentWillUnmount)
            try {
              (prevHostParent.props = deletedFiber.memoizedProps),
                (prevHostParent.state = deletedFiber.memoizedState),
                prevHostParent.componentWillUnmount();
            } catch (error) {
              captureCommitPhaseError(
                deletedFiber,
                nearestMountedAncestor,
                error
              );
            }
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 21:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 22:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        default:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
      }
    }

    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;

      if (null !== wakeables) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        null === retryCache &&
          (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        wakeables.forEach(function (wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          retryCache.has(wakeable) ||
            (retryCache.add(wakeable), wakeable.then(retry, retry));
        });
      }
    }

    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
      var deletions = parentFiber.deletions;
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];

          try {
            var root = root$jscomp$0,
              returnFiber = parentFiber,
              parent = returnFiber;

            a: for (; null !== parent; ) {
              switch (parent.tag) {
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;

                case 3:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;

                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;
              }

              parent = parent.return;
            }

            if (null === hostParent)
              throw Error(
                "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
              );
            commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
            hostParent = null;
            hostParentIsContainer = false;
            var alternate = childToDelete.alternate;
            null !== alternate && (alternate.return = null);
            childToDelete.return = null;
          } catch (error) {
            captureCommitPhaseError(childToDelete, parentFiber, error);
          }
        }
      if (parentFiber.subtreeFlags & 12854)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
            (parentFiber = parentFiber.sibling);
        }
    }

    function commitMutationEffectsOnFiber(finishedWork, root) {
      var current = finishedWork.alternate,
        flags = finishedWork.flags;

      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);

          if (flags & 4) {
            try {
              commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
                commitHookEffectListMount(3, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }

            try {
              commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
            } catch (error$83) {
              captureCommitPhaseError(
                finishedWork,
                finishedWork.return,
                error$83
              );
            }
          }

          break;

        case 1:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            null !== current &&
            safelyDetachRef(current, current.return);
          break;

        case 5:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            null !== current &&
            safelyDetachRef(current, current.return);

          if (flags & 4) {
            var instance$85 = finishedWork.stateNode;

            if (null != instance$85) {
              var newProps = finishedWork.memoizedProps,
                oldProps = null !== current ? current.memoizedProps : newProps,
                updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (null !== updatePayload)
                try {
                  var viewConfig = instance$85.viewConfig;
                  instanceProps.set(instance$85._nativeTag, newProps);
                  var updatePayload$jscomp$0 = diffProperties(
                    null,
                    oldProps,
                    newProps,
                    viewConfig.validAttributes
                  );
                  null != updatePayload$jscomp$0 &&
                    ReactNativePrivateInterface.UIManager.updateView(
                      instance$85._nativeTag,
                      viewConfig.uiViewClassName,
                      updatePayload$jscomp$0
                    );
                } catch (error$86) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$86
                  );
                }
            }
          }

          break;

        case 6:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);

          if (flags & 4) {
            if (null === finishedWork.stateNode)
              throw Error(
                "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
              );
            viewConfig = finishedWork.stateNode;
            updatePayload$jscomp$0 = finishedWork.memoizedProps;

            try {
              ReactNativePrivateInterface.UIManager.updateView(
                viewConfig,
                "RCTRawText",
                {
                  text: updatePayload$jscomp$0,
                }
              );
            } catch (error$87) {
              captureCommitPhaseError(
                finishedWork,
                finishedWork.return,
                error$87
              );
            }
          }

          break;

        case 3:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 4:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 13:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          viewConfig = finishedWork.child;
          viewConfig.flags & 8192 &&
            null !== viewConfig.memoizedState &&
            (null === viewConfig.alternate ||
              null === viewConfig.alternate.memoizedState) &&
            (globalMostRecentFallbackTime = now());
          flags & 4 && attachSuspenseRetryListeners(finishedWork);
          break;

        case 22:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & 8192)
            a: for (
              viewConfig = null !== finishedWork.memoizedState,
                updatePayload$jscomp$0 = null,
                current = finishedWork;
              ;

            ) {
              if (5 === current.tag) {
                if (null === updatePayload$jscomp$0) {
                  updatePayload$jscomp$0 = current;

                  try {
                    if (((instance$85 = current.stateNode), viewConfig))
                      (newProps = instance$85.viewConfig),
                        (oldProps = diffProperties(
                          null,
                          emptyObject,
                          {
                            style: {
                              display: "none",
                            },
                          },
                          newProps.validAttributes
                        )),
                        ReactNativePrivateInterface.UIManager.updateView(
                          instance$85._nativeTag,
                          newProps.uiViewClassName,
                          oldProps
                        );
                    else {
                      updatePayload = current.stateNode;
                      var props = current.memoizedProps,
                        viewConfig$jscomp$0 = updatePayload.viewConfig,
                        prevProps = assign({}, props, {
                          style: [
                            props.style,
                            {
                              display: "none",
                            },
                          ],
                        });
                      var updatePayload$jscomp$1 = diffProperties(
                        null,
                        prevProps,
                        props,
                        viewConfig$jscomp$0.validAttributes
                      );
                      ReactNativePrivateInterface.UIManager.updateView(
                        updatePayload._nativeTag,
                        viewConfig$jscomp$0.uiViewClassName,
                        updatePayload$jscomp$1
                      );
                    }
                  } catch (error) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error
                    );
                  }
                }
              } else if (6 === current.tag) {
                if (null === updatePayload$jscomp$0)
                  try {
                    throw Error("Not yet implemented.");
                  } catch (error$78) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error$78
                    );
                  }
              } else if (
                ((22 !== current.tag && 23 !== current.tag) ||
                  null === current.memoizedState ||
                  current === finishedWork) &&
                null !== current.child
              ) {
                current.child.return = current;
                current = current.child;
                continue;
              }

              if (current === finishedWork) break a;

              for (; null === current.sibling; ) {
                if (null === current.return || current.return === finishedWork)
                  break a;
                updatePayload$jscomp$0 === current &&
                  (updatePayload$jscomp$0 = null);
                current = current.return;
              }

              updatePayload$jscomp$0 === current &&
                (updatePayload$jscomp$0 = null);
              current.sibling.return = current.return;
              current = current.sibling;
            }
          break;

        case 19:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && attachSuspenseRetryListeners(finishedWork);
          break;

        case 21:
          break;

        default:
          recursivelyTraverseMutationEffects(root, finishedWork),
            commitReconciliationEffects(finishedWork);
      }
    }

    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;

      if (flags & 2) {
        try {
          a: {
            for (var parent = finishedWork.return; null !== parent; ) {
              if (isHostParent(parent)) {
                var JSCompiler_inline_result = parent;
                break a;
              }

              parent = parent.return;
            }

            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          }

          switch (JSCompiler_inline_result.tag) {
            case 5:
              var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
              JSCompiler_inline_result.flags & 32 &&
                (JSCompiler_inline_result.flags &= -33);
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(
                finishedWork,
                before,
                parent$jscomp$0
              );
              break;

            case 3:
            case 4:
              var parent$79 = JSCompiler_inline_result.stateNode.containerInfo,
                before$80 = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                before$80,
                parent$79
              );
              break;

            default:
              throw Error(
                "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
              );
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }

        finishedWork.flags &= -3;
      }

      flags & 4096 && (finishedWork.flags &= -4097);
    }

    function commitLayoutEffects(finishedWork) {
      for (nextEffect = finishedWork; null !== nextEffect; ) {
        var fiber = nextEffect,
          firstChild = fiber.child;
        if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild)
          (firstChild.return = fiber), (nextEffect = firstChild);
        else
          for (fiber = finishedWork; null !== nextEffect; ) {
            firstChild = nextEffect;

            if (0 !== (firstChild.flags & 8772)) {
              var current = firstChild.alternate;

              try {
                if (0 !== (firstChild.flags & 8772))
                  switch (firstChild.tag) {
                    case 0:
                    case 11:
                    case 15:
                      commitHookEffectListMount(5, firstChild);
                      break;

                    case 1:
                      var instance = firstChild.stateNode;
                      if (firstChild.flags & 4)
                        if (null === current) instance.componentDidMount();
                        else {
                          var prevProps =
                            firstChild.elementType === firstChild.type
                              ? current.memoizedProps
                              : resolveDefaultProps(
                                  firstChild.type,
                                  current.memoizedProps
                                );
                          instance.componentDidUpdate(
                            prevProps,
                            current.memoizedState,
                            instance.__reactInternalSnapshotBeforeUpdate
                          );
                        }
                      var updateQueue = firstChild.updateQueue;
                      null !== updateQueue &&
                        commitUpdateQueue(firstChild, updateQueue, instance);
                      break;

                    case 3:
                      var updateQueue$74 = firstChild.updateQueue;

                      if (null !== updateQueue$74) {
                        current = null;
                        if (null !== firstChild.child)
                          switch (firstChild.child.tag) {
                            case 5:
                              current = firstChild.child.stateNode;
                              break;

                            case 1:
                              current = firstChild.child.stateNode;
                          }
                        commitUpdateQueue(firstChild, updateQueue$74, current);
                      }

                      break;

                    case 5:
                      break;

                    case 6:
                      break;

                    case 4:
                      break;

                    case 12:
                      break;

                    case 13:
                      break;

                    case 19:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                      break;

                    default:
                      throw Error(
                        "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                      );
                  }

                if (firstChild.flags & 512) {
                  current = undefined;
                  var ref = firstChild.ref;

                  if (null !== ref) {
                    var instance$jscomp$0 = firstChild.stateNode;

                    switch (firstChild.tag) {
                      case 5:
                        current = instance$jscomp$0;
                        break;

                      default:
                        current = instance$jscomp$0;
                    }

                    "function" === typeof ref
                      ? ref(current)
                      : (ref.current = current);
                  }
                }
              } catch (error) {
                captureCommitPhaseError(firstChild, firstChild.return, error);
              }
            }

            if (firstChild === fiber) {
              nextEffect = null;
              break;
            }

            current = firstChild.sibling;

            if (null !== current) {
              current.return = firstChild.return;
              nextEffect = current;
              break;
            }

            nextEffect = firstChild.return;
          }
      }
    }

    var ceil = Math.ceil,
      ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
      executionContext = 0,
      workInProgressRoot = null,
      workInProgress = null,
      workInProgressRootRenderLanes = 0,
      subtreeRenderLanes = 0,
      subtreeRenderLanesCursor = createCursor(0),
      workInProgressRootExitStatus = 0,
      workInProgressRootFatalError = null,
      workInProgressRootSkippedLanes = 0,
      workInProgressRootInterleavedUpdatedLanes = 0,
      workInProgressRootPingedLanes = 0,
      workInProgressRootConcurrentErrors = null,
      workInProgressRootRecoverableErrors = null,
      globalMostRecentFallbackTime = 0,
      workInProgressRootRenderTargetTime = Infinity,
      workInProgressTransitions = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsLanes = 0,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = -1,
      currentEventTransitionLane = 0;

    function requestEventTime() {
      return 0 !== (executionContext & 6)
        ? now()
        : -1 !== currentEventTime
        ? currentEventTime
        : (currentEventTime = now());
    }

    function requestUpdateLane(fiber) {
      if (0 === (fiber.mode & 1)) return 1;
      if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      if (null !== ReactCurrentBatchConfig.transition)
        return (
          0 === currentEventTransitionLane &&
            (currentEventTransitionLane = claimNextTransitionLane()),
          currentEventTransitionLane
        );
      fiber = currentUpdatePriority;
      return 0 !== fiber ? fiber : 16;
    }

    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
      if (50 < nestedUpdateCount)
        throw (
          ((nestedUpdateCount = 0),
          (rootWithNestedUpdates = null),
          Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          ))
        );
      var root = markUpdateLaneFromFiberToRoot(fiber, lane);
      if (null === root) return null;
      markRootUpdated(root, lane, eventTime);
      if (0 === (executionContext & 2) || root !== workInProgressRoot)
        root === workInProgressRoot &&
          (0 === (executionContext & 2) &&
            (workInProgressRootInterleavedUpdatedLanes |= lane),
          4 === workInProgressRootExitStatus &&
            markRootSuspended$1(root, workInProgressRootRenderLanes)),
          ensureRootIsScheduled(root, eventTime),
          1 === lane &&
            0 === executionContext &&
            0 === (fiber.mode & 1) &&
            ((workInProgressRootRenderTargetTime = now() + 500),
            includesLegacySyncCallbacks && flushSyncCallbacks());
      return root;
    }

    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      null !== alternate && (alternate.lanes |= lane);
      alternate = sourceFiber;

      for (sourceFiber = sourceFiber.return; null !== sourceFiber; ) {
        (sourceFiber.childLanes |= lane),
          (alternate = sourceFiber.alternate),
          null !== alternate && (alternate.childLanes |= lane),
          (alternate = sourceFiber),
          (sourceFiber = sourceFiber.return);
      }

      return 3 === alternate.tag ? alternate.stateNode : null;
    }

    function isInterleavedUpdate(fiber) {
      return (
        (null !== workInProgressRoot || null !== interleavedQueues) &&
        0 !== (fiber.mode & 1) &&
        0 === (executionContext & 2)
      );
    }

    function ensureRootIsScheduled(root, currentTime) {
      for (
        var existingCallbackNode = root.callbackNode,
          suspendedLanes = root.suspendedLanes,
          pingedLanes = root.pingedLanes,
          expirationTimes = root.expirationTimes,
          lanes = root.pendingLanes;
        0 < lanes;

      ) {
        var index$6 = 31 - clz32(lanes),
          lane = 1 << index$6,
          expirationTime = expirationTimes[index$6];

        if (-1 === expirationTime) {
          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
            expirationTimes[index$6] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);

        lanes &= ~lane;
      }

      suspendedLanes = getNextLanes(
        root,
        root === workInProgressRoot ? workInProgressRootRenderLanes : 0
      );
      if (0 === suspendedLanes)
        null !== existingCallbackNode && cancelCallback(existingCallbackNode),
          (root.callbackNode = null),
          (root.callbackPriority = 0);
      else if (
        ((currentTime = suspendedLanes & -suspendedLanes),
        root.callbackPriority !== currentTime)
      ) {
        null != existingCallbackNode && cancelCallback(existingCallbackNode);
        if (1 === currentTime)
          0 === root.tag
            ? ((existingCallbackNode = performSyncWorkOnRoot.bind(null, root)),
              (includesLegacySyncCallbacks = true),
              null === syncQueue
                ? (syncQueue = [existingCallbackNode])
                : syncQueue.push(existingCallbackNode))
            : ((existingCallbackNode = performSyncWorkOnRoot.bind(null, root)),
              null === syncQueue
                ? (syncQueue = [existingCallbackNode])
                : syncQueue.push(existingCallbackNode)),
            scheduleCallback(ImmediatePriority, flushSyncCallbacks),
            (existingCallbackNode = null);
        else {
          switch (lanesToEventPriority(suspendedLanes)) {
            case 1:
              existingCallbackNode = ImmediatePriority;
              break;

            case 4:
              existingCallbackNode = UserBlockingPriority;
              break;

            case 16:
              existingCallbackNode = NormalPriority;
              break;

            case 536870912:
              existingCallbackNode = IdlePriority;
              break;

            default:
              existingCallbackNode = NormalPriority;
          }

          existingCallbackNode = scheduleCallback$1(
            existingCallbackNode,
            performConcurrentWorkOnRoot.bind(null, root)
          );
        }
        root.callbackPriority = currentTime;
        root.callbackNode = existingCallbackNode;
      }
    }

    function performConcurrentWorkOnRoot(root, didTimeout) {
      currentEventTime = -1;
      currentEventTransitionLane = 0;
      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      var originalCallbackNode = root.callbackNode;
      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
        return null;
      var lanes = getNextLanes(
        root,
        root === workInProgressRoot ? workInProgressRootRenderLanes : 0
      );
      if (0 === lanes) return null;
      if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout)
        didTimeout = renderRootSync(root, lanes);
      else {
        didTimeout = lanes;
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher();
        if (
          workInProgressRoot !== root ||
          workInProgressRootRenderLanes !== didTimeout
        )
          (workInProgressTransitions = null),
            (workInProgressRootRenderTargetTime = now() + 500),
            prepareFreshStack(root, didTimeout);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (1);

        resetContextDependencies();
        ReactCurrentDispatcher$2.current = prevDispatcher;
        executionContext = prevExecutionContext;
        null !== workInProgress
          ? (didTimeout = 0)
          : ((workInProgressRoot = null),
            (workInProgressRootRenderLanes = 0),
            (didTimeout = workInProgressRootExitStatus));
      }

      if (0 !== didTimeout) {
        2 === didTimeout &&
          ((prevExecutionContext = getLanesToRetrySynchronouslyOnError(root)),
          0 !== prevExecutionContext &&
            ((lanes = prevExecutionContext),
            (didTimeout = recoverFromConcurrentError(
              root,
              prevExecutionContext
            ))));
        if (1 === didTimeout)
          throw (
            ((originalCallbackNode = workInProgressRootFatalError),
            prepareFreshStack(root, 0),
            markRootSuspended$1(root, lanes),
            ensureRootIsScheduled(root, now()),
            originalCallbackNode)
          );
        if (6 === didTimeout) markRootSuspended$1(root, lanes);
        else {
          prevExecutionContext = root.current.alternate;
          if (
            0 === (lanes & 30) &&
            !isRenderConsistentWithExternalStores(prevExecutionContext) &&
            ((didTimeout = renderRootSync(root, lanes)),
            2 === didTimeout &&
              ((prevDispatcher = getLanesToRetrySynchronouslyOnError(root)),
              0 !== prevDispatcher &&
                ((lanes = prevDispatcher),
                (didTimeout = recoverFromConcurrentError(
                  root,
                  prevDispatcher
                )))),
            1 === didTimeout)
          )
            throw (
              ((originalCallbackNode = workInProgressRootFatalError),
              prepareFreshStack(root, 0),
              markRootSuspended$1(root, lanes),
              ensureRootIsScheduled(root, now()),
              originalCallbackNode)
            );
          root.finishedWork = prevExecutionContext;
          root.finishedLanes = lanes;

          switch (didTimeout) {
            case 0:
            case 1:
              throw Error("Root did not complete. This is a bug in React.");

            case 2:
              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 3:
              markRootSuspended$1(root, lanes);

              if (
                (lanes & 130023424) === lanes &&
                ((didTimeout = globalMostRecentFallbackTime + 500 - now()),
                10 < didTimeout)
              ) {
                if (0 !== getNextLanes(root, 0)) break;
                prevExecutionContext = root.suspendedLanes;

                if ((prevExecutionContext & lanes) !== lanes) {
                  requestEventTime();
                  root.pingedLanes |=
                    root.suspendedLanes & prevExecutionContext;
                  break;
                }

                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(
                    null,
                    root,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions
                  ),
                  didTimeout
                );
                break;
              }

              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 4:
              markRootSuspended$1(root, lanes);
              if ((lanes & 4194240) === lanes) break;
              didTimeout = root.eventTimes;

              for (prevExecutionContext = -1; 0 < lanes; ) {
                var index$5 = 31 - clz32(lanes);
                prevDispatcher = 1 << index$5;
                index$5 = didTimeout[index$5];
                index$5 > prevExecutionContext &&
                  (prevExecutionContext = index$5);
                lanes &= ~prevDispatcher;
              }

              lanes = prevExecutionContext;
              lanes = now() - lanes;
              lanes =
                (120 > lanes
                  ? 120
                  : 480 > lanes
                  ? 480
                  : 1080 > lanes
                  ? 1080
                  : 1920 > lanes
                  ? 1920
                  : 3e3 > lanes
                  ? 3e3
                  : 4320 > lanes
                  ? 4320
                  : 1960 * ceil(lanes / 1960)) - lanes;

              if (10 < lanes) {
                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(
                    null,
                    root,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions
                  ),
                  lanes
                );
                break;
              }

              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 5:
              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            default:
              throw Error("Unknown root exit status.");
          }
        }
      }

      ensureRootIsScheduled(root, now());
      return root.callbackNode === originalCallbackNode
        ? performConcurrentWorkOnRoot.bind(null, root)
        : null;
    }

    function recoverFromConcurrentError(root, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      root.current.memoizedState.isDehydrated &&
        (prepareFreshStack(root, errorRetryLanes).flags |= 256);
      root = renderRootSync(root, errorRetryLanes);
      2 !== root &&
        ((errorRetryLanes = workInProgressRootRecoverableErrors),
        (workInProgressRootRecoverableErrors = errorsFromFirstAttempt),
        null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
      return root;
    }

    function queueRecoverableErrors(errors) {
      null === workInProgressRootRecoverableErrors
        ? (workInProgressRootRecoverableErrors = errors)
        : workInProgressRootRecoverableErrors.push.apply(
            workInProgressRootRecoverableErrors,
            errors
          );
    }

    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node = finishedWork; ; ) {
        if (node.flags & 16384) {
          var updateQueue = node.updateQueue;
          if (
            null !== updateQueue &&
            ((updateQueue = updateQueue.stores), null !== updateQueue)
          )
            for (var i = 0; i < updateQueue.length; i++) {
              var check = updateQueue[i],
                getSnapshot = check.getSnapshot;
              check = check.value;

              try {
                if (!objectIs(getSnapshot(), check)) return false;
              } catch (error) {
                return false;
              }
            }
        }

        updateQueue = node.child;
        if (node.subtreeFlags & 16384 && null !== updateQueue)
          (updateQueue.return = node), (node = updateQueue);
        else {
          if (node === finishedWork) break;

          for (; null === node.sibling; ) {
            if (null === node.return || node.return === finishedWork)
              return true;
            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      return true;
    }

    function markRootSuspended$1(root, suspendedLanes) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;

      for (root = root.expirationTimes; 0 < suspendedLanes; ) {
        var index$7 = 31 - clz32(suspendedLanes),
          lane = 1 << index$7;
        root[index$7] = -1;
        suspendedLanes &= ~lane;
      }
    }

    function performSyncWorkOnRoot(root) {
      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      flushPassiveEffects();
      var lanes = getNextLanes(root, 0);
      if (0 === (lanes & 1)) return ensureRootIsScheduled(root, now()), null;
      var exitStatus = renderRootSync(root, lanes);

      if (0 !== root.tag && 2 === exitStatus) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
        0 !== errorRetryLanes &&
          ((lanes = errorRetryLanes),
          (exitStatus = recoverFromConcurrentError(root, errorRetryLanes)));
      }

      if (1 === exitStatus)
        throw (
          ((exitStatus = workInProgressRootFatalError),
          prepareFreshStack(root, 0),
          markRootSuspended$1(root, lanes),
          ensureRootIsScheduled(root, now()),
          exitStatus)
        );
      if (6 === exitStatus)
        throw Error("Root did not complete. This is a bug in React.");
      root.finishedWork = root.current.alternate;
      root.finishedLanes = lanes;
      commitRoot(
        root,
        workInProgressRootRecoverableErrors,
        workInProgressTransitions
      );
      ensureRootIsScheduled(root, now());
      return null;
    }

    function popRenderLanes() {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor);
    }

    function prepareFreshStack(root, lanes) {
      root.finishedWork = null;
      root.finishedLanes = 0;
      var timeoutHandle = root.timeoutHandle;
      -1 !== timeoutHandle &&
        ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));
      if (null !== workInProgress)
        for (timeoutHandle = workInProgress.return; null !== timeoutHandle; ) {
          var interruptedWork = timeoutHandle;
          popTreeContext(interruptedWork);

          switch (interruptedWork.tag) {
            case 1:
              interruptedWork = interruptedWork.type.childContextTypes;
              null !== interruptedWork &&
                undefined !== interruptedWork &&
                popContext();
              break;

            case 3:
              popHostContainer();
              pop(didPerformWorkStackCursor);
              pop(contextStackCursor);
              resetWorkInProgressVersions();
              break;

            case 5:
              popHostContext(interruptedWork);
              break;

            case 4:
              popHostContainer();
              break;

            case 13:
              pop(suspenseStackCursor);
              break;

            case 19:
              pop(suspenseStackCursor);
              break;

            case 10:
              popProvider(interruptedWork.type._context);
              break;

            case 22:
            case 23:
              popRenderLanes();
          }

          timeoutHandle = timeoutHandle.return;
        }
      workInProgressRoot = root;
      workInProgress = root = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = 0;
      workInProgressRootFatalError = null;
      workInProgressRootPingedLanes =
        workInProgressRootInterleavedUpdatedLanes =
        workInProgressRootSkippedLanes =
          0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
        null;

      if (null !== interleavedQueues) {
        for (lanes = 0; lanes < interleavedQueues.length; lanes++) {
          if (
            ((timeoutHandle = interleavedQueues[lanes]),
            (interruptedWork = timeoutHandle.interleaved),
            null !== interruptedWork)
          ) {
            timeoutHandle.interleaved = null;
            var firstInterleavedUpdate = interruptedWork.next,
              lastPendingUpdate = timeoutHandle.pending;

            if (null !== lastPendingUpdate) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              interruptedWork.next = firstPendingUpdate;
            }

            timeoutHandle.pending = interruptedWork;
          }
        }

        interleavedQueues = null;
      }

      return root;
    }

    function handleError(root$jscomp$0, thrownValue) {
      do {
        var erroredWork = workInProgress;

        try {
          resetContextDependencies();
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

          if (didScheduleRenderPhaseUpdate) {
            for (
              var hook = currentlyRenderingFiber$1.memoizedState;
              null !== hook;

            ) {
              var queue = hook.queue;
              null !== queue && (queue.pending = null);
              hook = hook.next;
            }

            didScheduleRenderPhaseUpdate = false;
          }

          renderLanes = 0;
          workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          ReactCurrentOwner$2.current = null;

          if (null === erroredWork || null === erroredWork.return) {
            workInProgressRootExitStatus = 1;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            break;
          }

          a: {
            var root = root$jscomp$0,
              returnFiber = erroredWork.return,
              sourceFiber = erroredWork,
              value = thrownValue;
            thrownValue = workInProgressRootRenderLanes;
            sourceFiber.flags |= 32768;

            if (
              null !== value &&
              "object" === typeof value &&
              "function" === typeof value.then
            ) {
              var wakeable = value,
                sourceFiber$jscomp$0 = sourceFiber,
                tag = sourceFiber$jscomp$0.tag;

              if (
                0 === (sourceFiber$jscomp$0.mode & 1) &&
                (0 === tag || 11 === tag || 15 === tag)
              ) {
                var currentSource = sourceFiber$jscomp$0.alternate;
                currentSource
                  ? ((sourceFiber$jscomp$0.updateQueue =
                      currentSource.updateQueue),
                    (sourceFiber$jscomp$0.memoizedState =
                      currentSource.memoizedState),
                    (sourceFiber$jscomp$0.lanes = currentSource.lanes))
                  : ((sourceFiber$jscomp$0.updateQueue = null),
                    (sourceFiber$jscomp$0.memoizedState = null));
              }

              b: {
                sourceFiber$jscomp$0 = returnFiber;

                do {
                  var JSCompiler_temp;

                  if ((JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag)) {
                    var nextState = sourceFiber$jscomp$0.memoizedState;
                    JSCompiler_temp =
                      null !== nextState
                        ? null !== nextState.dehydrated
                          ? true
                          : false
                        : true;
                  }

                  if (JSCompiler_temp) {
                    var suspenseBoundary = sourceFiber$jscomp$0;
                    break b;
                  }

                  sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
                } while (null !== sourceFiber$jscomp$0);

                suspenseBoundary = null;
              }

              if (null !== suspenseBoundary) {
                suspenseBoundary.flags &= -257;
                value = suspenseBoundary;
                sourceFiber$jscomp$0 = thrownValue;
                if (0 === (value.mode & 1)) {
                  if (value === returnFiber) value.flags |= 65536;
                  else {
                    value.flags |= 128;
                    sourceFiber.flags |= 131072;
                    sourceFiber.flags &= -52805;
                    if (1 === sourceFiber.tag)
                      if (null === sourceFiber.alternate) sourceFiber.tag = 17;
                      else {
                        var update = createUpdate(-1, 1);
                        update.tag = 2;
                        enqueueUpdate(sourceFiber, update);
                      }
                    sourceFiber.lanes |= 1;
                  }
                } else
                  (value.flags |= 65536), (value.lanes = sourceFiber$jscomp$0);
                suspenseBoundary.mode & 1 &&
                  attachPingListener(root, wakeable, thrownValue);
                thrownValue = suspenseBoundary;
                root = wakeable;
                var wakeables = thrownValue.updateQueue;

                if (null === wakeables) {
                  var updateQueue = new Set();
                  updateQueue.add(root);
                  thrownValue.updateQueue = updateQueue;
                } else wakeables.add(root);

                break a;
              } else {
                if (0 === (thrownValue & 1)) {
                  attachPingListener(root, wakeable, thrownValue);
                  renderDidSuspendDelayIfPossible();
                  break a;
                }

                value = Error(
                  "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."
                );
              }
            }

            root = value;
            4 !== workInProgressRootExitStatus &&
              (workInProgressRootExitStatus = 2);
            null === workInProgressRootConcurrentErrors
              ? (workInProgressRootConcurrentErrors = [root])
              : workInProgressRootConcurrentErrors.push(root);
            value = createCapturedValue(value, sourceFiber);
            root = returnFiber;

            do {
              switch (root.tag) {
                case 3:
                  wakeable = value;
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$jscomp$0 = createRootErrorUpdate(
                    root,
                    wakeable,
                    thrownValue
                  );
                  enqueueCapturedUpdate(root, update$jscomp$0);
                  break a;

                case 1:
                  wakeable = value;
                  var ctor = root.type,
                    instance = root.stateNode;

                  if (
                    0 === (root.flags & 128) &&
                    ("function" === typeof ctor.getDerivedStateFromError ||
                      (null !== instance &&
                        "function" === typeof instance.componentDidCatch &&
                        (null === legacyErrorBoundariesThatAlreadyFailed ||
                          !legacyErrorBoundariesThatAlreadyFailed.has(
                            instance
                          ))))
                  ) {
                    root.flags |= 65536;
                    thrownValue &= -thrownValue;
                    root.lanes |= thrownValue;
                    var update$34 = createClassErrorUpdate(
                      root,
                      wakeable,
                      thrownValue
                    );
                    enqueueCapturedUpdate(root, update$34);
                    break a;
                  }
              }

              root = root.return;
            } while (null !== root);
          }

          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          workInProgress === erroredWork &&
            null !== erroredWork &&
            (workInProgress = erroredWork = erroredWork.return);
          continue;
        }

        break;
      } while (1);
    }

    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }

    function renderDidSuspendDelayIfPossible() {
      if (
        0 === workInProgressRootExitStatus ||
        3 === workInProgressRootExitStatus ||
        2 === workInProgressRootExitStatus
      )
        workInProgressRootExitStatus = 4;
      null === workInProgressRoot ||
        (0 === (workInProgressRootSkippedLanes & 268435455) &&
          0 === (workInProgressRootInterleavedUpdatedLanes & 268435455)) ||
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }

    function renderRootSync(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (
        workInProgressRoot !== root ||
        workInProgressRootRenderLanes !== lanes
      )
        (workInProgressTransitions = null), prepareFreshStack(root, lanes);

      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (1);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      ReactCurrentDispatcher$2.current = prevDispatcher;
      if (null !== workInProgress)
        throw Error(
          "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."
        );
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      return workInProgressRootExitStatus;
    }

    function workLoopSync() {
      for (; null !== workInProgress; ) {
        performUnitOfWork(workInProgress);
      }
    }

    function workLoopConcurrent() {
      for (; null !== workInProgress && !shouldYield(); ) {
        performUnitOfWork(workInProgress);
      }
    }

    function performUnitOfWork(unitOfWork) {
      var next = beginWork$1(
        unitOfWork.alternate,
        unitOfWork,
        subtreeRenderLanes
      );
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
      ReactCurrentOwner$2.current = null;
    }

    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;

      do {
        var current = completedWork.alternate;
        unitOfWork = completedWork.return;

        if (0 === (completedWork.flags & 32768)) {
          if (
            ((current = completeWork(
              current,
              completedWork,
              subtreeRenderLanes
            )),
            null !== current)
          ) {
            workInProgress = current;
            return;
          }
        } else {
          current = unwindWork(current, completedWork);

          if (null !== current) {
            current.flags &= 32767;
            workInProgress = current;
            return;
          }

          if (null !== unitOfWork)
            (unitOfWork.flags |= 32768),
              (unitOfWork.subtreeFlags = 0),
              (unitOfWork.deletions = null);
          else {
            workInProgressRootExitStatus = 6;
            workInProgress = null;
            return;
          }
        }

        completedWork = completedWork.sibling;

        if (null !== completedWork) {
          workInProgress = completedWork;
          return;
        }

        workInProgress = completedWork = unitOfWork;
      } while (null !== completedWork);

      0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
    }

    function commitRoot(root, recoverableErrors, transitions) {
      var previousUpdateLanePriority = currentUpdatePriority,
        prevTransition = ReactCurrentBatchConfig$2.transition;

      try {
        (ReactCurrentBatchConfig$2.transition = null),
          (currentUpdatePriority = 1),
          commitRootImpl(
            root,
            recoverableErrors,
            transitions,
            previousUpdateLanePriority
          );
      } finally {
        (ReactCurrentBatchConfig$2.transition = prevTransition),
          (currentUpdatePriority = previousUpdateLanePriority);
      }

      return null;
    }

    function commitRootImpl(
      root,
      recoverableErrors,
      transitions,
      renderPriorityLevel
    ) {
      do {
        flushPassiveEffects();
      } while (null !== rootWithPendingPassiveEffects);

      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      transitions = root.finishedWork;
      var lanes = root.finishedLanes;
      if (null === transitions) return null;
      root.finishedWork = null;
      root.finishedLanes = 0;
      if (transitions === root.current)
        throw Error(
          "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
        );
      root.callbackNode = null;
      root.callbackPriority = 0;
      var remainingLanes = transitions.lanes | transitions.childLanes;
      markRootFinished(root, remainingLanes);
      root === workInProgressRoot &&
        ((workInProgress = workInProgressRoot = null),
        (workInProgressRootRenderLanes = 0));
      (0 === (transitions.subtreeFlags & 2064) &&
        0 === (transitions.flags & 2064)) ||
        rootDoesHavePassiveEffects ||
        ((rootDoesHavePassiveEffects = true),
        scheduleCallback$1(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        }));
      remainingLanes = 0 !== (transitions.flags & 15990);

      if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
        remainingLanes = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = null;
        var previousPriority = currentUpdatePriority;
        currentUpdatePriority = 1;
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root, transitions);
        commitMutationEffectsOnFiber(transitions, root);
        root.current = transitions;
        commitLayoutEffects(transitions, root, lanes);
        requestPaint();
        executionContext = prevExecutionContext;
        currentUpdatePriority = previousPriority;
        ReactCurrentBatchConfig$2.transition = remainingLanes;
      } else root.current = transitions;

      rootDoesHavePassiveEffects &&
        ((rootDoesHavePassiveEffects = false),
        (rootWithPendingPassiveEffects = root),
        (pendingPassiveEffectsLanes = lanes));
      remainingLanes = root.pendingLanes;
      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
      onCommitRoot(transitions.stateNode, renderPriorityLevel);
      ensureRootIsScheduled(root, now());
      if (null !== recoverableErrors)
        for (
          renderPriorityLevel = root.onRecoverableError, transitions = 0;
          transitions < recoverableErrors.length;
          transitions++
        ) {
          renderPriorityLevel(recoverableErrors[transitions]);
        }
      if (hasUncaughtError)
        throw (
          ((hasUncaughtError = false),
          (root = firstUncaughtError),
          (firstUncaughtError = null),
          root)
        );
      0 !== (pendingPassiveEffectsLanes & 1) &&
        0 !== root.tag &&
        flushPassiveEffects();
      remainingLanes = root.pendingLanes;
      0 !== (remainingLanes & 1)
        ? root === rootWithNestedUpdates
          ? nestedUpdateCount++
          : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
        : (nestedUpdateCount = 0);
      flushSyncCallbacks();
      return null;
    }

    function flushPassiveEffects() {
      if (null !== rootWithPendingPassiveEffects) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
          prevTransition = ReactCurrentBatchConfig$2.transition,
          previousPriority = currentUpdatePriority;

        try {
          ReactCurrentBatchConfig$2.transition = null;
          currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
          if (null === rootWithPendingPassiveEffects)
            var JSCompiler_inline_result = false;
          else {
            renderPriority = rootWithPendingPassiveEffects;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = 0;
            if (0 !== (executionContext & 6))
              throw Error(
                "Cannot flush passive effects while already rendering."
              );
            var prevExecutionContext = executionContext;
            executionContext |= 4;

            for (nextEffect = renderPriority.current; null !== nextEffect; ) {
              var fiber = nextEffect,
                child = fiber.child;

              if (0 !== (nextEffect.flags & 16)) {
                var deletions = fiber.deletions;

                if (null !== deletions) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];

                    for (nextEffect = fiberToDelete; null !== nextEffect; ) {
                      var fiber$jscomp$0 = nextEffect;

                      switch (fiber$jscomp$0.tag) {
                        case 0:
                        case 11:
                        case 15:
                          commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                      }

                      var child$jscomp$0 = fiber$jscomp$0.child;
                      if (null !== child$jscomp$0)
                        (child$jscomp$0.return = fiber$jscomp$0),
                          (nextEffect = child$jscomp$0);
                      else
                        for (; null !== nextEffect; ) {
                          fiber$jscomp$0 = nextEffect;
                          var sibling = fiber$jscomp$0.sibling,
                            returnFiber = fiber$jscomp$0.return;
                          detachFiberAfterEffects(fiber$jscomp$0);

                          if (fiber$jscomp$0 === fiberToDelete) {
                            nextEffect = null;
                            break;
                          }

                          if (null !== sibling) {
                            sibling.return = returnFiber;
                            nextEffect = sibling;
                            break;
                          }

                          nextEffect = returnFiber;
                        }
                    }
                  }

                  var previousFiber = fiber.alternate;

                  if (null !== previousFiber) {
                    var detachedChild = previousFiber.child;

                    if (null !== detachedChild) {
                      previousFiber.child = null;

                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (null !== detachedChild);
                    }
                  }

                  nextEffect = fiber;
                }
              }

              if (0 !== (fiber.subtreeFlags & 2064) && null !== child)
                (child.return = fiber), (nextEffect = child);
              else
                b: for (; null !== nextEffect; ) {
                  fiber = nextEffect;
                  if (0 !== (fiber.flags & 2048))
                    switch (fiber.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(9, fiber, fiber.return);
                    }
                  var sibling$jscomp$0 = fiber.sibling;

                  if (null !== sibling$jscomp$0) {
                    sibling$jscomp$0.return = fiber.return;
                    nextEffect = sibling$jscomp$0;
                    break b;
                  }

                  nextEffect = fiber.return;
                }
            }

            var finishedWork = renderPriority.current;

            for (nextEffect = finishedWork; null !== nextEffect; ) {
              child = nextEffect;
              var firstChild = child.child;
              if (0 !== (child.subtreeFlags & 2064) && null !== firstChild)
                (firstChild.return = child), (nextEffect = firstChild);
              else
                b: for (child = finishedWork; null !== nextEffect; ) {
                  deletions = nextEffect;
                  if (0 !== (deletions.flags & 2048))
                    try {
                      switch (deletions.tag) {
                        case 0:
                        case 11:
                        case 15:
                          commitHookEffectListMount(9, deletions);
                      }
                    } catch (error) {
                      captureCommitPhaseError(
                        deletions,
                        deletions.return,
                        error
                      );
                    }

                  if (deletions === child) {
                    nextEffect = null;
                    break b;
                  }

                  var sibling$jscomp$1 = deletions.sibling;

                  if (null !== sibling$jscomp$1) {
                    sibling$jscomp$1.return = deletions.return;
                    nextEffect = sibling$jscomp$1;
                    break b;
                  }

                  nextEffect = deletions.return;
                }
            }

            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            if (
              injectedHook &&
              "function" === typeof injectedHook.onPostCommitFiberRoot
            )
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
              } catch (err) {}
            JSCompiler_inline_result = true;
          }
          return JSCompiler_inline_result;
        } finally {
          (currentUpdatePriority = previousPriority),
            (ReactCurrentBatchConfig$2.transition = prevTransition);
        }
      }

      return false;
    }

    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValue(error, sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
      enqueueUpdate(rootFiber, sourceFiber);
      sourceFiber = requestEventTime();
      rootFiber = markUpdateLaneFromFiberToRoot(rootFiber, 1);
      null !== rootFiber &&
        (markRootUpdated(rootFiber, 1, sourceFiber),
        ensureRootIsScheduled(rootFiber, sourceFiber));
    }

    function captureCommitPhaseError(
      sourceFiber,
      nearestMountedAncestor,
      error
    ) {
      if (3 === sourceFiber.tag)
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      else
        for (
          nearestMountedAncestor = sourceFiber.return;
          null !== nearestMountedAncestor;

        ) {
          if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(
              nearestMountedAncestor,
              sourceFiber,
              error
            );
            break;
          } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;

            if (
              "function" ===
                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
              ("function" === typeof instance.componentDidCatch &&
                (null === legacyErrorBoundariesThatAlreadyFailed ||
                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
            ) {
              sourceFiber = createCapturedValue(error, sourceFiber);
              sourceFiber = createClassErrorUpdate(
                nearestMountedAncestor,
                sourceFiber,
                1
              );
              enqueueUpdate(nearestMountedAncestor, sourceFiber);
              sourceFiber = requestEventTime();
              nearestMountedAncestor = markUpdateLaneFromFiberToRoot(
                nearestMountedAncestor,
                1
              );
              null !== nearestMountedAncestor &&
                (markRootUpdated(nearestMountedAncestor, 1, sourceFiber),
                ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
              break;
            }
          }

          nearestMountedAncestor = nearestMountedAncestor.return;
        }
    }

    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      null !== pingCache && pingCache.delete(wakeable);
      wakeable = requestEventTime();
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
      workInProgressRoot === root &&
        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
        (4 === workInProgressRootExitStatus ||
        (3 === workInProgressRootExitStatus &&
          (workInProgressRootRenderLanes & 130023424) ===
            workInProgressRootRenderLanes &&
          500 > now() - globalMostRecentFallbackTime)
          ? prepareFreshStack(root, 0)
          : (workInProgressRootPingedLanes |= pingedLanes));
      ensureRootIsScheduled(root, wakeable);
    }

    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      0 === retryLane &&
        (0 === (boundaryFiber.mode & 1)
          ? (retryLane = 1)
          : ((retryLane = nextRetryLane),
            (nextRetryLane <<= 1),
            0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
      var eventTime = requestEventTime();
      boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
      null !== boundaryFiber &&
        (markRootUpdated(boundaryFiber, retryLane, eventTime),
        ensureRootIsScheduled(boundaryFiber, eventTime));
    }

    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState,
        retryLane = 0;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }

    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;

      switch (boundaryFiber.tag) {
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          break;

        case 19:
          retryCache = boundaryFiber.stateNode;
          break;

        default:
          throw Error(
            "Pinged unknown suspense boundary type. This is probably a bug in React."
          );
      }

      null !== retryCache && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }

    var beginWork$1;

    beginWork$1 = function beginWork$1(current, workInProgress, renderLanes) {
      if (null !== current) {
        if (
          current.memoizedProps !== workInProgress.pendingProps ||
          didPerformWorkStackCursor.current
        )
          didReceiveUpdate = true;
        else {
          if (
            0 === (current.lanes & renderLanes) &&
            0 === (workInProgress.flags & 128)
          )
            return (
              (didReceiveUpdate = false),
              attemptEarlyBailoutIfNoScheduledUpdate(
                current,
                workInProgress,
                renderLanes
              )
            );
          didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
        }
      } else didReceiveUpdate = false;
      workInProgress.lanes = 0;

      switch (workInProgress.tag) {
        case 2:
          var Component = workInProgress.type;
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          var context = getMaskedContext(
            workInProgress,
            contextStackCursor.current
          );
          prepareToReadContext(workInProgress, renderLanes);
          context = renderWithHooks(
            null,
            workInProgress,
            Component,
            current,
            context,
            renderLanes
          );
          workInProgress.flags |= 1;

          if (
            "object" === typeof context &&
            null !== context &&
            "function" === typeof context.render &&
            undefined === context.$$typeof
          ) {
            workInProgress.tag = 1;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;

            if (isContextProvider(Component)) {
              var hasContext = true;
              pushContextProvider(workInProgress);
            } else hasContext = false;

            workInProgress.memoizedState =
              null !== context.state && undefined !== context.state
                ? context.state
                : null;
            initializeUpdateQueue(workInProgress);
            context.updater = classComponentUpdater;
            workInProgress.stateNode = context;
            context._reactInternals = workInProgress;
            mountClassInstance(workInProgress, Component, current, renderLanes);
            workInProgress = finishClassComponent(
              null,
              workInProgress,
              Component,
              true,
              hasContext,
              renderLanes
            );
          } else
            (workInProgress.tag = 0),
              reconcileChildren(null, workInProgress, context, renderLanes),
              (workInProgress = workInProgress.child);

          return workInProgress;

        case 16:
          Component = workInProgress.elementType;

          a: {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
            current = workInProgress.pendingProps;
            context = Component._init;
            Component = context(Component._payload);
            workInProgress.type = Component;
            context = workInProgress.tag = resolveLazyComponentTag(Component);
            current = resolveDefaultProps(Component, current);

            switch (context) {
              case 0:
                workInProgress = updateFunctionComponent(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 1:
                workInProgress = updateClassComponent(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 11:
                workInProgress = updateForwardRef(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 14:
                workInProgress = updateMemoComponent(
                  null,
                  workInProgress,
                  Component,
                  resolveDefaultProps(Component.type, current),
                  renderLanes
                );
                break a;
            }

            throw Error(
              "Element type is invalid. Received a promise that resolves to: " +
                Component +
                ". Lazy element type must resolve to a class or function."
            );
          }

          return workInProgress;

        case 0:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateFunctionComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 1:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateClassComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 3:
          pushHostRootContext(workInProgress);
          if (null === current)
            throw Error("Should have a current fiber. This is a bug in React.");
          context = workInProgress.pendingProps;
          Component = workInProgress.memoizedState.element;
          cloneUpdateQueue(current, workInProgress);
          processUpdateQueue(workInProgress, context, null, renderLanes);
          context = workInProgress.memoizedState.element;
          context === Component
            ? (workInProgress = bailoutOnAlreadyFinishedWork(
                current,
                workInProgress,
                renderLanes
              ))
            : (reconcileChildren(current, workInProgress, context, renderLanes),
              (workInProgress = workInProgress.child));
          return workInProgress;

        case 5:
          return (
            pushHostContext(workInProgress),
            (Component = workInProgress.pendingProps.children),
            markRef(current, workInProgress),
            reconcileChildren(current, workInProgress, Component, renderLanes),
            workInProgress.child
          );

        case 6:
          return null;

        case 13:
          return updateSuspenseComponent(current, workInProgress, renderLanes);

        case 4:
          return (
            pushHostContainer(
              workInProgress,
              workInProgress.stateNode.containerInfo
            ),
            (Component = workInProgress.pendingProps),
            null === current
              ? (workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  Component,
                  renderLanes
                ))
              : reconcileChildren(
                  current,
                  workInProgress,
                  Component,
                  renderLanes
                ),
            workInProgress.child
          );

        case 11:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateForwardRef(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 7:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps,
              renderLanes
            ),
            workInProgress.child
          );

        case 8:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );

        case 12:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );

        case 10:
          a: {
            Component = workInProgress.type._context;
            context = workInProgress.pendingProps;
            hasContext = workInProgress.memoizedProps;
            var newValue = context.value;
            push(valueCursor, Component._currentValue);
            Component._currentValue = newValue;
            if (null !== hasContext)
              if (objectIs(hasContext.value, newValue)) {
                if (
                  hasContext.children === context.children &&
                  !didPerformWorkStackCursor.current
                ) {
                  workInProgress = bailoutOnAlreadyFinishedWork(
                    current,
                    workInProgress,
                    renderLanes
                  );
                  break a;
                }
              } else
                for (
                  hasContext = workInProgress.child,
                    null !== hasContext && (hasContext.return = workInProgress);
                  null !== hasContext;

                ) {
                  var list = hasContext.dependencies;

                  if (null !== list) {
                    newValue = hasContext.child;

                    for (
                      var dependency = list.firstContext;
                      null !== dependency;

                    ) {
                      if (dependency.context === Component) {
                        if (1 === hasContext.tag) {
                          dependency = createUpdate(
                            -1,
                            renderLanes & -renderLanes
                          );
                          dependency.tag = 2;
                          var updateQueue = hasContext.updateQueue;

                          if (null !== updateQueue) {
                            updateQueue = updateQueue.shared;
                            var pending = updateQueue.pending;
                            null === pending
                              ? (dependency.next = dependency)
                              : ((dependency.next = pending.next),
                                (pending.next = dependency));
                            updateQueue.pending = dependency;
                          }
                        }

                        hasContext.lanes |= renderLanes;
                        dependency = hasContext.alternate;
                        null !== dependency &&
                          (dependency.lanes |= renderLanes);
                        scheduleContextWorkOnParentPath(
                          hasContext.return,
                          renderLanes,
                          workInProgress
                        );
                        list.lanes |= renderLanes;
                        break;
                      }

                      dependency = dependency.next;
                    }
                  } else if (10 === hasContext.tag)
                    newValue =
                      hasContext.type === workInProgress.type
                        ? null
                        : hasContext.child;
                  else if (18 === hasContext.tag) {
                    newValue = hasContext.return;
                    if (null === newValue)
                      throw Error(
                        "We just came from a parent so we must have had a parent. This is a bug in React."
                      );
                    newValue.lanes |= renderLanes;
                    list = newValue.alternate;
                    null !== list && (list.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(
                      newValue,
                      renderLanes,
                      workInProgress
                    );
                    newValue = hasContext.sibling;
                  } else newValue = hasContext.child;

                  if (null !== newValue) newValue.return = hasContext;
                  else
                    for (newValue = hasContext; null !== newValue; ) {
                      if (newValue === workInProgress) {
                        newValue = null;
                        break;
                      }

                      hasContext = newValue.sibling;

                      if (null !== hasContext) {
                        hasContext.return = newValue.return;
                        newValue = hasContext;
                        break;
                      }

                      newValue = newValue.return;
                    }
                  hasContext = newValue;
                }
            reconcileChildren(
              current,
              workInProgress,
              context.children,
              renderLanes
            );
            workInProgress = workInProgress.child;
          }

          return workInProgress;

        case 9:
          return (
            (context = workInProgress.type),
            (Component = workInProgress.pendingProps.children),
            prepareToReadContext(workInProgress, renderLanes),
            (context = readContext(context)),
            (Component = Component(context)),
            (workInProgress.flags |= 1),
            reconcileChildren(current, workInProgress, Component, renderLanes),
            workInProgress.child
          );

        case 14:
          return (
            (Component = workInProgress.type),
            (context = resolveDefaultProps(
              Component,
              workInProgress.pendingProps
            )),
            (context = resolveDefaultProps(Component.type, context)),
            updateMemoComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 15:
          return updateSimpleMemoComponent(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );

        case 17:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress),
            (workInProgress.tag = 1),
            isContextProvider(Component)
              ? ((current = true), pushContextProvider(workInProgress))
              : (current = false),
            prepareToReadContext(workInProgress, renderLanes),
            constructClassInstance(workInProgress, Component, context),
            mountClassInstance(workInProgress, Component, context, renderLanes),
            finishClassComponent(
              null,
              workInProgress,
              Component,
              true,
              current,
              renderLanes
            )
          );

        case 19:
          return updateSuspenseListComponent(
            current,
            workInProgress,
            renderLanes
          );

        case 22:
          return updateOffscreenComponent(current, workInProgress, renderLanes);
      }

      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    };

    function scheduleCallback$1(priorityLevel, callback) {
      return scheduleCallback(priorityLevel, callback);
    }

    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling =
        this.child =
        this.return =
        this.stateNode =
        this.type =
        this.elementType =
          null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies =
        this.memoizedState =
        this.updateQueue =
        this.memoizedProps =
          null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }

    function createFiber(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    }

    function shouldConstruct(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }

    function resolveLazyComponentTag(Component) {
      if ("function" === typeof Component)
        return shouldConstruct(Component) ? 1 : 0;

      if (undefined !== Component && null !== Component) {
        Component = Component.$$typeof;
        if (Component === REACT_FORWARD_REF_TYPE) return 11;
        if (Component === REACT_MEMO_TYPE) return 14;
      }

      return 2;
    }

    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      null === workInProgress
        ? ((workInProgress = createFiber(
            current.tag,
            pendingProps,
            current.key,
            current.mode
          )),
          (workInProgress.elementType = current.elementType),
          (workInProgress.type = current.type),
          (workInProgress.stateNode = current.stateNode),
          (workInProgress.alternate = current),
          (current.alternate = workInProgress))
        : ((workInProgress.pendingProps = pendingProps),
          (workInProgress.type = current.type),
          (workInProgress.flags = 0),
          (workInProgress.subtreeFlags = 0),
          (workInProgress.deletions = null));
      workInProgress.flags = current.flags & 14680064;
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      pendingProps = current.dependencies;
      workInProgress.dependencies =
        null === pendingProps
          ? null
          : {
              lanes: pendingProps.lanes,
              firstContext: pendingProps.firstContext,
            };
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      return workInProgress;
    }

    function createFiberFromTypeAndProps(
      type,
      key,
      pendingProps,
      owner,
      mode,
      lanes
    ) {
      var fiberTag = 2;
      owner = type;
      if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
      else if ("string" === typeof type) fiberTag = 5;
      else
        a: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(
              pendingProps.children,
              mode,
              lanes,
              key
            );

          case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            break;

          case REACT_PROFILER_TYPE:
            return (
              (type = createFiber(12, pendingProps, key, mode | 2)),
              (type.elementType = REACT_PROFILER_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_SUSPENSE_TYPE:
            return (
              (type = createFiber(13, pendingProps, key, mode)),
              (type.elementType = REACT_SUSPENSE_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_SUSPENSE_LIST_TYPE:
            return (
              (type = createFiber(19, pendingProps, key, mode)),
              (type.elementType = REACT_SUSPENSE_LIST_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);

          default:
            if ("object" === typeof type && null !== type)
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                  fiberTag = 10;
                  break a;

                case REACT_CONTEXT_TYPE:
                  fiberTag = 9;
                  break a;

                case REACT_FORWARD_REF_TYPE:
                  fiberTag = 11;
                  break a;

                case REACT_MEMO_TYPE:
                  fiberTag = 14;
                  break a;

                case REACT_LAZY_TYPE:
                  fiberTag = 16;
                  owner = null;
                  break a;
              }
            throw Error(
              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
                ((null == type ? type : typeof type) + ".")
            );
        }
      key = createFiber(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = owner;
      key.lanes = lanes;
      return key;
    }

    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiber(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }

    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      pendingProps = createFiber(22, pendingProps, key, mode);
      pendingProps.elementType = REACT_OFFSCREEN_TYPE;
      pendingProps.lanes = lanes;
      pendingProps.stateNode = {};
      return pendingProps;
    }

    function createFiberFromText(content, mode, lanes) {
      content = createFiber(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }

    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiber(
        4,
        null !== portal.children ? portal.children : [],
        portal.key,
        mode
      );
      mode.lanes = lanes;
      mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation,
      };
      return mode;
    }

    function FiberRootNode(
      containerInfo,
      tag,
      hydrate,
      identifierPrefix,
      onRecoverableError
    ) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.finishedWork =
        this.pingCache =
        this.current =
        this.pendingChildren =
          null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = createLaneMap(0);
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes =
        this.finishedLanes =
        this.mutableReadLanes =
        this.expiredLanes =
        this.pingedLanes =
        this.suspendedLanes =
        this.pendingLanes =
          0;
      this.entanglements = createLaneMap(0);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
    }

    function createPortal(children, containerInfo, implementation) {
      var key =
        3 < arguments.length && undefined !== arguments[3]
          ? arguments[3]
          : null;
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation,
      };
    }

    function findHostInstance(component) {
      var fiber = component._reactInternals;

      if (undefined === fiber) {
        if ("function" === typeof component.render)
          throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error(
          "Argument appears to not be a ReactComponent. Keys: " + component
        );
      }

      component = findCurrentHostFiber(fiber);
      return null === component ? null : component.stateNode;
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current = container.current,
        eventTime = requestEventTime(),
        lane = requestUpdateLane(current);

      a: if (parentComponent) {
        parentComponent = parentComponent._reactInternals;

        b: {
          if (
            getNearestMountedFiber(parentComponent) !== parentComponent ||
            1 !== parentComponent.tag
          )
            throw Error(
              "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."
            );
          var JSCompiler_inline_result = parentComponent;

          do {
            switch (JSCompiler_inline_result.tag) {
              case 3:
                JSCompiler_inline_result =
                  JSCompiler_inline_result.stateNode.context;
                break b;

              case 1:
                if (isContextProvider(JSCompiler_inline_result.type)) {
                  JSCompiler_inline_result =
                    JSCompiler_inline_result.stateNode
                      .__reactInternalMemoizedMergedChildContext;
                  break b;
                }
            }

            JSCompiler_inline_result = JSCompiler_inline_result.return;
          } while (null !== JSCompiler_inline_result);

          throw Error(
            "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."
          );
        }

        if (1 === parentComponent.tag) {
          var Component = parentComponent.type;

          if (isContextProvider(Component)) {
            parentComponent = processChildContext(
              parentComponent,
              Component,
              JSCompiler_inline_result
            );
            break a;
          }
        }

        parentComponent = JSCompiler_inline_result;
      } else parentComponent = emptyContextObject;

      null === container.context
        ? (container.context = parentComponent)
        : (container.pendingContext = parentComponent);
      container = createUpdate(eventTime, lane);
      container.payload = {
        element: element,
      };
      callback = undefined === callback ? null : callback;
      null !== callback && (container.callback = callback);
      enqueueUpdate(current, container);
      element = scheduleUpdateOnFiber(current, lane, eventTime);
      null !== element && entangleTransitions(element, current, lane);
      return lane;
    }

    function emptyFindFiberByHostInstance() {
      return null;
    }

    function findNodeHandle(componentOrHandle) {
      if (null == componentOrHandle) return null;
      if ("number" === typeof componentOrHandle) return componentOrHandle;
      if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
      if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag)
        return componentOrHandle.canonical._nativeTag;
      componentOrHandle = findHostInstance(componentOrHandle);
      return null == componentOrHandle
        ? componentOrHandle
        : componentOrHandle.canonical
        ? componentOrHandle.canonical._nativeTag
        : componentOrHandle._nativeTag;
    }

    function onRecoverableError(error) {
      console.error(error);
    }

    function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root &&
        updateContainer(null, root, null, function () {
          roots.delete(containerTag);
        });
    }

    batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= 1;

      try {
        return fn(a);
      } finally {
        (executionContext = prevExecutionContext),
          0 === executionContext &&
            ((workInProgressRootRenderTargetTime = now() + 500),
            includesLegacySyncCallbacks && flushSyncCallbacks());
      }
    };

    var roots = new Map(),
      devToolsConfig$jscomp$inline_967 = {
        findFiberByHostInstance: getInstanceFromTag,
        bundleType: 0,
        version: "18.2.0-next-d300cebde-20220601",
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: function getInspectorDataForViewTag() {
            throw Error(
              "getInspectorDataForViewTag() is not available in production"
            );
          },
          getInspectorDataForViewAtPoint: function () {
            throw Error(
              "getInspectorDataForViewAtPoint() is not available in production."
            );
          }.bind(null, findNodeHandle),
        },
      };
    var internals$jscomp$inline_1239 = {
      bundleType: devToolsConfig$jscomp$inline_967.bundleType,
      version: devToolsConfig$jscomp$inline_967.version,
      rendererPackageName: devToolsConfig$jscomp$inline_967.rendererPackageName,
      rendererConfig: devToolsConfig$jscomp$inline_967.rendererConfig,
      overrideHookState: null,
      overrideHookStateDeletePath: null,
      overrideHookStateRenamePath: null,
      overrideProps: null,
      overridePropsDeletePath: null,
      overridePropsRenamePath: null,
      setErrorHandler: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance:
        devToolsConfig$jscomp$inline_967.findFiberByHostInstance ||
        emptyFindFiberByHostInstance,
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null,
      reconcilerVersion: "18.2.0-next-d300cebde-20220601",
    };

    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var hook$jscomp$inline_1240 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (
        !hook$jscomp$inline_1240.isDisabled &&
        hook$jscomp$inline_1240.supportsFiber
      )
        try {
          (rendererID = hook$jscomp$inline_1240.inject(
            internals$jscomp$inline_1239
          )),
            (injectedHook = hook$jscomp$inline_1240);
        } catch (err) {}
    }

    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      computeComponentStackForErrorReporting:
        function computeComponentStackForErrorReporting(reactTag) {
          return (reactTag = getInstanceFromTag(reactTag))
            ? getStackByFiberInDevAndProd(reactTag)
            : "";
        },
    };

    exports.createPortal = function (children, containerTag) {
      return createPortal(
        children,
        containerTag,
        null,
        2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null
      );
    };

    exports.dispatchCommand = function (handle, command, args) {
      null != handle._nativeTag &&
        (null != handle._internalInstanceHandle
          ? ((handle = handle._internalInstanceHandle.stateNode),
            null != handle &&
              nativeFabricUIManager.dispatchCommand(handle.node, command, args))
          : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(
              handle._nativeTag,
              command,
              args
            ));
    };

    exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
      if (null == componentOrHandle) return null;
      if (componentOrHandle._nativeTag) return componentOrHandle;
      if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag)
        return componentOrHandle.canonical;
      componentOrHandle = findHostInstance(componentOrHandle);
      return null == componentOrHandle
        ? componentOrHandle
        : componentOrHandle.canonical
        ? componentOrHandle.canonical
        : componentOrHandle;
    };

    exports.findNodeHandle = findNodeHandle;
    exports.getInspectorDataForInstance = undefined;

    exports.render = function (element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberRootNode(
          containerTag,
          0,
          false,
          "",
          onRecoverableError
        );
        var JSCompiler_inline_result = createFiber(3, null, null, 0);
        root.current = JSCompiler_inline_result;
        JSCompiler_inline_result.stateNode = root;
        JSCompiler_inline_result.memoizedState = {
          element: null,
          isDehydrated: false,
          cache: null,
          transitions: null,
          pendingSuspenseBoundaries: null,
        };
        initializeUpdateQueue(JSCompiler_inline_result);
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (((element = root.current), element.child))
        switch (element.child.tag) {
          case 5:
            element = element.child.stateNode;
            break a;

          default:
            element = element.child.stateNode;
        }
      else element = null;

      return element;
    };

    exports.sendAccessibilityEvent = function (handle, eventType) {
      null != handle._nativeTag &&
        (null != handle._internalInstanceHandle
          ? ((handle = handle._internalInstanceHandle.stateNode),
            null != handle &&
              nativeFabricUIManager.sendAccessibilityEvent(
                handle.node,
                eventType
              ))
          : ReactNativePrivateInterface.legacySendAccessibilityEvent(
              handle._nativeTag,
              eventType
            ));
    };

    exports.unmountComponentAtNode = unmountComponentAtNode;

    exports.unmountComponentAtNodeAndRemoveContainer = function (containerTag) {
      unmountComponentAtNode(containerTag);
      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
    };

    exports.unstable_batchedUpdates = batchedUpdates;
  },
  19,
  [20, 118, 1, 126]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    _$$_REQUIRE(_dependencyMap[0]);
  },
  20,
  [21]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var start = Date.now();

    _$$_REQUIRE(_dependencyMap[0]);

    _$$_REQUIRE(_dependencyMap[1]);

    _$$_REQUIRE(_dependencyMap[2]);

    _$$_REQUIRE(_dependencyMap[3]);

    _$$_REQUIRE(_dependencyMap[4]);

    _$$_REQUIRE(_dependencyMap[5]);

    _$$_REQUIRE(_dependencyMap[6]);

    _$$_REQUIRE(_dependencyMap[7]);

    _$$_REQUIRE(_dependencyMap[8]);

    _$$_REQUIRE(_dependencyMap[9]);

    _$$_REQUIRE(_dependencyMap[10]);

    _$$_REQUIRE(_dependencyMap[11]);

    var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[12]);

    GlobalPerformanceLogger.markPoint(
      "initializeCore_start",
      GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start)
    );
    GlobalPerformanceLogger.markPoint("initializeCore_end");
  },
  21,
  [22, 23, 24, 26, 56, 62, 65, 70, 101, 105, 106, 116, 78]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    if (global.window === undefined) {
      global.window = global;
    }

    if (global.self === undefined) {
      global.self = global;
    }

    global.process = global.process || {};
    global.process.env = global.process.env || {};

    if (!global.process.env.NODE_ENV) {
      global.process.env.NODE_ENV = "production";
    }
  },
  22,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    if (!global.performance) {
      global.performance = {};
    }

    if (typeof global.performance.now !== "function") {
      global.performance.now = function () {
        var performanceNow = global.nativePerformanceNow || Date.now;
        return performanceNow();
      };
    }
  },
  23,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    if (global.__RCTProfileIsProfiling) {
      var Systrace = _$$_REQUIRE(_dependencyMap[0]);

      Systrace.installReactHook();
      Systrace.setEnabled(true);
    }
  },
  24,
  [25]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var invariant = _$$_REQUIRE(_dependencyMap[0]);

    var TRACE_TAG_REACT_APPS = 131072;
    var TRACE_TAG_JS_VM_CALLS = 134217728;
    var _enabled = false;
    var _asyncCookie = 0;
    var _markStack = [];

    var _markStackIndex = -1;

    var _canInstallReactHook = false;
    var REACT_MARKER = "\u269B";
    var userTimingPolyfill = null;
    var Systrace = {
      installReactHook: function installReactHook() {
        if (_enabled) {
        }

        _canInstallReactHook = true;
      },
      setEnabled: function setEnabled(enabled) {
        if (_enabled !== enabled) {
          _enabled = enabled;
        }
      },
      isEnabled: function isEnabled() {
        return _enabled;
      },
      beginEvent: function beginEvent(profileName, args) {
        if (_enabled) {
          var profileNameString =
            typeof profileName === "function" ? profileName() : profileName;
          global.nativeTraceBeginSection(
            TRACE_TAG_REACT_APPS,
            profileNameString,
            args
          );
        }
      },
      endEvent: function endEvent() {
        if (_enabled) {
          global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
        }
      },
      beginAsyncEvent: function beginAsyncEvent(profileName) {
        var cookie = _asyncCookie;

        if (_enabled) {
          _asyncCookie++;
          var profileNameString =
            typeof profileName === "function" ? profileName() : profileName;
          global.nativeTraceBeginAsyncSection(
            TRACE_TAG_REACT_APPS,
            profileNameString,
            cookie
          );
        }

        return cookie;
      },
      endAsyncEvent: function endAsyncEvent(profileName, cookie) {
        if (_enabled) {
          var profileNameString =
            typeof profileName === "function" ? profileName() : profileName;
          global.nativeTraceEndAsyncSection(
            TRACE_TAG_REACT_APPS,
            profileNameString,
            cookie
          );
        }
      },
      counterEvent: function counterEvent(profileName, value) {
        if (_enabled) {
          var profileNameString =
            typeof profileName === "function" ? profileName() : profileName;
          global.nativeTraceCounter &&
            global.nativeTraceCounter(
              TRACE_TAG_REACT_APPS,
              profileNameString,
              value
            );
        }
      },
    };
    module.exports = Systrace;
  },
  25,
  [4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

    ExceptionsManager.installConsoleErrorReporter();

    if (!global.__fbDisableExceptionsManager) {
      var handleError = function handleError(e, isFatal) {
        try {
          ExceptionsManager.handleException(e, isFatal);
        } catch (ee) {
          console.log("Failed to print error: ", ee.message);
          throw e;
        }
      };

      var ErrorUtils = _$$_REQUIRE(_dependencyMap[1]);

      ErrorUtils.setGlobalHandler(handleError);
    }
  },
  26,
  [27, 52]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _createClass = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var _inherits = _$$_REQUIRE(_dependencyMap[2]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

    var _wrapNativeSuper = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var SyntheticError = (function (_Error) {
      _inherits(SyntheticError, _Error);

      var _super = _createSuper(SyntheticError);

      function SyntheticError() {
        var _this;

        _classCallCheck(this, SyntheticError);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.name = "";
        return _this;
      }

      return _createClass(SyntheticError);
    })(_wrapNativeSuper(Error));

    var userExceptionDecorator;
    var inUserExceptionDecorator = false;

    function unstable_setExceptionDecorator(exceptionDecorator) {
      userExceptionDecorator = exceptionDecorator;
    }

    function preprocessException(data) {
      if (userExceptionDecorator && !inUserExceptionDecorator) {
        inUserExceptionDecorator = true;

        try {
          return userExceptionDecorator(data);
        } catch (_unused) {
        } finally {
          inUserExceptionDecorator = false;
        }
      }

      return data;
    }

    var exceptionID = 0;

    function reportException(e, isFatal, reportToConsole) {
      var parseErrorStack = _$$_REQUIRE(_dependencyMap[6]);

      var stack = parseErrorStack(e == null ? undefined : e.stack);
      var currentExceptionID = ++exceptionID;
      var originalMessage = e.message || "";
      var message = originalMessage;

      if (e.componentStack != null) {
        message += "\n\nThis error is located at:" + e.componentStack;
      }

      var namePrefix = e.name == null || e.name === "" ? "" : e.name + ": ";

      if (!message.startsWith(namePrefix)) {
        message = namePrefix + message;
      }

      message =
        e.jsEngine == null ? message : message + ", js engine: " + e.jsEngine;
      var data = preprocessException({
        message: message,
        originalMessage: message === originalMessage ? null : originalMessage,
        name: e.name == null || e.name === "" ? null : e.name,
        componentStack:
          typeof e.componentStack === "string" ? e.componentStack : null,
        stack: stack,
        id: currentExceptionID,
        isFatal: isFatal,
        extraData: {
          jsEngine: e.jsEngine,
          rawStack: e.stack,
        },
      });

      if (reportToConsole) {
        console.error(data.message);
      }

      if (isFatal || e.type !== "warn") {
        var NativeExceptionsManager = _$$_REQUIRE(_dependencyMap[7]).default;

        if (NativeExceptionsManager) {
          NativeExceptionsManager.reportException(data);
        }
      }
    }

    var inExceptionHandler = false;

    function handleException(e, isFatal) {
      var error;

      if (e instanceof Error) {
        error = e;
      } else {
        error = new SyntheticError(e);
      }

      try {
        inExceptionHandler = true;
        reportException(error, isFatal, true);
      } finally {
        inExceptionHandler = false;
      }
    }

    function reactConsoleErrorHandler() {
      var _console;

      for (
        var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
        _key2 < _len2;
        _key2++
      ) {
        args[_key2] = arguments[_key2];
      }

      (_console = console)._errorOriginal.apply(_console, args);

      if (!console.reportErrorsAsExceptions) {
        return;
      }

      if (inExceptionHandler) {
        return;
      }

      var error;
      var firstArg = args[0];

      if (firstArg != null && firstArg.stack) {
        error = firstArg;
      } else {
        var stringifySafe = _$$_REQUIRE(_dependencyMap[8]).default;

        if (typeof firstArg === "string" && firstArg.startsWith("Warning: ")) {
          return;
        }

        var message = args
          .map(function (arg) {
            return typeof arg === "string" ? arg : stringifySafe(arg);
          })
          .join(" ");
        error = new SyntheticError(message);
        error.name = "console.error";
      }

      reportException(error, false, false);
    }

    function installConsoleErrorReporter() {
      if (console._errorOriginal) {
        return;
      }

      console._errorOriginal = console.error.bind(console);
      console.error = reactConsoleErrorHandler;

      if (console.reportErrorsAsExceptions === undefined) {
        console.reportErrorsAsExceptions = true;
      }
    }

    module.exports = {
      handleException: handleException,
      installConsoleErrorReporter: installConsoleErrorReporter,
      SyntheticError: SyntheticError,
      unstable_setExceptionDecorator: unstable_setExceptionDecorator,
    };
  },
  27,
  [17, 16, 28, 30, 33, 34, 38, 41, 51]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError(
          "Super expression must either be null or a function"
        );
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true,
        },
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false,
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }

    (module.exports = _inherits),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  28,
  [29]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _setPrototypeOf(o, p) {
      (module.exports = _setPrototypeOf =
        Object.setPrototypeOf
          ? Object.setPrototypeOf.bind()
          : function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            }),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
      return _setPrototypeOf(o, p);
    }

    (module.exports = _setPrototypeOf),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  29,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _typeof = _$$_REQUIRE(_dependencyMap[0])["default"];

    var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== undefined) {
        throw new TypeError(
          "Derived constructors may only return object or undefined"
        );
      }

      return assertThisInitialized(self);
    }

    (module.exports = _possibleConstructorReturn),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  30,
  [31, 32]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (
        ((module.exports = _typeof =
          "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
            ? function (obj) {
                return typeof obj;
              }
            : function (obj) {
                return obj &&
                  "function" == typeof Symbol &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? "symbol"
                  : typeof obj;
              }),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports)),
        _typeof(obj)
      );
    }

    (module.exports = _typeof),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  31,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _assertThisInitialized(self) {
      if (self === undefined) {
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called"
        );
      }

      return self;
    }

    (module.exports = _assertThisInitialized),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  32,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _getPrototypeOf(o) {
      (module.exports = _getPrototypeOf =
        Object.setPrototypeOf
          ? Object.getPrototypeOf.bind()
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            }),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
      return _getPrototypeOf(o);
    }

    (module.exports = _getPrototypeOf),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  33,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

    var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

    var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

    var construct = _$$_REQUIRE(_dependencyMap[3]);

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      (module.exports = _wrapNativeSuper =
        function _wrapNativeSuper(Class) {
          if (Class === null || !isNativeFunction(Class)) return Class;

          if (typeof Class !== "function") {
            throw new TypeError(
              "Super expression must either be null or a function"
            );
          }

          if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);

            _cache.set(Class, Wrapper);
          }

          function Wrapper() {
            return construct(
              Class,
              arguments,
              getPrototypeOf(this).constructor
            );
          }

          Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true,
            },
          });
          return setPrototypeOf(Wrapper, Class);
        }),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
      return _wrapNativeSuper(Class);
    }

    (module.exports = _wrapNativeSuper),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  34,
  [33, 29, 35, 36]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    (module.exports = _isNativeFunction),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  35,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

    var isNativeReflectConstruct = _$$_REQUIRE(_dependencyMap[1]);

    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        (module.exports = _construct = Reflect.construct.bind()),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports);
      } else {
        (module.exports = _construct =
          function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) setPrototypeOf(instance, Class.prototype);
            return instance;
          }),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports);
      }

      return _construct.apply(null, arguments);
    }

    (module.exports = _construct),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  36,
  [29, 37]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    (module.exports = _isNativeReflectConstruct),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  37,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var parseHermesStack = _$$_REQUIRE(_dependencyMap[0]);

    function convertHermesStack(stack) {
      var frames = [];

      for (var entry of stack.entries) {
        if (entry.type !== "FRAME") {
          continue;
        }

        var location = entry.location,
          functionName = entry.functionName;

        if (location.type === "NATIVE") {
          continue;
        }

        frames.push({
          methodName: functionName,
          file: location.sourceUrl,
          lineNumber: location.line1Based,
          column:
            location.type === "SOURCE"
              ? location.column1Based - 1
              : location.virtualOffset0Based,
        });
      }

      return frames;
    }

    function parseErrorStack(errorStack) {
      if (errorStack == null) {
        return [];
      }

      var stacktraceParser = _$$_REQUIRE(_dependencyMap[1]);

      var parsedStack = Array.isArray(errorStack)
        ? errorStack
        : global.HermesInternal
        ? convertHermesStack(parseHermesStack(errorStack))
        : stacktraceParser.parse(errorStack).map(function (frame) {
            return Object.assign({}, frame, {
              column: frame.column != null ? frame.column - 1 : null,
            });
          });
      return parsedStack;
    }

    module.exports = parseErrorStack;
  },
  38,
  [39, 40]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var RE_FRAME =
      /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
    var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;

    function parseLine(line) {
      var asFrame = line.match(RE_FRAME);

      if (asFrame) {
        return {
          type: "FRAME",
          functionName: asFrame[1],
          location:
            asFrame[2] === "native"
              ? {
                  type: "NATIVE",
                }
              : asFrame[3] === "address at "
              ? {
                  type: "BYTECODE",
                  sourceUrl: asFrame[4],
                  line1Based: Number.parseInt(asFrame[5], 10),
                  virtualOffset0Based: Number.parseInt(asFrame[6], 10),
                }
              : {
                  type: "SOURCE",
                  sourceUrl: asFrame[4],
                  line1Based: Number.parseInt(asFrame[5], 10),
                  column1Based: Number.parseInt(asFrame[6], 10),
                },
        };
      }

      var asSkipped = line.match(RE_SKIPPED);

      if (asSkipped) {
        return {
          type: "SKIPPED",
          count: Number.parseInt(asSkipped[1], 10),
        };
      }
    }

    module.exports = function parseHermesStack(stack) {
      var lines = stack.split(/\n/);
      var entries = [];
      var lastMessageLine = -1;

      for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!line) {
          continue;
        }

        var entry = parseLine(line);

        if (entry) {
          entries.push(entry);
          continue;
        }

        lastMessageLine = i;
        entries = [];
      }

      var message = lines.slice(0, lastMessageLine + 1).join("\n");
      return {
        message: message,
        entries: entries,
      };
    };
  },
  39,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    var UNKNOWN_FUNCTION = "<unknown>";

    function parse(stackString) {
      var lines = stackString.split("\n");
      return lines.reduce(function (stack, line) {
        var parseResult =
          parseChrome(line) ||
          parseWinjs(line) ||
          parseGecko(line) ||
          parseNode(line) ||
          parseJSC(line);

        if (parseResult) {
          stack.push(parseResult);
        }

        return stack;
      }, []);
    }

    var chromeRe =
      /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
    var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;

    function parseChrome(line) {
      var parts = chromeRe.exec(line);

      if (!parts) {
        return null;
      }

      var isNative = parts[2] && parts[2].indexOf("native") === 0;
      var isEval = parts[2] && parts[2].indexOf("eval") === 0;
      var submatch = chromeEvalRe.exec(parts[2]);

      if (isEval && submatch != null) {
        parts[2] = submatch[1];
        parts[3] = submatch[2];
        parts[4] = submatch[3];
      }

      return {
        file: !isNative ? parts[2] : null,
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: isNative ? [parts[2]] : [],
        lineNumber: parts[3] ? +parts[3] : null,
        column: parts[4] ? +parts[4] : null,
      };
    }

    var winjsRe =
      /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;

    function parseWinjs(line) {
      var parts = winjsRe.exec(line);

      if (!parts) {
        return null;
      }

      return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null,
      };
    }

    var geckoRe =
      /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
    var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;

    function parseGecko(line) {
      var parts = geckoRe.exec(line);

      if (!parts) {
        return null;
      }

      var isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
      var submatch = geckoEvalRe.exec(parts[3]);

      if (isEval && submatch != null) {
        parts[3] = submatch[1];
        parts[4] = submatch[2];
        parts[5] = null;
      }

      return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: parts[2] ? parts[2].split(",") : [],
        lineNumber: parts[4] ? +parts[4] : null,
        column: parts[5] ? +parts[5] : null,
      };
    }

    var javaScriptCoreRe =
      /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;

    function parseJSC(line) {
      var parts = javaScriptCoreRe.exec(line);

      if (!parts) {
        return null;
      }

      return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[4],
        column: parts[5] ? +parts[5] : null,
      };
    }

    var nodeRe =
      /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;

    function parseNode(line) {
      var parts = nodeRe.exec(line);

      if (!parts) {
        return null;
      }

      return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null,
      };
    }

    exports.parse = parse;
  },
  40,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Platform = _$$_REQUIRE(_dependencyMap[1]);

    var NativeModule = TurboModuleRegistry.getEnforcing("ExceptionsManager");
    var ExceptionsManager = {
      reportFatalException: function reportFatalException(
        message,
        stack,
        exceptionId
      ) {
        NativeModule.reportFatalException(message, stack, exceptionId);
      },
      reportSoftException: function reportSoftException(
        message,
        stack,
        exceptionId
      ) {
        NativeModule.reportSoftException(message, stack, exceptionId);
      },
      updateExceptionMessage: function updateExceptionMessage(
        message,
        stack,
        exceptionId
      ) {
        NativeModule.updateExceptionMessage(message, stack, exceptionId);
      },
      dismissRedbox: function dismissRedbox() {
        if (NativeModule.dismissRedbox) {
          NativeModule.dismissRedbox();
        }
      },
      reportException: function reportException(data) {
        if (NativeModule.reportException) {
          NativeModule.reportException(data);
          return;
        }

        if (data.isFatal) {
          ExceptionsManager.reportFatalException(
            data.message,
            data.stack,
            data.id
          );
        } else {
          ExceptionsManager.reportSoftException(
            data.message,
            data.stack,
            data.id
          );
        }
      },
    };
    var _default = ExceptionsManager;
    exports.default = _default;
  },
  41,
  [42, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.get = get;
    exports.getEnforcing = getEnforcing;

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

    var turboModuleProxy = global.__turboModuleProxy;

    function requireModule(name) {
      if (global.RN$Bridgeless !== true) {
        var legacyModule = NativeModules[name];

        if (legacyModule != null) {
          return legacyModule;
        }
      }

      if (turboModuleProxy != null) {
        var module = turboModuleProxy(name);
        return module;
      }

      return null;
    }

    function get(name) {
      return requireModule(name);
    }

    function getEnforcing(name) {
      var module = requireModule(name);
      (0, _invariant.default)(
        module != null,
        "TurboModuleRegistry.getEnforcing(...): '" +
          name +
          "' could not be found. " +
          "Verify that a module by this name is registered in the native binary."
      );
      return module;
    }
  },
  42,
  [7, 4, 43]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

    var BatchedBridge = _$$_REQUIRE(_dependencyMap[1]);

    var invariant = _$$_REQUIRE(_dependencyMap[2]);

    function genModule(config, moduleID) {
      if (!config) {
        return null;
      }

      var _config = _slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

      invariant(
        !moduleName.startsWith("RCT") && !moduleName.startsWith("RK"),
        "Module name prefixes should've been stripped by the native side but wasn't for " +
          moduleName
      );

      if (!constants && !methods) {
        return {
          name: moduleName,
        };
      }

      var module = {};
      methods &&
        methods.forEach(function (methodName, methodID) {
          var isPromise =
            (promiseMethods && arrayContains(promiseMethods, methodID)) ||
            false;
          var isSync =
            (syncMethods && arrayContains(syncMethods, methodID)) || false;
          invariant(
            !isPromise || !isSync,
            "Cannot have a method that is both async and a sync hook"
          );
          var methodType = isPromise ? "promise" : isSync ? "sync" : "async";
          module[methodName] = genMethod(moduleID, methodID, methodType);
        });
      Object.assign(module, constants);

      if (module.getConstants == null) {
        module.getConstants = function () {
          return constants || Object.freeze({});
        };
      } else {
        console.warn(
          "Unable to define method 'getConstants()' on NativeModule '" +
            moduleName +
            "'. NativeModule '" +
            moduleName +
            "' already has a constant or method called 'getConstants'. Please remove it."
        );
      }

      return {
        name: moduleName,
        module: module,
      };
    }

    global.__fbGenNativeModule = genModule;

    function loadModule(name, moduleID) {
      invariant(
        global.nativeRequireModuleConfig,
        "Can't lazily create module without nativeRequireModuleConfig"
      );
      var config = global.nativeRequireModuleConfig(name);
      var info = genModule(config, moduleID);
      return info && info.module;
    }

    function genMethod(moduleID, methodID, type) {
      var fn = null;

      if (type === "promise") {
        fn = function promiseMethodWrapper() {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }

          var enqueueingFrameError = new Error();
          return new Promise(function (resolve, reject) {
            BatchedBridge.enqueueNativeCall(
              moduleID,
              methodID,
              args,
              function (data) {
                return resolve(data);
              },
              function (errorData) {
                return reject(
                  updateErrorWithErrorData(errorData, enqueueingFrameError)
                );
              }
            );
          });
        };
      } else {
        fn = function nonPromiseMethodWrapper() {
          for (
            var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          var lastArg = args.length > 0 ? args[args.length - 1] : null;
          var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
          var hasSuccessCallback = typeof lastArg === "function";
          var hasErrorCallback = typeof secondLastArg === "function";
          hasErrorCallback &&
            invariant(
              hasSuccessCallback,
              "Cannot have a non-function arg after a function arg."
            );
          var onSuccess = hasSuccessCallback ? lastArg : null;
          var onFail = hasErrorCallback ? secondLastArg : null;
          var callbackCount = hasSuccessCallback + hasErrorCallback;
          var newArgs = args.slice(0, args.length - callbackCount);

          if (type === "sync") {
            return BatchedBridge.callNativeSyncHook(
              moduleID,
              methodID,
              newArgs,
              onFail,
              onSuccess
            );
          } else {
            BatchedBridge.enqueueNativeCall(
              moduleID,
              methodID,
              newArgs,
              onFail,
              onSuccess
            );
          }
        };
      }

      fn.type = type;
      return fn;
    }

    function arrayContains(array, value) {
      return array.indexOf(value) !== -1;
    }

    function updateErrorWithErrorData(errorData, error) {
      return Object.assign(error, errorData || {});
    }

    var NativeModules = {};

    if (global.nativeModuleProxy) {
      NativeModules = global.nativeModuleProxy;
    } else if (!global.nativeExtensions) {
      var bridgeConfig = global.__fbBatchedBridgeConfig;
      invariant(
        bridgeConfig,
        "__fbBatchedBridgeConfig is not set, cannot invoke native modules"
      );

      var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[3]);

      (bridgeConfig.remoteModuleConfig || []).forEach(function (
        config,
        moduleID
      ) {
        var info = genModule(config, moduleID);

        if (!info) {
          return;
        }

        if (info.module) {
          NativeModules[info.name] = info.module;
        } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            },
          });
        }
      });
    }

    module.exports = NativeModules;
  },
  43,
  [44, 48, 4, 53]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

    var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

    var unsupportedIterableToArray = _$$_REQUIRE(_dependencyMap[2]);

    var nonIterableRest = _$$_REQUIRE(_dependencyMap[3]);

    function _slicedToArray(arr, i) {
      return (
        arrayWithHoles(arr) ||
        iterableToArrayLimit(arr, i) ||
        unsupportedIterableToArray(arr, i) ||
        nonIterableRest()
      );
    }

    (module.exports = _slicedToArray),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  44,
  [45, 46, 14, 47]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    (module.exports = _arrayWithHoles),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  45,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _iterableToArrayLimit(arr, i) {
      var _i =
        arr == null
          ? null
          : (typeof Symbol !== "undefined" && arr[Symbol.iterator]) ||
            arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    (module.exports = _iterableToArrayLimit),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  46,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _nonIterableRest() {
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
      );
    }

    (module.exports = _nonIterableRest),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  47,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var MessageQueue = _$$_REQUIRE(_dependencyMap[0]);

    var BatchedBridge = new MessageQueue();
    Object.defineProperty(global, "__fbBatchedBridge", {
      configurable: true,
      value: BatchedBridge,
    });
    module.exports = BatchedBridge;
  },
  48,
  [49]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var _createClass = _$$_REQUIRE(_dependencyMap[2]);

    var Systrace = _$$_REQUIRE(_dependencyMap[3]);

    var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[4]);

    var stringifySafe = _$$_REQUIRE(_dependencyMap[5]).default;

    var warnOnce = _$$_REQUIRE(_dependencyMap[6]);

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[7]);

    var invariant = _$$_REQUIRE(_dependencyMap[8]);

    var TO_JS = 0;
    var TO_NATIVE = 1;
    var MODULE_IDS = 0;
    var METHOD_IDS = 1;
    var PARAMS = 2;
    var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
    var TRACE_TAG_REACT_APPS = 131072;
    var DEBUG_INFO_LIMIT = 32;

    var MessageQueue = (function () {
      function MessageQueue() {
        _classCallCheck(this, MessageQueue);

        this._lazyCallableModules = {};
        this._queue = [[], [], [], 0];
        this._successCallbacks = new Map();
        this._failureCallbacks = new Map();
        this._callID = 0;
        this._lastFlush = 0;
        this._eventLoopStartTime = Date.now();
        this._reactNativeMicrotasksCallback = null;
        this.callFunctionReturnFlushedQueue =
          this.callFunctionReturnFlushedQueue.bind(this);
        this.flushedQueue = this.flushedQueue.bind(this);
        this.invokeCallbackAndReturnFlushedQueue =
          this.invokeCallbackAndReturnFlushedQueue.bind(this);
      }

      _createClass(
        MessageQueue,
        [
          {
            key: "callFunctionReturnFlushedQueue",
            value: function callFunctionReturnFlushedQueue(
              module,
              method,
              args
            ) {
              var _this = this;

              this.__guard(function () {
                _this.__callFunction(module, method, args);
              });

              return this.flushedQueue();
            },
          },
          {
            key: "invokeCallbackAndReturnFlushedQueue",
            value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
              var _this2 = this;

              this.__guard(function () {
                _this2.__invokeCallback(cbID, args);
              });

              return this.flushedQueue();
            },
          },
          {
            key: "flushedQueue",
            value: function flushedQueue() {
              var _this3 = this;

              this.__guard(function () {
                _this3.__callReactNativeMicrotasks();
              });

              var queue = this._queue;
              this._queue = [[], [], [], this._callID];
              return queue[0].length ? queue : null;
            },
          },
          {
            key: "getEventLoopRunningTime",
            value: function getEventLoopRunningTime() {
              return Date.now() - this._eventLoopStartTime;
            },
          },
          {
            key: "registerCallableModule",
            value: function registerCallableModule(name, module) {
              this._lazyCallableModules[name] = function () {
                return module;
              };
            },
          },
          {
            key: "registerLazyCallableModule",
            value: function registerLazyCallableModule(name, factory) {
              var module;
              var getValue = factory;

              this._lazyCallableModules[name] = function () {
                if (getValue) {
                  module = getValue();
                  getValue = null;
                }

                return module;
              };
            },
          },
          {
            key: "getCallableModule",
            value: function getCallableModule(name) {
              var getValue = this._lazyCallableModules[name];
              return getValue ? getValue() : null;
            },
          },
          {
            key: "callNativeSyncHook",
            value: function callNativeSyncHook(
              moduleID,
              methodID,
              params,
              onFail,
              onSucc
            ) {
              this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
              return global.nativeCallSyncHook(moduleID, methodID, params);
            },
          },
          {
            key: "processCallbacks",
            value: function processCallbacks(
              moduleID,
              methodID,
              params,
              onFail,
              onSucc
            ) {
              var _this4 = this;

              if (onFail || onSucc) {
                onFail && params.push(this._callID << 1);
                onSucc && params.push((this._callID << 1) | 1);

                this._successCallbacks.set(this._callID, onSucc);

                this._failureCallbacks.set(this._callID, onFail);
              }

              this._callID++;
            },
          },
          {
            key: "enqueueNativeCall",
            value: function enqueueNativeCall(
              moduleID,
              methodID,
              params,
              onFail,
              onSucc
            ) {
              this.processCallbacks(moduleID, methodID, params, onFail, onSucc);

              this._queue[MODULE_IDS].push(moduleID);

              this._queue[METHOD_IDS].push(methodID);

              this._queue[PARAMS].push(params);

              var now = Date.now();

              if (
                global.nativeFlushQueueImmediate &&
                now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS
              ) {
                var queue = this._queue;
                this._queue = [[], [], [], this._callID];
                this._lastFlush = now;
                global.nativeFlushQueueImmediate(queue);
              }

              Systrace.counterEvent(
                "pending_js_to_native_queue",
                this._queue[0].length
              );

              if (this.__spy) {
                this.__spy({
                  type: TO_NATIVE,
                  module: moduleID + "",
                  method: methodID,
                  args: params,
                });
              }
            },
          },
          {
            key: "createDebugLookup",
            value: function createDebugLookup(moduleID, name, methods) {},
          },
          {
            key: "setReactNativeMicrotasksCallback",
            value: function setReactNativeMicrotasksCallback(fn) {
              this._reactNativeMicrotasksCallback = fn;
            },
          },
          {
            key: "__guard",
            value: function __guard(fn) {
              if (this.__shouldPauseOnThrow()) {
                fn();
              } else {
                try {
                  fn();
                } catch (error) {
                  ErrorUtils.reportFatalError(error);
                }
              }
            },
          },
          {
            key: "__shouldPauseOnThrow",
            value: function __shouldPauseOnThrow() {
              return (
                typeof DebuggerInternal !== "undefined" &&
                DebuggerInternal.shouldPauseOnThrow === true
              );
            },
          },
          {
            key: "__callReactNativeMicrotasks",
            value: function __callReactNativeMicrotasks() {
              Systrace.beginEvent("JSTimers.callReactNativeMicrotasks()");

              if (this._reactNativeMicrotasksCallback != null) {
                this._reactNativeMicrotasksCallback();
              }

              Systrace.endEvent();
            },
          },
          {
            key: "__callFunction",
            value: function __callFunction(module, method, args) {
              this._lastFlush = Date.now();
              this._eventLoopStartTime = this._lastFlush;

              if (this.__spy) {
                Systrace.beginEvent(
                  module + "." + method + "(" + stringifySafe(args) + ")"
                );
              } else {
                Systrace.beginEvent(module + "." + method + "(...)");
              }

              if (this.__spy) {
                this.__spy({
                  type: TO_JS,
                  module: module,
                  method: method,
                  args: args,
                });
              }

              var moduleMethods = this.getCallableModule(module);

              if (!moduleMethods) {
                var callableModuleNames = Object.keys(
                  this._lazyCallableModules
                );
                var n = callableModuleNames.length;
                var callableModuleNameList = callableModuleNames.join(", ");
                invariant(
                  false,
                  "Failed to call into JavaScript module method " +
                    module +
                    "." +
                    method +
                    "(). Module has not been registered as callable. Registered callable JavaScript modules (n = " +
                    n +
                    "): " +
                    callableModuleNameList +
                    ".\n        A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native."
                );
              }

              if (!moduleMethods[method]) {
                invariant(
                  false,
                  "Failed to call into JavaScript module method " +
                    module +
                    "." +
                    method +
                    "(). Module exists, but the method is undefined."
                );
              }

              moduleMethods[method].apply(moduleMethods, args);
              Systrace.endEvent();
            },
          },
          {
            key: "__invokeCallback",
            value: function __invokeCallback(cbID, args) {
              this._lastFlush = Date.now();
              this._eventLoopStartTime = this._lastFlush;
              var callID = cbID >>> 1;
              var isSuccess = cbID & 1;
              var callback = isSuccess
                ? this._successCallbacks.get(callID)
                : this._failureCallbacks.get(callID);

              if (!callback) {
                return;
              }

              this._successCallbacks.delete(callID);

              this._failureCallbacks.delete(callID);

              callback.apply(undefined, _toConsumableArray(args));
            },
          },
        ],
        [
          {
            key: "spy",
            value: function spy(spyOrToggle) {
              if (spyOrToggle === true) {
                MessageQueue.prototype.__spy = function (info) {
                  console.log(
                    (info.type === TO_JS ? "N->JS" : "JS->N") +
                      " : " +
                      ("" +
                        (info.module != null ? info.module + "." : "") +
                        info.method) +
                      ("(" + JSON.stringify(info.args) + ")")
                  );
                };
              } else if (spyOrToggle === false) {
                MessageQueue.prototype.__spy = null;
              } else {
                MessageQueue.prototype.__spy = spyOrToggle;
              }
            },
          },
        ]
      );

      return MessageQueue;
    })();

    module.exports = MessageQueue;
  },
  49,
  [10, 16, 17, 25, 50, 51, 5, 52, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function deepFreezeAndThrowOnMutationInDev(object) {
      return object;
    }

    module.exports = deepFreezeAndThrowOnMutationInDev;
  },
  50,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
    exports.default = undefined;

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    function createStringifySafeWithLimits(limits) {
      var _limits$maxDepth = limits.maxDepth,
        maxDepth =
          _limits$maxDepth === undefined
            ? Number.POSITIVE_INFINITY
            : _limits$maxDepth,
        _limits$maxStringLimi = limits.maxStringLimit,
        maxStringLimit =
          _limits$maxStringLimi === undefined
            ? Number.POSITIVE_INFINITY
            : _limits$maxStringLimi,
        _limits$maxArrayLimit = limits.maxArrayLimit,
        maxArrayLimit =
          _limits$maxArrayLimit === undefined
            ? Number.POSITIVE_INFINITY
            : _limits$maxArrayLimit,
        _limits$maxObjectKeys = limits.maxObjectKeysLimit,
        maxObjectKeysLimit =
          _limits$maxObjectKeys === undefined
            ? Number.POSITIVE_INFINITY
            : _limits$maxObjectKeys;
      var stack = [];

      function replacer(key, value) {
        while (stack.length && this !== stack[0]) {
          stack.shift();
        }

        if (typeof value === "string") {
          var truncatedString = "...(truncated)...";

          if (value.length > maxStringLimit + truncatedString.length) {
            return value.substring(0, maxStringLimit) + truncatedString;
          }

          return value;
        }

        if (typeof value !== "object" || value === null) {
          return value;
        }

        var retval = value;

        if (Array.isArray(value)) {
          if (stack.length >= maxDepth) {
            retval = "[ ... array with " + value.length + " values ... ]";
          } else if (value.length > maxArrayLimit) {
            retval = value
              .slice(0, maxArrayLimit)
              .concat([
                "... extra " +
                  (value.length - maxArrayLimit) +
                  " values truncated ...",
              ]);
          }
        } else {
          (0, _invariant.default)(
            typeof value === "object",
            "This was already found earlier"
          );
          var keys = Object.keys(value);

          if (stack.length >= maxDepth) {
            retval = "{ ... object with " + keys.length + " keys ... }";
          } else if (keys.length > maxObjectKeysLimit) {
            retval = {};

            for (var k of keys.slice(0, maxObjectKeysLimit)) {
              retval[k] = value[k];
            }

            var truncatedKey = "...(truncated keys)...";
            retval[truncatedKey] = keys.length - maxObjectKeysLimit;
          }
        }

        stack.unshift(retval);
        return retval;
      }

      return function stringifySafe(arg) {
        if (arg === undefined) {
          return "undefined";
        } else if (arg === null) {
          return "null";
        } else if (typeof arg === "function") {
          try {
            return arg.toString();
          } catch (e) {
            return "[function unknown]";
          }
        } else if (arg instanceof Error) {
          return arg.name + ": " + arg.message;
        } else {
          try {
            var ret = JSON.stringify(arg, replacer);

            if (ret === undefined) {
              return '["' + typeof arg + '" failed to stringify]';
            }

            return ret;
          } catch (e) {
            if (typeof arg.toString === "function") {
              try {
                return arg.toString();
              } catch (E) {}
            }
          }
        }

        return '["' + typeof arg + '" failed to stringify]';
      };
    }

    var stringifySafe = createStringifySafeWithLimits({
      maxDepth: 10,
      maxStringLimit: 100,
      maxArrayLimit: 50,
      maxObjectKeysLimit: 50,
    });
    var _default = stringifySafe;
    exports.default = _default;
  },
  51,
  [7, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    module.exports = global.ErrorUtils;
  },
  52,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function defineLazyObjectProperty(object, name, descriptor) {
      var get = descriptor.get;
      var enumerable = descriptor.enumerable !== false;
      var writable = descriptor.writable !== false;
      var value;
      var valueSet = false;

      function getValue() {
        if (!valueSet) {
          valueSet = true;
          setValue(get());
        }

        return value;
      }

      function setValue(newValue) {
        value = newValue;
        valueSet = true;
        Object.defineProperty(object, name, {
          value: newValue,
          configurable: true,
          enumerable: enumerable,
          writable: writable,
        });
      }

      Object.defineProperty(object, name, {
        get: getValue,
        set: setValue,
        configurable: true,
        enumerable: enumerable,
      });
    }

    module.exports = defineLazyObjectProperty;
  },
  53,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativePlatformConstantsAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var Platform = {
      __constants: null,
      OS: "android",

      get Version() {
        return this.constants.Version;
      },

      get constants() {
        if (this.__constants == null) {
          this.__constants =
            _NativePlatformConstantsAndroid.default.getConstants();
        }

        return this.__constants;
      },

      get isTesting() {
        return false;
      },

      get isTV() {
        return this.constants.uiMode === "tv";
      },

      select: function select(spec) {
        return "android" in spec
          ? spec.android
          : "native" in spec
          ? spec.native
          : spec.default;
      },
    };
    module.exports = Platform;
  },
  54,
  [7, 55]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("PlatformConstants");

    exports.default = _default;
  },
  55,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _global, _global$HermesInterna;

    var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

    if (
      (_global = global) != null &&
      (_global$HermesInterna = _global.HermesInternal) != null &&
      _global$HermesInterna.hasPromise != null &&
      _global$HermesInterna.hasPromise()
    ) {
      var HermesPromise = global.Promise;
    } else {
      polyfillGlobal("Promise", function () {
        return _$$_REQUIRE(_dependencyMap[1]);
      });
    }
  },
  56,
  [57, 58]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[0]);

    function polyfillObjectProperty(object, name, getValue) {
      var descriptor = Object.getOwnPropertyDescriptor(object, name);

      var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        _ref$configurable = _ref.configurable,
        configurable =
          _ref$configurable === undefined ? false : _ref$configurable;

      if (descriptor && !configurable) {
        console.error(
          "Failed to set polyfill. " + name + " is not configurable."
        );
        return;
      }

      defineLazyObjectProperty(object, name, {
        get: getValue,
        enumerable: enumerable !== false,
        writable: writable !== false,
      });
    }

    function polyfillGlobal(name, getValue) {
      polyfillObjectProperty(global, name, getValue);
    }

    module.exports = {
      polyfillObjectProperty: polyfillObjectProperty,
      polyfillGlobal: polyfillGlobal,
    };
  },
  57,
  [53]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var Promise = _$$_REQUIRE(_dependencyMap[0]);

    _$$_REQUIRE(_dependencyMap[1]);

    module.exports = Promise;
  },
  58,
  [59, 61]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var Promise = _$$_REQUIRE(_dependencyMap[0]);

    module.exports = Promise;
    var TRUE = valuePromise(true);
    var FALSE = valuePromise(false);
    var NULL = valuePromise(null);
    var UNDEFINED = valuePromise(undefined);
    var ZERO = valuePromise(0);
    var EMPTYSTRING = valuePromise("");

    function valuePromise(value) {
      var p = new Promise(Promise._7);
      p._2 = 1;
      p._3 = value;
      return p;
    }

    Promise.resolve = function (value) {
      if (value instanceof Promise) return value;
      if (value === null) return NULL;
      if (value === undefined) return UNDEFINED;
      if (value === true) return TRUE;
      if (value === false) return FALSE;
      if (value === 0) return ZERO;
      if (value === "") return EMPTYSTRING;

      if (typeof value === "object" || typeof value === "function") {
        try {
          var then = value.then;

          if (typeof then === "function") {
            return new Promise(then.bind(value));
          }
        } catch (ex) {
          return new Promise(function (resolve, reject) {
            reject(ex);
          });
        }
      }

      return valuePromise(value);
    };

    var _iterableToArray = function iterableToArray(iterable) {
      if (typeof Array.from === "function") {
        _iterableToArray = Array.from;
        return Array.from(iterable);
      }

      _iterableToArray = function iterableToArray(x) {
        return Array.prototype.slice.call(x);
      };

      return Array.prototype.slice.call(iterable);
    };

    Promise.all = function (arr) {
      var args = _iterableToArray(arr);

      return new Promise(function (resolve, reject) {
        if (args.length === 0) return resolve([]);
        var remaining = args.length;

        function res(i, val) {
          if (val && (typeof val === "object" || typeof val === "function")) {
            if (val instanceof Promise && val.then === Promise.prototype.then) {
              while (val._2 === 3) {
                val = val._3;
              }

              if (val._2 === 1) return res(i, val._3);
              if (val._2 === 2) reject(val._3);
              val.then(function (val) {
                res(i, val);
              }, reject);
              return;
            } else {
              var then = val.then;

              if (typeof then === "function") {
                var p = new Promise(then.bind(val));
                p.then(function (val) {
                  res(i, val);
                }, reject);
                return;
              }
            }
          }

          args[i] = val;

          if (--remaining === 0) {
            resolve(args);
          }
        }

        for (var i = 0; i < args.length; i++) {
          res(i, args[i]);
        }
      });
    };

    function onSettledFulfill(value) {
      return {
        status: "fulfilled",
        value: value,
      };
    }

    function onSettledReject(reason) {
      return {
        status: "rejected",
        reason: reason,
      };
    }

    function mapAllSettled(item) {
      if (item && (typeof item === "object" || typeof item === "function")) {
        if (item instanceof Promise && item.then === Promise.prototype.then) {
          return item.then(onSettledFulfill, onSettledReject);
        }

        var then = item.then;

        if (typeof then === "function") {
          return new Promise(then.bind(item)).then(
            onSettledFulfill,
            onSettledReject
          );
        }
      }

      return onSettledFulfill(item);
    }

    Promise.allSettled = function (iterable) {
      return Promise.all(_iterableToArray(iterable).map(mapAllSettled));
    };

    Promise.reject = function (value) {
      return new Promise(function (resolve, reject) {
        reject(value);
      });
    };

    Promise.race = function (values) {
      return new Promise(function (resolve, reject) {
        _iterableToArray(values).forEach(function (value) {
          Promise.resolve(value).then(resolve, reject);
        });
      });
    };

    Promise.prototype["catch"] = function (onRejected) {
      return this.then(null, onRejected);
    };
  },
  59,
  [60]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function noop() {}

    var LAST_ERROR = null;
    var IS_ERROR = {};

    function getThen(obj) {
      try {
        return obj.then;
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }

    function tryCallOne(fn, a) {
      try {
        return fn(a);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }

    function tryCallTwo(fn, a, b) {
      try {
        fn(a, b);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }

    module.exports = Promise;

    function Promise(fn) {
      if (typeof this !== "object") {
        throw new TypeError("Promises must be constructed via new");
      }

      if (typeof fn !== "function") {
        throw new TypeError("Promise constructor's argument is not a function");
      }

      this._1 = 0;
      this._2 = 0;
      this._3 = null;
      this._4 = null;
      if (fn === noop) return;
      doResolve(fn, this);
    }

    Promise._5 = null;
    Promise._6 = null;
    Promise._7 = noop;

    Promise.prototype.then = function (onFulfilled, onRejected) {
      if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
      }

      var res = new Promise(noop);
      handle(this, new Handler(onFulfilled, onRejected, res));
      return res;
    };

    function safeThen(self, onFulfilled, onRejected) {
      return new self.constructor(function (resolve, reject) {
        var res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
      });
    }

    function handle(self, deferred) {
      while (self._2 === 3) {
        self = self._3;
      }

      if (Promise._5) {
        Promise._5(self);
      }

      if (self._2 === 0) {
        if (self._1 === 0) {
          self._1 = 1;
          self._4 = deferred;
          return;
        }

        if (self._1 === 1) {
          self._1 = 2;
          self._4 = [self._4, deferred];
          return;
        }

        self._4.push(deferred);

        return;
      }

      handleResolved(self, deferred);
    }

    function handleResolved(self, deferred) {
      setImmediate(function () {
        var cb = self._2 === 1 ? deferred.onFulfilled : deferred.onRejected;

        if (cb === null) {
          if (self._2 === 1) {
            resolve(deferred.promise, self._3);
          } else {
            reject(deferred.promise, self._3);
          }

          return;
        }

        var ret = tryCallOne(cb, self._3);

        if (ret === IS_ERROR) {
          reject(deferred.promise, LAST_ERROR);
        } else {
          resolve(deferred.promise, ret);
        }
      });
    }

    function resolve(self, newValue) {
      if (newValue === self) {
        return reject(
          self,
          new TypeError("A promise cannot be resolved with itself.")
        );
      }

      if (
        newValue &&
        (typeof newValue === "object" || typeof newValue === "function")
      ) {
        var then = getThen(newValue);

        if (then === IS_ERROR) {
          return reject(self, LAST_ERROR);
        }

        if (then === self.then && newValue instanceof Promise) {
          self._2 = 3;
          self._3 = newValue;
          finale(self);
          return;
        } else if (typeof then === "function") {
          doResolve(then.bind(newValue), self);
          return;
        }
      }

      self._2 = 1;
      self._3 = newValue;
      finale(self);
    }

    function reject(self, newValue) {
      self._2 = 2;
      self._3 = newValue;

      if (Promise._6) {
        Promise._6(self, newValue);
      }

      finale(self);
    }

    function finale(self) {
      if (self._1 === 1) {
        handle(self, self._4);
        self._4 = null;
      }

      if (self._1 === 2) {
        for (var i = 0; i < self._4.length; i++) {
          handle(self, self._4[i]);
        }

        self._4 = null;
      }
    }

    function Handler(onFulfilled, onRejected, promise) {
      this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
      this.onRejected = typeof onRejected === "function" ? onRejected : null;
      this.promise = promise;
    }

    function doResolve(fn, promise) {
      var done = false;
      var res = tryCallTwo(
        fn,
        function (value) {
          if (done) return;
          done = true;
          resolve(promise, value);
        },
        function (reason) {
          if (done) return;
          done = true;
          reject(promise, reason);
        }
      );

      if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
      }
    }
  },
  60,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var Promise = _$$_REQUIRE(_dependencyMap[0]);

    module.exports = Promise;

    Promise.prototype.finally = function (f) {
      return this.then(
        function (value) {
          return Promise.resolve(f()).then(function () {
            return value;
          });
        },
        function (err) {
          return Promise.resolve(f()).then(function () {
            throw err;
          });
        }
      );
    };
  },
  61,
  [60]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

    var _require2 = _$$_REQUIRE(_dependencyMap[1]),
      hasNativeConstructor = _require2.hasNativeConstructor;

    var hasNativeGenerator;

    try {
      hasNativeGenerator = hasNativeConstructor(function* () {},
      "GeneratorFunction");
    } catch (_unused) {
      hasNativeGenerator = false;
    }

    if (!hasNativeGenerator) {
      polyfillGlobal("regeneratorRuntime", function () {
        delete global.regeneratorRuntime;
        return _$$_REQUIRE(_dependencyMap[2]);
      });
    }
  },
  62,
  [57, 63, 64]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function isNativeFunction(f) {
      return (
        typeof f === "function" && f.toString().indexOf("[native code]") > -1
      );
    }

    function hasNativeConstructor(o, expectedName) {
      var con = Object.getPrototypeOf(o).constructor;
      return con.name === expectedName && isNativeFunction(con);
    }

    module.exports = {
      isNativeFunction: isNativeFunction,
      hasNativeConstructor: hasNativeConstructor,
    };
  },
  63,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var runtime = (function (exports) {
      "use strict";

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true,
        });
        return obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return (obj[key] = value);
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator =
          outerFn && outerFn.prototype instanceof Generator
            ? outerFn
            : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap;

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg),
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err,
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (
        NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)
      ) {
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp =
        (GeneratorFunctionPrototype.prototype =
        Generator.prototype =
          Object.create(IteratorPrototype));
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
              (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      exports.awrap = function (arg) {
        return {
          __await: arg,
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (
              value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")
            ) {
              return PromiseImpl.resolve(value.__await).then(
                function (value) {
                  invoke("next", value, resolve, reject);
                },
                function (err) {
                  invoke("throw", err, resolve, reject);
                }
              );
            }

            return PromiseImpl.resolve(value).then(
              function (unwrapped) {
                result.value = unwrapped;
                resolve(result);
              },
              function (error) {
                return invoke("throw", error, resolve, reject);
              }
            );
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return (previousPromise = previousPromise
            ? previousPromise.then(
                callInvokeWithMethodAndArg,
                callInvokeWithMethodAndArg
              )
            : callInvokeWithMethodAndArg());
        }

        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      exports.async = function (
        innerFn,
        outerFn,
        self,
        tryLocsList,
        PromiseImpl
      ) {
        if (PromiseImpl === undefined) PromiseImpl = Promise;
        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );
        return exports.isGeneratorFunction(outerFn)
          ? iter
          : iter.next().then(function (result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done,
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined) {
          context.delegate = null;

          if (context.method === "throw") {
            if (delegate.iterator["return"]) {
              context.method = "return";
              context.arg = undefined;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method"
            );
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
          }
        } else {
          return info;
        }

        context.delegate = null;
        return ContinueSentinel;
      }

      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator");
      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0],
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [
          {
            tryLoc: "root",
          },
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse();
        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
              next = function next() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next.value = iterable[i];
                    next.done = false;
                    return next;
                  }
                }

                next.value = undefined;
                next.done = true;
                return next;
              };

            return (next.next = next);
          }
        }

        return {
          next: doneResult,
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined,
          done: true,
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              if (
                name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))
              ) {
                this[name] = undefined;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              context.method = "next";
              context.arg = undefined;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (
              entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc
            ) {
              var finallyEntry = entry;
              break;
            }
          }

          if (
            finallyEntry &&
            (type === "break" || type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc
          ) {
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        catch: function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc,
          };

          if (this.method === "next") {
            this.arg = undefined;
          }

          return ContinueSentinel;
        },
      };
      return exports;
    })(typeof module === "object" ? module.exports : {});

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  },
  64,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _global$HermesInterna, _global$HermesInterna2;

    var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

    var _require2 = _$$_REQUIRE(_dependencyMap[1]),
      isNativeFunction = _require2.isNativeFunction;

    var hasHermesPromiseQueuedToJSVM =
      ((_global$HermesInterna = global.HermesInternal) == null
        ? undefined
        : _global$HermesInterna.hasPromise == null
        ? undefined
        : _global$HermesInterna.hasPromise()) === true &&
      ((_global$HermesInterna2 = global.HermesInternal) == null
        ? undefined
        : _global$HermesInterna2.useEngineQueue == null
        ? undefined
        : _global$HermesInterna2.useEngineQueue()) === true;
    var hasNativePromise = isNativeFunction(Promise);
    var hasPromiseQueuedToJSVM =
      hasNativePromise || hasHermesPromiseQueuedToJSVM;

    if (global.RN$Bridgeless !== true) {
      var defineLazyTimer = function defineLazyTimer(name) {
        polyfillGlobal(name, function () {
          return _$$_REQUIRE(_dependencyMap[2])[name];
        });
      };

      defineLazyTimer("setTimeout");
      defineLazyTimer("clearTimeout");
      defineLazyTimer("setInterval");
      defineLazyTimer("clearInterval");
      defineLazyTimer("requestAnimationFrame");
      defineLazyTimer("cancelAnimationFrame");
      defineLazyTimer("requestIdleCallback");
      defineLazyTimer("cancelIdleCallback");
    }

    if (hasPromiseQueuedToJSVM) {
      polyfillGlobal("setImmediate", function () {
        return _$$_REQUIRE(_dependencyMap[3]).setImmediate;
      });
      polyfillGlobal("clearImmediate", function () {
        return _$$_REQUIRE(_dependencyMap[3]).clearImmediate;
      });
    } else {
      if (global.RN$Bridgeless !== true) {
        polyfillGlobal("setImmediate", function () {
          return _$$_REQUIRE(_dependencyMap[2]).queueReactNativeMicrotask;
        });
        polyfillGlobal("clearImmediate", function () {
          return _$$_REQUIRE(_dependencyMap[2]).clearReactNativeMicrotask;
        });
      }
    }

    if (hasHermesPromiseQueuedToJSVM) {
      polyfillGlobal("queueMicrotask", function () {
        var _global$HermesInterna3;

        return (_global$HermesInterna3 = global.HermesInternal) == null
          ? undefined
          : _global$HermesInterna3.enqueueJob;
      });
    } else {
      polyfillGlobal("queueMicrotask", function () {
        return _$$_REQUIRE(_dependencyMap[4]).default;
      });
    }
  },
  65,
  [57, 63, 66, 68, 69]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var BatchedBridge = _$$_REQUIRE(_dependencyMap[2]);

    var Systrace = _$$_REQUIRE(_dependencyMap[3]);

    var invariant = _$$_REQUIRE(_dependencyMap[4]);

    var FRAME_DURATION = 16.666666666666668;
    var IDLE_CALLBACK_FRAME_DEADLINE = 1;
    var callbacks = [];
    var types = [];
    var timerIDs = [];
    var reactNativeMicrotasks = [];
    var requestIdleCallbacks = [];
    var requestIdleCallbackTimeouts = {};
    var GUID = 1;
    var errors = [];
    var hasEmittedTimeDriftWarning = false;

    function _getFreeIndex() {
      var freeIndex = timerIDs.indexOf(null);

      if (freeIndex === -1) {
        freeIndex = timerIDs.length;
      }

      return freeIndex;
    }

    function _allocateCallback(func, type) {
      var id = GUID++;

      var freeIndex = _getFreeIndex();

      timerIDs[freeIndex] = id;
      callbacks[freeIndex] = func;
      types[freeIndex] = type;
      return id;
    }

    function _callTimer(timerID, frameTime, didTimeout) {
      if (timerID > GUID) {
        console.warn(
          "Tried to call timer with ID %s but no such timer exists.",
          timerID
        );
      }

      var timerIndex = timerIDs.indexOf(timerID);

      if (timerIndex === -1) {
        return;
      }

      var type = types[timerIndex];
      var callback = callbacks[timerIndex];

      if (!callback || !type) {
        console.error("No callback found for timerID " + timerID);
        return;
      }

      if (type !== "setInterval") {
        _clearIndex(timerIndex);
      }

      try {
        if (
          type === "setTimeout" ||
          type === "setInterval" ||
          type === "queueReactNativeMicrotask"
        ) {
          callback();
        } else if (type === "requestAnimationFrame") {
          callback(global.performance.now());
        } else if (type === "requestIdleCallback") {
          callback({
            timeRemaining: function timeRemaining() {
              return Math.max(
                0,
                FRAME_DURATION - (global.performance.now() - frameTime)
              );
            },
            didTimeout: !!didTimeout,
          });
        } else {
          console.error("Tried to call a callback with invalid type: " + type);
        }
      } catch (e) {
        errors.push(e);
      }
    }

    function _callReactNativeMicrotasksPass() {
      if (reactNativeMicrotasks.length === 0) {
        return false;
      }

      var passReactNativeMicrotasks = reactNativeMicrotasks;
      reactNativeMicrotasks = [];

      for (var i = 0; i < passReactNativeMicrotasks.length; ++i) {
        _callTimer(passReactNativeMicrotasks[i], 0);
      }

      return reactNativeMicrotasks.length > 0;
    }

    function _clearIndex(i) {
      timerIDs[i] = null;
      callbacks[i] = null;
      types[i] = null;
    }

    function _freeCallback(timerID) {
      if (timerID == null) {
        return;
      }

      var index = timerIDs.indexOf(timerID);

      if (index !== -1) {
        var type = types[index];

        _clearIndex(index);

        if (
          type !== "queueReactNativeMicrotask" &&
          type !== "requestIdleCallback"
        ) {
          deleteTimer(timerID);
        }
      }
    }

    var JSTimers = {
      setTimeout: function setTimeout(func, duration) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 2 ? _len - 2 : 0),
            _key = 2;
          _key < _len;
          _key++
        ) {
          args[_key - 2] = arguments[_key];
        }

        var id = _allocateCallback(function () {
          return func.apply(undefined, args);
        }, "setTimeout");

        createTimer(id, duration || 0, Date.now(), false);
        return id;
      },
      setInterval: function setInterval(func, duration) {
        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 2 ? _len2 - 2 : 0),
            _key2 = 2;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2 - 2] = arguments[_key2];
        }

        var id = _allocateCallback(function () {
          return func.apply(undefined, args);
        }, "setInterval");

        createTimer(id, duration || 0, Date.now(), true);
        return id;
      },
      queueReactNativeMicrotask: function queueReactNativeMicrotask(func) {
        for (
          var _len3 = arguments.length,
            args = new Array(_len3 > 1 ? _len3 - 1 : 0),
            _key3 = 1;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3 - 1] = arguments[_key3];
        }

        var id = _allocateCallback(function () {
          return func.apply(undefined, args);
        }, "queueReactNativeMicrotask");

        reactNativeMicrotasks.push(id);
        return id;
      },
      requestAnimationFrame: function requestAnimationFrame(func) {
        var id = _allocateCallback(func, "requestAnimationFrame");

        createTimer(id, 1, Date.now(), false);
        return id;
      },
      requestIdleCallback: function requestIdleCallback(func, options) {
        if (requestIdleCallbacks.length === 0) {
          setSendIdleEvents(true);
        }

        var timeout = options && options.timeout;

        var id = _allocateCallback(
          timeout != null
            ? function (deadline) {
                var timeoutId = requestIdleCallbackTimeouts[id];

                if (timeoutId) {
                  JSTimers.clearTimeout(timeoutId);
                  delete requestIdleCallbackTimeouts[id];
                }

                return func(deadline);
              }
            : func,
          "requestIdleCallback"
        );

        requestIdleCallbacks.push(id);

        if (timeout != null) {
          var timeoutId = JSTimers.setTimeout(function () {
            var index = requestIdleCallbacks.indexOf(id);

            if (index > -1) {
              requestIdleCallbacks.splice(index, 1);

              _callTimer(id, global.performance.now(), true);
            }

            delete requestIdleCallbackTimeouts[id];

            if (requestIdleCallbacks.length === 0) {
              setSendIdleEvents(false);
            }
          }, timeout);
          requestIdleCallbackTimeouts[id] = timeoutId;
        }

        return id;
      },
      cancelIdleCallback: function cancelIdleCallback(timerID) {
        _freeCallback(timerID);

        var index = requestIdleCallbacks.indexOf(timerID);

        if (index !== -1) {
          requestIdleCallbacks.splice(index, 1);
        }

        var timeoutId = requestIdleCallbackTimeouts[timerID];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[timerID];
        }

        if (requestIdleCallbacks.length === 0) {
          setSendIdleEvents(false);
        }
      },
      clearTimeout: function clearTimeout(timerID) {
        _freeCallback(timerID);
      },
      clearInterval: function clearInterval(timerID) {
        _freeCallback(timerID);
      },
      clearReactNativeMicrotask: function clearReactNativeMicrotask(timerID) {
        _freeCallback(timerID);

        var index = reactNativeMicrotasks.indexOf(timerID);

        if (index !== -1) {
          reactNativeMicrotasks.splice(index, 1);
        }
      },
      cancelAnimationFrame: function cancelAnimationFrame(timerID) {
        _freeCallback(timerID);
      },
      callTimers: function callTimers(timersToCall) {
        invariant(
          timersToCall.length !== 0,
          "Cannot call `callTimers` with an empty list of IDs."
        );
        errors.length = 0;

        for (var i = 0; i < timersToCall.length; i++) {
          _callTimer(timersToCall[i], 0);
        }

        var errorCount = errors.length;

        if (errorCount > 0) {
          if (errorCount > 1) {
            for (var ii = 1; ii < errorCount; ii++) {
              JSTimers.setTimeout(
                function (error) {
                  throw error;
                }.bind(null, errors[ii]),
                0
              );
            }
          }

          throw errors[0];
        }
      },
      callIdleCallbacks: function callIdleCallbacks(frameTime) {
        if (
          FRAME_DURATION - (global.performance.now() - frameTime) <
          IDLE_CALLBACK_FRAME_DEADLINE
        ) {
          return;
        }

        errors.length = 0;

        if (requestIdleCallbacks.length > 0) {
          var passIdleCallbacks = requestIdleCallbacks;
          requestIdleCallbacks = [];

          for (var i = 0; i < passIdleCallbacks.length; ++i) {
            _callTimer(passIdleCallbacks[i], frameTime);
          }
        }

        if (requestIdleCallbacks.length === 0) {
          setSendIdleEvents(false);
        }

        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      },
      callReactNativeMicrotasks: function callReactNativeMicrotasks() {
        errors.length = 0;

        while (_callReactNativeMicrotasksPass()) {}

        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      },
      emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
        if (hasEmittedTimeDriftWarning) {
          return;
        }

        hasEmittedTimeDriftWarning = true;
        console.warn(warningMessage);
      },
    };

    function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
      invariant(_NativeTiming.default, "NativeTiming is available");

      _NativeTiming.default.createTimer(
        callbackID,
        duration,
        jsSchedulingTime,
        repeats
      );
    }

    function deleteTimer(timerID) {
      invariant(_NativeTiming.default, "NativeTiming is available");

      _NativeTiming.default.deleteTimer(timerID);
    }

    function setSendIdleEvents(sendIdleEvents) {
      invariant(_NativeTiming.default, "NativeTiming is available");

      _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
    }

    var ExportedJSTimers;

    if (!_NativeTiming.default) {
      console.warn("Timing native module is not available, can't set timers.");
      ExportedJSTimers = {
        callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
        queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask,
      };
    } else {
      ExportedJSTimers = JSTimers;
    }

    BatchedBridge.setReactNativeMicrotasksCallback(
      JSTimers.callReactNativeMicrotasks
    );
    module.exports = ExportedJSTimers;
  },
  66,
  [7, 67, 48, 25, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("Timing");

    exports.default = _default;
  },
  67,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var GUIID = 1;
    var clearedImmediates = new Set();

    function setImmediate(callback) {
      for (
        var _len = arguments.length,
          args = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        args[_key - 1] = arguments[_key];
      }

      if (arguments.length < 1) {
        throw new TypeError(
          "setImmediate must be called with at least one argument (a function to call)"
        );
      }

      if (typeof callback !== "function") {
        throw new TypeError(
          "The first argument to setImmediate must be a function."
        );
      }

      var id = GUIID++;

      if (clearedImmediates.has(id)) {
        clearedImmediates.delete(id);
      }

      global.queueMicrotask(function () {
        if (!clearedImmediates.has(id)) {
          callback.apply(undefined, args);
        } else {
          clearedImmediates.delete(id);
        }
      });
      return id;
    }

    function clearImmediate(immediateID) {
      clearedImmediates.add(immediateID);
    }

    var immediateShim = {
      setImmediate: setImmediate,
      clearImmediate: clearImmediate,
    };
    module.exports = immediateShim;
  },
  68,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = queueMicrotask;
    var resolvedPromise;

    function queueMicrotask(callback) {
      if (arguments.length < 1) {
        throw new TypeError(
          "queueMicrotask must be called with at least one argument (a function to call)"
        );
      }

      if (typeof callback !== "function") {
        throw new TypeError(
          "The argument to queueMicrotask must be a function."
        );
      }

      (resolvedPromise || (resolvedPromise = Promise.resolve()))
        .then(callback)
        .catch(function (error) {
          return setTimeout(function () {
            throw error;
          }, 0);
        });
    }
  },
  69,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillGlobal = _require.polyfillGlobal;

    polyfillGlobal("XMLHttpRequest", function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });
    polyfillGlobal("FormData", function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
    polyfillGlobal("fetch", function () {
      return _$$_REQUIRE(_dependencyMap[3]).fetch;
    });
    polyfillGlobal("Headers", function () {
      return _$$_REQUIRE(_dependencyMap[3]).Headers;
    });
    polyfillGlobal("Request", function () {
      return _$$_REQUIRE(_dependencyMap[3]).Request;
    });
    polyfillGlobal("Response", function () {
      return _$$_REQUIRE(_dependencyMap[3]).Response;
    });
    polyfillGlobal("WebSocket", function () {
      return _$$_REQUIRE(_dependencyMap[4]);
    });
    polyfillGlobal("Blob", function () {
      return _$$_REQUIRE(_dependencyMap[5]);
    });
    polyfillGlobal("File", function () {
      return _$$_REQUIRE(_dependencyMap[6]);
    });
    polyfillGlobal("FileReader", function () {
      return _$$_REQUIRE(_dependencyMap[7]);
    });
    polyfillGlobal("URL", function () {
      return _$$_REQUIRE(_dependencyMap[8]).URL;
    });
    polyfillGlobal("URLSearchParams", function () {
      return _$$_REQUIRE(_dependencyMap[8]).URLSearchParams;
    });
    polyfillGlobal("AbortController", function () {
      return _$$_REQUIRE(_dependencyMap[9]).AbortController;
    });
    polyfillGlobal("AbortSignal", function () {
      return _$$_REQUIRE(_dependencyMap[9]).AbortSignal;
    });
  },
  70,
  [57, 71, 87, 89, 91, 76, 96, 97, 99, 100]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _toConsumableArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var BlobManager = _$$_REQUIRE(_dependencyMap[8]);

    var GlobalPerformanceLogger = _$$_REQUIRE(_dependencyMap[9]);

    var RCTNetworking = _$$_REQUIRE(_dependencyMap[10]);

    var base64 = _$$_REQUIRE(_dependencyMap[11]);

    var EventTarget = _$$_REQUIRE(_dependencyMap[12]);

    var invariant = _$$_REQUIRE(_dependencyMap[13]);

    var DEBUG_NETWORK_SEND_DELAY = false;

    if (BlobManager.isAvailable) {
      BlobManager.addNetworkingHandler();
    }

    var UNSENT = 0;
    var OPENED = 1;
    var HEADERS_RECEIVED = 2;
    var LOADING = 3;
    var DONE = 4;
    var SUPPORTED_RESPONSE_TYPES = {
      arraybuffer: typeof global.ArrayBuffer === "function",
      blob: typeof global.Blob === "function",
      document: false,
      json: true,
      text: true,
      "": true,
    };
    var REQUEST_EVENTS = [
      "abort",
      "error",
      "load",
      "loadstart",
      "progress",
      "timeout",
      "loadend",
    ];
    var XHR_EVENTS = REQUEST_EVENTS.concat("readystatechange");

    var XMLHttpRequestEventTarget = (function (_ref) {
      (0, _inherits2.default)(XMLHttpRequestEventTarget, _ref);

      var _super = _createSuper(XMLHttpRequestEventTarget);

      function XMLHttpRequestEventTarget() {
        (0, _classCallCheck2.default)(this, XMLHttpRequestEventTarget);
        return _super.apply(this, arguments);
      }

      return (0, _createClass2.default)(XMLHttpRequestEventTarget);
    })(EventTarget.apply(undefined, REQUEST_EVENTS));

    var XMLHttpRequest = (function (_ref2) {
      (0, _inherits2.default)(XMLHttpRequest, _ref2);

      var _super2 = _createSuper(XMLHttpRequest);

      function XMLHttpRequest() {
        var _this;

        (0, _classCallCheck2.default)(this, XMLHttpRequest);
        _this = _super2.call(this);
        _this.UNSENT = UNSENT;
        _this.OPENED = OPENED;
        _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
        _this.LOADING = LOADING;
        _this.DONE = DONE;
        _this.readyState = UNSENT;
        _this.status = 0;
        _this.timeout = 0;
        _this.withCredentials = true;
        _this.upload = new XMLHttpRequestEventTarget();
        _this._aborted = false;
        _this._hasError = false;
        _this._method = null;
        _this._perfKey = null;
        _this._response = "";
        _this._url = null;
        _this._timedOut = false;
        _this._trackingName = "unknown";
        _this._incrementalEvents = false;
        _this._performanceLogger = GlobalPerformanceLogger;

        _this._reset();

        return _this;
      }

      (0, _createClass2.default)(
        XMLHttpRequest,
        [
          {
            key: "_reset",
            value: function _reset() {
              this.readyState = this.UNSENT;
              this.responseHeaders = undefined;
              this.status = 0;
              delete this.responseURL;
              this._requestId = null;
              this._cachedResponse = undefined;
              this._hasError = false;
              this._headers = {};
              this._response = "";
              this._responseType = "";
              this._sent = false;
              this._lowerCaseResponseHeaders = {};

              this._clearSubscriptions();

              this._timedOut = false;
            },
          },
          {
            key: "responseType",
            get: function get() {
              return this._responseType;
            },
            set: function set(responseType) {
              if (this._sent) {
                throw new Error(
                  "Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent."
                );
              }

              if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
                console.warn(
                  "The provided value '" +
                    responseType +
                    "' is not a valid 'responseType'."
                );
                return;
              }

              invariant(
                SUPPORTED_RESPONSE_TYPES[responseType] ||
                  responseType === "document",
                "The provided value '" +
                  responseType +
                  "' is unsupported in this environment."
              );

              if (responseType === "blob") {
                invariant(
                  BlobManager.isAvailable,
                  "Native module BlobModule is required for blob support"
                );
              }

              this._responseType = responseType;
            },
          },
          {
            key: "responseText",
            get: function get() {
              if (this._responseType !== "" && this._responseType !== "text") {
                throw new Error(
                  "The 'responseText' property is only available if 'responseType' " +
                    ("is set to '' or 'text', but it is '" +
                      this._responseType +
                      "'.")
                );
              }

              if (this.readyState < LOADING) {
                return "";
              }

              return this._response;
            },
          },
          {
            key: "response",
            get: function get() {
              var responseType = this.responseType;

              if (responseType === "" || responseType === "text") {
                return this.readyState < LOADING || this._hasError
                  ? ""
                  : this._response;
              }

              if (this.readyState !== DONE) {
                return null;
              }

              if (this._cachedResponse !== undefined) {
                return this._cachedResponse;
              }

              switch (responseType) {
                case "document":
                  this._cachedResponse = null;
                  break;

                case "arraybuffer":
                  this._cachedResponse = base64.toByteArray(
                    this._response
                  ).buffer;
                  break;

                case "blob":
                  if (typeof this._response === "object" && this._response) {
                    this._cachedResponse = BlobManager.createFromOptions(
                      this._response
                    );
                  } else if (this._response === "") {
                    this._cachedResponse = BlobManager.createFromParts([]);
                  } else {
                    throw new Error(
                      "Invalid response for blob: " + this._response
                    );
                  }

                  break;

                case "json":
                  try {
                    this._cachedResponse = JSON.parse(this._response);
                  } catch (_) {
                    this._cachedResponse = null;
                  }

                  break;

                default:
                  this._cachedResponse = null;
              }

              return this._cachedResponse;
            },
          },
          {
            key: "__didCreateRequest",
            value: function __didCreateRequest(requestId) {
              this._requestId = requestId;
              XMLHttpRequest._interceptor &&
                XMLHttpRequest._interceptor.requestSent(
                  requestId,
                  this._url || "",
                  this._method || "GET",
                  this._headers
                );
            },
          },
          {
            key: "__didUploadProgress",
            value: function __didUploadProgress(requestId, progress, total) {
              if (requestId === this._requestId) {
                this.upload.dispatchEvent({
                  type: "progress",
                  lengthComputable: true,
                  loaded: progress,
                  total: total,
                });
              }
            },
          },
          {
            key: "__didReceiveResponse",
            value: function __didReceiveResponse(
              requestId,
              status,
              responseHeaders,
              responseURL
            ) {
              if (requestId === this._requestId) {
                this._perfKey != null &&
                  this._performanceLogger.stopTimespan(this._perfKey);
                this.status = status;
                this.setResponseHeaders(responseHeaders);
                this.setReadyState(this.HEADERS_RECEIVED);

                if (responseURL || responseURL === "") {
                  this.responseURL = responseURL;
                } else {
                  delete this.responseURL;
                }

                XMLHttpRequest._interceptor &&
                  XMLHttpRequest._interceptor.responseReceived(
                    requestId,
                    responseURL || this._url || "",
                    status,
                    responseHeaders || {}
                  );
              }
            },
          },
          {
            key: "__didReceiveData",
            value: function __didReceiveData(requestId, response) {
              if (requestId !== this._requestId) {
                return;
              }

              this._response = response;
              this._cachedResponse = undefined;
              this.setReadyState(this.LOADING);
              XMLHttpRequest._interceptor &&
                XMLHttpRequest._interceptor.dataReceived(requestId, response);
            },
          },
          {
            key: "__didReceiveIncrementalData",
            value: function __didReceiveIncrementalData(
              requestId,
              responseText,
              progress,
              total
            ) {
              if (requestId !== this._requestId) {
                return;
              }

              if (!this._response) {
                this._response = responseText;
              } else {
                this._response += responseText;
              }

              XMLHttpRequest._interceptor &&
                XMLHttpRequest._interceptor.dataReceived(
                  requestId,
                  responseText
                );
              this.setReadyState(this.LOADING);

              this.__didReceiveDataProgress(requestId, progress, total);
            },
          },
          {
            key: "__didReceiveDataProgress",
            value: function __didReceiveDataProgress(requestId, loaded, total) {
              if (requestId !== this._requestId) {
                return;
              }

              this.dispatchEvent({
                type: "progress",
                lengthComputable: total >= 0,
                loaded: loaded,
                total: total,
              });
            },
          },
          {
            key: "__didCompleteResponse",
            value: function __didCompleteResponse(
              requestId,
              error,
              timeOutError
            ) {
              if (requestId === this._requestId) {
                if (error) {
                  if (
                    this._responseType === "" ||
                    this._responseType === "text"
                  ) {
                    this._response = error;
                  }

                  this._hasError = true;

                  if (timeOutError) {
                    this._timedOut = true;
                  }
                }

                this._clearSubscriptions();

                this._requestId = null;
                this.setReadyState(this.DONE);

                if (error) {
                  XMLHttpRequest._interceptor &&
                    XMLHttpRequest._interceptor.loadingFailed(requestId, error);
                } else {
                  XMLHttpRequest._interceptor &&
                    XMLHttpRequest._interceptor.loadingFinished(
                      requestId,
                      this._response.length
                    );
                }
              }
            },
          },
          {
            key: "_clearSubscriptions",
            value: function _clearSubscriptions() {
              (this._subscriptions || []).forEach(function (sub) {
                if (sub) {
                  sub.remove();
                }
              });
              this._subscriptions = [];
            },
          },
          {
            key: "getAllResponseHeaders",
            value: function getAllResponseHeaders() {
              if (!this.responseHeaders) {
                return null;
              }

              var responseHeaders = this.responseHeaders;
              var unsortedHeaders = new Map();

              for (var rawHeaderName of Object.keys(responseHeaders)) {
                var headerValue = responseHeaders[rawHeaderName];
                var lowerHeaderName = rawHeaderName.toLowerCase();
                var header = unsortedHeaders.get(lowerHeaderName);

                if (header) {
                  header.headerValue += ", " + headerValue;
                  unsortedHeaders.set(lowerHeaderName, header);
                } else {
                  unsortedHeaders.set(lowerHeaderName, {
                    lowerHeaderName: lowerHeaderName,
                    upperHeaderName: rawHeaderName.toUpperCase(),
                    headerValue: headerValue,
                  });
                }
              }

              var sortedHeaders = (0, _toConsumableArray2.default)(
                unsortedHeaders.values()
              ).sort(function (a, b) {
                if (a.upperHeaderName < b.upperHeaderName) {
                  return -1;
                }

                if (a.upperHeaderName > b.upperHeaderName) {
                  return 1;
                }

                return 0;
              });
              return (
                sortedHeaders
                  .map(function (header) {
                    return header.lowerHeaderName + ": " + header.headerValue;
                  })
                  .join("\r\n") + "\r\n"
              );
            },
          },
          {
            key: "getResponseHeader",
            value: function getResponseHeader(header) {
              var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

              return value !== undefined ? value : null;
            },
          },
          {
            key: "setRequestHeader",
            value: function setRequestHeader(header, value) {
              if (this.readyState !== this.OPENED) {
                throw new Error("Request has not been opened");
              }

              this._headers[header.toLowerCase()] = String(value);
            },
          },
          {
            key: "setTrackingName",
            value: function setTrackingName(trackingName) {
              this._trackingName = trackingName;
              return this;
            },
          },
          {
            key: "setPerformanceLogger",
            value: function setPerformanceLogger(performanceLogger) {
              this._performanceLogger = performanceLogger;
              return this;
            },
          },
          {
            key: "open",
            value: function open(method, url, async) {
              if (this.readyState !== this.UNSENT) {
                throw new Error("Cannot open, already sending");
              }

              if (async !== undefined && !async) {
                throw new Error("Synchronous http requests are not supported");
              }

              if (!url) {
                throw new Error("Cannot load an empty url");
              }

              this._method = method.toUpperCase();
              this._url = url;
              this._aborted = false;
              this.setReadyState(this.OPENED);
            },
          },
          {
            key: "send",
            value: function send(data) {
              var _this2 = this;

              if (this.readyState !== this.OPENED) {
                throw new Error("Request has not been opened");
              }

              if (this._sent) {
                throw new Error("Request has already been sent");
              }

              this._sent = true;
              var incrementalEvents =
                this._incrementalEvents ||
                !!this.onreadystatechange ||
                !!this.onprogress;

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didSendNetworkData",
                  function (args) {
                    return _this2.__didUploadProgress.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didReceiveNetworkResponse",
                  function (args) {
                    return _this2.__didReceiveResponse.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didReceiveNetworkData",
                  function (args) {
                    return _this2.__didReceiveData.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didReceiveNetworkIncrementalData",
                  function (args) {
                    return _this2.__didReceiveIncrementalData.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didReceiveNetworkDataProgress",
                  function (args) {
                    return _this2.__didReceiveDataProgress.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              this._subscriptions.push(
                RCTNetworking.addListener(
                  "didCompleteNetworkResponse",
                  function (args) {
                    return _this2.__didCompleteResponse.apply(
                      _this2,
                      (0, _toConsumableArray2.default)(args)
                    );
                  }
                )
              );

              var nativeResponseType = "text";

              if (this._responseType === "arraybuffer") {
                nativeResponseType = "base64";
              }

              if (this._responseType === "blob") {
                nativeResponseType = "blob";
              }

              var doSend = function doSend() {
                var friendlyName =
                  _this2._trackingName !== "unknown"
                    ? _this2._trackingName
                    : _this2._url;
                _this2._perfKey =
                  "network_XMLHttpRequest_" + String(friendlyName);

                _this2._performanceLogger.startTimespan(_this2._perfKey);

                invariant(
                  _this2._method,
                  "XMLHttpRequest method needs to be defined (%s).",
                  friendlyName
                );
                invariant(
                  _this2._url,
                  "XMLHttpRequest URL needs to be defined (%s).",
                  friendlyName
                );
                RCTNetworking.sendRequest(
                  _this2._method,
                  _this2._trackingName,
                  _this2._url,
                  _this2._headers,
                  data,
                  nativeResponseType,
                  incrementalEvents,
                  _this2.timeout,
                  _this2.__didCreateRequest.bind(_this2),
                  _this2.withCredentials
                );
              };

              {
                doSend();
              }
            },
          },
          {
            key: "abort",
            value: function abort() {
              this._aborted = true;

              if (this._requestId) {
                RCTNetworking.abortRequest(this._requestId);
              }

              if (
                !(
                  this.readyState === this.UNSENT ||
                  (this.readyState === this.OPENED && !this._sent) ||
                  this.readyState === this.DONE
                )
              ) {
                this._reset();

                this.setReadyState(this.DONE);
              }

              this._reset();
            },
          },
          {
            key: "setResponseHeaders",
            value: function setResponseHeaders(responseHeaders) {
              this.responseHeaders = responseHeaders || null;
              var headers = responseHeaders || {};
              this._lowerCaseResponseHeaders = Object.keys(headers).reduce(
                function (lcaseHeaders, headerName) {
                  lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
                  return lcaseHeaders;
                },
                {}
              );
            },
          },
          {
            key: "setReadyState",
            value: function setReadyState(newState) {
              this.readyState = newState;
              this.dispatchEvent({
                type: "readystatechange",
              });

              if (newState === this.DONE) {
                if (this._aborted) {
                  this.dispatchEvent({
                    type: "abort",
                  });
                } else if (this._hasError) {
                  if (this._timedOut) {
                    this.dispatchEvent({
                      type: "timeout",
                    });
                  } else {
                    this.dispatchEvent({
                      type: "error",
                    });
                  }
                } else {
                  this.dispatchEvent({
                    type: "load",
                  });
                }

                this.dispatchEvent({
                  type: "loadend",
                });
              }
            },
          },
          {
            key: "addEventListener",
            value: function addEventListener(type, listener) {
              if (type === "readystatechange" || type === "progress") {
                this._incrementalEvents = true;
              }

              (0, _get2.default)(
                (0, _getPrototypeOf2.default)(XMLHttpRequest.prototype),
                "addEventListener",
                this
              ).call(this, type, listener);
            },
          },
        ],
        [
          {
            key: "setInterceptor",
            value: function setInterceptor(interceptor) {
              XMLHttpRequest._interceptor = interceptor;
            },
          },
        ]
      );
      return XMLHttpRequest;
    })(
      EventTarget.apply(undefined, (0, _toConsumableArray2.default)(XHR_EVENTS))
    );

    XMLHttpRequest.UNSENT = UNSENT;
    XMLHttpRequest.OPENED = OPENED;
    XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
    XMLHttpRequest.LOADING = LOADING;
    XMLHttpRequest.DONE = DONE;
    XMLHttpRequest._interceptor = null;
    module.exports = XMLHttpRequest;
  },
  71,
  [7, 10, 72, 17, 16, 28, 30, 33, 74, 78, 81, 86, 88, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var superPropBase = _$$_REQUIRE(_dependencyMap[0]);

    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        (module.exports = _get = Reflect.get.bind()),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports);
      } else {
        (module.exports = _get =
          function _get(target, property, receiver) {
            var base = superPropBase(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);

            if (desc.get) {
              return desc.get.call(arguments.length < 3 ? target : receiver);
            }

            return desc.value;
          }),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports);
      }

      return _get.apply(this, arguments);
    }

    (module.exports = _get),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  72,
  [73]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf(object);
        if (object === null) break;
      }

      return object;
    }

    (module.exports = _superPropBase),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  73,
  [33]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeBlobModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var Blob = _$$_REQUIRE(_dependencyMap[5]);

    var BlobRegistry = _$$_REQUIRE(_dependencyMap[6]);

    function uuidv4() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
        /[xy]/g,
        function (c) {
          var r = (Math.random() * 16) | 0,
            v = c == "x" ? r : (r & 0x3) | 0x8;
          return v.toString(16);
        }
      );
    }

    function createBlobCollector(blobId) {
      if (global.__blobCollectorProvider == null) {
        return null;
      } else {
        return global.__blobCollectorProvider(blobId);
      }
    }

    var BlobManager = (function () {
      function BlobManager() {
        (0, _classCallCheck2.default)(this, BlobManager);
      }

      (0, _createClass2.default)(BlobManager, null, [
        {
          key: "createFromParts",
          value: function createFromParts(parts, options) {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );
            var blobId = uuidv4();
            var items = parts.map(function (part) {
              if (
                part instanceof ArrayBuffer ||
                (global.ArrayBufferView &&
                  part instanceof global.ArrayBufferView)
              ) {
                throw new Error(
                  "Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported"
                );
              }

              if (part instanceof Blob) {
                return {
                  data: part.data,
                  type: "blob",
                };
              } else {
                return {
                  data: String(part),
                  type: "string",
                };
              }
            });
            var size = items.reduce(function (acc, curr) {
              if (curr.type === "string") {
                return acc + global.unescape(encodeURI(curr.data)).length;
              } else {
                return acc + curr.data.size;
              }
            }, 0);

            _NativeBlobModule.default.createFromParts(items, blobId);

            return BlobManager.createFromOptions({
              blobId: blobId,
              offset: 0,
              size: size,
              type: options ? options.type : "",
              lastModified: options ? options.lastModified : Date.now(),
            });
          },
        },
        {
          key: "createFromOptions",
          value: function createFromOptions(options) {
            BlobRegistry.register(options.blobId);
            return Object.assign(Object.create(Blob.prototype), {
              data:
                options.__collector == null
                  ? Object.assign({}, options, {
                      __collector: createBlobCollector(options.blobId),
                    })
                  : options,
            });
          },
        },
        {
          key: "release",
          value: function release(blobId) {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );
            BlobRegistry.unregister(blobId);

            if (BlobRegistry.has(blobId)) {
              return;
            }

            _NativeBlobModule.default.release(blobId);
          },
        },
        {
          key: "addNetworkingHandler",
          value: function addNetworkingHandler() {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );

            _NativeBlobModule.default.addNetworkingHandler();
          },
        },
        {
          key: "addWebSocketHandler",
          value: function addWebSocketHandler(socketId) {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );

            _NativeBlobModule.default.addWebSocketHandler(socketId);
          },
        },
        {
          key: "removeWebSocketHandler",
          value: function removeWebSocketHandler(socketId) {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );

            _NativeBlobModule.default.removeWebSocketHandler(socketId);
          },
        },
        {
          key: "sendOverSocket",
          value: function sendOverSocket(blob, socketId) {
            (0, _invariant.default)(
              _NativeBlobModule.default,
              "NativeBlobModule is available."
            );

            _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
          },
        },
      ]);
      return BlobManager;
    })();

    BlobManager.isAvailable = !!_NativeBlobModule.default;
    module.exports = BlobManager;
  },
  74,
  [7, 16, 17, 75, 4, 76, 77]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var NativeModule = TurboModuleRegistry.get("BlobModule");
    var constants = null;
    var NativeBlobModule = null;

    if (NativeModule != null) {
      NativeBlobModule = {
        getConstants: function getConstants() {
          if (constants == null) {
            constants = NativeModule.getConstants();
          }

          return constants;
        },
        addNetworkingHandler: function addNetworkingHandler() {
          NativeModule.addNetworkingHandler();
        },
        addWebSocketHandler: function addWebSocketHandler(id) {
          NativeModule.addWebSocketHandler(id);
        },
        removeWebSocketHandler: function removeWebSocketHandler(id) {
          NativeModule.removeWebSocketHandler(id);
        },
        sendOverSocket: function sendOverSocket(blob, socketID) {
          NativeModule.sendOverSocket(blob, socketID);
        },
        createFromParts: function createFromParts(parts, withId) {
          NativeModule.createFromParts(parts, withId);
        },
        release: function release(blobId) {
          NativeModule.release(blobId);
        },
      };
    }

    var _default = NativeBlobModule;
    exports.default = _default;
  },
  75,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var Blob = (function () {
      function Blob() {
        var parts =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : [];
        var options = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, Blob);

        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

        this.data = BlobManager.createFromParts(parts, options).data;
      }

      _createClass(Blob, [
        {
          key: "data",
          get: function get() {
            if (!this._data) {
              throw new Error(
                "Blob has been closed and is no longer available"
              );
            }

            return this._data;
          },
          set: function set(data) {
            this._data = data;
          },
        },
        {
          key: "slice",
          value: function slice(start, end) {
            var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

            var _this$data = this.data,
              offset = _this$data.offset,
              size = _this$data.size;

            if (typeof start === "number") {
              if (start > size) {
                start = size;
              }

              offset += start;
              size -= start;

              if (typeof end === "number") {
                if (end < 0) {
                  end = this.size + end;
                }

                size = end - start;
              }
            }

            return BlobManager.createFromOptions({
              blobId: this.data.blobId,
              offset: offset,
              size: size,
            });
          },
        },
        {
          key: "close",
          value: function close() {
            var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

            BlobManager.release(this.data.blobId);
            this.data = null;
          },
        },
        {
          key: "size",
          get: function get() {
            return this.data.size;
          },
        },
        {
          key: "type",
          get: function get() {
            return this.data.type || "";
          },
        },
      ]);

      return Blob;
    })();

    module.exports = Blob;
  },
  76,
  [16, 17, 74]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var registry = {};

    var register = function register(id) {
      if (registry[id]) {
        registry[id]++;
      } else {
        registry[id] = 1;
      }
    };

    var unregister = function unregister(id) {
      if (registry[id]) {
        registry[id]--;

        if (registry[id] <= 0) {
          delete registry[id];
        }
      }
    };

    var has = function has(id) {
      return registry[id] && registry[id] > 0;
    };

    module.exports = {
      register: register,
      unregister: unregister,
      has: has,
    };
  },
  77,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _createPerformanceLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
    module.exports = GlobalPerformanceLogger;
  },
  78,
  [7, 79]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = createPerformanceLogger;
    exports.getCurrentTimestamp = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _global$nativeQPLTime;

    var Systrace = _$$_REQUIRE(_dependencyMap[3]);

    var infoLog = _$$_REQUIRE(_dependencyMap[4]);

    var _cookies = {};
    var PRINT_TO_CONSOLE = false;
    var getCurrentTimestamp =
      (_global$nativeQPLTime = global.nativeQPLTimestamp) != null
        ? _global$nativeQPLTime
        : global.performance.now.bind(global.performance);
    exports.getCurrentTimestamp = getCurrentTimestamp;

    var PerformanceLogger = (function () {
      function PerformanceLogger() {
        (0, _classCallCheck2.default)(this, PerformanceLogger);
        this._timespans = {};
        this._extras = {};
        this._points = {};
        this._pointExtras = {};
        this._closed = false;
      }

      (0, _createClass2.default)(PerformanceLogger, [
        {
          key: "addTimespan",
          value: function addTimespan(
            key,
            startTime,
            endTime,
            startExtras,
            endExtras
          ) {
            if (this._closed) {
              return;
            }

            if (this._timespans[key]) {
              return;
            }

            this._timespans[key] = {
              startTime: startTime,
              endTime: endTime,
              totalTime: endTime - (startTime || 0),
              startExtras: startExtras,
              endExtras: endExtras,
            };
          },
        },
        {
          key: "append",
          value: function append(performanceLogger) {
            this._timespans = Object.assign(
              {},
              performanceLogger.getTimespans(),
              this._timespans
            );
            this._extras = Object.assign(
              {},
              performanceLogger.getExtras(),
              this._extras
            );
            this._points = Object.assign(
              {},
              performanceLogger.getPoints(),
              this._points
            );
            this._pointExtras = Object.assign(
              {},
              performanceLogger.getPointExtras(),
              this._pointExtras
            );
          },
        },
        {
          key: "clear",
          value: function clear() {
            this._timespans = {};
            this._extras = {};
            this._points = {};
          },
        },
        {
          key: "clearCompleted",
          value: function clearCompleted() {
            for (var _key in this._timespans) {
              var _this$_timespans$_key;

              if (
                ((_this$_timespans$_key = this._timespans[_key]) == null
                  ? undefined
                  : _this$_timespans$_key.totalTime) != null
              ) {
                delete this._timespans[_key];
              }
            }

            this._extras = {};
            this._points = {};
          },
        },
        {
          key: "close",
          value: function close() {
            this._closed = true;
          },
        },
        {
          key: "currentTimestamp",
          value: function currentTimestamp() {
            return getCurrentTimestamp();
          },
        },
        {
          key: "getExtras",
          value: function getExtras() {
            return this._extras;
          },
        },
        {
          key: "getPoints",
          value: function getPoints() {
            return this._points;
          },
        },
        {
          key: "getPointExtras",
          value: function getPointExtras() {
            return this._pointExtras;
          },
        },
        {
          key: "getTimespans",
          value: function getTimespans() {
            return this._timespans;
          },
        },
        {
          key: "hasTimespan",
          value: function hasTimespan(key) {
            return !!this._timespans[key];
          },
        },
        {
          key: "isClosed",
          value: function isClosed() {
            return this._closed;
          },
        },
        {
          key: "logEverything",
          value: function logEverything() {},
        },
        {
          key: "markPoint",
          value: function markPoint(key) {
            var timestamp =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : getCurrentTimestamp();
            var extras = arguments.length > 2 ? arguments[2] : undefined;

            if (this._closed) {
              return;
            }

            if (this._points[key] != null) {
              return;
            }

            this._points[key] = timestamp;

            if (extras) {
              this._pointExtras[key] = extras;
            }
          },
        },
        {
          key: "removeExtra",
          value: function removeExtra(key) {
            var value = this._extras[key];
            delete this._extras[key];
            return value;
          },
        },
        {
          key: "setExtra",
          value: function setExtra(key, value) {
            if (this._closed) {
              return;
            }

            if (this._extras.hasOwnProperty(key)) {
              return;
            }

            this._extras[key] = value;
          },
        },
        {
          key: "startTimespan",
          value: function startTimespan(key) {
            var timestamp =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : getCurrentTimestamp();
            var extras = arguments.length > 2 ? arguments[2] : undefined;

            if (this._closed) {
              return;
            }

            if (this._timespans[key]) {
              return;
            }

            this._timespans[key] = {
              startTime: timestamp,
              startExtras: extras,
            };
            _cookies[key] = Systrace.beginAsyncEvent(key);
          },
        },
        {
          key: "stopTimespan",
          value: function stopTimespan(key) {
            var timestamp =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : getCurrentTimestamp();
            var extras = arguments.length > 2 ? arguments[2] : undefined;

            if (this._closed) {
              return;
            }

            var timespan = this._timespans[key];

            if (!timespan || timespan.startTime == null) {
              return;
            }

            if (timespan.endTime != null) {
              return;
            }

            timespan.endExtras = extras;
            timespan.endTime = timestamp;
            timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

            if (_cookies[key] != null) {
              Systrace.endAsyncEvent(key, _cookies[key]);
              delete _cookies[key];
            }
          },
        },
      ]);
      return PerformanceLogger;
    })();

    function createPerformanceLogger() {
      return new PerformanceLogger();
    }
  },
  79,
  [7, 16, 17, 25, 80]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function infoLog() {
      var _console;

      return (_console = console).log.apply(_console, arguments);
    }

    module.exports = infoLog;
  },
  80,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _NativeEventEmitter2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _NativeNetworkingAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _convertRequestBody = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    function convertHeadersMapToArray(headers) {
      var headerArray = [];

      for (var name in headers) {
        headerArray.push([name, headers[name]]);
      }

      return headerArray;
    }

    var _requestId = 1;

    function generateRequestId() {
      return _requestId++;
    }

    var RCTNetworking = (function (_NativeEventEmitter) {
      (0, _inherits2.default)(RCTNetworking, _NativeEventEmitter);

      var _super = _createSuper(RCTNetworking);

      function RCTNetworking() {
        (0, _classCallCheck2.default)(this, RCTNetworking);
        return _super.call(
          this,
          _Platform.default.OS !== "ios"
            ? null
            : _NativeNetworkingAndroid.default
        );
      }

      (0, _createClass2.default)(RCTNetworking, [
        {
          key: "sendRequest",
          value: function sendRequest(
            method,
            trackingName,
            url,
            headers,
            data,
            responseType,
            incrementalUpdates,
            timeout,
            callback,
            withCredentials
          ) {
            var body = (0, _convertRequestBody.default)(data);

            if (body && body.formData) {
              body.formData = body.formData.map(function (part) {
                return Object.assign({}, part, {
                  headers: convertHeadersMapToArray(part.headers),
                });
              });
            }

            var requestId = generateRequestId();

            _NativeNetworkingAndroid.default.sendRequest(
              method,
              url,
              requestId,
              convertHeadersMapToArray(headers),
              Object.assign({}, body, {
                trackingName: trackingName,
              }),
              responseType,
              incrementalUpdates,
              timeout,
              withCredentials
            );

            callback(requestId);
          },
        },
        {
          key: "abortRequest",
          value: function abortRequest(requestId) {
            _NativeNetworkingAndroid.default.abortRequest(requestId);
          },
        },
        {
          key: "clearCookies",
          value: function clearCookies(callback) {
            _NativeNetworkingAndroid.default.clearCookies(callback);
          },
        },
      ]);
      return RCTNetworking;
    })(_NativeEventEmitter2.default);

    module.exports = new RCTNetworking();
  },
  81,
  [7, 16, 17, 28, 30, 33, 82, 83, 84, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var NativeEventEmitter = (function () {
      function NativeEventEmitter(nativeModule) {
        (0, _classCallCheck2.default)(this, NativeEventEmitter);

        if (_Platform.default.OS === "ios") {
          (0, _invariant.default)(
            nativeModule != null,
            "`new NativeEventEmitter()` requires a non-null argument."
          );
        }

        var hasAddListener =
          !!nativeModule && typeof nativeModule.addListener === "function";
        var hasRemoveListeners =
          !!nativeModule && typeof nativeModule.removeListeners === "function";

        if (nativeModule && hasAddListener && hasRemoveListeners) {
          this._nativeModule = nativeModule;
        } else if (nativeModule != null) {
          if (!hasAddListener) {
            console.warn(
              "`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method."
            );
          }

          if (!hasRemoveListeners) {
            console.warn(
              "`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method."
            );
          }
        }
      }

      (0, _createClass2.default)(NativeEventEmitter, [
        {
          key: "addListener",
          value: function addListener(eventType, listener, context) {
            var _this$_nativeModule,
              _this = this;

            (_this$_nativeModule = this._nativeModule) == null
              ? undefined
              : _this$_nativeModule.addListener(eventType);

            var subscription = _RCTDeviceEventEmitter.default.addListener(
              eventType,
              listener,
              context
            );

            return {
              remove: function remove() {
                if (subscription != null) {
                  var _this$_nativeModule2;

                  (_this$_nativeModule2 = _this._nativeModule) == null
                    ? undefined
                    : _this$_nativeModule2.removeListeners(1);
                  subscription.remove();
                  subscription = null;
                }
              },
            };
          },
        },
        {
          key: "emit",
          value: function emit(eventType) {
            for (
              var _len = arguments.length,
                args = new Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }

            _RCTDeviceEventEmitter.default.emit.apply(
              _RCTDeviceEventEmitter.default,
              [eventType].concat(args)
            );
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners(eventType) {
            var _this$_nativeModule3;

            (0, _invariant.default)(
              eventType != null,
              "`NativeEventEmitter.removeAllListener()` requires a non-null argument."
            );
            (_this$_nativeModule3 = this._nativeModule) == null
              ? undefined
              : _this$_nativeModule3.removeListeners(
                  this.listenerCount(eventType)
                );

            _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
          },
        },
        {
          key: "listenerCount",
          value: function listenerCount(eventType) {
            return _RCTDeviceEventEmitter.default.listenerCount(eventType);
          },
        },
      ]);
      return NativeEventEmitter;
    })();

    exports.default = NativeEventEmitter;
  },
  82,
  [7, 16, 17, 54, 8, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("Networking");

    exports.default = _default;
  },
  83,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var binaryToBase64 = _$$_REQUIRE(_dependencyMap[0]);

    var Blob = _$$_REQUIRE(_dependencyMap[1]);

    var FormData = _$$_REQUIRE(_dependencyMap[2]);

    function convertRequestBody(body) {
      if (typeof body === "string") {
        return {
          string: body,
        };
      }

      if (body instanceof Blob) {
        return {
          blob: body.data,
        };
      }

      if (body instanceof FormData) {
        return {
          formData: body.getParts(),
        };
      }

      if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
        return {
          base64: binaryToBase64(body),
        };
      }

      return body;
    }

    module.exports = convertRequestBody;
  },
  84,
  [85, 76, 87]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var base64 = _$$_REQUIRE(_dependencyMap[0]);

    function binaryToBase64(data) {
      if (data instanceof ArrayBuffer) {
        data = new Uint8Array(data);
      }

      if (data instanceof Uint8Array) {
        return base64.fromByteArray(data);
      }

      if (!ArrayBuffer.isView(data)) {
        throw new Error("data must be ArrayBuffer or typed array");
      }

      var _ref = data,
        buffer = _ref.buffer,
        byteOffset = _ref.byteOffset,
        byteLength = _ref.byteLength;
      return base64.fromByteArray(
        new Uint8Array(buffer, byteOffset, byteLength)
      );
    }

    module.exports = binaryToBase64;
  },
  85,
  [86]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;

    function getLens(b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }

      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);
      return [validLen, placeHoldersLen];
    }

    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
    }

    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;

      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xff;
        arr[curByte++] = (tmp >> 8) & 0xff;
        arr[curByte++] = tmp & 0xff;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xff;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xff;
        arr[curByte++] = tmp & 0xff;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return (
        lookup[(num >> 18) & 0x3f] +
        lookup[(num >> 12) & 0x3f] +
        lookup[(num >> 6) & 0x3f] +
        lookup[num & 0x3f]
      );
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];

      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xff0000) +
          ((uint8[i + 1] << 8) & 0xff00) +
          (uint8[i + 2] & 0xff);
        output.push(tripletToBase64(tmp));
      }

      return output.join("");
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;

      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(
          encodeChunk(
            uint8,
            i,
            i + maxChunkLength > len2 ? len2 : i + maxChunkLength
          )
        );
      }

      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
            lookup[(tmp >> 4) & 0x3f] +
            lookup[(tmp << 2) & 0x3f] +
            "="
        );
      }

      return parts.join("");
    }
  },
  86,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var _createClass = _$$_REQUIRE(_dependencyMap[2]);

    var FormData = (function () {
      function FormData() {
        _classCallCheck(this, FormData);

        this._parts = [];
      }

      _createClass(FormData, [
        {
          key: "append",
          value: function append(key, value) {
            this._parts.push([key, value]);
          },
        },
        {
          key: "getAll",
          value: function getAll(key) {
            return this._parts
              .filter(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 1),
                  name = _ref2[0];

                return name === key;
              })
              .map(function (_ref3) {
                var _ref4 = _slicedToArray(_ref3, 2),
                  value = _ref4[1];

                return value;
              });
          },
        },
        {
          key: "getParts",
          value: function getParts() {
            return this._parts.map(function (_ref5) {
              var _ref6 = _slicedToArray(_ref5, 2),
                name = _ref6[0],
                value = _ref6[1];

              var contentDisposition = 'form-data; name="' + name + '"';
              var headers = {
                "content-disposition": contentDisposition,
              };

              if (typeof value === "object" && !Array.isArray(value) && value) {
                if (typeof value.name === "string") {
                  headers["content-disposition"] +=
                    '; filename="' + value.name + '"';
                }

                if (typeof value.type === "string") {
                  headers["content-type"] = value.type;
                }

                return Object.assign({}, value, {
                  headers: headers,
                  fieldName: name,
                });
              }

              return {
                string: String(value),
                headers: headers,
                fieldName: name,
              };
            });
          },
        },
      ]);

      return FormData;
    })();

    module.exports = FormData;
  },
  87,
  [44, 16, 17]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    var privateData = new WeakMap();
    var wrappers = new WeakMap();

    function pd(event) {
      var retv = privateData.get(event);
      console.assert(
        retv != null,
        "'this' is expected an Event object, but got",
        event
      );
      return retv;
    }

    function setCancelFlag(data) {
      if (data.passiveListener != null) {
        if (
          typeof console !== "undefined" &&
          typeof console.error === "function"
        ) {
          console.error(
            "Unable to preventDefault inside passive event listener invocation.",
            data.passiveListener
          );
        }

        return;
      }

      if (!data.event.cancelable) {
        return;
      }

      data.canceled = true;

      if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
      }
    }

    function Event(eventTarget, event) {
      privateData.set(this, {
        eventTarget: eventTarget,
        event: event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now(),
      });
      Object.defineProperty(this, "isTrusted", {
        value: false,
        enumerable: true,
      });
      var keys = Object.keys(event);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!(key in this)) {
          Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
      }
    }

    Event.prototype = {
      get type() {
        return pd(this).event.type;
      },

      get target() {
        return pd(this).eventTarget;
      },

      get currentTarget() {
        return pd(this).currentTarget;
      },

      composedPath: function composedPath() {
        var currentTarget = pd(this).currentTarget;

        if (currentTarget == null) {
          return [];
        }

        return [currentTarget];
      },

      get NONE() {
        return 0;
      },

      get CAPTURING_PHASE() {
        return 1;
      },

      get AT_TARGET() {
        return 2;
      },

      get BUBBLING_PHASE() {
        return 3;
      },

      get eventPhase() {
        return pd(this).eventPhase;
      },

      stopPropagation: function stopPropagation() {
        var data = pd(this);
        data.stopped = true;

        if (typeof data.event.stopPropagation === "function") {
          data.event.stopPropagation();
        }
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        var data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;

        if (typeof data.event.stopImmediatePropagation === "function") {
          data.event.stopImmediatePropagation();
        }
      },

      get bubbles() {
        return Boolean(pd(this).event.bubbles);
      },

      get cancelable() {
        return Boolean(pd(this).event.cancelable);
      },

      preventDefault: function preventDefault() {
        setCancelFlag(pd(this));
      },

      get defaultPrevented() {
        return pd(this).canceled;
      },

      get composed() {
        return Boolean(pd(this).event.composed);
      },

      get timeStamp() {
        return pd(this).timeStamp;
      },

      get srcElement() {
        return pd(this).eventTarget;
      },

      get cancelBubble() {
        return pd(this).stopped;
      },

      set cancelBubble(value) {
        if (!value) {
          return;
        }

        var data = pd(this);
        data.stopped = true;

        if (typeof data.event.cancelBubble === "boolean") {
          data.event.cancelBubble = true;
        }
      },

      get returnValue() {
        return !pd(this).canceled;
      },

      set returnValue(value) {
        if (!value) {
          setCancelFlag(pd(this));
        }
      },

      initEvent: function initEvent() {},
    };
    Object.defineProperty(Event.prototype, "constructor", {
      value: Event,
      configurable: true,
      writable: true,
    });

    if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
      Object.setPrototypeOf(Event.prototype, window.Event.prototype);
      wrappers.set(window.Event.prototype, Event);
    }

    function defineRedirectDescriptor(key) {
      return {
        get: function get() {
          return pd(this).event[key];
        },
        set: function set(value) {
          pd(this).event[key] = value;
        },
        configurable: true,
        enumerable: true,
      };
    }

    function defineCallDescriptor(key) {
      return {
        value: function value() {
          var event = pd(this).event;
          return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true,
      };
    }

    function defineWrapper(BaseEvent, proto) {
      var keys = Object.keys(proto);

      if (keys.length === 0) {
        return BaseEvent;
      }

      function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
      }

      CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: {
          value: CustomEvent,
          configurable: true,
          writable: true,
        },
      });

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!(key in BaseEvent.prototype)) {
          var descriptor = Object.getOwnPropertyDescriptor(proto, key);
          var isFunc = typeof descriptor.value === "function";
          Object.defineProperty(
            CustomEvent.prototype,
            key,
            isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
          );
        }
      }

      return CustomEvent;
    }

    function getWrapper(proto) {
      if (proto == null || proto === Object.prototype) {
        return Event;
      }

      var wrapper = wrappers.get(proto);

      if (wrapper == null) {
        wrapper = defineWrapper(
          getWrapper(Object.getPrototypeOf(proto)),
          proto
        );
        wrappers.set(proto, wrapper);
      }

      return wrapper;
    }

    function wrapEvent(eventTarget, event) {
      var Wrapper = getWrapper(Object.getPrototypeOf(event));
      return new Wrapper(eventTarget, event);
    }

    function isStopped(event) {
      return pd(event).immediateStopped;
    }

    function setEventPhase(event, eventPhase) {
      pd(event).eventPhase = eventPhase;
    }

    function setCurrentTarget(event, currentTarget) {
      pd(event).currentTarget = currentTarget;
    }

    function setPassiveListener(event, passiveListener) {
      pd(event).passiveListener = passiveListener;
    }

    var listenersMap = new WeakMap();
    var CAPTURE = 1;
    var BUBBLE = 2;
    var ATTRIBUTE = 3;

    function isObject(x) {
      return x !== null && typeof x === "object";
    }

    function getListeners(eventTarget) {
      var listeners = listenersMap.get(eventTarget);

      if (listeners == null) {
        throw new TypeError(
          "'this' is expected an EventTarget object, but got another value."
        );
      }

      return listeners;
    }

    function defineEventAttributeDescriptor(eventName) {
      return {
        get: function get() {
          var listeners = getListeners(this);
          var node = listeners.get(eventName);

          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              return node.listener;
            }

            node = node.next;
          }

          return null;
        },
        set: function set(listener) {
          if (typeof listener !== "function" && !isObject(listener)) {
            listener = null;
          }

          var listeners = getListeners(this);
          var prev = null;
          var node = listeners.get(eventName);

          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              if (prev !== null) {
                prev.next = node.next;
              } else if (node.next !== null) {
                listeners.set(eventName, node.next);
              } else {
                listeners.delete(eventName);
              }
            } else {
              prev = node;
            }

            node = node.next;
          }

          if (listener !== null) {
            var newNode = {
              listener: listener,
              listenerType: ATTRIBUTE,
              passive: false,
              once: false,
              next: null,
            };

            if (prev === null) {
              listeners.set(eventName, newNode);
            } else {
              prev.next = newNode;
            }
          }
        },
        configurable: true,
        enumerable: true,
      };
    }

    function defineEventAttribute(eventTargetPrototype, eventName) {
      Object.defineProperty(
        eventTargetPrototype,
        "on" + eventName,
        defineEventAttributeDescriptor(eventName)
      );
    }

    function defineCustomEventTarget(eventNames) {
      function CustomEventTarget() {
        EventTarget.call(this);
      }

      CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
          value: CustomEventTarget,
          configurable: true,
          writable: true,
        },
      });

      for (var i = 0; i < eventNames.length; ++i) {
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
      }

      return CustomEventTarget;
    }

    function EventTarget() {
      if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return;
      }

      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
      }

      if (arguments.length > 0) {
        var types = new Array(arguments.length);

        for (var i = 0; i < arguments.length; ++i) {
          types[i] = arguments[i];
        }

        return defineCustomEventTarget(types);
      }

      throw new TypeError("Cannot call a class as a function");
    }

    EventTarget.prototype = {
      addEventListener: function addEventListener(
        eventName,
        listener,
        options
      ) {
        if (listener == null) {
          return;
        }

        if (typeof listener !== "function" && !isObject(listener)) {
          throw new TypeError("'listener' should be a function or an object.");
        }

        var listeners = getListeners(this);
        var optionsIsObj = isObject(options);
        var capture = optionsIsObj
          ? Boolean(options.capture)
          : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var newNode = {
          listener: listener,
          listenerType: listenerType,
          passive: optionsIsObj && Boolean(options.passive),
          once: optionsIsObj && Boolean(options.once),
          next: null,
        };
        var node = listeners.get(eventName);

        if (node === undefined) {
          listeners.set(eventName, newNode);
          return;
        }

        var prev = null;

        while (node != null) {
          if (
            node.listener === listener &&
            node.listenerType === listenerType
          ) {
            return;
          }

          prev = node;
          node = node.next;
        }

        prev.next = newNode;
      },
      removeEventListener: function removeEventListener(
        eventName,
        listener,
        options
      ) {
        if (listener == null) {
          return;
        }

        var listeners = getListeners(this);
        var capture = isObject(options)
          ? Boolean(options.capture)
          : Boolean(options);
        var listenerType = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = listeners.get(eventName);

        while (node != null) {
          if (
            node.listener === listener &&
            node.listenerType === listenerType
          ) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }

            return;
          }

          prev = node;
          node = node.next;
        }
      },
      dispatchEvent: function dispatchEvent(event) {
        if (event == null || typeof event.type !== "string") {
          throw new TypeError('"event.type" should be a string.');
        }

        var listeners = getListeners(this);
        var eventName = event.type;
        var node = listeners.get(eventName);

        if (node == null) {
          return true;
        }

        var wrappedEvent = wrapEvent(this, event);
        var prev = null;

        while (node != null) {
          if (node.once) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }

          setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

          if (typeof node.listener === "function") {
            try {
              node.listener.call(this, wrappedEvent);
            } catch (err) {
              if (
                typeof console !== "undefined" &&
                typeof console.error === "function"
              ) {
                console.error(err);
              }
            }
          } else if (
            node.listenerType !== ATTRIBUTE &&
            typeof node.listener.handleEvent === "function"
          ) {
            node.listener.handleEvent(wrappedEvent);
          }

          if (isStopped(wrappedEvent)) {
            break;
          }

          node = node.next;
        }

        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
      },
    };
    Object.defineProperty(EventTarget.prototype, "constructor", {
      value: EventTarget,
      configurable: true,
      writable: true,
    });

    if (
      typeof window !== "undefined" &&
      typeof window.EventTarget !== "undefined"
    ) {
      Object.setPrototypeOf(
        EventTarget.prototype,
        window.EventTarget.prototype
      );
    }

    exports.defineEventAttribute = defineEventAttribute;
    exports.EventTarget = EventTarget;
    exports.default = EventTarget;
    module.exports = EventTarget;
    module.exports.EventTarget = module.exports["default"] = EventTarget;
    module.exports.defineEventAttribute = defineEventAttribute;
  },
  88,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    _$$_REQUIRE(_dependencyMap[0]);

    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response,
    };
  },
  89,
  [90]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    (function (global, factory) {
      typeof exports === "object" && typeof module !== "undefined"
        ? factory(exports)
        : typeof define === "function" && define.amd
        ? define(["exports"], factory)
        : factory((global.WHATWGFetch = {}));
    })(this, function (exports) {
      "use strict";

      var global =
        (typeof globalThis !== "undefined" && globalThis) ||
        (typeof self !== "undefined" && self) ||
        (typeof global !== "undefined" && global);
      var support = {
        searchParams: "URLSearchParams" in global,
        iterable: "Symbol" in global && "iterator" in Symbol,
        blob:
          "FileReader" in global &&
          "Blob" in global &&
          (function () {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          })(),
        formData: "FormData" in global,
        arrayBuffer: "ArrayBuffer" in global,
      };

      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }

      if (support.arrayBuffer) {
        var viewClasses = [
          "[object Int8Array]",
          "[object Uint8Array]",
          "[object Uint8ClampedArray]",
          "[object Int16Array]",
          "[object Uint16Array]",
          "[object Int32Array]",
          "[object Uint32Array]",
          "[object Float32Array]",
          "[object Float64Array]",
        ];

        var isArrayBufferView =
          ArrayBuffer.isView ||
          function (obj) {
            return (
              obj &&
              viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
            );
          };
      }

      function normalizeName(name) {
        if (typeof name !== "string") {
          name = String(name);
        }

        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
          throw new TypeError(
            'Invalid character in header field name: "' + name + '"'
          );
        }

        return name.toLowerCase();
      }

      function normalizeValue(value) {
        if (typeof value !== "string") {
          value = String(value);
        }

        return value;
      }

      function iteratorFor(items) {
        var iterator = {
          next: function next() {
            var value = items.shift();
            return {
              done: value === undefined,
              value: value,
            };
          },
        };

        if (support.iterable) {
          iterator[Symbol.iterator] = function () {
            return iterator;
          };
        }

        return iterator;
      }

      function Headers(headers) {
        this.map = {};

        if (headers instanceof Headers) {
          headers.forEach(function (value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function (header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function (name) {
            this.append(name, headers[name]);
          }, this);
        }
      }

      Headers.prototype.append = function (name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ", " + value : value;
      };

      Headers.prototype["delete"] = function (name) {
        delete this.map[normalizeName(name)];
      };

      Headers.prototype.get = function (name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
      };

      Headers.prototype.has = function (name) {
        return this.map.hasOwnProperty(normalizeName(name));
      };

      Headers.prototype.set = function (name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };

      Headers.prototype.forEach = function (callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };

      Headers.prototype.keys = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push(name);
        });
        return iteratorFor(items);
      };

      Headers.prototype.values = function () {
        var items = [];
        this.forEach(function (value) {
          items.push(value);
        });
        return iteratorFor(items);
      };

      Headers.prototype.entries = function () {
        var items = [];
        this.forEach(function (value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items);
      };

      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }

      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError("Already read"));
        }

        body.bodyUsed = true;
      }

      function fileReaderReady(reader) {
        return new Promise(function (resolve, reject) {
          reader.onload = function () {
            resolve(reader.result);
          };

          reader.onerror = function () {
            reject(reader.error);
          };
        });
      }

      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }

      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise;
      }

      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);

        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }

        return chars.join("");
      }

      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }

      function Body() {
        this.bodyUsed = false;

        this._initBody = function (body) {
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;

          if (!body) {
            this._bodyText = "";
          } else if (typeof body === "string") {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (
            support.formData &&
            FormData.prototype.isPrototypeOf(body)
          ) {
            this._bodyFormData = body;
          } else if (
            support.searchParams &&
            URLSearchParams.prototype.isPrototypeOf(body)
          ) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (
            support.arrayBuffer &&
            (ArrayBuffer.prototype.isPrototypeOf(body) ||
              isArrayBufferView(body))
          ) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }

          if (!this.headers.get("content-type")) {
            if (typeof body === "string") {
              this.headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set("content-type", this._bodyBlob.type);
            } else if (
              support.searchParams &&
              URLSearchParams.prototype.isPrototypeOf(body)
            ) {
              this.headers.set(
                "content-type",
                "application/x-www-form-urlencoded;charset=UTF-8"
              );
            }
          }
        };

        if (support.blob) {
          this.blob = function () {
            var rejected = consumed(this);

            if (rejected) {
              return rejected;
            }

            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as blob");
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };

          this.arrayBuffer = function () {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);

              if (isConsumed) {
                return isConsumed;
              }

              if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset +
                      this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else {
              return this.blob().then(readBlobAsArrayBuffer);
            }
          };
        }

        this.text = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(
              readArrayBufferAsText(this._bodyArrayBuffer)
            );
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as text");
          } else {
            return Promise.resolve(this._bodyText);
          }
        };

        if (support.formData) {
          this.formData = function () {
            return this.text().then(decode);
          };
        }

        this.json = function () {
          return this.text().then(JSON.parse);
        };

        return this;
      }

      var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }

      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError(
            'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
          );
        }

        options = options || {};
        var body = options.body;

        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }

          this.url = input.url;
          this.credentials = input.credentials;

          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }

          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;

          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }

        this.credentials =
          options.credentials || this.credentials || "same-origin";

        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }

        this.method = normalizeMethod(options.method || this.method || "GET");
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;

        if ((this.method === "GET" || this.method === "HEAD") && body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }

        this._initBody(body);

        if (this.method === "GET" || this.method === "HEAD") {
          if (options.cache === "no-store" || options.cache === "no-cache") {
            var reParamSearch = /([?&])_=[^&]*/;

            if (reParamSearch.test(this.url)) {
              this.url = this.url.replace(
                reParamSearch,
                "$1_=" + new Date().getTime()
              );
            } else {
              var reQueryString = /\?/;
              this.url +=
                (reQueryString.test(this.url) ? "&" : "?") +
                "_=" +
                new Date().getTime();
            }
          }
        }
      }

      Request.prototype.clone = function () {
        return new Request(this, {
          body: this._bodyInit,
        });
      };

      function decode(body) {
        var form = new FormData();
        body
          .trim()
          .split("&")
          .forEach(function (bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
        return form;
      }

      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
        preProcessedHeaders
          .split("\r")
          .map(function (header) {
            return header.indexOf("\n") === 0
              ? header.substr(1, header.length)
              : header;
          })
          .forEach(function (line) {
            var parts = line.split(":");
            var key = parts.shift().trim();

            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
        return headers;
      }

      Body.call(Request.prototype);

      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError(
            'Please use the "new" operator, this DOM object constructor cannot be called as a function.'
          );
        }

        if (!options) {
          options = {};
        }

        this.type = "default";
        this.status = options.status === undefined ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText =
          options.statusText === undefined ? "" : "" + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || "";

        this._initBody(bodyInit);
      }

      Body.call(Response.prototype);

      Response.prototype.clone = function () {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url,
        });
      };

      Response.error = function () {
        var response = new Response(null, {
          status: 0,
          statusText: "",
        });
        response.type = "error";
        return response;
      };

      var redirectStatuses = [301, 302, 303, 307, 308];

      Response.redirect = function (url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError("Invalid status code");
        }

        return new Response(null, {
          status: status,
          headers: {
            location: url,
          },
        });
      };

      exports.DOMException = global.DOMException;

      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function (message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };

        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }

      function fetch(input, init) {
        return new Promise(function (resolve, reject) {
          var request = new Request(input, init);

          if (request.signal && request.signal.aborted) {
            return reject(new exports.DOMException("Aborted", "AbortError"));
          }

          var xhr = new XMLHttpRequest();

          function abortXhr() {
            xhr.abort();
          }

          xhr.onload = function () {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || ""),
            };
            options.url =
              "responseURL" in xhr
                ? xhr.responseURL
                : options.headers.get("X-Request-URL");
            var body = "response" in xhr ? xhr.response : xhr.responseText;
            setTimeout(function () {
              resolve(new Response(body, options));
            }, 0);
          };

          xhr.onerror = function () {
            setTimeout(function () {
              reject(new TypeError("Network request failed"));
            }, 0);
          };

          xhr.ontimeout = function () {
            setTimeout(function () {
              reject(new TypeError("Network request failed"));
            }, 0);
          };

          xhr.onabort = function () {
            setTimeout(function () {
              reject(new exports.DOMException("Aborted", "AbortError"));
            }, 0);
          };

          function fixUrl(url) {
            try {
              return url === "" && global.location.href
                ? global.location.href
                : url;
            } catch (e) {
              return url;
            }
          }

          xhr.open(request.method, fixUrl(request.url), true);

          if (request.credentials === "include") {
            xhr.withCredentials = true;
          } else if (request.credentials === "omit") {
            xhr.withCredentials = false;
          }

          if ("responseType" in xhr) {
            if (support.blob) {
              xhr.responseType = "blob";
            } else if (
              support.arrayBuffer &&
              request.headers.get("Content-Type") &&
              request.headers
                .get("Content-Type")
                .indexOf("application/octet-stream") !== -1
            ) {
              xhr.responseType = "arraybuffer";
            }
          }

          if (
            init &&
            typeof init.headers === "object" &&
            !(init.headers instanceof Headers)
          ) {
            Object.getOwnPropertyNames(init.headers).forEach(function (name) {
              xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
            });
          } else {
            request.headers.forEach(function (value, name) {
              xhr.setRequestHeader(name, value);
            });
          }

          if (request.signal) {
            request.signal.addEventListener("abort", abortXhr);

            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4) {
                request.signal.removeEventListener("abort", abortXhr);
              }
            };
          }

          xhr.send(
            typeof request._bodyInit === "undefined" ? null : request._bodyInit
          );
        });
      }

      fetch.polyfill = true;

      if (!global.fetch) {
        global.fetch = fetch;
        global.Headers = Headers;
        global.Request = Request;
        global.Response = Response;
      }

      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
    });
  },
  90,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Blob = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _BlobManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _binaryToBase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _NativeWebSocketModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[12])
    );

    var _WebSocketEvent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[13])
    );

    var _base64Js = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

    var _eventTargetShim = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[15])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

    var _excluded = ["headers"];

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var CONNECTING = 0;
    var OPEN = 1;
    var CLOSING = 2;
    var CLOSED = 3;
    var CLOSE_NORMAL = 1000;
    var WEBSOCKET_EVENTS = ["close", "error", "message", "open"];
    var nextWebSocketId = 0;

    var WebSocket = (function (_ref) {
      (0, _inherits2.default)(WebSocket, _ref);

      var _super = _createSuper(WebSocket);

      function WebSocket(url, protocols, options) {
        var _this;

        (0, _classCallCheck2.default)(this, WebSocket);
        _this = _super.call(this);
        _this.CONNECTING = CONNECTING;
        _this.OPEN = OPEN;
        _this.CLOSING = CLOSING;
        _this.CLOSED = CLOSED;
        _this.readyState = CONNECTING;
        _this.url = url;

        if (typeof protocols === "string") {
          protocols = [protocols];
        }

        var _ref2 = options || {},
          _ref2$headers = _ref2.headers,
          headers = _ref2$headers === undefined ? {} : _ref2$headers,
          unrecognized = (0, _objectWithoutProperties2.default)(
            _ref2,
            _excluded
          );

        if (unrecognized && typeof unrecognized.origin === "string") {
          console.warn(
            "Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead."
          );
          headers.origin = unrecognized.origin;
          delete unrecognized.origin;
        }

        if (Object.keys(unrecognized).length > 0) {
          console.warn(
            "Unrecognized WebSocket connection option(s) `" +
              Object.keys(unrecognized).join("`, `") +
              "`. " +
              "Did you mean to put these under `headers`?"
          );
        }

        if (!Array.isArray(protocols)) {
          protocols = null;
        }

        _this._eventEmitter = new _NativeEventEmitter.default(
          _Platform.default.OS !== "ios" ? null : _NativeWebSocketModule.default
        );
        _this._socketId = nextWebSocketId++;

        _this._registerEvents();

        _NativeWebSocketModule.default.connect(
          url,
          protocols,
          {
            headers: headers,
          },
          _this._socketId
        );

        return _this;
      }

      (0, _createClass2.default)(WebSocket, [
        {
          key: "binaryType",
          get: function get() {
            return this._binaryType;
          },
          set: function set(binaryType) {
            if (binaryType !== "blob" && binaryType !== "arraybuffer") {
              throw new Error(
                "binaryType must be either 'blob' or 'arraybuffer'"
              );
            }

            if (this._binaryType === "blob" || binaryType === "blob") {
              (0, _invariant.default)(
                _BlobManager.default.isAvailable,
                "Native module BlobModule is required for blob support"
              );

              if (binaryType === "blob") {
                _BlobManager.default.addWebSocketHandler(this._socketId);
              } else {
                _BlobManager.default.removeWebSocketHandler(this._socketId);
              }
            }

            this._binaryType = binaryType;
          },
        },
        {
          key: "close",
          value: function close(code, reason) {
            if (
              this.readyState === this.CLOSING ||
              this.readyState === this.CLOSED
            ) {
              return;
            }

            this.readyState = this.CLOSING;

            this._close(code, reason);
          },
        },
        {
          key: "send",
          value: function send(data) {
            if (this.readyState === this.CONNECTING) {
              throw new Error("INVALID_STATE_ERR");
            }

            if (data instanceof _Blob.default) {
              (0, _invariant.default)(
                _BlobManager.default.isAvailable,
                "Native module BlobModule is required for blob support"
              );

              _BlobManager.default.sendOverSocket(data, this._socketId);

              return;
            }

            if (typeof data === "string") {
              _NativeWebSocketModule.default.send(data, this._socketId);

              return;
            }

            if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
              _NativeWebSocketModule.default.sendBinary(
                (0, _binaryToBase.default)(data),
                this._socketId
              );

              return;
            }

            throw new Error("Unsupported data type");
          },
        },
        {
          key: "ping",
          value: function ping() {
            if (this.readyState === this.CONNECTING) {
              throw new Error("INVALID_STATE_ERR");
            }

            _NativeWebSocketModule.default.ping(this._socketId);
          },
        },
        {
          key: "_close",
          value: function _close(code, reason) {
            var statusCode = typeof code === "number" ? code : CLOSE_NORMAL;
            var closeReason = typeof reason === "string" ? reason : "";

            _NativeWebSocketModule.default.close(
              statusCode,
              closeReason,
              this._socketId
            );

            if (
              _BlobManager.default.isAvailable &&
              this._binaryType === "blob"
            ) {
              _BlobManager.default.removeWebSocketHandler(this._socketId);
            }
          },
        },
        {
          key: "_unregisterEvents",
          value: function _unregisterEvents() {
            this._subscriptions.forEach(function (e) {
              return e.remove();
            });

            this._subscriptions = [];
          },
        },
        {
          key: "_registerEvents",
          value: function _registerEvents() {
            var _this2 = this;

            this._subscriptions = [
              this._eventEmitter.addListener("websocketMessage", function (ev) {
                if (ev.id !== _this2._socketId) {
                  return;
                }

                var data = ev.data;

                switch (ev.type) {
                  case "binary":
                    data = _base64Js.default.toByteArray(ev.data).buffer;
                    break;

                  case "blob":
                    data = _BlobManager.default.createFromOptions(ev.data);
                    break;
                }

                _this2.dispatchEvent(
                  new _WebSocketEvent.default("message", {
                    data: data,
                  })
                );
              }),
              this._eventEmitter.addListener("websocketOpen", function (ev) {
                if (ev.id !== _this2._socketId) {
                  return;
                }

                _this2.readyState = _this2.OPEN;
                _this2.protocol = ev.protocol;

                _this2.dispatchEvent(new _WebSocketEvent.default("open"));
              }),
              this._eventEmitter.addListener("websocketClosed", function (ev) {
                if (ev.id !== _this2._socketId) {
                  return;
                }

                _this2.readyState = _this2.CLOSED;

                _this2.dispatchEvent(
                  new _WebSocketEvent.default("close", {
                    code: ev.code,
                    reason: ev.reason,
                  })
                );

                _this2._unregisterEvents();

                _this2.close();
              }),
              this._eventEmitter.addListener("websocketFailed", function (ev) {
                if (ev.id !== _this2._socketId) {
                  return;
                }

                _this2.readyState = _this2.CLOSED;

                _this2.dispatchEvent(
                  new _WebSocketEvent.default("error", {
                    message: ev.message,
                  })
                );

                _this2.dispatchEvent(
                  new _WebSocketEvent.default("close", {
                    message: ev.message,
                  })
                );

                _this2._unregisterEvents();

                _this2.close();
              }),
            ];
          },
        },
      ]);
      return WebSocket;
    })(_eventTargetShim.default.apply(undefined, WEBSOCKET_EVENTS));

    WebSocket.CONNECTING = CONNECTING;
    WebSocket.OPEN = OPEN;
    WebSocket.CLOSING = CLOSING;
    WebSocket.CLOSED = CLOSED;
    module.exports = WebSocket;
  },
  91,
  [7, 92, 16, 17, 28, 30, 33, 76, 74, 82, 85, 54, 94, 95, 86, 88, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = objectWithoutPropertiesLoose(source, excluded);
      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    (module.exports = _objectWithoutProperties),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  92,
  [93]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    (module.exports = _objectWithoutPropertiesLoose),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  93,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("WebSocketModule");

    exports.default = _default;
  },
  94,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _createClass = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var WebSocketEvent = _createClass(function WebSocketEvent(
      type,
      eventInitDict
    ) {
      _classCallCheck(this, WebSocketEvent);

      this.type = type.toString();
      Object.assign(this, eventInitDict);
    });

    module.exports = WebSocketEvent;
  },
  95,
  [17, 16]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _inherits = _$$_REQUIRE(_dependencyMap[2]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Blob = _$$_REQUIRE(_dependencyMap[5]);

    var invariant = _$$_REQUIRE(_dependencyMap[6]);

    var File = (function (_Blob) {
      _inherits(File, _Blob);

      var _super = _createSuper(File);

      function File(parts, name, options) {
        var _this;

        _classCallCheck(this, File);

        invariant(
          parts != null && name != null,
          "Failed to construct `File`: Must pass both `parts` and `name` arguments."
        );
        _this = _super.call(this, parts, options);
        _this.data.name = name;
        return _this;
      }

      _createClass(File, [
        {
          key: "name",
          get: function get() {
            invariant(this.data.name != null, "Files must have a name set.");
            return this.data.name;
          },
        },
        {
          key: "lastModified",
          get: function get() {
            return this.data.lastModified || 0;
          },
        },
      ]);

      return File;
    })(Blob);

    module.exports = File;
  },
  96,
  [16, 17, 28, 30, 33, 76, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _NativeFileReaderModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Blob = _$$_REQUIRE(_dependencyMap[7]);

    var EventTarget = _$$_REQUIRE(_dependencyMap[8]);

    var READER_EVENTS = [
      "abort",
      "error",
      "load",
      "loadstart",
      "loadend",
      "progress",
    ];
    var EMPTY = 0;
    var LOADING = 1;
    var DONE = 2;

    var FileReader = (function (_ref) {
      (0, _inherits2.default)(FileReader, _ref);

      var _super = _createSuper(FileReader);

      function FileReader() {
        var _this;

        (0, _classCallCheck2.default)(this, FileReader);
        _this = _super.call(this);
        _this.EMPTY = EMPTY;
        _this.LOADING = LOADING;
        _this.DONE = DONE;
        _this._aborted = false;

        _this._reset();

        return _this;
      }

      (0, _createClass2.default)(FileReader, [
        {
          key: "_reset",
          value: function _reset() {
            this._readyState = EMPTY;
            this._error = null;
            this._result = null;
          },
        },
        {
          key: "_setReadyState",
          value: function _setReadyState(newState) {
            this._readyState = newState;
            this.dispatchEvent({
              type: "readystatechange",
            });

            if (newState === DONE) {
              if (this._aborted) {
                this.dispatchEvent({
                  type: "abort",
                });
              } else if (this._error) {
                this.dispatchEvent({
                  type: "error",
                });
              } else {
                this.dispatchEvent({
                  type: "load",
                });
              }

              this.dispatchEvent({
                type: "loadend",
              });
            }
          },
        },
        {
          key: "readAsArrayBuffer",
          value: function readAsArrayBuffer() {
            throw new Error("FileReader.readAsArrayBuffer is not implemented");
          },
        },
        {
          key: "readAsDataURL",
          value: function readAsDataURL(blob) {
            var _this2 = this;

            this._aborted = false;

            if (blob == null) {
              throw new TypeError(
                "Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'"
              );
            }

            _NativeFileReaderModule.default.readAsDataURL(blob.data).then(
              function (text) {
                if (_this2._aborted) {
                  return;
                }

                _this2._result = text;

                _this2._setReadyState(DONE);
              },
              function (error) {
                if (_this2._aborted) {
                  return;
                }

                _this2._error = error;

                _this2._setReadyState(DONE);
              }
            );
          },
        },
        {
          key: "readAsText",
          value: function readAsText(blob) {
            var _this3 = this;

            var encoding =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : "UTF-8";
            this._aborted = false;

            if (blob == null) {
              throw new TypeError(
                "Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'"
              );
            }

            _NativeFileReaderModule.default
              .readAsText(blob.data, encoding)
              .then(
                function (text) {
                  if (_this3._aborted) {
                    return;
                  }

                  _this3._result = text;

                  _this3._setReadyState(DONE);
                },
                function (error) {
                  if (_this3._aborted) {
                    return;
                  }

                  _this3._error = error;

                  _this3._setReadyState(DONE);
                }
              );
          },
        },
        {
          key: "abort",
          value: function abort() {
            this._aborted = true;

            if (this._readyState !== EMPTY && this._readyState !== DONE) {
              this._reset();

              this._setReadyState(DONE);
            }

            this._reset();
          },
        },
        {
          key: "readyState",
          get: function get() {
            return this._readyState;
          },
        },
        {
          key: "error",
          get: function get() {
            return this._error;
          },
        },
        {
          key: "result",
          get: function get() {
            return this._result;
          },
        },
      ]);
      return FileReader;
    })(EventTarget.apply(undefined, READER_EVENTS));

    FileReader.EMPTY = EMPTY;
    FileReader.LOADING = LOADING;
    FileReader.DONE = DONE;
    module.exports = FileReader;
  },
  97,
  [7, 16, 17, 28, 30, 33, 98, 76, 88]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("FileReaderModule");

    exports.default = _default;
  },
  98,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.URLSearchParams = exports.URL = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeBlobModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _Symbol$iterator;

    var Blob = _$$_REQUIRE(_dependencyMap[4]);

    var BLOB_URL_PREFIX = null;

    if (
      _NativeBlobModule.default &&
      typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME ===
        "string"
    ) {
      var constants = _NativeBlobModule.default.getConstants();

      BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ":";

      if (typeof constants.BLOB_URI_HOST === "string") {
        BLOB_URL_PREFIX += "//" + constants.BLOB_URI_HOST + "/";
      }
    }

    _Symbol$iterator = Symbol.iterator;

    var URLSearchParams = (function () {
      function URLSearchParams(params) {
        var _this = this;

        (0, _classCallCheck2.default)(this, URLSearchParams);
        this._searchParams = [];

        if (typeof params === "object") {
          Object.keys(params).forEach(function (key) {
            return _this.append(key, params[key]);
          });
        }
      }

      (0, _createClass2.default)(URLSearchParams, [
        {
          key: "append",
          value: function append(key, value) {
            this._searchParams.push([key, value]);
          },
        },
        {
          key: "delete",
          value: function _delete(name) {
            throw new Error("URLSearchParams.delete is not implemented");
          },
        },
        {
          key: "get",
          value: function get(name) {
            throw new Error("URLSearchParams.get is not implemented");
          },
        },
        {
          key: "getAll",
          value: function getAll(name) {
            throw new Error("URLSearchParams.getAll is not implemented");
          },
        },
        {
          key: "has",
          value: function has(name) {
            throw new Error("URLSearchParams.has is not implemented");
          },
        },
        {
          key: "set",
          value: function set(name, value) {
            throw new Error("URLSearchParams.set is not implemented");
          },
        },
        {
          key: "sort",
          value: function sort() {
            throw new Error("URLSearchParams.sort is not implemented");
          },
        },
        {
          key: _Symbol$iterator,
          value: function value() {
            return this._searchParams[Symbol.iterator]();
          },
        },
        {
          key: "toString",
          value: function toString() {
            if (this._searchParams.length === 0) {
              return "";
            }

            var last = this._searchParams.length - 1;
            return this._searchParams.reduce(function (acc, curr, index) {
              return (
                acc +
                encodeURIComponent(curr[0]) +
                "=" +
                encodeURIComponent(curr[1]) +
                (index === last ? "" : "&")
              );
            }, "");
          },
        },
      ]);
      return URLSearchParams;
    })();

    exports.URLSearchParams = URLSearchParams;

    function validateBaseUrl(url) {
      return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(
        url
      );
    }

    var URL = (function () {
      function URL(url, base) {
        (0, _classCallCheck2.default)(this, URL);
        this._searchParamsInstance = null;
        var baseUrl = null;

        if (!base || validateBaseUrl(url)) {
          this._url = url;

          if (!this._url.endsWith("/")) {
            this._url += "/";
          }
        } else {
          if (typeof base === "string") {
            baseUrl = base;

            if (!validateBaseUrl(baseUrl)) {
              throw new TypeError("Invalid base URL: " + baseUrl);
            }
          } else {
            baseUrl = base.toString();
          }

          if (baseUrl.endsWith("/")) {
            baseUrl = baseUrl.slice(0, baseUrl.length - 1);
          }

          if (!url.startsWith("/")) {
            url = "/" + url;
          }

          if (baseUrl.endsWith(url)) {
            url = "";
          }

          this._url = "" + baseUrl + url;
        }
      }

      (0, _createClass2.default)(
        URL,
        [
          {
            key: "hash",
            get: function get() {
              throw new Error("URL.hash is not implemented");
            },
          },
          {
            key: "host",
            get: function get() {
              throw new Error("URL.host is not implemented");
            },
          },
          {
            key: "hostname",
            get: function get() {
              throw new Error("URL.hostname is not implemented");
            },
          },
          {
            key: "href",
            get: function get() {
              return this.toString();
            },
          },
          {
            key: "origin",
            get: function get() {
              throw new Error("URL.origin is not implemented");
            },
          },
          {
            key: "password",
            get: function get() {
              throw new Error("URL.password is not implemented");
            },
          },
          {
            key: "pathname",
            get: function get() {
              throw new Error("URL.pathname not implemented");
            },
          },
          {
            key: "port",
            get: function get() {
              throw new Error("URL.port is not implemented");
            },
          },
          {
            key: "protocol",
            get: function get() {
              throw new Error("URL.protocol is not implemented");
            },
          },
          {
            key: "search",
            get: function get() {
              throw new Error("URL.search is not implemented");
            },
          },
          {
            key: "searchParams",
            get: function get() {
              if (this._searchParamsInstance == null) {
                this._searchParamsInstance = new URLSearchParams();
              }

              return this._searchParamsInstance;
            },
          },
          {
            key: "toJSON",
            value: function toJSON() {
              return this.toString();
            },
          },
          {
            key: "toString",
            value: function toString() {
              if (this._searchParamsInstance === null) {
                return this._url;
              }

              var instanceString = this._searchParamsInstance.toString();

              var separator = this._url.indexOf("?") > -1 ? "&" : "?";
              return this._url + separator + instanceString;
            },
          },
          {
            key: "username",
            get: function get() {
              throw new Error("URL.username is not implemented");
            },
          },
        ],
        [
          {
            key: "createObjectURL",
            value: function createObjectURL(blob) {
              if (BLOB_URL_PREFIX === null) {
                throw new Error("Cannot create URL for blob!");
              }

              return (
                "" +
                BLOB_URL_PREFIX +
                blob.data.blobId +
                "?offset=" +
                blob.data.offset +
                "&size=" +
                blob.size
              );
            },
          },
          {
            key: "revokeObjectURL",
            value: function revokeObjectURL(url) {},
          },
        ]
      );
      return URL;
    })();

    exports.URL = URL;
  },
  99,
  [7, 16, 17, 75, 76]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _inherits = _$$_REQUIRE(_dependencyMap[2]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });

    var eventTargetShim = _$$_REQUIRE(_dependencyMap[5]);

    var AbortSignal = (function (_eventTargetShim$Even) {
      _inherits(AbortSignal, _eventTargetShim$Even);

      var _super = _createSuper(AbortSignal);

      function AbortSignal() {
        var _this;

        _classCallCheck(this, AbortSignal);

        _this = _super.call(this);
        throw new TypeError("AbortSignal cannot be constructed directly");
      }

      _createClass(AbortSignal, [
        {
          key: "aborted",
          get: function get() {
            var aborted = abortedFlags.get(this);

            if (typeof aborted !== "boolean") {
              throw new TypeError(
                "Expected 'this' to be an 'AbortSignal' object, but got " +
                  (this === null ? "null" : typeof this)
              );
            }

            return aborted;
          },
        },
      ]);

      return AbortSignal;
    })(eventTargetShim.EventTarget);

    eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");

    function createAbortSignal() {
      var signal = Object.create(AbortSignal.prototype);
      eventTargetShim.EventTarget.call(signal);
      abortedFlags.set(signal, false);
      return signal;
    }

    function abortSignal(signal) {
      if (abortedFlags.get(signal) !== false) {
        return;
      }

      abortedFlags.set(signal, true);
      signal.dispatchEvent({
        type: "abort",
      });
    }

    var abortedFlags = new WeakMap();
    Object.defineProperties(AbortSignal.prototype, {
      aborted: {
        enumerable: true,
      },
    });

    if (
      typeof Symbol === "function" &&
      typeof Symbol.toStringTag === "symbol"
    ) {
      Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal",
      });
    }

    var AbortController = (function () {
      function AbortController() {
        _classCallCheck(this, AbortController);

        signals.set(this, createAbortSignal());
      }

      _createClass(AbortController, [
        {
          key: "signal",
          get: function get() {
            return getSignal(this);
          },
        },
        {
          key: "abort",
          value: function abort() {
            abortSignal(getSignal(this));
          },
        },
      ]);

      return AbortController;
    })();

    var signals = new WeakMap();

    function getSignal(controller) {
      var signal = signals.get(controller);

      if (signal == null) {
        throw new TypeError(
          "Expected 'this' to be an 'AbortController' object, but got " +
            (controller === null ? "null" : typeof controller)
        );
      }

      return signal;
    }

    Object.defineProperties(AbortController.prototype, {
      signal: {
        enumerable: true,
      },
      abort: {
        enumerable: true,
      },
    });

    if (
      typeof Symbol === "function" &&
      typeof Symbol.toStringTag === "symbol"
    ) {
      Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController",
      });
    }

    exports.AbortController = AbortController;
    exports.AbortSignal = AbortSignal;
    exports.default = AbortController;
    module.exports = AbortController;
    module.exports.AbortController = module.exports["default"] =
      AbortController;
    module.exports.AbortSignal = AbortSignal;
  },
  100,
  [16, 17, 28, 30, 33, 88]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    if (!global.alert) {
      global.alert = function (text) {
        _$$_REQUIRE(_dependencyMap[0]).alert("Alert", "" + text);
      };
    }
  },
  101,
  [102]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _RCTAlertManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var Alert = (function () {
      function Alert() {
        (0, _classCallCheck2.default)(this, Alert);
      }

      (0, _createClass2.default)(Alert, null, [
        {
          key: "alert",
          value: function alert(title, message, buttons, options) {
            if (_Platform.default.OS === "ios") {
              Alert.prompt(
                title,
                message,
                buttons,
                "default",
                undefined,
                undefined,
                options
              );
            } else if (_Platform.default.OS === "android") {
              var NativeDialogManagerAndroid = _$$_REQUIRE(
                _dependencyMap[5]
              ).default;

              if (!NativeDialogManagerAndroid) {
                return;
              }

              var constants = NativeDialogManagerAndroid.getConstants();
              var config = {
                title: title || "",
                message: message || "",
                cancelable: false,
              };

              if (options && options.cancelable) {
                config.cancelable = options.cancelable;
              }

              var defaultPositiveText = "OK";
              var validButtons = buttons
                ? buttons.slice(0, 3)
                : [
                    {
                      text: defaultPositiveText,
                    },
                  ];
              var buttonPositive = validButtons.pop();
              var buttonNegative = validButtons.pop();
              var buttonNeutral = validButtons.pop();

              if (buttonNeutral) {
                config.buttonNeutral = buttonNeutral.text || "";
              }

              if (buttonNegative) {
                config.buttonNegative = buttonNegative.text || "";
              }

              if (buttonPositive) {
                config.buttonPositive =
                  buttonPositive.text || defaultPositiveText;
              }

              var onAction = function onAction(action, buttonKey) {
                if (action === constants.buttonClicked) {
                  if (buttonKey === constants.buttonNeutral) {
                    buttonNeutral.onPress && buttonNeutral.onPress();
                  } else if (buttonKey === constants.buttonNegative) {
                    buttonNegative.onPress && buttonNegative.onPress();
                  } else if (buttonKey === constants.buttonPositive) {
                    buttonPositive.onPress && buttonPositive.onPress();
                  }
                } else if (action === constants.dismissed) {
                  options && options.onDismiss && options.onDismiss();
                }
              };

              var onError = function onError(errorMessage) {
                return console.warn(errorMessage);
              };

              NativeDialogManagerAndroid.showAlert(config, onError, onAction);
            }
          },
        },
        {
          key: "prompt",
          value: function prompt(title, message, callbackOrButtons) {
            var type =
              arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : "plain-text";
            var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
            var keyboardType = arguments.length > 5 ? arguments[5] : undefined;
            var options = arguments.length > 6 ? arguments[6] : undefined;

            if (_Platform.default.OS === "ios") {
              var callbacks = [];
              var buttons = [];
              var cancelButtonKey;
              var destructiveButtonKey;

              if (typeof callbackOrButtons === "function") {
                callbacks = [callbackOrButtons];
              } else if (Array.isArray(callbackOrButtons)) {
                callbackOrButtons.forEach(function (btn, index) {
                  callbacks[index] = btn.onPress;

                  if (btn.style === "cancel") {
                    cancelButtonKey = String(index);
                  } else if (btn.style === "destructive") {
                    destructiveButtonKey = String(index);
                  }

                  if (
                    btn.text ||
                    index < (callbackOrButtons || []).length - 1
                  ) {
                    var btnDef = {};
                    btnDef[index] = btn.text || "";
                    buttons.push(btnDef);
                  }
                });
              }

              _RCTAlertManager.default.alertWithArgs(
                {
                  title: title || "",
                  message: message || undefined,
                  buttons: buttons,
                  type: type || undefined,
                  defaultValue: defaultValue,
                  cancelButtonKey: cancelButtonKey,
                  destructiveButtonKey: destructiveButtonKey,
                  keyboardType: keyboardType,
                  userInterfaceStyle:
                    (options == null
                      ? undefined
                      : options.userInterfaceStyle) || undefined,
                },
                function (id, value) {
                  var cb = callbacks[id];
                  cb && cb(value);
                }
              );
            }
          },
        },
      ]);
      return Alert;
    })();

    module.exports = Alert;
  },
  102,
  [7, 16, 17, 54, 103, 104]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeDialogManagerAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    function emptyCallback() {}

    module.exports = {
      alertWithArgs: function alertWithArgs(args, callback) {
        if (!_NativeDialogManagerAndroid.default) {
          return;
        }

        _NativeDialogManagerAndroid.default.showAlert(
          args,
          emptyCallback,
          callback || emptyCallback
        );
      },
    };
  },
  103,
  [7, 104]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("DialogManagerAndroid");

    exports.default = _default;
  },
  104,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty;

    var navigator = global.navigator;

    if (navigator === undefined) {
      global.navigator = navigator = {};
    }

    polyfillObjectProperty(navigator, "product", function () {
      return "ReactNative";
    });
  },
  105,
  [57]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var registerModule;

    if (global.RN$Bridgeless === true && global.RN$registerCallableModule) {
      registerModule = global.RN$registerCallableModule;
    } else {
      var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

      registerModule = function registerModule(moduleName, factory) {
        return BatchedBridge.registerLazyCallableModule(moduleName, factory);
      };
    }

    registerModule("Systrace", function () {
      return _$$_REQUIRE(_dependencyMap[1]);
    });

    if (!(global.RN$Bridgeless === true)) {
      registerModule("JSTimers", function () {
        return _$$_REQUIRE(_dependencyMap[2]);
      });
    }

    registerModule("HeapCapture", function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
    registerModule("SamplingProfiler", function () {
      return _$$_REQUIRE(_dependencyMap[4]);
    });
    registerModule("RCTLog", function () {
      return _$$_REQUIRE(_dependencyMap[5]);
    });
    registerModule("RCTDeviceEventEmitter", function () {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    });
    registerModule("RCTNativeAppEventEmitter", function () {
      return _$$_REQUIRE(_dependencyMap[7]);
    });
    registerModule("GlobalPerformanceLogger", function () {
      return _$$_REQUIRE(_dependencyMap[8]);
    });
    registerModule("JSDevSupportModule", function () {
      return _$$_REQUIRE(_dependencyMap[9]);
    });
    {
      registerModule("HMRClient", function () {
        return _$$_REQUIRE(_dependencyMap[10]);
      });
    }
  },
  106,
  [48, 25, 66, 107, 109, 111, 8, 112, 78, 113, 115]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeJSCHeapCapture = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var HeapCapture = {
      captureHeap: function captureHeap(path) {
        var error = null;

        try {
          global.nativeCaptureHeap(path);
          console.log("HeapCapture.captureHeap succeeded: " + path);
        } catch (e) {
          console.log("HeapCapture.captureHeap error: " + e.toString());
          error = e.toString();
        }

        if (_NativeJSCHeapCapture.default) {
          _NativeJSCHeapCapture.default.captureComplete(path, error);
        }
      },
    };
    module.exports = HeapCapture;
  },
  107,
  [7, 108]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("JSCHeapCapture");

    exports.default = _default;
  },
  108,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var SamplingProfiler = {
      poke: function poke(token) {
        var error = null;
        var result = null;

        try {
          result = global.pokeSamplingProfiler();

          if (result === null) {
            console.log("The JSC Sampling Profiler has started");
          } else {
            console.log("The JSC Sampling Profiler has stopped");
          }
        } catch (e) {
          console.log(
            "Error occurred when restarting Sampling Profiler: " + e.toString()
          );
          error = e.toString();
        }

        var NativeJSCSamplingProfiler = _$$_REQUIRE(_dependencyMap[0]).default;

        if (NativeJSCSamplingProfiler) {
          NativeJSCSamplingProfiler.operationComplete(token, result, error);
        }
      },
    };
    module.exports = SamplingProfiler;
  },
  109,
  [110]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("JSCSamplingProfiler");

    exports.default = _default;
  },
  110,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var invariant = _$$_REQUIRE(_dependencyMap[0]);

    var levelsMap = {
      log: "log",
      info: "info",
      warn: "warn",
      error: "error",
      fatal: "error",
    };
    var warningHandler = null;
    var RCTLog = {
      logIfNoNativeHook: function logIfNoNativeHook(level) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        if (typeof global.nativeLoggingHook === "undefined") {
          RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
        } else {
          if (warningHandler && level === "warn") {
            warningHandler.apply(undefined, args);
          }
        }
      },
      logToConsole: function logToConsole(level) {
        var _console;

        var logFn = levelsMap[level];
        invariant(
          logFn,
          'Level "' +
            level +
            '" not one of ' +
            Object.keys(levelsMap).toString()
        );

        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key2 = 1;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2 - 1] = arguments[_key2];
        }

        (_console = console)[logFn].apply(_console, args);
      },
      setWarningHandler: function setWarningHandler(handler) {
        warningHandler = handler;
      },
    };
    module.exports = RCTLog;
  },
  111,
  [4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
    module.exports = RCTNativeAppEventEmitter;
  },
  112,
  [7, 8]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeJSDevSupport = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var ReactNative = _$$_REQUIRE(_dependencyMap[2]);

    var JSDevSupportModule = {
      getJSHierarchy: function getJSHierarchy(tag) {
        if (_NativeJSDevSupport.default) {
          var constants = _NativeJSDevSupport.default.getConstants();

          try {
            var computeComponentStackForErrorReporting =
              ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
                .computeComponentStackForErrorReporting;
            var componentStack = computeComponentStackForErrorReporting(tag);

            if (!componentStack) {
              _NativeJSDevSupport.default.onFailure(
                constants.ERROR_CODE_VIEW_NOT_FOUND,
                "Component stack doesn't exist for tag " + tag
              );
            } else {
              _NativeJSDevSupport.default.onSuccess(componentStack);
            }
          } catch (e) {
            _NativeJSDevSupport.default.onFailure(
              constants.ERROR_CODE_EXCEPTION,
              e.message
            );
          }
        }
      },
    };
    module.exports = JSDevSupportModule;
  },
  113,
  [7, 114, 18]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("JSDevSupport");

    exports.default = _default;
  },
  114,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var HMRClientProdShim = {
      setup: function setup() {},
      enable: function enable() {
        console.error(
          "Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?"
        );
      },
      disable: function disable() {},
      registerBundle: function registerBundle() {},
      log: function log() {},
    };
    module.exports = HMRClientProdShim;
  },
  115,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function __fetchSegment(segmentId, options, callback) {
      var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

      SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
        if (errorObject) {
          var error = new Error(errorObject.message);
          error.code = errorObject.code;
          callback(error);
        }

        callback(null);
      });
    }

    global.__fetchSegment = __fetchSegment;

    function __getSegment(segmentId, options, callback) {
      var SegmentFetcher = _$$_REQUIRE(_dependencyMap[0]).default;

      if (!SegmentFetcher.getSegment) {
        throw new Error("SegmentFetcher.getSegment must be defined");
      }

      SegmentFetcher.getSegment(
        segmentId,
        options,
        function (errorObject, path) {
          if (errorObject) {
            var error = new Error(errorObject.message);
            error.code = errorObject.code;
            callback(error);
          }

          callback(null, path);
        }
      );
    }

    global.__getSegment = __getSegment;
  },
  116,
  [117]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("SegmentFetcher");

    exports.default = _default;
  },
  117,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    module.exports = {
      get BatchedBridge() {
        return _$$_REQUIRE(_dependencyMap[0]);
      },

      get ExceptionsManager() {
        return _$$_REQUIRE(_dependencyMap[1]);
      },

      get Platform() {
        return _$$_REQUIRE(_dependencyMap[2]);
      },

      get RCTEventEmitter() {
        return _$$_REQUIRE(_dependencyMap[3]);
      },

      get ReactNativeViewConfigRegistry() {
        return _$$_REQUIRE(_dependencyMap[4]);
      },

      get TextInputState() {
        return _$$_REQUIRE(_dependencyMap[5]);
      },

      get UIManager() {
        return _$$_REQUIRE(_dependencyMap[6]);
      },

      get deepDiffer() {
        return _$$_REQUIRE(_dependencyMap[7]);
      },

      get deepFreezeAndThrowOnMutationInDev() {
        return _$$_REQUIRE(_dependencyMap[8]);
      },

      get flattenStyle() {
        return _$$_REQUIRE(_dependencyMap[9]);
      },

      get ReactFiberErrorDialog() {
        return _$$_REQUIRE(_dependencyMap[10]).default;
      },

      get legacySendAccessibilityEvent() {
        return _$$_REQUIRE(_dependencyMap[11]);
      },

      get RawEventEmitter() {
        return _$$_REQUIRE(_dependencyMap[12]).default;
      },

      get CustomEvent() {
        return _$$_REQUIRE(_dependencyMap[13]).default;
      },
    };
  },
  118,
  [48, 27, 54, 119, 120, 121, 142, 165, 50, 166, 167, 168, 169, 170]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

    var RCTEventEmitter = {
      register: function register(eventEmitter) {
        if (global.RN$Bridgeless) {
          global.RN$registerCallableModule("RCTEventEmitter", function () {
            return eventEmitter;
          });
        } else {
          BatchedBridge.registerCallableModule("RCTEventEmitter", eventEmitter);
        }
      },
    };
    module.exports = RCTEventEmitter;
  },
  119,
  [48]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var customBubblingEventTypes = {};
    var customDirectEventTypes = {};
    exports.customBubblingEventTypes = customBubblingEventTypes;
    exports.customDirectEventTypes = customDirectEventTypes;
    var viewConfigCallbacks = new Map();
    var viewConfigs = new Map();

    function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

      if (bubblingEventTypes != null) {
        for (var _topLevelType in bubblingEventTypes) {
          if (customBubblingEventTypes[_topLevelType] == null) {
            customBubblingEventTypes[_topLevelType] =
              bubblingEventTypes[_topLevelType];
          }
        }
      }

      if (directEventTypes != null) {
        for (var _topLevelType2 in directEventTypes) {
          if (customDirectEventTypes[_topLevelType2] == null) {
            customDirectEventTypes[_topLevelType2] =
              directEventTypes[_topLevelType2];
          }
        }
      }
    }

    exports.register = function (name, callback) {
      (0, _invariant.default)(
        !viewConfigCallbacks.has(name),
        "Tried to register two views with the same name %s",
        name
      );
      (0, _invariant.default)(
        typeof callback === "function",
        "View config getter callback for component `%s` must be a function (received `%s`)",
        name,
        callback === null ? "null" : typeof callback
      );
      viewConfigCallbacks.set(name, callback);
      return name;
    };

    exports.get = function (name) {
      var viewConfig;

      if (!viewConfigs.has(name)) {
        var callback = viewConfigCallbacks.get(name);

        if (typeof callback !== "function") {
          (0, _invariant.default)(
            false,
            "View config getter callback for component `%s` must be a function (received `%s`).%s",
            name,
            callback === null ? "null" : typeof callback,
            typeof name[0] === "string" && /[a-z]/.test(name[0])
              ? " Make sure to start component names with a capital letter."
              : ""
          );
        }

        viewConfig = callback();
        processEventTypes(viewConfig);
        viewConfigs.set(name, viewConfig);
        viewConfigCallbacks.set(name, null);
      } else {
        viewConfig = viewConfigs.get(name);
      }

      (0, _invariant.default)(
        viewConfig,
        "View config not found for name %s",
        name
      );
      return viewConfig;
    };
  },
  120,
  [7, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _AndroidTextInputNativeComponent = _$$_REQUIRE(_dependencyMap[0]);

    var _RCTSingelineTextInputNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

    var React = _$$_REQUIRE(_dependencyMap[2]);

    var Platform = _$$_REQUIRE(_dependencyMap[3]);

    var _require = _$$_REQUIRE(_dependencyMap[4]),
      findNodeHandle = _require.findNodeHandle;

    var currentlyFocusedInputRef = null;
    var inputs = new Set();

    function currentlyFocusedInput() {
      return currentlyFocusedInputRef;
    }

    function currentlyFocusedField() {
      return findNodeHandle(currentlyFocusedInputRef);
    }

    function focusInput(textField) {
      if (currentlyFocusedInputRef !== textField && textField != null) {
        currentlyFocusedInputRef = textField;
      }
    }

    function blurInput(textField) {
      if (currentlyFocusedInputRef === textField && textField != null) {
        currentlyFocusedInputRef = null;
      }
    }

    function focusField(textFieldID) {
      return;
    }

    function blurField(textFieldID) {
      return;
    }

    function focusTextInput(textField) {
      if (typeof textField === "number") {
        return;
      }

      if (textField != null) {
        var _textField$currentPro;

        var fieldCanBeFocused =
          currentlyFocusedInputRef !== textField &&
          ((_textField$currentPro = textField.currentProps) == null
            ? undefined
            : _textField$currentPro.editable) !== false;

        if (!fieldCanBeFocused) {
          return;
        }

        focusInput(textField);
        {
          _AndroidTextInputNativeComponent.Commands.focus(textField);
        }
      }
    }

    function blurTextInput(textField) {
      if (typeof textField === "number") {
        return;
      }

      if (currentlyFocusedInputRef === textField && textField != null) {
        blurInput(textField);
        {
          _AndroidTextInputNativeComponent.Commands.blur(textField);
        }
      }
    }

    function registerInput(textField) {
      if (typeof textField === "number") {
        return;
      }

      inputs.add(textField);
    }

    function unregisterInput(textField) {
      if (typeof textField === "number") {
        return;
      }

      inputs.delete(textField);
    }

    function isTextInput(textField) {
      if (typeof textField === "number") {
        return false;
      }

      return inputs.has(textField);
    }

    module.exports = {
      currentlyFocusedInput: currentlyFocusedInput,
      focusInput: focusInput,
      blurInput: blurInput,
      currentlyFocusedField: currentlyFocusedField,
      focusField: focusField,
      blurField: blurField,
      focusTextInput: focusTextInput,
      blurTextInput: blurTextInput,
      registerInput: registerInput,
      unregisterInput: unregisterInput,
      isTextInput: isTextInput,
    };
  },
  121,
  [122, 163, 1, 54, 18]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default =
      exports.__INTERNAL_VIEW_CONFIG =
      exports.Commands =
        undefined;

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[2])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["focus", "blur", "setTextAndSelection"],
    });
    exports.Commands = Commands;
    var __INTERNAL_VIEW_CONFIG = {
      uiViewClassName: "AndroidTextInput",
      bubblingEventTypes: {
        topBlur: {
          phasedRegistrationNames: {
            bubbled: "onBlur",
            captured: "onBlurCapture",
          },
        },
        topEndEditing: {
          phasedRegistrationNames: {
            bubbled: "onEndEditing",
            captured: "onEndEditingCapture",
          },
        },
        topFocus: {
          phasedRegistrationNames: {
            bubbled: "onFocus",
            captured: "onFocusCapture",
          },
        },
        topKeyPress: {
          phasedRegistrationNames: {
            bubbled: "onKeyPress",
            captured: "onKeyPressCapture",
          },
        },
        topSubmitEditing: {
          phasedRegistrationNames: {
            bubbled: "onSubmitEditing",
            captured: "onSubmitEditingCapture",
          },
        },
        topTextInput: {
          phasedRegistrationNames: {
            bubbled: "onTextInput",
            captured: "onTextInputCapture",
          },
        },
      },
      directEventTypes: {
        topScroll: {
          registrationName: "onScroll",
        },
      },
      validAttributes: {
        maxFontSizeMultiplier: true,
        adjustsFontSizeToFit: true,
        minimumFontScale: true,
        autoFocus: true,
        placeholder: true,
        inlineImagePadding: true,
        contextMenuHidden: true,
        textShadowColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        maxLength: true,
        selectTextOnFocus: true,
        textShadowRadius: true,
        underlineColorAndroid: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        textDecorationLine: true,
        blurOnSubmit: true,
        textAlignVertical: true,
        fontStyle: true,
        textShadowOffset: true,
        selectionColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        selection: true,
        placeholderTextColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        importantForAutofill: true,
        lineHeight: true,
        textTransform: true,
        returnKeyType: true,
        keyboardType: true,
        multiline: true,
        color: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        autoComplete: true,
        numberOfLines: true,
        letterSpacing: true,
        returnKeyLabel: true,
        fontSize: true,
        onKeyPress: true,
        cursorColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        text: true,
        showSoftInputOnFocus: true,
        textAlign: true,
        autoCapitalize: true,
        autoCorrect: true,
        caretHidden: true,
        secureTextEntry: true,
        textBreakStrategy: true,
        onScroll: true,
        onContentSizeChange: true,
        disableFullscreenUI: true,
        includeFontPadding: true,
        fontWeight: true,
        fontFamily: true,
        allowFontScaling: true,
        onSelectionChange: true,
        mostRecentEventCount: true,
        inlineImageLeft: true,
        editable: true,
        fontVariant: true,
        borderBottomRightRadius: true,
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        borderRadius: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        borderTopRightRadius: true,
        borderStyle: true,
        borderBottomLeftRadius: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
        borderTopLeftRadius: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[3]),
        },
      },
    };
    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var AndroidTextInputNativeComponent = NativeComponentRegistry.get(
      "AndroidTextInput",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = AndroidTextInputNativeComponent;
    exports.default = _default;
  },
  122,
  [7, 123, 128, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;
    var dispatchCommand;

    if (global.RN$Bridgeless) {
      dispatchCommand = _$$_REQUIRE(_dependencyMap[0]).dispatchCommand;
    } else {
      dispatchCommand = _$$_REQUIRE(_dependencyMap[1]).dispatchCommand;
    }

    function codegenNativeCommands(options) {
      var commandObj = {};
      options.supportedCommands.forEach(function (command) {
        commandObj[command] = function (ref) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }

          dispatchCommand(ref, command, args);
        };
      });
      return commandObj;
    }

    var _default = codegenNativeCommands;
    exports.default = _default;
  },
  123,
  [124, 18]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[0]);

    var ReactFabric;
    {
      ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
    }

    if (global.RN$Bridgeless) {
      global.RN$stopSurface = ReactFabric.stopSurface;
    } else {
      _ReactNativePrivateInterface.BatchedBridge.registerCallableModule(
        "ReactFabric",
        ReactFabric
      );
    }

    module.exports = ReactFabric;
  },
  124,
  [118, 125]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    _$$_REQUIRE(_dependencyMap[0]);

    var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[1]),
      React = _$$_REQUIRE(_dependencyMap[2]),
      Scheduler = _$$_REQUIRE(_dependencyMap[3]);

    function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    }

    var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        },
      };

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl.apply(reporter, arguments);
    }

    function invokeGuardedCallbackAndCatchFirstError(
      name,
      func,
      context,
      a,
      b,
      c,
      d,
      e,
      f
    ) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
        } else
          throw Error(
            "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."
          );

        hasRethrowError || ((hasRethrowError = true), (rethrowError = error));
      }
    }

    var isArrayImpl = Array.isArray,
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

    function executeDispatch(event, listener, inst) {
      var type = event.type || "unknown-event";
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }

    function executeDirectDispatch(event) {
      var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
      if (isArrayImpl(dispatchListener))
        throw Error("executeDirectDispatch(...): Invalid `event`.");
      event.currentTarget = dispatchListener
        ? getNodeFromInstance(dispatchInstance)
        : null;
      dispatchListener = dispatchListener ? dispatchListener(event) : null;
      event.currentTarget = null;
      event._dispatchListeners = null;
      event._dispatchInstances = null;
      return dispatchListener;
    }

    var assign = Object.assign;

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }

    function SyntheticEvent(
      dispatchConfig,
      targetInst,
      nativeEvent,
      nativeEventTarget
    ) {
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      this._dispatchInstances = this._dispatchListeners = null;
      dispatchConfig = this.constructor.Interface;

      for (var propName in dispatchConfig) {
        dispatchConfig.hasOwnProperty(propName) &&
          ((targetInst = dispatchConfig[propName])
            ? (this[propName] = targetInst(nativeEvent))
            : "target" === propName
            ? (this.target = nativeEventTarget)
            : (this[propName] = nativeEvent[propName]));
      }

      this.isDefaultPrevented = (
        null != nativeEvent.defaultPrevented
          ? nativeEvent.defaultPrevented
          : false === nativeEvent.returnValue
      )
        ? functionThatReturnsTrue
        : functionThatReturnsFalse;
      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    assign(SyntheticEvent.prototype, {
      preventDefault: function preventDefault() {
        this.defaultPrevented = true;
        var event = this.nativeEvent;
        event &&
          (event.preventDefault
            ? event.preventDefault()
            : "unknown" !== typeof event.returnValue &&
              (event.returnValue = false),
          (this.isDefaultPrevented = functionThatReturnsTrue));
      },
      stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event &&
          (event.stopPropagation
            ? event.stopPropagation()
            : "unknown" !== typeof event.cancelBubble &&
              (event.cancelBubble = true),
          (this.isPropagationStopped = functionThatReturnsTrue));
      },
      persist: function persist() {
        this.isPersistent = functionThatReturnsTrue;
      },
      isPersistent: functionThatReturnsFalse,
      destructor: function destructor() {
        var Interface = this.constructor.Interface,
          propName;

        for (propName in Interface) {
          this[propName] = null;
        }

        this.nativeEvent = this._targetInst = this.dispatchConfig = null;
        this.isPropagationStopped = this.isDefaultPrevented =
          functionThatReturnsFalse;
        this._dispatchInstances = this._dispatchListeners = null;
      },
    });
    SyntheticEvent.Interface = {
      type: null,
      target: null,
      currentTarget: function currentTarget() {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null,
    };

    SyntheticEvent.extend = function (Interface) {
      function E() {}

      function Class() {
        return Super.apply(this, arguments);
      }

      var Super = this;
      E.prototype = Super.prototype;
      var prototype = new E();
      assign(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);

    function createOrGetPooledEvent(
      dispatchConfig,
      targetInst,
      nativeEvent,
      nativeInst
    ) {
      if (this.eventPool.length) {
        var instance = this.eventPool.pop();
        this.call(
          instance,
          dispatchConfig,
          targetInst,
          nativeEvent,
          nativeInst
        );
        return instance;
      }

      return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      if (!(event instanceof this))
        throw Error(
          "Trying to release an event instance into a pool of a different type."
        );
      event.destructor();
      10 > this.eventPool.length && this.eventPool.push(event);
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.getPooled = createOrGetPooledEvent;
      EventConstructor.eventPool = [];
      EventConstructor.release = releasePooledEvent;
    }

    var ResponderSyntheticEvent = SyntheticEvent.extend({
      touchHistory: function touchHistory() {
        return null;
      },
    });

    function isStartish(topLevelType) {
      return "topTouchStart" === topLevelType;
    }

    function isMoveish(topLevelType) {
      return "topTouchMove" === topLevelType;
    }

    var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0,
      };

    function timestampForTouch(touch) {
      return touch.timeStamp || touch.timestamp;
    }

    function getTouchIdentifier(_ref) {
      _ref = _ref.identifier;
      if (null == _ref) throw Error("Touch object is missing identifier.");
      return _ref;
    }

    function recordTouchStart(touch) {
      var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
      touchRecord
        ? ((touchRecord.touchActive = true),
          (touchRecord.startPageX = touch.pageX),
          (touchRecord.startPageY = touch.pageY),
          (touchRecord.startTimeStamp = timestampForTouch(touch)),
          (touchRecord.currentPageX = touch.pageX),
          (touchRecord.currentPageY = touch.pageY),
          (touchRecord.currentTimeStamp = timestampForTouch(touch)),
          (touchRecord.previousPageX = touch.pageX),
          (touchRecord.previousPageY = touch.pageY),
          (touchRecord.previousTimeStamp = timestampForTouch(touch)))
        : ((touchRecord = {
            touchActive: true,
            startPageX: touch.pageX,
            startPageY: touch.pageY,
            startTimeStamp: timestampForTouch(touch),
            currentPageX: touch.pageX,
            currentPageY: touch.pageY,
            currentTimeStamp: timestampForTouch(touch),
            previousPageX: touch.pageX,
            previousPageY: touch.pageY,
            previousTimeStamp: timestampForTouch(touch),
          }),
          (touchBank[identifier] = touchRecord));
      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
    }

    function recordTouchMove(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];
      touchRecord &&
        ((touchRecord.touchActive = true),
        (touchRecord.previousPageX = touchRecord.currentPageX),
        (touchRecord.previousPageY = touchRecord.currentPageY),
        (touchRecord.previousTimeStamp = touchRecord.currentTimeStamp),
        (touchRecord.currentPageX = touch.pageX),
        (touchRecord.currentPageY = touch.pageY),
        (touchRecord.currentTimeStamp = timestampForTouch(touch)),
        (touchHistory.mostRecentTimeStamp = timestampForTouch(touch)));
    }

    function recordTouchEnd(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];
      touchRecord &&
        ((touchRecord.touchActive = false),
        (touchRecord.previousPageX = touchRecord.currentPageX),
        (touchRecord.previousPageY = touchRecord.currentPageY),
        (touchRecord.previousTimeStamp = touchRecord.currentTimeStamp),
        (touchRecord.currentPageX = touch.pageX),
        (touchRecord.currentPageY = touch.pageY),
        (touchRecord.currentTimeStamp = timestampForTouch(touch)),
        (touchHistory.mostRecentTimeStamp = timestampForTouch(touch)));
    }

    var instrumentationCallback,
      ResponderTouchHistoryStore = {
        instrument: function instrument(callback) {
          instrumentationCallback = callback;
        },
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          null != instrumentationCallback &&
            instrumentationCallback(topLevelType, nativeEvent);
          if (isMoveish(topLevelType))
            nativeEvent.changedTouches.forEach(recordTouchMove);
          else if (isStartish(topLevelType))
            nativeEvent.changedTouches.forEach(recordTouchStart),
              (touchHistory.numberActiveTouches = nativeEvent.touches.length),
              1 === touchHistory.numberActiveTouches &&
                (touchHistory.indexOfSingleActiveTouch =
                  nativeEvent.touches[0].identifier);
          else if (
            "topTouchEnd" === topLevelType ||
            "topTouchCancel" === topLevelType
          )
            if (
              (nativeEvent.changedTouches.forEach(recordTouchEnd),
              (touchHistory.numberActiveTouches = nativeEvent.touches.length),
              1 === touchHistory.numberActiveTouches)
            )
              for (
                topLevelType = 0;
                topLevelType < touchBank.length;
                topLevelType++
              ) {
                if (
                  ((nativeEvent = touchBank[topLevelType]),
                  null != nativeEvent && nativeEvent.touchActive)
                ) {
                  touchHistory.indexOfSingleActiveTouch = topLevelType;
                  break;
                }
              }
        },
        touchHistory: touchHistory,
      };

    function accumulate(current, next) {
      if (null == next)
        throw Error(
          "accumulate(...): Accumulated items must not be null or undefined."
        );
      return null == current
        ? next
        : isArrayImpl(current)
        ? current.concat(next)
        : isArrayImpl(next)
        ? [current].concat(next)
        : [current, next];
    }

    function accumulateInto(current, next) {
      if (null == next)
        throw Error(
          "accumulateInto(...): Accumulated items must not be null or undefined."
        );
      if (null == current) return next;

      if (isArrayImpl(current)) {
        if (isArrayImpl(next))
          return current.push.apply(current, next), current;
        current.push(next);
        return current;
      }

      return isArrayImpl(next) ? [current].concat(next) : [current, next];
    }

    function forEachAccumulated(arr, cb, scope) {
      Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
    }

    var responderInst = null,
      trackedTouchCount = 0;

    function changeResponder(nextResponderInst, blockHostResponder) {
      var oldResponderInst = responderInst;
      responderInst = nextResponderInst;
      if (null !== ResponderEventPlugin.GlobalResponderHandler)
        ResponderEventPlugin.GlobalResponderHandler.onChange(
          oldResponderInst,
          nextResponderInst,
          blockHostResponder
        );
    }

    var eventTypes = {
      startShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onStartShouldSetResponder",
          captured: "onStartShouldSetResponderCapture",
        },
        dependencies: startDependencies,
      },
      scrollShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onScrollShouldSetResponder",
          captured: "onScrollShouldSetResponderCapture",
        },
        dependencies: ["topScroll"],
      },
      selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onSelectionChangeShouldSetResponder",
          captured: "onSelectionChangeShouldSetResponderCapture",
        },
        dependencies: ["topSelectionChange"],
      },
      moveShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onMoveShouldSetResponder",
          captured: "onMoveShouldSetResponderCapture",
        },
        dependencies: moveDependencies,
      },
      responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies,
      },
      responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies,
      },
      responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies,
      },
      responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies,
      },
      responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: [],
      },
      responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: [],
      },
      responderReject: {
        registrationName: "onResponderReject",
        dependencies: [],
      },
      responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: [],
      },
    };

    function getParent(inst) {
      do {
        inst = inst.return;
      } while (inst && 5 !== inst.tag);

      return inst ? inst : null;
    }

    function traverseTwoPhase(inst, fn, arg) {
      for (var path = []; inst; ) {
        path.push(inst), (inst = getParent(inst));
      }

      for (inst = path.length; 0 < inst--; ) {
        fn(path[inst], "captured", arg);
      }

      for (inst = 0; inst < path.length; inst++) {
        fn(path[inst], "bubbled", arg);
      }
    }

    function getListener(inst, registrationName) {
      inst = inst.stateNode;
      if (null === inst) return null;
      inst = getFiberCurrentPropsFromNode(inst);
      if (null === inst) return null;
      if ((inst = inst[registrationName]) && "function" !== typeof inst)
        throw Error(
          "Expected `" +
            registrationName +
            "` listener to be a function, instead got a value of `" +
            typeof inst +
            "` type."
        );
      return inst;
    }

    function accumulateDirectionalDispatches(inst, phase, event) {
      if (
        (phase = getListener(
          inst,
          event.dispatchConfig.phasedRegistrationNames[phase]
        ))
      )
        (event._dispatchListeners = accumulateInto(
          event._dispatchListeners,
          phase
        )),
          (event._dispatchInstances = accumulateInto(
            event._dispatchInstances,
            inst
          ));
    }

    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;

        if (inst && event && event.dispatchConfig.registrationName) {
          var listener = getListener(
            inst,
            event.dispatchConfig.registrationName
          );
          listener &&
            ((event._dispatchListeners = accumulateInto(
              event._dispatchListeners,
              listener
            )),
            (event._dispatchInstances = accumulateInto(
              event._dispatchInstances,
              inst
            )));
        }
      }
    }

    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        targetInst = targetInst ? getParent(targetInst) : null;
        traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
      }
    }

    function accumulateTwoPhaseDispatchesSingle(event) {
      event &&
        event.dispatchConfig.phasedRegistrationNames &&
        traverseTwoPhase(
          event._targetInst,
          accumulateDirectionalDispatches,
          event
        );
    }

    var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(
          topLevelType,
          targetInst,
          nativeEvent,
          nativeEventTarget
        ) {
          if (isStartish(topLevelType)) trackedTouchCount += 1;
          else if (
            "topTouchEnd" === topLevelType ||
            "topTouchCancel" === topLevelType
          )
            if (0 <= trackedTouchCount) --trackedTouchCount;
            else return null;
          ResponderTouchHistoryStore.recordTouchTrack(
            topLevelType,
            nativeEvent
          );

          if (
            targetInst &&
            (("topScroll" === topLevelType &&
              !nativeEvent.responderIgnoreScroll) ||
              (0 < trackedTouchCount &&
                "topSelectionChange" === topLevelType) ||
              isStartish(topLevelType) ||
              isMoveish(topLevelType))
          ) {
            var shouldSetEventType = isStartish(topLevelType)
              ? eventTypes.startShouldSetResponder
              : isMoveish(topLevelType)
              ? eventTypes.moveShouldSetResponder
              : "topSelectionChange" === topLevelType
              ? eventTypes.selectionChangeShouldSetResponder
              : eventTypes.scrollShouldSetResponder;
            if (responderInst)
              b: {
                var JSCompiler_temp = responderInst;

                for (
                  var depthA = 0, tempA = JSCompiler_temp;
                  tempA;
                  tempA = getParent(tempA)
                ) {
                  depthA++;
                }

                tempA = 0;

                for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
                  tempA++;
                }

                for (; 0 < depthA - tempA; ) {
                  (JSCompiler_temp = getParent(JSCompiler_temp)), depthA--;
                }

                for (; 0 < tempA - depthA; ) {
                  (targetInst = getParent(targetInst)), tempA--;
                }

                for (; depthA--; ) {
                  if (
                    JSCompiler_temp === targetInst ||
                    JSCompiler_temp === targetInst.alternate
                  )
                    break b;
                  JSCompiler_temp = getParent(JSCompiler_temp);
                  targetInst = getParent(targetInst);
                }

                JSCompiler_temp = null;
              }
            else JSCompiler_temp = targetInst;
            targetInst = JSCompiler_temp;
            JSCompiler_temp = targetInst === responderInst;
            shouldSetEventType = ResponderSyntheticEvent.getPooled(
              shouldSetEventType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            shouldSetEventType.touchHistory =
              ResponderTouchHistoryStore.touchHistory;
            JSCompiler_temp
              ? forEachAccumulated(
                  shouldSetEventType,
                  accumulateTwoPhaseDispatchesSingleSkipTarget
                )
              : forEachAccumulated(
                  shouldSetEventType,
                  accumulateTwoPhaseDispatchesSingle
                );

            b: {
              JSCompiler_temp = shouldSetEventType._dispatchListeners;
              targetInst = shouldSetEventType._dispatchInstances;
              if (isArrayImpl(JSCompiler_temp))
                for (
                  depthA = 0;
                  depthA < JSCompiler_temp.length &&
                  !shouldSetEventType.isPropagationStopped();
                  depthA++
                ) {
                  if (
                    JSCompiler_temp[depthA](
                      shouldSetEventType,
                      targetInst[depthA]
                    )
                  ) {
                    JSCompiler_temp = targetInst[depthA];
                    break b;
                  }
                }
              else if (
                JSCompiler_temp &&
                JSCompiler_temp(shouldSetEventType, targetInst)
              ) {
                JSCompiler_temp = targetInst;
                break b;
              }
              JSCompiler_temp = null;
            }

            shouldSetEventType._dispatchInstances = null;
            shouldSetEventType._dispatchListeners = null;
            shouldSetEventType.isPersistent() ||
              shouldSetEventType.constructor.release(shouldSetEventType);
            if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
              if (
                ((shouldSetEventType = ResponderSyntheticEvent.getPooled(
                  eventTypes.responderGrant,
                  JSCompiler_temp,
                  nativeEvent,
                  nativeEventTarget
                )),
                (shouldSetEventType.touchHistory =
                  ResponderTouchHistoryStore.touchHistory),
                forEachAccumulated(
                  shouldSetEventType,
                  accumulateDirectDispatchesSingle
                ),
                (targetInst =
                  true === executeDirectDispatch(shouldSetEventType)),
                responderInst)
              ) {
                if (
                  ((depthA = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderTerminationRequest,
                    responderInst,
                    nativeEvent,
                    nativeEventTarget
                  )),
                  (depthA.touchHistory =
                    ResponderTouchHistoryStore.touchHistory),
                  forEachAccumulated(depthA, accumulateDirectDispatchesSingle),
                  (tempA =
                    !depthA._dispatchListeners ||
                    executeDirectDispatch(depthA)),
                  depthA.isPersistent() || depthA.constructor.release(depthA),
                  tempA)
                ) {
                  depthA = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderTerminate,
                    responderInst,
                    nativeEvent,
                    nativeEventTarget
                  );
                  depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                  forEachAccumulated(depthA, accumulateDirectDispatchesSingle);
                  var JSCompiler_temp$jscomp$0 = accumulate(
                    JSCompiler_temp$jscomp$0,
                    [shouldSetEventType, depthA]
                  );
                  changeResponder(JSCompiler_temp, targetInst);
                } else
                  (shouldSetEventType = ResponderSyntheticEvent.getPooled(
                    eventTypes.responderReject,
                    JSCompiler_temp,
                    nativeEvent,
                    nativeEventTarget
                  )),
                    (shouldSetEventType.touchHistory =
                      ResponderTouchHistoryStore.touchHistory),
                    forEachAccumulated(
                      shouldSetEventType,
                      accumulateDirectDispatchesSingle
                    ),
                    (JSCompiler_temp$jscomp$0 = accumulate(
                      JSCompiler_temp$jscomp$0,
                      shouldSetEventType
                    ));
              } else
                (JSCompiler_temp$jscomp$0 = accumulate(
                  JSCompiler_temp$jscomp$0,
                  shouldSetEventType
                )),
                  changeResponder(JSCompiler_temp, targetInst);
            } else JSCompiler_temp$jscomp$0 = null;
          } else JSCompiler_temp$jscomp$0 = null;

          shouldSetEventType = responderInst && isStartish(topLevelType);
          JSCompiler_temp = responderInst && isMoveish(topLevelType);
          targetInst =
            responderInst &&
            ("topTouchEnd" === topLevelType ||
              "topTouchCancel" === topLevelType);
          if (
            (shouldSetEventType = shouldSetEventType
              ? eventTypes.responderStart
              : JSCompiler_temp
              ? eventTypes.responderMove
              : targetInst
              ? eventTypes.responderEnd
              : null)
          )
            (shouldSetEventType = ResponderSyntheticEvent.getPooled(
              shouldSetEventType,
              responderInst,
              nativeEvent,
              nativeEventTarget
            )),
              (shouldSetEventType.touchHistory =
                ResponderTouchHistoryStore.touchHistory),
              forEachAccumulated(
                shouldSetEventType,
                accumulateDirectDispatchesSingle
              ),
              (JSCompiler_temp$jscomp$0 = accumulate(
                JSCompiler_temp$jscomp$0,
                shouldSetEventType
              ));
          shouldSetEventType =
            responderInst && "topTouchCancel" === topLevelType;
          if (
            (topLevelType =
              responderInst &&
              !shouldSetEventType &&
              ("topTouchEnd" === topLevelType ||
                "topTouchCancel" === topLevelType))
          )
            a: {
              if (
                (topLevelType = nativeEvent.touches) &&
                0 !== topLevelType.length
              )
                for (
                  JSCompiler_temp = 0;
                  JSCompiler_temp < topLevelType.length;
                  JSCompiler_temp++
                ) {
                  if (
                    ((targetInst = topLevelType[JSCompiler_temp].target),
                    null !== targetInst &&
                      undefined !== targetInst &&
                      0 !== targetInst)
                  ) {
                    depthA = getInstanceFromNode(targetInst);

                    b: {
                      for (targetInst = responderInst; depthA; ) {
                        if (
                          targetInst === depthA ||
                          targetInst === depthA.alternate
                        ) {
                          targetInst = true;
                          break b;
                        }

                        depthA = getParent(depthA);
                      }

                      targetInst = false;
                    }

                    if (targetInst) {
                      topLevelType = false;
                      break a;
                    }
                  }
                }
              topLevelType = true;
            }
          if (
            (topLevelType = shouldSetEventType
              ? eventTypes.responderTerminate
              : topLevelType
              ? eventTypes.responderRelease
              : null)
          )
            (nativeEvent = ResponderSyntheticEvent.getPooled(
              topLevelType,
              responderInst,
              nativeEvent,
              nativeEventTarget
            )),
              (nativeEvent.touchHistory =
                ResponderTouchHistoryStore.touchHistory),
              forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle),
              (JSCompiler_temp$jscomp$0 = accumulate(
                JSCompiler_temp$jscomp$0,
                nativeEvent
              )),
              changeResponder(null);
          return JSCompiler_temp$jscomp$0;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(
            GlobalResponderHandler
          ) {
            ResponderEventPlugin.GlobalResponderHandler =
              GlobalResponderHandler;
          },
        },
      },
      eventPluginOrder = null,
      namesToPlugins = {};

    function recomputePluginOrdering() {
      if (eventPluginOrder)
        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
          if (-1 >= pluginIndex)
            throw Error(
              "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" +
                (pluginName + "`.")
            );

          if (!plugins[pluginIndex]) {
            if (!pluginModule.extractEvents)
              throw Error(
                "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" +
                  (pluginName + "` does not.")
              );
            plugins[pluginIndex] = pluginModule;
            pluginIndex = pluginModule.eventTypes;

            for (var eventName in pluginIndex) {
              var JSCompiler_inline_result = undefined;
              var dispatchConfig = pluginIndex[eventName],
                eventName$jscomp$0 = eventName;
              if (eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0))
                throw Error(
                  "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" +
                    (eventName$jscomp$0 + "`.")
                );
              eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
              var phasedRegistrationNames =
                dispatchConfig.phasedRegistrationNames;

              if (phasedRegistrationNames) {
                for (JSCompiler_inline_result in phasedRegistrationNames) {
                  phasedRegistrationNames.hasOwnProperty(
                    JSCompiler_inline_result
                  ) &&
                    publishRegistrationName(
                      phasedRegistrationNames[JSCompiler_inline_result],
                      pluginModule,
                      eventName$jscomp$0
                    );
                }

                JSCompiler_inline_result = true;
              } else
                dispatchConfig.registrationName
                  ? (publishRegistrationName(
                      dispatchConfig.registrationName,
                      pluginModule,
                      eventName$jscomp$0
                    ),
                    (JSCompiler_inline_result = true))
                  : (JSCompiler_inline_result = false);

              if (!JSCompiler_inline_result)
                throw Error(
                  "EventPluginRegistry: Failed to publish event `" +
                    eventName +
                    "` for plugin `" +
                    pluginName +
                    "`."
                );
            }
          }
        }
    }

    function publishRegistrationName(registrationName, pluginModule) {
      if (registrationNameModules[registrationName])
        throw Error(
          "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" +
            (registrationName + "`.")
        );
      registrationNameModules[registrationName] = pluginModule;
    }

    var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {};

    function getListeners(
      inst,
      registrationName,
      phase,
      dispatchToImperativeListeners
    ) {
      var stateNode = inst.stateNode;
      if (null === stateNode) return null;
      inst = getFiberCurrentPropsFromNode(stateNode);
      if (null === inst) return null;
      if ((inst = inst[registrationName]) && "function" !== typeof inst)
        throw Error(
          "Expected `" +
            registrationName +
            "` listener to be a function, instead got a value of `" +
            typeof inst +
            "` type."
        );
      if (
        !(
          dispatchToImperativeListeners &&
          stateNode.canonical &&
          stateNode.canonical._eventListeners
        )
      )
        return inst;
      var listeners = [];
      inst && listeners.push(inst);
      var requestedPhaseIsCapture = "captured" === phase,
        mangledImperativeRegistrationName = requestedPhaseIsCapture
          ? "rn:" + registrationName.replace(/Capture$/, "")
          : "rn:" + registrationName;
      stateNode.canonical._eventListeners[mangledImperativeRegistrationName] &&
        0 <
          stateNode.canonical._eventListeners[mangledImperativeRegistrationName]
            .length &&
        stateNode.canonical._eventListeners[
          mangledImperativeRegistrationName
        ].forEach(function (listenerObj) {
          if (
            (null != listenerObj.options.capture &&
              listenerObj.options.capture) === requestedPhaseIsCapture
          ) {
            var listenerFnWrapper = function listenerFnWrapper(syntheticEvent) {
              var eventInst = new ReactNativePrivateInterface.CustomEvent(
                mangledImperativeRegistrationName,
                {
                  detail: syntheticEvent.nativeEvent,
                }
              );
              eventInst.isTrusted = true;
              eventInst.setSyntheticEvent(syntheticEvent);

              for (
                var _len = arguments.length,
                  args = Array(1 < _len ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }

              listenerObj.listener.apply(listenerObj, [eventInst].concat(args));
            };

            listenerObj.options.once
              ? listeners.push(function () {
                  stateNode.canonical.removeEventListener_unstable(
                    mangledImperativeRegistrationName,
                    listenerObj.listener,
                    listenerObj.capture
                  );
                  listenerObj.invalidated ||
                    ((listenerObj.invalidated = true),
                    listenerObj.listener.apply(listenerObj, arguments));
                })
              : listeners.push(listenerFnWrapper);
          }
        });
      return 0 === listeners.length
        ? null
        : 1 === listeners.length
        ? listeners[0]
        : listeners;
    }

    var customBubblingEventTypes =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry
          .customBubblingEventTypes,
      customDirectEventTypes =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry
          .customDirectEventTypes;

    function accumulateListenersAndInstances(inst, event, listeners) {
      var listenersLength = listeners
        ? isArrayImpl(listeners)
          ? listeners.length
          : 1
        : 0;
      if (0 < listenersLength)
        if (
          ((event._dispatchListeners = accumulateInto(
            event._dispatchListeners,
            listeners
          )),
          null == event._dispatchInstances && 1 === listenersLength)
        )
          event._dispatchInstances = inst;
        else
          for (
            event._dispatchInstances = event._dispatchInstances || [],
              isArrayImpl(event._dispatchInstances) ||
                (event._dispatchInstances = [event._dispatchInstances]),
              listeners = 0;
            listeners < listenersLength;
            listeners++
          ) {
            event._dispatchInstances.push(inst);
          }
    }

    function accumulateDirectionalDispatches$1(inst, phase, event) {
      phase = getListeners(
        inst,
        event.dispatchConfig.phasedRegistrationNames[phase],
        phase,
        true
      );
      accumulateListenersAndInstances(inst, event, phase);
    }

    function traverseTwoPhase$1(inst, fn, arg, skipBubbling) {
      for (var path = []; inst; ) {
        path.push(inst);

        do {
          inst = inst.return;
        } while (inst && 5 !== inst.tag);

        inst = inst ? inst : null;
      }

      for (inst = path.length; 0 < inst--; ) {
        fn(path[inst], "captured", arg);
      }

      if (skipBubbling) fn(path[0], "bubbled", arg);
      else
        for (inst = 0; inst < path.length; inst++) {
          fn(path[inst], "bubbled", arg);
        }
    }

    function accumulateTwoPhaseDispatchesSingle$1(event) {
      event &&
        event.dispatchConfig.phasedRegistrationNames &&
        traverseTwoPhase$1(
          event._targetInst,
          accumulateDirectionalDispatches$1,
          event,
          false
        );
    }

    function accumulateDirectDispatchesSingle$1(event) {
      if (event && event.dispatchConfig.registrationName) {
        var inst = event._targetInst;

        if (inst && event && event.dispatchConfig.registrationName) {
          var listeners = getListeners(
            inst,
            event.dispatchConfig.registrationName,
            "bubbled",
            false
          );
          accumulateListenersAndInstances(inst, event, listeners);
        }
      }
    }

    if (eventPluginOrder)
      throw Error(
        "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."
      );
    eventPluginOrder = Array.prototype.slice.call([
      "ResponderEventPlugin",
      "ReactNativeBridgeEventPlugin",
    ]);
    recomputePluginOrdering();
    var injectedNamesToPlugins$jscomp$inline_218 = {
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: {
          eventTypes: {},
          extractEvents: function extractEvents(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            if (null == targetInst) return null;
            var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
              directDispatchConfig = customDirectEventTypes[topLevelType];
            if (!bubbleDispatchConfig && !directDispatchConfig)
              throw Error(
                'Unsupported top level event type "' +
                  topLevelType +
                  '" dispatched'
              );
            topLevelType = SyntheticEvent.getPooled(
              bubbleDispatchConfig || directDispatchConfig,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            if (bubbleDispatchConfig)
              null != topLevelType &&
              null != topLevelType.dispatchConfig.phasedRegistrationNames &&
              topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling
                ? topLevelType &&
                  topLevelType.dispatchConfig.phasedRegistrationNames &&
                  traverseTwoPhase$1(
                    topLevelType._targetInst,
                    accumulateDirectionalDispatches$1,
                    topLevelType,
                    true
                  )
                : forEachAccumulated(
                    topLevelType,
                    accumulateTwoPhaseDispatchesSingle$1
                  );
            else if (directDispatchConfig)
              forEachAccumulated(
                topLevelType,
                accumulateDirectDispatchesSingle$1
              );
            else return null;
            return topLevelType;
          },
        },
      },
      isOrderingDirty$jscomp$inline_219 = false,
      pluginName$jscomp$inline_220;

    for (pluginName$jscomp$inline_220 in injectedNamesToPlugins$jscomp$inline_218) {
      if (
        injectedNamesToPlugins$jscomp$inline_218.hasOwnProperty(
          pluginName$jscomp$inline_220
        )
      ) {
        var pluginModule$jscomp$inline_221 =
          injectedNamesToPlugins$jscomp$inline_218[
            pluginName$jscomp$inline_220
          ];

        if (
          !namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_220) ||
          namesToPlugins[pluginName$jscomp$inline_220] !==
            pluginModule$jscomp$inline_221
        ) {
          if (namesToPlugins[pluginName$jscomp$inline_220])
            throw Error(
              "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" +
                (pluginName$jscomp$inline_220 + "`.")
            );
          namesToPlugins[pluginName$jscomp$inline_220] =
            pluginModule$jscomp$inline_221;
          isOrderingDirty$jscomp$inline_219 = true;
        }
      }
    }

    isOrderingDirty$jscomp$inline_219 && recomputePluginOrdering();

    function getInstanceFromInstance(instanceHandle) {
      return instanceHandle;
    }

    getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
      return inst.canonical.currentProps;
    };

    getInstanceFromNode = getInstanceFromInstance;

    getNodeFromInstance = function getNodeFromInstance(inst) {
      inst = inst.stateNode.canonical;
      if (!inst._nativeTag)
        throw Error("All native instances should have a tag.");
      return inst;
    };

    ResponderEventPlugin.injection.injectGlobalResponderHandler({
      onChange: function onChange(from, to, blockNativeResponder) {
        var fromOrTo = from || to;
        (fromOrTo = fromOrTo && fromOrTo.stateNode) &&
        fromOrTo.canonical._internalInstanceHandle
          ? (from &&
              nativeFabricUIManager.setIsJSResponder(
                from.stateNode.node,
                false,
                blockNativeResponder || false
              ),
            to &&
              nativeFabricUIManager.setIsJSResponder(
                to.stateNode.node,
                true,
                blockNativeResponder || false
              ))
          : null !== to
          ? ReactNativePrivateInterface.UIManager.setJSResponder(
              to.stateNode.canonical._nativeTag,
              blockNativeResponder
            )
          : ReactNativePrivateInterface.UIManager.clearJSResponder();
      },
    });
    var ReactSharedInternals =
        React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      REACT_ELEMENT_TYPE = Symbol.for("react.element"),
      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
      REACT_MEMO_TYPE = Symbol.for("react.memo"),
      REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;

    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable =
        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
        maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }

    function getComponentNameFromType(type) {
      if (null == type) return null;
      if ("function" === typeof type)
        return type.displayName || type.name || null;
      if ("string" === typeof type) return type;

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";

        case REACT_PORTAL_TYPE:
          return "Portal";

        case REACT_PROFILER_TYPE:
          return "Profiler";

        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";

        case REACT_SUSPENSE_TYPE:
          return "Suspense";

        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }

      if ("object" === typeof type)
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Consumer";

          case REACT_PROVIDER_TYPE:
            return (type._context.displayName || "Context") + ".Provider";

          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type ||
              ((type = innerType.displayName || innerType.name || ""),
              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
            return type;

          case REACT_MEMO_TYPE:
            return (
              (innerType = type.displayName || null),
              null !== innerType
                ? innerType
                : getComponentNameFromType(type.type) || "Memo"
            );

          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;

            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {}
        }
      return null;
    }

    function getComponentNameFromFiber(fiber) {
      var type = fiber.type;

      switch (fiber.tag) {
        case 24:
          return "Cache";

        case 9:
          return (type.displayName || "Context") + ".Consumer";

        case 10:
          return (type._context.displayName || "Context") + ".Provider";

        case 18:
          return "DehydratedFragment";

        case 11:
          return (
            (fiber = type.render),
            (fiber = fiber.displayName || fiber.name || ""),
            type.displayName ||
              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
          );

        case 7:
          return "Fragment";

        case 5:
          return type;

        case 4:
          return "Portal";

        case 3:
          return "Root";

        case 6:
          return "Text";

        case 16:
          return getComponentNameFromType(type);

        case 8:
          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";

        case 22:
          return "Offscreen";

        case 12:
          return "Profiler";

        case 21:
          return "Scope";

        case 13:
          return "Suspense";

        case 19:
          return "SuspenseList";

        case 25:
          return "TracingMarker";

        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof type)
            return type.displayName || type.name || null;
          if ("string" === typeof type) return type;
      }

      return null;
    }

    function getNearestMountedFiber(fiber) {
      var node = fiber,
        nearestMounted = fiber;
      if (fiber.alternate)
        for (; node.return; ) {
          node = node.return;
        }
      else {
        fiber = node;

        do {
          (node = fiber),
            0 !== (node.flags & 4098) && (nearestMounted = node.return),
            (fiber = node.return);
        } while (fiber);
      }
      return 3 === node.tag ? nearestMounted : null;
    }

    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber)
        throw Error("Unable to find node on an unmounted component.");
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate)
          throw Error("Unable to find node on an unmounted component.");
        return alternate !== fiber ? null : fiber;
      }

      for (var a = fiber, b = alternate; ; ) {
        var parentA = a.return;
        if (null === parentA) break;
        var parentB = parentA.alternate;

        if (null === parentB) {
          b = parentA.return;

          if (null !== b) {
            a = b;
            continue;
          }

          break;
        }

        if (parentA.child === parentB.child) {
          for (parentB = parentA.child; parentB; ) {
            if (parentB === a) return assertIsMounted(parentA), fiber;
            if (parentB === b) return assertIsMounted(parentA), alternate;
            parentB = parentB.sibling;
          }

          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.return !== b.return) (a = parentA), (b = parentB);
        else {
          for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
            if (child$0 === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (child$0 === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            child$0 = child$0.sibling;
          }

          if (!didFindChild) {
            for (child$0 = parentB.child; child$0; ) {
              if (child$0 === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (child$0 === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              child$0 = child$0.sibling;
            }

            if (!didFindChild)
              throw Error(
                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
              );
          }
        }
        if (a.alternate !== b)
          throw Error(
            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
          );
      }

      if (3 !== a.tag)
        throw Error("Unable to find node on an unmounted component.");
      return a.stateNode.current === a ? fiber : alternate;
    }

    function findCurrentHostFiber(parent) {
      parent = findCurrentFiberUsingSlowPath(parent);
      return null !== parent ? findCurrentHostFiberImpl(parent) : null;
    }

    function findCurrentHostFiberImpl(node) {
      if (5 === node.tag || 6 === node.tag) return node;

      for (node = node.child; null !== node; ) {
        var match = findCurrentHostFiberImpl(node);
        if (null !== match) return match;
        node = node.sibling;
      }

      return null;
    }

    function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
      return function () {
        if (
          callback &&
          ("boolean" !== typeof context.__isMounted || context.__isMounted)
        )
          return callback.apply(context, arguments);
      };
    }

    var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0,
      deepDifferOptions = {
        unsafelyIgnoreFunctions: true,
      };

    function defaultDiffer(prevProp, nextProp) {
      return "object" !== typeof nextProp || null === nextProp
        ? true
        : ReactNativePrivateInterface.deepDiffer(
            prevProp,
            nextProp,
            deepDifferOptions
          );
    }

    function restoreDeletedValuesInNestedArray(
      updatePayload,
      node,
      validAttributes
    ) {
      if (isArrayImpl(node))
        for (var i = node.length; i-- && 0 < removedKeyCount; ) {
          restoreDeletedValuesInNestedArray(
            updatePayload,
            node[i],
            validAttributes
          );
        }
      else if (node && 0 < removedKeyCount)
        for (i in removedKeys) {
          if (removedKeys[i]) {
            var nextProp = node[i];

            if (undefined !== nextProp) {
              var attributeConfig = validAttributes[i];

              if (attributeConfig) {
                "function" === typeof nextProp && (nextProp = true);
                "undefined" === typeof nextProp && (nextProp = null);
                if ("object" !== typeof attributeConfig)
                  updatePayload[i] = nextProp;
                else if (
                  "function" === typeof attributeConfig.diff ||
                  "function" === typeof attributeConfig.process
                )
                  (nextProp =
                    "function" === typeof attributeConfig.process
                      ? attributeConfig.process(nextProp)
                      : nextProp),
                    (updatePayload[i] = nextProp);
                removedKeys[i] = false;
                removedKeyCount--;
              }
            }
          }
        }
    }

    function diffNestedProperty(
      updatePayload,
      prevProp,
      nextProp,
      validAttributes
    ) {
      if (!updatePayload && prevProp === nextProp) return updatePayload;
      if (!prevProp || !nextProp)
        return nextProp
          ? addNestedProperty(updatePayload, nextProp, validAttributes)
          : prevProp
          ? clearNestedProperty(updatePayload, prevProp, validAttributes)
          : updatePayload;
      if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp))
        return diffProperties(
          updatePayload,
          prevProp,
          nextProp,
          validAttributes
        );

      if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
        var minLength =
            prevProp.length < nextProp.length
              ? prevProp.length
              : nextProp.length,
          i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(
            updatePayload,
            prevProp[i],
            nextProp[i],
            validAttributes
          );
        }

        for (; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(
            updatePayload,
            prevProp[i],
            validAttributes
          );
        }

        for (; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(
            updatePayload,
            nextProp[i],
            validAttributes
          );
        }

        return updatePayload;
      }

      return isArrayImpl(prevProp)
        ? diffProperties(
            updatePayload,
            ReactNativePrivateInterface.flattenStyle(prevProp),
            nextProp,
            validAttributes
          )
        : diffProperties(
            updatePayload,
            prevProp,
            ReactNativePrivateInterface.flattenStyle(nextProp),
            validAttributes
          );
    }

    function addNestedProperty(updatePayload, nextProp, validAttributes) {
      if (!nextProp) return updatePayload;
      if (!isArrayImpl(nextProp))
        return diffProperties(
          updatePayload,
          emptyObject,
          nextProp,
          validAttributes
        );

      for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(
          updatePayload,
          nextProp[i],
          validAttributes
        );
      }

      return updatePayload;
    }

    function clearNestedProperty(updatePayload, prevProp, validAttributes) {
      if (!prevProp) return updatePayload;
      if (!isArrayImpl(prevProp))
        return diffProperties(
          updatePayload,
          prevProp,
          emptyObject,
          validAttributes
        );

      for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(
          updatePayload,
          prevProp[i],
          validAttributes
        );
      }

      return updatePayload;
    }

    function diffProperties(
      updatePayload,
      prevProps,
      nextProps,
      validAttributes
    ) {
      var attributeConfig, propKey;

      for (propKey in nextProps) {
        if ((attributeConfig = validAttributes[propKey])) {
          var prevProp = prevProps[propKey];
          var nextProp = nextProps[propKey];
          "function" === typeof nextProp &&
            ((nextProp = true),
            "function" === typeof prevProp && (prevProp = true));
          "undefined" === typeof nextProp &&
            ((nextProp = null),
            "undefined" === typeof prevProp && (prevProp = null));
          removedKeys && (removedKeys[propKey] = false);
          if (updatePayload && undefined !== updatePayload[propKey]) {
            if ("object" !== typeof attributeConfig)
              updatePayload[propKey] = nextProp;
            else {
              if (
                "function" === typeof attributeConfig.diff ||
                "function" === typeof attributeConfig.process
              )
                (attributeConfig =
                  "function" === typeof attributeConfig.process
                    ? attributeConfig.process(nextProp)
                    : nextProp),
                  (updatePayload[propKey] = attributeConfig);
            }
          } else if (prevProp !== nextProp)
            if ("object" !== typeof attributeConfig)
              defaultDiffer(prevProp, nextProp) &&
                ((updatePayload || (updatePayload = {}))[propKey] = nextProp);
            else if (
              "function" === typeof attributeConfig.diff ||
              "function" === typeof attributeConfig.process
            ) {
              if (
                undefined === prevProp ||
                ("function" === typeof attributeConfig.diff
                  ? attributeConfig.diff(prevProp, nextProp)
                  : defaultDiffer(prevProp, nextProp))
              )
                (attributeConfig =
                  "function" === typeof attributeConfig.process
                    ? attributeConfig.process(nextProp)
                    : nextProp),
                  ((updatePayload || (updatePayload = {}))[propKey] =
                    attributeConfig);
            } else
              (removedKeys = null),
                (removedKeyCount = 0),
                (updatePayload = diffNestedProperty(
                  updatePayload,
                  prevProp,
                  nextProp,
                  attributeConfig
                )),
                0 < removedKeyCount &&
                  updatePayload &&
                  (restoreDeletedValuesInNestedArray(
                    updatePayload,
                    nextProp,
                    attributeConfig
                  ),
                  (removedKeys = null));
        }
      }

      for (var propKey$2 in prevProps) {
        undefined === nextProps[propKey$2] &&
          (!(attributeConfig = validAttributes[propKey$2]) ||
            (updatePayload && undefined !== updatePayload[propKey$2]) ||
            ((prevProp = prevProps[propKey$2]),
            undefined !== prevProp &&
              ("object" !== typeof attributeConfig ||
              "function" === typeof attributeConfig.diff ||
              "function" === typeof attributeConfig.process
                ? (((updatePayload || (updatePayload = {}))[propKey$2] = null),
                  removedKeys || (removedKeys = {}),
                  removedKeys[propKey$2] ||
                    ((removedKeys[propKey$2] = true), removedKeyCount++))
                : (updatePayload = clearNestedProperty(
                    updatePayload,
                    prevProp,
                    attributeConfig
                  )))));
      }

      return updatePayload;
    }

    function batchedUpdatesImpl(fn, bookkeeping) {
      return fn(bookkeeping);
    }

    var isInsideEventHandler = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isInsideEventHandler) return fn(bookkeeping);
      isInsideEventHandler = true;

      try {
        return batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        isInsideEventHandler = false;
      }
    }

    var eventQueue = null;

    function executeDispatchesAndReleaseTopLevel(e) {
      if (e) {
        var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
        if (isArrayImpl(dispatchListeners))
          for (
            var i = 0;
            i < dispatchListeners.length && !e.isPropagationStopped();
            i++
          ) {
            executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);
          }
        else
          dispatchListeners &&
            executeDispatch(e, dispatchListeners, dispatchInstances);
        e._dispatchListeners = null;
        e._dispatchInstances = null;
        e.isPersistent() || e.constructor.release(e);
      }
    }

    function dispatchEvent(target, topLevelType, nativeEvent) {
      var eventTarget = null;

      if (null != target) {
        var stateNode = target.stateNode;
        null != stateNode && (eventTarget = stateNode.canonical);
      }

      batchedUpdates(function () {
        var event = {
          eventName: topLevelType,
          nativeEvent: nativeEvent,
        };
        ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);
        ReactNativePrivateInterface.RawEventEmitter.emit("*", event);
        event = eventTarget;

        for (
          var events = null, legacyPlugins = plugins, i = 0;
          i < legacyPlugins.length;
          i++
        ) {
          var possiblePlugin = legacyPlugins[i];
          possiblePlugin &&
            (possiblePlugin = possiblePlugin.extractEvents(
              topLevelType,
              target,
              nativeEvent,
              event
            )) &&
            (events = accumulateInto(events, possiblePlugin));
        }

        event = events;
        null !== event && (eventQueue = accumulateInto(eventQueue, event));
        event = eventQueue;
        eventQueue = null;

        if (event) {
          forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
          if (eventQueue)
            throw Error(
              "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."
            );
          if (hasRethrowError)
            throw (
              ((event = rethrowError),
              (hasRethrowError = false),
              (rethrowError = null),
              event)
            );
        }
      });
    }

    var scheduleCallback = Scheduler.unstable_scheduleCallback,
      cancelCallback = Scheduler.unstable_cancelCallback,
      shouldYield = Scheduler.unstable_shouldYield,
      requestPaint = Scheduler.unstable_requestPaint,
      now = Scheduler.unstable_now,
      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      NormalPriority = Scheduler.unstable_NormalPriority,
      IdlePriority = Scheduler.unstable_IdlePriority,
      rendererID = null,
      injectedHook = null;

    function onCommitRoot(root) {
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
        try {
          injectedHook.onCommitFiberRoot(
            rendererID,
            root,
            undefined,
            128 === (root.current.flags & 128)
          );
        } catch (err) {}
    }

    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
      log = Math.log,
      LN2 = Math.LN2;

    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
    }

    var nextTransitionLane = 64,
      nextRetryLane = 4194304;

    function getHighestPriorityLanes(lanes) {
      switch (lanes & -lanes) {
        case 1:
          return 1;

        case 2:
          return 2;

        case 4:
          return 4;

        case 8:
          return 8;

        case 16:
          return 16;

        case 32:
          return 32;

        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & 4194240;

        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return lanes & 130023424;

        case 134217728:
          return 134217728;

        case 268435456:
          return 268435456;

        case 536870912:
          return 536870912;

        case 1073741824:
          return 1073741824;

        default:
          return lanes;
      }
    }

    function getNextLanes(root, wipLanes) {
      var pendingLanes = root.pendingLanes;
      if (0 === pendingLanes) return 0;
      var nextLanes = 0,
        suspendedLanes = root.suspendedLanes,
        pingedLanes = root.pingedLanes,
        nonIdlePendingLanes = pendingLanes & 268435455;

      if (0 !== nonIdlePendingLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        0 !== nonIdleUnblockedLanes
          ? (nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes))
          : ((pingedLanes &= nonIdlePendingLanes),
            0 !== pingedLanes &&
              (nextLanes = getHighestPriorityLanes(pingedLanes)));
      } else
        (nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
          0 !== nonIdlePendingLanes
            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
            : 0 !== pingedLanes &&
              (nextLanes = getHighestPriorityLanes(pingedLanes));

      if (0 === nextLanes) return 0;
      if (
        0 !== wipLanes &&
        wipLanes !== nextLanes &&
        0 === (wipLanes & suspendedLanes) &&
        ((suspendedLanes = nextLanes & -nextLanes),
        (pingedLanes = wipLanes & -wipLanes),
        suspendedLanes >= pingedLanes ||
          (16 === suspendedLanes && 0 !== (pingedLanes & 4194240)))
      )
        return wipLanes;
      0 !== (nextLanes & 4) && (nextLanes |= pendingLanes & 16);
      wipLanes = root.entangledLanes;
      if (0 !== wipLanes)
        for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes; ) {
          (pendingLanes = 31 - clz32(wipLanes)),
            (suspendedLanes = 1 << pendingLanes),
            (nextLanes |= root[pendingLanes]),
            (wipLanes &= ~suspendedLanes);
        }
      return nextLanes;
    }

    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case 1:
        case 2:
        case 4:
          return currentTime + 250;

        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5e3;

        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;

        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;

        default:
          return -1;
      }
    }

    function getLanesToRetrySynchronouslyOnError(root) {
      root = root.pendingLanes & -1073741825;
      return 0 !== root ? root : root & 1073741824 ? 1073741824 : 0;
    }

    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      0 === (nextTransitionLane & 4194240) && (nextTransitionLane = 64);
      return lane;
    }

    function createLaneMap(initial) {
      for (var laneMap = [], i = 0; 31 > i; i++) {
        laneMap.push(initial);
      }

      return laneMap;
    }

    function markRootUpdated(root, updateLane, eventTime) {
      root.pendingLanes |= updateLane;
      536870912 !== updateLane &&
        ((root.suspendedLanes = 0), (root.pingedLanes = 0));
      root = root.eventTimes;
      updateLane = 31 - clz32(updateLane);
      root[updateLane] = eventTime;
    }

    function markRootFinished(root, remainingLanes) {
      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
      root.pendingLanes = remainingLanes;
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.mutableReadLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      remainingLanes = root.entanglements;
      var eventTimes = root.eventTimes;

      for (root = root.expirationTimes; 0 < noLongerPendingLanes; ) {
        var index$7 = 31 - clz32(noLongerPendingLanes),
          lane = 1 << index$7;
        remainingLanes[index$7] = 0;
        eventTimes[index$7] = -1;
        root[index$7] = -1;
        noLongerPendingLanes &= ~lane;
      }
    }

    function markRootEntangled(root, entangledLanes) {
      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);

      for (root = root.entanglements; rootEntangledLanes; ) {
        var index$8 = 31 - clz32(rootEntangledLanes),
          lane = 1 << index$8;
        (lane & entangledLanes) | (root[index$8] & entangledLanes) &&
          (root[index$8] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }

    var currentUpdatePriority = 0;

    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return 1 < lanes
        ? 4 < lanes
          ? 0 !== (lanes & 268435455)
            ? 16
            : 536870912
          : 4
        : 1;
    }

    function shim$1() {
      throw Error(
        "The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."
      );
    }

    var _nativeFabricUIManage = nativeFabricUIManager,
      createNode = _nativeFabricUIManage.createNode,
      cloneNode = _nativeFabricUIManage.cloneNode,
      cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
      cloneNodeWithNewChildrenAndProps =
        _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
      cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
      createChildNodeSet = _nativeFabricUIManage.createChildSet,
      appendChildNode = _nativeFabricUIManage.appendChild,
      appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
      completeRoot = _nativeFabricUIManage.completeRoot,
      registerEventHandler = _nativeFabricUIManage.registerEventHandler,
      fabricMeasure = _nativeFabricUIManage.measure,
      fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
      fabricMeasureLayout = _nativeFabricUIManage.measureLayout,
      FabricDiscretePriority =
        _nativeFabricUIManage.unstable_DiscreteEventPriority,
      fabricGetCurrentEventPriority =
        _nativeFabricUIManage.unstable_getCurrentEventPriority,
      getViewConfigForType =
        ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
      nextReactTag = 2;
    registerEventHandler && registerEventHandler(dispatchEvent);

    var ReactFabricHostComponent = (function () {
      function ReactFabricHostComponent(
        tag,
        viewConfig,
        props,
        internalInstanceHandle
      ) {
        this._nativeTag = tag;
        this.viewConfig = viewConfig;
        this.currentProps = props;
        this._internalInstanceHandle = internalInstanceHandle;
      }

      var _proto = ReactFabricHostComponent.prototype;

      _proto.blur = function () {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this);
      };

      _proto.focus = function () {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this);
      };

      _proto.measure = function (callback) {
        var stateNode = this._internalInstanceHandle.stateNode;
        null != stateNode &&
          fabricMeasure(
            stateNode.node,
            mountSafeCallback_NOT_REALLY_SAFE(this, callback)
          );
      };

      _proto.measureInWindow = function (callback) {
        var stateNode = this._internalInstanceHandle.stateNode;
        null != stateNode &&
          fabricMeasureInWindow(
            stateNode.node,
            mountSafeCallback_NOT_REALLY_SAFE(this, callback)
          );
      };

      _proto.measureLayout = function (
        relativeToNativeNode,
        onSuccess,
        onFail
      ) {
        if (
          "number" !== typeof relativeToNativeNode &&
          relativeToNativeNode instanceof ReactFabricHostComponent
        ) {
          var toStateNode = this._internalInstanceHandle.stateNode;
          relativeToNativeNode =
            relativeToNativeNode._internalInstanceHandle.stateNode;
          null != toStateNode &&
            null != relativeToNativeNode &&
            fabricMeasureLayout(
              toStateNode.node,
              relativeToNativeNode.node,
              mountSafeCallback_NOT_REALLY_SAFE(this, onFail),
              mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)
            );
        }
      };

      _proto.setNativeProps = function () {};

      _proto.addEventListener_unstable = function (
        eventType,
        listener,
        options
      ) {
        if ("string" !== typeof eventType)
          throw Error("addEventListener_unstable eventType must be a string");
        if ("function" !== typeof listener)
          throw Error("addEventListener_unstable listener must be a function");
        var optionsObj =
          "object" === typeof options && null !== options ? options : {};
        options =
          ("boolean" === typeof options ? options : optionsObj.capture) ||
          false;
        var once = optionsObj.once || false;
        optionsObj = optionsObj.passive || false;
        var eventListeners = this._eventListeners || {};
        null == this._eventListeners && (this._eventListeners = eventListeners);
        var namedEventListeners = eventListeners[eventType] || [];
        null == eventListeners[eventType] &&
          (eventListeners[eventType] = namedEventListeners);
        namedEventListeners.push({
          listener: listener,
          invalidated: false,
          options: {
            capture: options,
            once: once,
            passive: optionsObj,
            signal: null,
          },
        });
      };

      _proto.removeEventListener_unstable = function (
        eventType,
        listener,
        options
      ) {
        var optionsObj =
            "object" === typeof options && null !== options ? options : {},
          capture =
            ("boolean" === typeof options ? options : optionsObj.capture) ||
            false;
        (options = this._eventListeners) &&
          (optionsObj = options[eventType]) &&
          (options[eventType] = optionsObj.filter(function (listenerObj) {
            return !(
              listenerObj.listener === listener &&
              listenerObj.options.capture === capture
            );
          }));
      };

      return ReactFabricHostComponent;
    })();

    function createTextInstance(
      text,
      rootContainerInstance,
      hostContext,
      internalInstanceHandle
    ) {
      hostContext = nextReactTag;
      nextReactTag += 2;
      return {
        node: createNode(
          hostContext,
          "RCTRawText",
          rootContainerInstance,
          {
            text: text,
          },
          internalInstanceHandle
        ),
      };
    }

    var scheduleTimeout = setTimeout,
      cancelTimeout = clearTimeout;

    function cloneHiddenInstance(instance) {
      var node = instance.node;
      var JSCompiler_inline_result = diffProperties(
        null,
        emptyObject,
        {
          style: {
            display: "none",
          },
        },
        instance.canonical.viewConfig.validAttributes
      );
      return {
        node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
        canonical: instance.canonical,
      };
    }

    function describeComponentFrame(name, source, ownerName) {
      source = "";
      ownerName && (source = " (created by " + ownerName + ")");
      return "\n    in " + (name || "Unknown") + source;
    }

    function describeFunctionComponentFrame(fn, source) {
      return fn
        ? describeComponentFrame(
            fn.displayName || fn.name || null,
            source,
            null
          )
        : "";
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty,
      valueStack = [],
      index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue,
      };
    }

    function pop(cursor) {
      0 > index ||
        ((cursor.current = valueStack[index]),
        (valueStack[index] = null),
        index--);
    }

    function push(cursor, value) {
      index++;
      valueStack[index] = cursor.current;
      cursor.current = value;
    }

    var emptyContextObject = {},
      contextStackCursor = createCursor(emptyContextObject),
      didPerformWorkStackCursor = createCursor(false),
      previousContext = emptyContextObject;

    function getMaskedContext(workInProgress, unmaskedContext) {
      var contextTypes = workInProgress.type.contextTypes;
      if (!contextTypes) return emptyContextObject;
      var instance = workInProgress.stateNode;
      if (
        instance &&
        instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext
      )
        return instance.__reactInternalMemoizedMaskedChildContext;
      var context = {},
        key;

      for (key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      instance &&
        ((workInProgress = workInProgress.stateNode),
        (workInProgress.__reactInternalMemoizedUnmaskedChildContext =
          unmaskedContext),
        (workInProgress.__reactInternalMemoizedMaskedChildContext = context));
      return context;
    }

    function isContextProvider(type) {
      type = type.childContextTypes;
      return null !== type && undefined !== type;
    }

    function popContext() {
      pop(didPerformWorkStackCursor);
      pop(contextStackCursor);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      if (contextStackCursor.current !== emptyContextObject)
        throw Error(
          "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."
        );
      push(contextStackCursor, context);
      push(didPerformWorkStackCursor, didChange);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      type = type.childContextTypes;
      if ("function" !== typeof instance.getChildContext) return parentContext;
      instance = instance.getChildContext();

      for (var contextKey in instance) {
        if (!(contextKey in type))
          throw Error(
            (getComponentNameFromFiber(fiber) || "Unknown") +
              '.getChildContext(): key "' +
              contextKey +
              '" is not defined in childContextTypes.'
          );
      }

      return assign({}, parentContext, instance);
    }

    function pushContextProvider(workInProgress) {
      workInProgress =
        ((workInProgress = workInProgress.stateNode) &&
          workInProgress.__reactInternalMemoizedMergedChildContext) ||
        emptyContextObject;
      previousContext = contextStackCursor.current;
      push(contextStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      if (!instance)
        throw Error(
          "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."
        );
      didChange
        ? ((workInProgress = processChildContext(
            workInProgress,
            type,
            previousContext
          )),
          (instance.__reactInternalMemoizedMergedChildContext = workInProgress),
          pop(didPerformWorkStackCursor),
          pop(contextStackCursor),
          push(contextStackCursor, workInProgress))
        : pop(didPerformWorkStackCursor);
      push(didPerformWorkStackCursor, didChange);
    }

    function is(x, y) {
      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
    }

    var objectIs = "function" === typeof Object.is ? Object.is : is,
      syncQueue = null,
      includesLegacySyncCallbacks = false,
      isFlushingSyncQueue = false;

    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && null !== syncQueue) {
        isFlushingSyncQueue = true;
        var i = 0,
          previousUpdatePriority = currentUpdatePriority;

        try {
          var queue = syncQueue;

          for (currentUpdatePriority = 1; i < queue.length; i++) {
            var callback = queue[i];

            do {
              callback = callback(true);
            } while (null !== callback);
          }

          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error) {
          throw (
            (null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)),
            scheduleCallback(ImmediatePriority, flushSyncCallbacks),
            error)
          );
        } finally {
          (currentUpdatePriority = previousUpdatePriority),
            (isFlushingSyncQueue = false);
        }
      }

      return null;
    }

    var forkStack = [],
      forkStackIndex = 0,
      treeForkProvider = null,
      idStack = [],
      idStackIndex = 0,
      treeContextProvider = null;

    function popTreeContext(workInProgress) {
      for (; workInProgress === treeForkProvider; ) {
        (treeForkProvider = forkStack[--forkStackIndex]),
          (forkStack[forkStackIndex] = null),
          --forkStackIndex,
          (forkStack[forkStackIndex] = null);
      }

      for (; workInProgress === treeContextProvider; ) {
        (treeContextProvider = idStack[--idStackIndex]),
          (idStack[idStackIndex] = null),
          --idStackIndex,
          (idStack[idStackIndex] = null),
          --idStackIndex,
          (idStack[idStackIndex] = null);
      }
    }

    var hydrationErrors = null,
      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) return true;
      if (
        "object" !== typeof objA ||
        null === objA ||
        "object" !== typeof objB ||
        null === objB
      )
        return false;
      var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;

      for (keysB = 0; keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (
          !hasOwnProperty.call(objB, currentKey) ||
          !objectIs(objA[currentKey], objB[currentKey])
        )
          return false;
      }

      return true;
    }

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case 5:
          return describeComponentFrame(fiber.type, null, null);

        case 16:
          return describeComponentFrame("Lazy", null, null);

        case 13:
          return describeComponentFrame("Suspense", null, null);

        case 19:
          return describeComponentFrame("SuspenseList", null, null);

        case 0:
        case 2:
        case 15:
          return describeFunctionComponentFrame(fiber.type, null);

        case 11:
          return describeFunctionComponentFrame(fiber.type.render, null);

        case 1:
          return (
            (fiber = describeFunctionComponentFrame(fiber.type, null)), fiber
          );

        default:
          return "";
      }
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        baseProps = assign({}, baseProps);
        Component = Component.defaultProps;

        for (var propName in Component) {
          undefined === baseProps[propName] &&
            (baseProps[propName] = Component[propName]);
        }

        return baseProps;
      }

      return baseProps;
    }

    var valueCursor = createCursor(null),
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastFullyObservedContext = null;

    function resetContextDependencies() {
      lastFullyObservedContext =
        lastContextDependency =
        currentlyRenderingFiber =
          null;
    }

    function popProvider(context) {
      var currentValue = valueCursor.current;
      pop(valueCursor);
      context._currentValue2 = currentValue;
    }

    function scheduleContextWorkOnParentPath(
      parent,
      renderLanes,
      propagationRoot
    ) {
      for (; null !== parent; ) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes
          ? ((parent.childLanes |= renderLanes),
            null !== alternate && (alternate.childLanes |= renderLanes))
          : null !== alternate &&
            (alternate.childLanes & renderLanes) !== renderLanes &&
            (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) break;
        parent = parent.return;
      }
    }

    function prepareToReadContext(workInProgress, renderLanes) {
      currentlyRenderingFiber = workInProgress;
      lastFullyObservedContext = lastContextDependency = null;
      workInProgress = workInProgress.dependencies;
      null !== workInProgress &&
        null !== workInProgress.firstContext &&
        (0 !== (workInProgress.lanes & renderLanes) &&
          (didReceiveUpdate = true),
        (workInProgress.firstContext = null));
    }

    function readContext(context) {
      var value = context._currentValue2;
      if (lastFullyObservedContext !== context)
        if (
          ((context = {
            context: context,
            memoizedValue: value,
            next: null,
          }),
          null === lastContextDependency)
        ) {
          if (null === currentlyRenderingFiber)
            throw Error(
              "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
            );
          lastContextDependency = context;
          currentlyRenderingFiber.dependencies = {
            lanes: 0,
            firstContext: context,
          };
        } else lastContextDependency = lastContextDependency.next = context;
      return value;
    }

    var interleavedQueues = null,
      hasForceUpdate = false;

    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: 0,
        },
        effects: null,
      };
    }

    function cloneUpdateQueue(current, workInProgress) {
      current = current.updateQueue;
      workInProgress.updateQueue === current &&
        (workInProgress.updateQueue = {
          baseState: current.baseState,
          firstBaseUpdate: current.firstBaseUpdate,
          lastBaseUpdate: current.lastBaseUpdate,
          shared: current.shared,
          effects: current.effects,
        });
    }

    function createUpdate(eventTime, lane) {
      return {
        eventTime: eventTime,
        lane: lane,
        tag: 0,
        payload: null,
        callback: null,
        next: null,
      };
    }

    function enqueueUpdate(fiber, update) {
      var updateQueue = fiber.updateQueue;
      null !== updateQueue &&
        ((updateQueue = updateQueue.shared),
        isInterleavedUpdate(fiber)
          ? ((fiber = updateQueue.interleaved),
            null === fiber
              ? ((update.next = update),
                null === interleavedQueues
                  ? (interleavedQueues = [updateQueue])
                  : interleavedQueues.push(updateQueue))
              : ((update.next = fiber.next), (fiber.next = update)),
            (updateQueue.interleaved = update))
          : ((fiber = updateQueue.pending),
            null === fiber
              ? (update.next = update)
              : ((update.next = fiber.next), (fiber.next = update)),
            (updateQueue.pending = update)));
    }

    function entangleTransitions(root, fiber, lane) {
      fiber = fiber.updateQueue;

      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194240))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
      }
    }

    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      var queue = workInProgress.updateQueue,
        current = workInProgress.alternate;

      if (
        null !== current &&
        ((current = current.updateQueue), queue === current)
      ) {
        var newFirst = null,
          newLast = null;
        queue = queue.firstBaseUpdate;

        if (null !== queue) {
          do {
            var clone = {
              eventTime: queue.eventTime,
              lane: queue.lane,
              tag: queue.tag,
              payload: queue.payload,
              callback: queue.callback,
              next: null,
            };
            null === newLast
              ? (newFirst = newLast = clone)
              : (newLast = newLast.next = clone);
            queue = queue.next;
          } while (null !== queue);

          null === newLast
            ? (newFirst = newLast = capturedUpdate)
            : (newLast = newLast.next = capturedUpdate);
        } else newFirst = newLast = capturedUpdate;

        queue = {
          baseState: current.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: current.shared,
          effects: current.effects,
        };
        workInProgress.updateQueue = queue;
        return;
      }

      workInProgress = queue.lastBaseUpdate;
      null === workInProgress
        ? (queue.firstBaseUpdate = capturedUpdate)
        : (workInProgress.next = capturedUpdate);
      queue.lastBaseUpdate = capturedUpdate;
    }

    function processUpdateQueue(
      workInProgress$jscomp$0,
      props,
      instance,
      renderLanes
    ) {
      var queue = workInProgress$jscomp$0.updateQueue;
      hasForceUpdate = false;
      var firstBaseUpdate = queue.firstBaseUpdate,
        lastBaseUpdate = queue.lastBaseUpdate,
        pendingQueue = queue.shared.pending;

      if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue,
          firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate
          ? (firstBaseUpdate = firstPendingUpdate)
          : (lastBaseUpdate.next = firstPendingUpdate);
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress$jscomp$0.alternate;
        null !== current &&
          ((current = current.updateQueue),
          (pendingQueue = current.lastBaseUpdate),
          pendingQueue !== lastBaseUpdate &&
            (null === pendingQueue
              ? (current.firstBaseUpdate = firstPendingUpdate)
              : (pendingQueue.next = firstPendingUpdate),
            (current.lastBaseUpdate = lastPendingUpdate)));
      }

      if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;

        do {
          var updateLane = pendingQueue.lane,
            updateEventTime = pendingQueue.eventTime;

          if ((renderLanes & updateLane) === updateLane) {
            null !== current &&
              (current = current.next =
                {
                  eventTime: updateEventTime,
                  lane: 0,
                  tag: pendingQueue.tag,
                  payload: pendingQueue.payload,
                  callback: pendingQueue.callback,
                  next: null,
                });

            a: {
              var workInProgress = workInProgress$jscomp$0,
                update = pendingQueue;
              updateLane = props;
              updateEventTime = instance;

              switch (update.tag) {
                case 1:
                  workInProgress = update.payload;

                  if ("function" === typeof workInProgress) {
                    newState = workInProgress.call(
                      updateEventTime,
                      newState,
                      updateLane
                    );
                    break a;
                  }

                  newState = workInProgress;
                  break a;

                case 3:
                  workInProgress.flags = (workInProgress.flags & -65537) | 128;

                case 0:
                  workInProgress = update.payload;
                  updateLane =
                    "function" === typeof workInProgress
                      ? workInProgress.call(
                          updateEventTime,
                          newState,
                          updateLane
                        )
                      : workInProgress;
                  if (null === updateLane || undefined === updateLane) break a;
                  newState = assign({}, newState, updateLane);
                  break a;

                case 2:
                  hasForceUpdate = true;
              }
            }

            null !== pendingQueue.callback &&
              0 !== pendingQueue.lane &&
              ((workInProgress$jscomp$0.flags |= 64),
              (updateLane = queue.effects),
              null === updateLane
                ? (queue.effects = [pendingQueue])
                : updateLane.push(pendingQueue));
          } else
            (updateEventTime = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: pendingQueue.callback,
              next: null,
            }),
              null === current
                ? ((firstPendingUpdate = current = updateEventTime),
                  (lastPendingUpdate = newState))
                : (current = current.next = updateEventTime),
              (lastBaseUpdate |= updateLane);

          pendingQueue = pendingQueue.next;
          if (null === pendingQueue)
            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
              break;
            else
              (updateLane = pendingQueue),
                (pendingQueue = updateLane.next),
                (updateLane.next = null),
                (queue.lastBaseUpdate = updateLane),
                (queue.shared.pending = null);
        } while (1);

        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        props = queue.shared.interleaved;

        if (null !== props) {
          queue = props;

          do {
            (lastBaseUpdate |= queue.lane), (queue = queue.next);
          } while (queue !== props);
        } else null === firstBaseUpdate && (queue.shared.lanes = 0);

        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress$jscomp$0.lanes = lastBaseUpdate;
        workInProgress$jscomp$0.memoizedState = newState;
      }
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      finishedWork = finishedQueue.effects;
      finishedQueue.effects = null;
      if (null !== finishedWork)
        for (
          finishedQueue = 0;
          finishedQueue < finishedWork.length;
          finishedQueue++
        ) {
          var effect = finishedWork[finishedQueue],
            callback = effect.callback;

          if (null !== callback) {
            effect.callback = null;
            if ("function" !== typeof callback)
              throw Error(
                "Invalid argument passed as callback. Expected a function. Instead received: " +
                  callback
              );
            callback.call(instance);
          }
        }
    }

    var emptyRefsObject = new React.Component().refs;

    function applyDerivedStateFromProps(
      workInProgress,
      ctor,
      getDerivedStateFromProps,
      nextProps
    ) {
      ctor = workInProgress.memoizedState;
      getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
      getDerivedStateFromProps =
        null === getDerivedStateFromProps ||
        undefined === getDerivedStateFromProps
          ? ctor
          : assign({}, ctor, getDerivedStateFromProps);
      workInProgress.memoizedState = getDerivedStateFromProps;
      0 === workInProgress.lanes &&
        (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
    }

    var classComponentUpdater = {
      isMounted: function isMounted(component) {
        return (component = component._reactInternals)
          ? getNearestMountedFiber(component) === component
          : false;
      },
      enqueueSetState: function enqueueSetState(inst, payload, callback) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.payload = payload;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        payload = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== payload && entangleTransitions(payload, inst, lane);
      },
      enqueueReplaceState: function enqueueReplaceState(
        inst,
        payload,
        callback
      ) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.tag = 1;
        update.payload = payload;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        payload = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== payload && entangleTransitions(payload, inst, lane);
      },
      enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
        inst = inst._reactInternals;
        var eventTime = requestEventTime(),
          lane = requestUpdateLane(inst),
          update = createUpdate(eventTime, lane);
        update.tag = 2;
        undefined !== callback &&
          null !== callback &&
          (update.callback = callback);
        enqueueUpdate(inst, update);
        callback = scheduleUpdateOnFiber(inst, lane, eventTime);
        null !== callback && entangleTransitions(callback, inst, lane);
      },
    };

    function checkShouldComponentUpdate(
      workInProgress,
      ctor,
      oldProps,
      newProps,
      oldState,
      newState,
      nextContext
    ) {
      workInProgress = workInProgress.stateNode;
      return "function" === typeof workInProgress.shouldComponentUpdate
        ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
        : ctor.prototype && ctor.prototype.isPureReactComponent
        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
        : true;
    }

    function constructClassInstance(workInProgress, ctor, props) {
      var isLegacyContextConsumer = false,
        unmaskedContext = emptyContextObject;
      var context = ctor.contextType;
      "object" === typeof context && null !== context
        ? (context = readContext(context))
        : ((unmaskedContext = isContextProvider(ctor)
            ? previousContext
            : contextStackCursor.current),
          (isLegacyContextConsumer = ctor.contextTypes),
          (context = (isLegacyContextConsumer =
            null !== isLegacyContextConsumer &&
            undefined !== isLegacyContextConsumer)
            ? getMaskedContext(workInProgress, unmaskedContext)
            : emptyContextObject));
      ctor = new ctor(props, context);
      workInProgress.memoizedState =
        null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
      ctor.updater = classComponentUpdater;
      workInProgress.stateNode = ctor;
      ctor._reactInternals = workInProgress;
      isLegacyContextConsumer &&
        ((workInProgress = workInProgress.stateNode),
        (workInProgress.__reactInternalMemoizedUnmaskedChildContext =
          unmaskedContext),
        (workInProgress.__reactInternalMemoizedMaskedChildContext = context));
      return ctor;
    }

    function callComponentWillReceiveProps(
      workInProgress,
      instance,
      newProps,
      nextContext
    ) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps &&
        instance.componentWillReceiveProps(newProps, nextContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== workInProgress &&
        classComponentUpdater.enqueueReplaceState(
          instance,
          instance.state,
          null
        );
    }

    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress);
      var contextType = ctor.contextType;
      "object" === typeof contextType && null !== contextType
        ? (instance.context = readContext(contextType))
        : ((contextType = isContextProvider(ctor)
            ? previousContext
            : contextStackCursor.current),
          (instance.context = getMaskedContext(workInProgress, contextType)));
      instance.state = workInProgress.memoizedState;
      contextType = ctor.getDerivedStateFromProps;
      "function" === typeof contextType &&
        (applyDerivedStateFromProps(
          workInProgress,
          ctor,
          contextType,
          newProps
        ),
        (instance.state = workInProgress.memoizedState));
      "function" === typeof ctor.getDerivedStateFromProps ||
        "function" === typeof instance.getSnapshotBeforeUpdate ||
        ("function" !== typeof instance.UNSAFE_componentWillMount &&
          "function" !== typeof instance.componentWillMount) ||
        ((ctor = instance.state),
        "function" === typeof instance.componentWillMount &&
          instance.componentWillMount(),
        "function" === typeof instance.UNSAFE_componentWillMount &&
          instance.UNSAFE_componentWillMount(),
        ctor !== instance.state &&
          classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          ),
        processUpdateQueue(workInProgress, newProps, instance, renderLanes),
        (instance.state = workInProgress.memoizedState));
      "function" === typeof instance.componentDidMount &&
        (workInProgress.flags |= 4);
    }

    function coerceRef(returnFiber, current, element) {
      returnFiber = element.ref;

      if (
        null !== returnFiber &&
        "function" !== typeof returnFiber &&
        "object" !== typeof returnFiber
      ) {
        if (element._owner) {
          element = element._owner;

          if (element) {
            if (1 !== element.tag)
              throw Error(
                "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
              );
            var inst = element.stateNode;
          }

          if (!inst)
            throw Error(
              "Missing owner for string ref " +
                returnFiber +
                ". This error is likely caused by a bug in React. Please file an issue."
            );
          var resolvedInst = inst,
            stringRef = "" + returnFiber;
          if (
            null !== current &&
            null !== current.ref &&
            "function" === typeof current.ref &&
            current.ref._stringRef === stringRef
          )
            return current.ref;

          current = function current(value) {
            var refs = resolvedInst.refs;
            refs === emptyRefsObject && (refs = resolvedInst.refs = {});
            null === value ? delete refs[stringRef] : (refs[stringRef] = value);
          };

          current._stringRef = stringRef;
          return current;
        }

        if ("string" !== typeof returnFiber)
          throw Error(
            "Expected ref to be a function, a string, an object returned by React.createRef(), or null."
          );
        if (!element._owner)
          throw Error(
            "Element ref was specified as a string (" +
              returnFiber +
              ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
          );
      }

      return returnFiber;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error(
        "Objects are not valid as a React child (found: " +
          ("[object Object]" === returnFiber
            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
            : returnFiber) +
          "). If you meant to render a collection of children, use an array instead."
      );
    }

    function resolveLazy(lazyType) {
      var init = lazyType._init;
      return init(lazyType._payload);
    }

    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          null === deletions
            ? ((returnFiber.deletions = [childToDelete]),
              (returnFiber.flags |= 16))
            : deletions.push(childToDelete);
        }
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;

        for (; null !== currentFirstChild; ) {
          deleteChild(returnFiber, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (returnFiber = new Map(); null !== currentFirstChild; ) {
          null !== currentFirstChild.key
            ? returnFiber.set(currentFirstChild.key, currentFirstChild)
            : returnFiber.set(currentFirstChild.index, currentFirstChild),
            (currentFirstChild = currentFirstChild.sibling);
        }

        return returnFiber;
      }

      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects)
          return (newFiber.flags |= 1048576), lastPlacedIndex;
        newIndex = newFiber.alternate;
        if (null !== newIndex)
          return (
            (newIndex = newIndex.index),
            newIndex < lastPlacedIndex
              ? ((newFiber.flags |= 2), lastPlacedIndex)
              : newIndex
          );
        newFiber.flags |= 2;
        return lastPlacedIndex;
      }

      function placeSingleChild(newFiber) {
        shouldTrackSideEffects &&
          null === newFiber.alternate &&
          (newFiber.flags |= 2);
        return newFiber;
      }

      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag)
          return (
            (current = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            )),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
      }

      function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE)
          return updateFragment(
            returnFiber,
            current,
            element.props.children,
            lanes,
            element.key
          );
        if (
          null !== current &&
          (current.elementType === elementType ||
            ("object" === typeof elementType &&
              null !== elementType &&
              elementType.$$typeof === REACT_LAZY_TYPE &&
              resolveLazy(elementType) === current.type))
        )
          return (
            (lanes = useFiber(current, element.props)),
            (lanes.ref = coerceRef(returnFiber, current, element)),
            (lanes.return = returnFiber),
            lanes
          );
        lanes = createFiberFromTypeAndProps(
          element.type,
          element.key,
          element.props,
          null,
          returnFiber.mode,
          lanes
        );
        lanes.ref = coerceRef(returnFiber, current, element);
        lanes.return = returnFiber;
        return lanes;
      }

      function updatePortal(returnFiber, current, portal, lanes) {
        if (
          null === current ||
          4 !== current.tag ||
          current.stateNode.containerInfo !== portal.containerInfo ||
          current.stateNode.implementation !== portal.implementation
        )
          return (
            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
      }

      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag)
          return (
            (current = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            )),
            (current.return = returnFiber),
            current
          );
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
      }

      function createChild(returnFiber, newChild, lanes) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return (
            (newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            )),
            (newChild.return = returnFiber),
            newChild
          );

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                )),
                (lanes.ref = coerceRef(returnFiber, null, newChild)),
                (lanes.return = returnFiber),
                lanes
              );

            case REACT_PORTAL_TYPE:
              return (
                (newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                (newChild.return = returnFiber),
                newChild
              );

            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return createChild(returnFiber, init(newChild._payload), lanes);
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (newChild = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              )),
              (newChild.return = returnFiber),
              newChild
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return null !== key
            ? null
            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key
                ? updateElement(returnFiber, oldFiber, newChild, lanes)
                : null;

            case REACT_PORTAL_TYPE:
              return newChild.key === key
                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
                : null;

            case REACT_LAZY_TYPE:
              return (
                (key = newChild._init),
                updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes)
              );
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return null !== key
              ? null
              : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function updateFromMap(
        existingChildren,
        returnFiber,
        newIdx,
        newChild,
        lanes
      ) {
        if (
          ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
        )
          return (
            (existingChildren = existingChildren.get(newIdx) || null),
            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
          );

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return (
                (existingChildren =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                updateElement(returnFiber, existingChildren, newChild, lanes)
              );

            case REACT_PORTAL_TYPE:
              return (
                (existingChildren =
                  existingChildren.get(
                    null === newChild.key ? newIdx : newChild.key
                  ) || null),
                updatePortal(returnFiber, existingChildren, newChild, lanes)
              );

            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                init(newChild._payload),
                lanes
              );
          }

          if (isArrayImpl(newChild) || getIteratorFn(newChild))
            return (
              (existingChildren = existingChildren.get(newIdx) || null),
              updateFragment(
                returnFiber,
                existingChildren,
                newChild,
                lanes,
                null
              )
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return null;
      }

      function reconcileChildrenArray(
        returnFiber,
        currentFirstChild,
        newChildren,
        lanes
      ) {
        for (
          var resultingFirstChild = null,
            previousNewFiber = null,
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null;
          null !== oldFiber && newIdx < newChildren.length;
          newIdx++
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(
            returnFiber,
            oldFiber,
            newChildren[newIdx],
            lanes
          );

          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }

          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (resultingFirstChild = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length)
          return (
            deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild
          );

        if (null === oldFiber) {
          for (; newIdx < newChildren.length; newIdx++) {
            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
              null !== oldFiber &&
                ((currentFirstChild = placeChild(
                  oldFiber,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (resultingFirstChild = oldFiber)
                  : (previousNewFiber.sibling = oldFiber),
                (previousNewFiber = oldFiber));
          }

          return resultingFirstChild;
        }

        for (
          oldFiber = mapRemainingChildren(returnFiber, oldFiber);
          newIdx < newChildren.length;
          newIdx++
        ) {
          (nextOldFiber = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            newChildren[newIdx],
            lanes
          )),
            null !== nextOldFiber &&
              (shouldTrackSideEffects &&
                null !== nextOldFiber.alternate &&
                oldFiber.delete(
                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
                ),
              (currentFirstChild = placeChild(
                nextOldFiber,
                currentFirstChild,
                newIdx
              )),
              null === previousNewFiber
                ? (resultingFirstChild = nextOldFiber)
                : (previousNewFiber.sibling = nextOldFiber),
              (previousNewFiber = nextOldFiber));
        }

        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        return resultingFirstChild;
      }

      function reconcileChildrenIterator(
        returnFiber,
        currentFirstChild,
        newChildrenIterable,
        lanes
      ) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if ("function" !== typeof iteratorFn)
          throw Error(
            "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
          );
        newChildrenIterable = iteratorFn.call(newChildrenIterable);
        if (null == newChildrenIterable)
          throw Error("An iterable object provided no iterator.");

        for (
          var previousNewFiber = (iteratorFn = null),
            oldFiber = currentFirstChild,
            newIdx = (currentFirstChild = 0),
            nextOldFiber = null,
            step = newChildrenIterable.next();
          null !== oldFiber && !step.done;
          newIdx++, step = newChildrenIterable.next()
        ) {
          oldFiber.index > newIdx
            ? ((nextOldFiber = oldFiber), (oldFiber = null))
            : (nextOldFiber = oldFiber.sibling);
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }

          shouldTrackSideEffects &&
            oldFiber &&
            null === newFiber.alternate &&
            deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === previousNewFiber
            ? (iteratorFn = newFiber)
            : (previousNewFiber.sibling = newFiber);
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done)
          return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

        if (null === oldFiber) {
          for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
            (step = createChild(returnFiber, step.value, lanes)),
              null !== step &&
                ((currentFirstChild = placeChild(
                  step,
                  currentFirstChild,
                  newIdx
                )),
                null === previousNewFiber
                  ? (iteratorFn = step)
                  : (previousNewFiber.sibling = step),
                (previousNewFiber = step));
          }

          return iteratorFn;
        }

        for (
          oldFiber = mapRemainingChildren(returnFiber, oldFiber);
          !step.done;
          newIdx++, step = newChildrenIterable.next()
        ) {
          (step = updateFromMap(
            oldFiber,
            returnFiber,
            newIdx,
            step.value,
            lanes
          )),
            null !== step &&
              (shouldTrackSideEffects &&
                null !== step.alternate &&
                oldFiber.delete(null === step.key ? newIdx : step.key),
              (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
              null === previousNewFiber
                ? (iteratorFn = step)
                : (previousNewFiber.sibling = step),
              (previousNewFiber = step));
        }

        shouldTrackSideEffects &&
          oldFiber.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        return iteratorFn;
      }

      function reconcileChildFibers(
        returnFiber,
        currentFirstChild,
        newChild,
        lanes
      ) {
        "object" === typeof newChild &&
          null !== newChild &&
          newChild.type === REACT_FRAGMENT_TYPE &&
          null === newChild.key &&
          (newChild = newChild.props.children);

        if ("object" === typeof newChild && null !== newChild) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              a: {
                for (
                  var key = newChild.key, child = currentFirstChild;
                  null !== child;

                ) {
                  if (child.key === key) {
                    key = newChild.type;

                    if (key === REACT_FRAGMENT_TYPE) {
                      if (7 === child.tag) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        currentFirstChild = useFiber(
                          child,
                          newChild.props.children
                        );
                        currentFirstChild.return = returnFiber;
                        returnFiber = currentFirstChild;
                        break a;
                      }
                    } else if (
                      child.elementType === key ||
                      ("object" === typeof key &&
                        null !== key &&
                        key.$$typeof === REACT_LAZY_TYPE &&
                        resolveLazy(key) === child.type)
                    ) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      currentFirstChild = useFiber(child, newChild.props);
                      currentFirstChild.ref = coerceRef(
                        returnFiber,
                        child,
                        newChild
                      );
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    }

                    deleteRemainingChildren(returnFiber, child);
                    break;
                  } else deleteChild(returnFiber, child);

                  child = child.sibling;
                }

                newChild.type === REACT_FRAGMENT_TYPE
                  ? ((currentFirstChild = createFiberFromFragment(
                      newChild.props.children,
                      returnFiber.mode,
                      lanes,
                      newChild.key
                    )),
                    (currentFirstChild.return = returnFiber),
                    (returnFiber = currentFirstChild))
                  : ((lanes = createFiberFromTypeAndProps(
                      newChild.type,
                      newChild.key,
                      newChild.props,
                      null,
                      returnFiber.mode,
                      lanes
                    )),
                    (lanes.ref = coerceRef(
                      returnFiber,
                      currentFirstChild,
                      newChild
                    )),
                    (lanes.return = returnFiber),
                    (returnFiber = lanes));
              }

              return placeSingleChild(returnFiber);

            case REACT_PORTAL_TYPE:
              a: {
                for (child = newChild.key; null !== currentFirstChild; ) {
                  if (currentFirstChild.key === child) {
                    if (
                      4 === currentFirstChild.tag &&
                      currentFirstChild.stateNode.containerInfo ===
                        newChild.containerInfo &&
                      currentFirstChild.stateNode.implementation ===
                        newChild.implementation
                    ) {
                      deleteRemainingChildren(
                        returnFiber,
                        currentFirstChild.sibling
                      );
                      currentFirstChild = useFiber(
                        currentFirstChild,
                        newChild.children || []
                      );
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  } else deleteChild(returnFiber, currentFirstChild);
                  currentFirstChild = currentFirstChild.sibling;
                }

                currentFirstChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                );
                currentFirstChild.return = returnFiber;
                returnFiber = currentFirstChild;
              }

              return placeSingleChild(returnFiber);

            case REACT_LAZY_TYPE:
              return (
                (child = newChild._init),
                reconcileChildFibers(
                  returnFiber,
                  currentFirstChild,
                  child(newChild._payload),
                  lanes
                )
              );
          }

          if (isArrayImpl(newChild))
            return reconcileChildrenArray(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          if (getIteratorFn(newChild))
            return reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        return ("string" === typeof newChild && "" !== newChild) ||
          "number" === typeof newChild
          ? ((newChild = "" + newChild),
            null !== currentFirstChild && 6 === currentFirstChild.tag
              ? (deleteRemainingChildren(
                  returnFiber,
                  currentFirstChild.sibling
                ),
                (currentFirstChild = useFiber(currentFirstChild, newChild)),
                (currentFirstChild.return = returnFiber),
                (returnFiber = currentFirstChild))
              : (deleteRemainingChildren(returnFiber, currentFirstChild),
                (currentFirstChild = createFiberFromText(
                  newChild,
                  returnFiber.mode,
                  lanes
                )),
                (currentFirstChild.return = returnFiber),
                (returnFiber = currentFirstChild)),
            placeSingleChild(returnFiber))
          : deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      NO_CONTEXT = {},
      contextStackCursor$1 = createCursor(NO_CONTEXT),
      contextFiberStackCursor = createCursor(NO_CONTEXT),
      rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      if (c === NO_CONTEXT)
        throw Error(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        );
      return c;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance);
      push(contextFiberStackCursor, fiber);
      push(contextStackCursor$1, NO_CONTEXT);
      pop(contextStackCursor$1);
      push(contextStackCursor$1, {
        isInAParentText: false,
      });
    }

    function popHostContainer() {
      pop(contextStackCursor$1);
      pop(contextFiberStackCursor);
      pop(rootInstanceStackCursor);
    }

    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var JSCompiler_inline_result = fiber.type;
      JSCompiler_inline_result =
        "AndroidTextInput" === JSCompiler_inline_result ||
        "RCTMultilineTextInputView" === JSCompiler_inline_result ||
        "RCTSinglelineTextInputView" === JSCompiler_inline_result ||
        "RCTText" === JSCompiler_inline_result ||
        "RCTVirtualText" === JSCompiler_inline_result;
      JSCompiler_inline_result =
        context.isInAParentText !== JSCompiler_inline_result
          ? {
              isInAParentText: JSCompiler_inline_result,
            }
          : context;
      context !== JSCompiler_inline_result &&
        (push(contextFiberStackCursor, fiber),
        push(contextStackCursor$1, JSCompiler_inline_result));
    }

    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber &&
        (pop(contextStackCursor$1), pop(contextFiberStackCursor));
    }

    var suspenseStackCursor = createCursor(0);

    function findFirstSuspended(row) {
      for (var node = row; null !== node; ) {
        if (13 === node.tag) {
          var state = node.memoizedState;
          if (
            null !== state &&
            (null === state.dehydrated || shim$1() || shim$1())
          )
            return node;
        } else if (
          19 === node.tag &&
          undefined !== node.memoizedProps.revealOrder
        ) {
          if (0 !== (node.flags & 128)) return node;
        } else if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === row) break;

        for (; null === node.sibling; ) {
          if (null === node.return || node.return === row) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }

      return null;
    }

    var workInProgressSources = [];

    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        workInProgressSources[i]._workInProgressVersionSecondary = null;
      }

      workInProgressSources.length = 0;
    }

    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig,
      renderLanes = 0,
      currentlyRenderingFiber$1 = null,
      currentHook = null,
      workInProgressHook = null,
      didScheduleRenderPhaseUpdate = false,
      didScheduleRenderPhaseUpdateDuringThisPass = false,
      globalClientIdCounter = 0;

    function throwInvalidHookError() {
      throw Error(
        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
      );
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (null === prevDeps) return false;

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (!objectIs(nextDeps[i], prevDeps[i])) return false;
      }

      return true;
    }

    function renderWithHooks(
      current,
      workInProgress,
      Component,
      props,
      secondArg,
      nextRenderLanes
    ) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = 0;
      ReactCurrentDispatcher$1.current =
        null === current || null === current.memoizedState
          ? HooksDispatcherOnMount
          : HooksDispatcherOnUpdate;
      current = Component(props, secondArg);

      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        nextRenderLanes = 0;

        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (25 <= nextRenderLanes)
            throw Error(
              "Too many re-renders. React limits the number of renders to prevent an infinite loop."
            );
          nextRenderLanes += 1;
          workInProgressHook = currentHook = null;
          workInProgress.updateQueue = null;
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerender;
          current = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }

      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      workInProgress = null !== currentHook && null !== currentHook.next;
      renderLanes = 0;
      workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
      didScheduleRenderPhaseUpdate = false;
      if (workInProgress)
        throw Error(
          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
        );
      return current;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null,
      };
      null === workInProgressHook
        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
        : (workInProgressHook = workInProgressHook.next = hook);
      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook =
          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
      } else nextCurrentHook = currentHook.next;

      var nextWorkInProgressHook =
        null === workInProgressHook
          ? currentlyRenderingFiber$1.memoizedState
          : workInProgressHook.next;
      if (null !== nextWorkInProgressHook)
        (workInProgressHook = nextWorkInProgressHook),
          (currentHook = nextCurrentHook);
      else {
        if (null === nextCurrentHook)
          throw Error("Rendered more hooks than during the previous render.");
        currentHook = nextCurrentHook;
        nextCurrentHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null,
        };
        null === workInProgressHook
          ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
              nextCurrentHook)
          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
      }
      return workInProgressHook;
    }

    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }

    function updateReducer(reducer) {
      var hook = updateWorkInProgressHook(),
        queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. This is likely a bug in React. Please file an issue."
        );
      queue.lastRenderedReducer = reducer;
      var current = currentHook,
        baseQueue = current.baseQueue,
        pendingQueue = queue.pending;

      if (null !== pendingQueue) {
        if (null !== baseQueue) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }

        current.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }

      if (null !== baseQueue) {
        pendingQueue = baseQueue.next;
        current = current.baseState;
        var newBaseQueueFirst = (baseFirst = null),
          newBaseQueueLast = null,
          update = pendingQueue;

        do {
          var updateLane = update.lane;
          if ((renderLanes & updateLane) === updateLane)
            null !== newBaseQueueLast &&
              (newBaseQueueLast = newBaseQueueLast.next =
                {
                  lane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null,
                }),
              (current = update.hasEagerState
                ? update.eagerState
                : reducer(current, update.action));
          else {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null,
            };
            null === newBaseQueueLast
              ? ((newBaseQueueFirst = newBaseQueueLast = clone),
                (baseFirst = current))
              : (newBaseQueueLast = newBaseQueueLast.next = clone);
            currentlyRenderingFiber$1.lanes |= updateLane;
            workInProgressRootSkippedLanes |= updateLane;
          }
          update = update.next;
        } while (null !== update && update !== pendingQueue);

        null === newBaseQueueLast
          ? (baseFirst = current)
          : (newBaseQueueLast.next = newBaseQueueFirst);
        objectIs(current, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = current;
        hook.baseState = baseFirst;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = current;
      }

      reducer = queue.interleaved;

      if (null !== reducer) {
        baseQueue = reducer;

        do {
          (pendingQueue = baseQueue.lane),
            (currentlyRenderingFiber$1.lanes |= pendingQueue),
            (workInProgressRootSkippedLanes |= pendingQueue),
            (baseQueue = baseQueue.next);
        } while (baseQueue !== reducer);
      } else null === baseQueue && (queue.lanes = 0);

      return [hook.memoizedState, queue.dispatch];
    }

    function rerenderReducer(reducer) {
      var hook = updateWorkInProgressHook(),
        queue = hook.queue;
      if (null === queue)
        throw Error(
          "Should have a queue. This is likely a bug in React. Please file an issue."
        );
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch,
        lastRenderPhaseUpdate = queue.pending,
        newState = hook.memoizedState;

      if (null !== lastRenderPhaseUpdate) {
        queue.pending = null;
        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);

        do {
          (newState = reducer(newState, update.action)), (update = update.next);
        } while (update !== lastRenderPhaseUpdate);

        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
        hook.memoizedState = newState;
        null === hook.baseQueue && (hook.baseState = newState);
        queue.lastRenderedState = newState;
      }

      return [newState, dispatch];
    }

    function updateMutableSource() {}

    function updateSyncExternalStore(subscribe, getSnapshot) {
      var fiber = currentlyRenderingFiber$1,
        hook = updateWorkInProgressHook(),
        nextSnapshot = getSnapshot(),
        snapshotChanged = !objectIs(hook.memoizedState, nextSnapshot);
      snapshotChanged &&
        ((hook.memoizedState = nextSnapshot), (didReceiveUpdate = true));
      hook = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
        subscribe,
      ]);

      if (
        hook.getSnapshot !== getSnapshot ||
        snapshotChanged ||
        (null !== workInProgressHook &&
          workInProgressHook.memoizedState.tag & 1)
      ) {
        fiber.flags |= 2048;
        pushEffect(
          9,
          updateStoreInstance.bind(
            null,
            fiber,
            hook,
            nextSnapshot,
            getSnapshot
          ),
          undefined,
          null
        );
        if (null === workInProgressRoot)
          throw Error(
            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
          );
        0 !== (renderLanes & 30) ||
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }

      return nextSnapshot;
    }

    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = {
        getSnapshot: getSnapshot,
        value: renderedSnapshot,
      };
      getSnapshot = currentlyRenderingFiber$1.updateQueue;
      null === getSnapshot
        ? ((getSnapshot = {
            lastEffect: null,
            stores: null,
          }),
          (currentlyRenderingFiber$1.updateQueue = getSnapshot),
          (getSnapshot.stores = [fiber]))
        : ((renderedSnapshot = getSnapshot.stores),
          null === renderedSnapshot
            ? (getSnapshot.stores = [fiber])
            : renderedSnapshot.push(fiber));
    }

    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && scheduleUpdateOnFiber(fiber, 1, -1);
    }

    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function () {
        checkIfSnapshotChanged(inst) && scheduleUpdateOnFiber(fiber, 1, -1);
      });
    }

    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;

      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return true;
      }
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState,
      };
      hook.queue = initialState;
      initialState = initialState.dispatch = dispatchSetState.bind(
        null,
        currentlyRenderingFiber$1,
        initialState
      );
      return [hook.memoizedState, initialState];
    }

    function pushEffect(tag, create, destroy, deps) {
      tag = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        next: null,
      };
      create = currentlyRenderingFiber$1.updateQueue;
      null === create
        ? ((create = {
            lastEffect: null,
            stores: null,
          }),
          (currentlyRenderingFiber$1.updateQueue = create),
          (create.lastEffect = tag.next = tag))
        : ((destroy = create.lastEffect),
          null === destroy
            ? (create.lastEffect = tag.next = tag)
            : ((deps = destroy.next),
              (destroy.next = tag),
              (tag.next = deps),
              (create.lastEffect = tag)));
      return tag;
    }

    function updateRef() {
      return updateWorkInProgressHook().memoizedState;
    }

    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(
        1 | hookFlags,
        create,
        undefined,
        undefined === deps ? null : deps
      );
    }

    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var destroy = undefined;

      if (null !== currentHook) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
          hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
          return;
        }
      }

      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(1 | hookFlags, create, destroy, deps);
    }

    function mountEffect(create, deps) {
      return mountEffectImpl(8390656, 8, create, deps);
    }

    function updateEffect(create, deps) {
      return updateEffectImpl(2048, 8, create, deps);
    }

    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(4, 2, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(4, 4, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if ("function" === typeof ref)
        return (
          (create = create()),
          ref(create),
          function () {
            ref(null);
          }
        );
      if (null !== ref && undefined !== ref)
        return (
          (create = create()),
          (ref.current = create),
          function () {
            ref.current = null;
          }
        );
    }

    function updateImperativeHandle(ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(
        4,
        4,
        imperativeHandleEffect.bind(null, create, ref),
        deps
      );
    }

    function mountDebugValue() {}

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (
        null !== prevState &&
        null !== deps &&
        areHookInputsEqual(deps, prevState[1])
      )
        return prevState[0];
      hook.memoizedState = [callback, deps];
      return callback;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (
        null !== prevState &&
        null !== deps &&
        areHookInputsEqual(deps, prevState[1])
      )
        return prevState[0];
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }

    function updateDeferredValueImpl(hook, prevValue, value) {
      if (0 === (renderLanes & 21))
        return (
          hook.baseState &&
            ((hook.baseState = false), (didReceiveUpdate = true)),
          (hook.memoizedState = value)
        );
      objectIs(value, prevValue) ||
        ((value = claimNextTransitionLane()),
        (currentlyRenderingFiber$1.lanes |= value),
        (workInProgressRootSkippedLanes |= value),
        (hook.baseState = true));
      return prevValue;
    }

    function startTransition(setPending, callback) {
      var previousPriority = currentUpdatePriority;
      currentUpdatePriority =
        0 !== previousPriority && 4 > previousPriority ? previousPriority : 4;
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = {};

      try {
        setPending(false), callback();
      } finally {
        (currentUpdatePriority = previousPriority),
          (ReactCurrentBatchConfig$1.transition = prevTransition);
      }
    }

    function updateId() {
      return updateWorkInProgressHook().memoizedState;
    }

    function dispatchReducerAction(fiber, queue, action) {
      var lane = requestUpdateLane(fiber);
      action = {
        lane: lane,
        action: action,
        hasEagerState: false,
        eagerState: null,
        next: null,
      };
      isRenderPhaseUpdate(fiber)
        ? enqueueRenderPhaseUpdate(queue, action)
        : (enqueueUpdate$1(fiber, queue, action),
          (action = requestEventTime()),
          (fiber = scheduleUpdateOnFiber(fiber, lane, action)),
          null !== fiber && entangleTransitionUpdate(fiber, queue, lane));
    }

    function dispatchSetState(fiber, queue, action) {
      var lane = requestUpdateLane(fiber),
        update = {
          lane: lane,
          action: action,
          hasEagerState: false,
          eagerState: null,
          next: null,
        };
      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
      else {
        enqueueUpdate$1(fiber, queue, update);
        var alternate = fiber.alternate;
        if (
          0 === fiber.lanes &&
          (null === alternate || 0 === alternate.lanes) &&
          ((alternate = queue.lastRenderedReducer), null !== alternate)
        )
          try {
            var currentState = queue.lastRenderedState,
              eagerState = alternate(currentState, action);
            update.hasEagerState = true;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) return;
          } catch (error) {
          } finally {
          }
        action = requestEventTime();
        fiber = scheduleUpdateOnFiber(fiber, lane, action);
        null !== fiber && entangleTransitionUpdate(fiber, queue, lane);
      }
    }

    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return (
        fiber === currentlyRenderingFiber$1 ||
        (null !== alternate && alternate === currentlyRenderingFiber$1)
      );
    }

    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass =
        didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      null === pending
        ? (update.next = update)
        : ((update.next = pending.next), (pending.next = update));
      queue.pending = update;
    }

    function enqueueUpdate$1(fiber, queue, update) {
      isInterleavedUpdate(fiber)
        ? ((fiber = queue.interleaved),
          null === fiber
            ? ((update.next = update),
              null === interleavedQueues
                ? (interleavedQueues = [queue])
                : interleavedQueues.push(queue))
            : ((update.next = fiber.next), (fiber.next = update)),
          (queue.interleaved = update))
        : ((fiber = queue.pending),
          null === fiber
            ? (update.next = update)
            : ((update.next = fiber.next), (fiber.next = update)),
          (queue.pending = update));
    }

    function entangleTransitionUpdate(root, queue, lane) {
      if (0 !== (lane & 4194240)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
      }
    }

    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnMount = {
        readContext: readContext,
        useCallback: function useCallback(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            undefined === deps ? null : deps,
          ];
          return callback;
        },
        useContext: readContext,
        useEffect: mountEffect,
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          deps =
            null !== deps && undefined !== deps ? deps.concat([ref]) : null;
          return mountEffectImpl(
            4,
            4,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          return mountEffectImpl(4, 4, create, deps);
        },
        useInsertionEffect: function useInsertionEffect(create, deps) {
          return mountEffectImpl(4, 2, create, deps);
        },
        useMemo: function useMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = undefined === deps ? null : deps;
          nextCreate = nextCreate();
          hook.memoizedState = [nextCreate, deps];
          return nextCreate;
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          initialArg = undefined !== init ? init(initialArg) : initialArg;
          hook.memoizedState = hook.baseState = initialArg;
          reducer = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialArg,
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber$1,
            reducer
          );
          return [hook.memoizedState, reducer];
        },
        useRef: function useRef(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = {
            current: initialValue,
          };
          return (hook.memoizedState = initialValue);
        },
        useState: mountState,
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          return (mountWorkInProgressHook().memoizedState = value);
        },
        useTransition: function useTransition() {
          var _mountState = mountState(false),
            isPending = _mountState[0];

          _mountState = startTransition.bind(null, _mountState[1]);
          mountWorkInProgressHook().memoizedState = _mountState;
          return [isPending, _mountState];
        },
        useMutableSource: function useMutableSource() {},
        useSyncExternalStore: function useSyncExternalStore(
          subscribe,
          getSnapshot
        ) {
          var fiber = currentlyRenderingFiber$1,
            hook = mountWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          if (null === workInProgressRoot)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          0 !== (renderLanes & 30) ||
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot,
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe,
          ]);
          fiber.flags |= 2048;
          pushEffect(
            9,
            updateStoreInstance.bind(
              null,
              fiber,
              inst,
              nextSnapshot,
              getSnapshot
            ),
            undefined,
            null
          );
          return nextSnapshot;
        },
        useId: function useId() {
          var hook = mountWorkInProgressHook(),
            identifierPrefix = workInProgressRoot.identifierPrefix,
            globalClientId = globalClientIdCounter++;
          identifierPrefix =
            ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          return (hook.memoizedState = identifierPrefix);
        },
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnUpdate = {
        readContext: readContext,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: updateReducer,
        useRef: updateRef,
        useState: function useState() {
          return updateReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value
          );
        },
        useTransition: function useTransition() {
          var isPending = updateReducer(basicStateReducer)[0],
            start = updateWorkInProgressHook().memoizedState;
          return [isPending, start];
        },
        useMutableSource: updateMutableSource,
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        unstable_isNewReconciler: false,
      },
      HooksDispatcherOnRerender = {
        readContext: readContext,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: rerenderReducer,
        useRef: updateRef,
        useState: function useState() {
          return rerenderReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function useDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          return null === currentHook
            ? (hook.memoizedState = value)
            : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
        },
        useTransition: function useTransition() {
          var isPending = rerenderReducer(basicStateReducer)[0],
            start = updateWorkInProgressHook().memoizedState;
          return [isPending, start];
        },
        useMutableSource: updateMutableSource,
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        unstable_isNewReconciler: false,
      };

    function createCapturedValue(value, source) {
      try {
        var info = "",
          node = source;

        do {
          (info += describeFiber(node)), (node = node.return);
        } while (node);

        var JSCompiler_inline_result = info;
      } catch (x) {
        JSCompiler_inline_result =
          "\nError generating stack: " + x.message + "\n" + x.stack;
      }

      return {
        value: value,
        source: source,
        stack: JSCompiler_inline_result,
      };
    }

    if (
      "function" !==
      typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog
    )
      throw Error(
        "Expected ReactFiberErrorDialog.showErrorDialog to be a function."
      );

    function logCapturedError(boundary, errorInfo) {
      try {
        false !==
          ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
            componentStack: null !== errorInfo.stack ? errorInfo.stack : "",
            error: errorInfo.value,
            errorBoundary:
              null !== boundary && 1 === boundary.tag
                ? boundary.stateNode
                : null,
          }) && console.error(errorInfo.value);
      } catch (e) {
        setTimeout(function () {
          throw e;
        });
      }
    }

    var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      lane.payload = {
        element: null,
      };
      var error = errorInfo.value;

      lane.callback = function () {
        hasUncaughtError ||
          ((hasUncaughtError = true), (firstUncaughtError = error));
        logCapturedError(fiber, errorInfo);
      };

      return lane;
    }

    function createClassErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if ("function" === typeof getDerivedStateFromError) {
        var error = errorInfo.value;

        lane.payload = function () {
          return getDerivedStateFromError(error);
        };

        lane.callback = function () {
          logCapturedError(fiber, errorInfo);
        };
      }

      var inst = fiber.stateNode;
      null !== inst &&
        "function" === typeof inst.componentDidCatch &&
        (lane.callback = function () {
          logCapturedError(fiber, errorInfo);
          "function" !== typeof getDerivedStateFromError &&
            (null === legacyErrorBoundariesThatAlreadyFailed
              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
              : legacyErrorBoundariesThatAlreadyFailed.add(this));
          var stack = errorInfo.stack;
          this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : "",
          });
        });
      return lane;
    }

    function attachPingListener(root, wakeable, lanes) {
      var pingCache = root.pingCache;

      if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else
        (threadIDs = pingCache.get(wakeable)),
          undefined === threadIDs &&
            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));

      threadIDs.has(lanes) ||
        (threadIDs.add(lanes),
        (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
        wakeable.then(root, root));
    }

    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,
      didReceiveUpdate = false;

    function reconcileChildren(
      current,
      workInProgress,
      nextChildren,
      renderLanes
    ) {
      workInProgress.child =
        null === current
          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
          : reconcileChildFibers(
              workInProgress,
              current.child,
              nextChildren,
              renderLanes
            );
    }

    function updateForwardRef(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      Component = Component.render;
      var ref = workInProgress.ref;
      prepareToReadContext(workInProgress, renderLanes);
      nextProps = renderWithHooks(
        current,
        workInProgress,
        Component,
        nextProps,
        ref,
        renderLanes
      );
      if (null !== current && !didReceiveUpdate)
        return (
          (workInProgress.updateQueue = current.updateQueue),
          (workInProgress.flags &= -2053),
          (current.lanes &= ~renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      return workInProgress.child;
    }

    function updateMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null === current) {
        var type = Component.type;
        if (
          "function" === typeof type &&
          !shouldConstruct(type) &&
          undefined === type.defaultProps &&
          null === Component.compare &&
          undefined === Component.defaultProps
        )
          return (
            (workInProgress.tag = 15),
            (workInProgress.type = type),
            updateSimpleMemoComponent(
              current,
              workInProgress,
              type,
              nextProps,
              renderLanes
            )
          );
        current = createFiberFromTypeAndProps(
          Component.type,
          null,
          nextProps,
          workInProgress,
          workInProgress.mode,
          renderLanes
        );
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return (workInProgress.child = current);
      }

      type = current.child;

      if (0 === (current.lanes & renderLanes)) {
        var prevProps = type.memoizedProps;
        Component = Component.compare;
        Component = null !== Component ? Component : shallowEqual;
        if (
          Component(prevProps, nextProps) &&
          current.ref === workInProgress.ref
        )
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          );
      }

      workInProgress.flags |= 1;
      current = createWorkInProgress(type, nextProps);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return (workInProgress.child = current);
    }

    function updateSimpleMemoComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (null !== current) {
        var prevProps = current.memoizedProps;
        if (
          shallowEqual(prevProps, nextProps) &&
          current.ref === workInProgress.ref
        )
          if (
            ((didReceiveUpdate = false),
            (workInProgress.pendingProps = nextProps = prevProps),
            0 !== (current.lanes & renderLanes))
          )
            0 !== (current.flags & 131072) && (didReceiveUpdate = true);
          else
            return (
              (workInProgress.lanes = current.lanes),
              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
            );
      }

      return updateFunctionComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      );
    }

    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        nextChildren = nextProps.children,
        prevState = null !== current ? current.memoizedState : null;
      if ("hidden" === nextProps.mode) {
        if (0 === (workInProgress.mode & 1))
          (workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null,
          }),
            push(subtreeRenderLanesCursor, subtreeRenderLanes),
            (subtreeRenderLanes |= renderLanes);
        else {
          if (0 === (renderLanes & 1073741824))
            return (
              (current =
                null !== prevState
                  ? prevState.baseLanes | renderLanes
                  : renderLanes),
              (workInProgress.lanes = workInProgress.childLanes = 1073741824),
              (workInProgress.memoizedState = {
                baseLanes: current,
                cachePool: null,
                transitions: null,
              }),
              (workInProgress.updateQueue = null),
              push(subtreeRenderLanesCursor, subtreeRenderLanes),
              (subtreeRenderLanes |= current),
              null
            );
          workInProgress.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null,
          };
          nextProps = null !== prevState ? prevState.baseLanes : renderLanes;
          push(subtreeRenderLanesCursor, subtreeRenderLanes);
          subtreeRenderLanes |= nextProps;
        }
      } else
        null !== prevState
          ? ((nextProps = prevState.baseLanes | renderLanes),
            (workInProgress.memoizedState = null))
          : (nextProps = renderLanes),
          push(subtreeRenderLanesCursor, subtreeRenderLanes),
          (subtreeRenderLanes |= nextProps);
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (
        (null === current && null !== ref) ||
        (null !== current && current.ref !== ref)
      )
        workInProgress.flags |= 512;
    }

    function updateFunctionComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      var context = isContextProvider(Component)
        ? previousContext
        : contextStackCursor.current;
      context = getMaskedContext(workInProgress, context);
      prepareToReadContext(workInProgress, renderLanes);
      Component = renderWithHooks(
        current,
        workInProgress,
        Component,
        nextProps,
        context,
        renderLanes
      );
      if (null !== current && !didReceiveUpdate)
        return (
          (workInProgress.updateQueue = current.updateQueue),
          (workInProgress.flags &= -2053),
          (current.lanes &= ~renderLanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, Component, renderLanes);
      return workInProgress.child;
    }

    function updateClassComponent(
      current,
      workInProgress,
      Component,
      nextProps,
      renderLanes
    ) {
      if (isContextProvider(Component)) {
        var hasContext = true;
        pushContextProvider(workInProgress);
      } else hasContext = false;

      prepareToReadContext(workInProgress, renderLanes);
      if (null === workInProgress.stateNode)
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress),
          constructClassInstance(workInProgress, Component, nextProps),
          mountClassInstance(workInProgress, Component, nextProps, renderLanes),
          (nextProps = true);
      else if (null === current) {
        var instance = workInProgress.stateNode,
          oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context,
          contextType = Component.contextType;
        "object" === typeof contextType && null !== contextType
          ? (contextType = readContext(contextType))
          : ((contextType = isContextProvider(Component)
              ? previousContext
              : contextStackCursor.current),
            (contextType = getMaskedContext(workInProgress, contextType)));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps,
          hasNewLifecycles =
            "function" === typeof getDerivedStateFromProps ||
            "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles ||
          ("function" !== typeof instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof instance.componentWillReceiveProps) ||
          ((oldProps !== nextProps || oldContext !== contextType) &&
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              nextProps,
              contextType
            ));
        hasForceUpdate = false;
        var oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        oldContext = workInProgress.memoizedState;
        oldProps !== nextProps ||
        oldState !== oldContext ||
        didPerformWorkStackCursor.current ||
        hasForceUpdate
          ? ("function" === typeof getDerivedStateFromProps &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                getDerivedStateFromProps,
                nextProps
              ),
              (oldContext = workInProgress.memoizedState)),
            (oldProps =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                oldProps,
                nextProps,
                oldState,
                oldContext,
                contextType
              ))
              ? (hasNewLifecycles ||
                  ("function" !== typeof instance.UNSAFE_componentWillMount &&
                    "function" !== typeof instance.componentWillMount) ||
                  ("function" === typeof instance.componentWillMount &&
                    instance.componentWillMount(),
                  "function" === typeof instance.UNSAFE_componentWillMount &&
                    instance.UNSAFE_componentWillMount()),
                "function" === typeof instance.componentDidMount &&
                  (workInProgress.flags |= 4))
              : ("function" === typeof instance.componentDidMount &&
                  (workInProgress.flags |= 4),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = oldContext)),
            (instance.props = nextProps),
            (instance.state = oldContext),
            (instance.context = contextType),
            (nextProps = oldProps))
          : ("function" === typeof instance.componentDidMount &&
              (workInProgress.flags |= 4),
            (nextProps = false));
      } else {
        instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        oldProps = workInProgress.memoizedProps;
        contextType =
          workInProgress.type === workInProgress.elementType
            ? oldProps
            : resolveDefaultProps(workInProgress.type, oldProps);
        instance.props = contextType;
        hasNewLifecycles = workInProgress.pendingProps;
        oldState = instance.context;
        oldContext = Component.contextType;
        "object" === typeof oldContext && null !== oldContext
          ? (oldContext = readContext(oldContext))
          : ((oldContext = isContextProvider(Component)
              ? previousContext
              : contextStackCursor.current),
            (oldContext = getMaskedContext(workInProgress, oldContext)));
        var getDerivedStateFromProps$jscomp$0 =
          Component.getDerivedStateFromProps;
        (getDerivedStateFromProps =
          "function" === typeof getDerivedStateFromProps$jscomp$0 ||
          "function" === typeof instance.getSnapshotBeforeUpdate) ||
          ("function" !== typeof instance.UNSAFE_componentWillReceiveProps &&
            "function" !== typeof instance.componentWillReceiveProps) ||
          ((oldProps !== hasNewLifecycles || oldState !== oldContext) &&
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              nextProps,
              oldContext
            ));
        hasForceUpdate = false;
        oldState = workInProgress.memoizedState;
        instance.state = oldState;
        processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
        var newState = workInProgress.memoizedState;
        oldProps !== hasNewLifecycles ||
        oldState !== newState ||
        didPerformWorkStackCursor.current ||
        hasForceUpdate
          ? ("function" === typeof getDerivedStateFromProps$jscomp$0 &&
              (applyDerivedStateFromProps(
                workInProgress,
                Component,
                getDerivedStateFromProps$jscomp$0,
                nextProps
              ),
              (newState = workInProgress.memoizedState)),
            (contextType =
              hasForceUpdate ||
              checkShouldComponentUpdate(
                workInProgress,
                Component,
                contextType,
                nextProps,
                oldState,
                newState,
                oldContext
              ) ||
              false)
              ? (getDerivedStateFromProps ||
                  ("function" !== typeof instance.UNSAFE_componentWillUpdate &&
                    "function" !== typeof instance.componentWillUpdate) ||
                  ("function" === typeof instance.componentWillUpdate &&
                    instance.componentWillUpdate(
                      nextProps,
                      newState,
                      oldContext
                    ),
                  "function" === typeof instance.UNSAFE_componentWillUpdate &&
                    instance.UNSAFE_componentWillUpdate(
                      nextProps,
                      newState,
                      oldContext
                    )),
                "function" === typeof instance.componentDidUpdate &&
                  (workInProgress.flags |= 4),
                "function" === typeof instance.getSnapshotBeforeUpdate &&
                  (workInProgress.flags |= 1024))
              : ("function" !== typeof instance.componentDidUpdate ||
                  (oldProps === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 4),
                "function" !== typeof instance.getSnapshotBeforeUpdate ||
                  (oldProps === current.memoizedProps &&
                    oldState === current.memoizedState) ||
                  (workInProgress.flags |= 1024),
                (workInProgress.memoizedProps = nextProps),
                (workInProgress.memoizedState = newState)),
            (instance.props = nextProps),
            (instance.state = newState),
            (instance.context = oldContext),
            (nextProps = contextType))
          : ("function" !== typeof instance.componentDidUpdate ||
              (oldProps === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 4),
            "function" !== typeof instance.getSnapshotBeforeUpdate ||
              (oldProps === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 1024),
            (nextProps = false));
      }
      return finishClassComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        hasContext,
        renderLanes
      );
    }

    function finishClassComponent(
      current,
      workInProgress,
      Component,
      shouldUpdate,
      hasContext,
      renderLanes
    ) {
      markRef(current, workInProgress);
      var didCaptureError = 0 !== (workInProgress.flags & 128);
      if (!shouldUpdate && !didCaptureError)
        return (
          hasContext &&
            invalidateContextProvider(workInProgress, Component, false),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner$1.current = workInProgress;
      var nextChildren =
        didCaptureError &&
        "function" !== typeof Component.getDerivedStateFromError
          ? null
          : shouldUpdate.render();
      workInProgress.flags |= 1;
      null !== current && didCaptureError
        ? ((workInProgress.child = reconcileChildFibers(
            workInProgress,
            current.child,
            null,
            renderLanes
          )),
          (workInProgress.child = reconcileChildFibers(
            workInProgress,
            null,
            nextChildren,
            renderLanes
          )))
        : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      workInProgress.memoizedState = shouldUpdate.state;
      hasContext && invalidateContextProvider(workInProgress, Component, true);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext
        ? pushTopLevelContextObject(
            workInProgress,
            root.pendingContext,
            root.pendingContext !== root.context
          )
        : root.context &&
          pushTopLevelContextObject(workInProgress, root.context, false);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: 0,
    };

    function mountSuspenseOffscreenState(renderLanes) {
      return {
        baseLanes: renderLanes,
        cachePool: null,
        transitions: null,
      };
    }

    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        suspenseContext = suspenseStackCursor.current,
        showFallback = false,
        didSuspend = 0 !== (workInProgress.flags & 128),
        JSCompiler_temp;
      (JSCompiler_temp = didSuspend) ||
        (JSCompiler_temp =
          null !== current && null === current.memoizedState
            ? false
            : 0 !== (suspenseContext & 2));
      if (JSCompiler_temp)
        (showFallback = true), (workInProgress.flags &= -129);
      else if (null === current || null !== current.memoizedState)
        suspenseContext |= 1;
      push(suspenseStackCursor, suspenseContext & 1);

      if (null === current) {
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated)
          return (
            0 === (workInProgress.mode & 1)
              ? (workInProgress.lanes = 1)
              : shim$1()
              ? (workInProgress.lanes = 8)
              : (workInProgress.lanes = 1073741824),
            null
          );
        didSuspend = nextProps.children;
        current = nextProps.fallback;
        return showFallback
          ? ((nextProps = workInProgress.mode),
            (showFallback = workInProgress.child),
            (didSuspend = {
              mode: "hidden",
              children: didSuspend,
            }),
            0 === (nextProps & 1) && null !== showFallback
              ? ((showFallback.childLanes = 0),
                (showFallback.pendingProps = didSuspend))
              : (showFallback = createFiberFromOffscreen(
                  didSuspend,
                  nextProps,
                  0,
                  null
                )),
            (current = createFiberFromFragment(
              current,
              nextProps,
              renderLanes,
              null
            )),
            (showFallback.return = workInProgress),
            (current.return = workInProgress),
            (showFallback.sibling = current),
            (workInProgress.child = showFallback),
            (workInProgress.child.memoizedState =
              mountSuspenseOffscreenState(renderLanes)),
            (workInProgress.memoizedState = SUSPENDED_MARKER),
            current)
          : mountSuspensePrimaryChildren(workInProgress, didSuspend);
      }

      suspenseContext = current.memoizedState;
      if (
        null !== suspenseContext &&
        ((JSCompiler_temp = suspenseContext.dehydrated),
        null !== JSCompiler_temp)
      )
        return updateDehydratedSuspenseComponent(
          current,
          workInProgress,
          didSuspend,
          nextProps,
          JSCompiler_temp,
          suspenseContext,
          renderLanes
        );

      if (showFallback) {
        showFallback = nextProps.fallback;
        didSuspend = workInProgress.mode;
        suspenseContext = current.child;
        JSCompiler_temp = suspenseContext.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: nextProps.children,
        };
        0 === (didSuspend & 1) && workInProgress.child !== suspenseContext
          ? ((nextProps = workInProgress.child),
            (nextProps.childLanes = 0),
            (nextProps.pendingProps = primaryChildProps),
            (workInProgress.deletions = null))
          : ((nextProps = createWorkInProgress(
              suspenseContext,
              primaryChildProps
            )),
            (nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064));
        null !== JSCompiler_temp
          ? (showFallback = createWorkInProgress(JSCompiler_temp, showFallback))
          : ((showFallback = createFiberFromFragment(
              showFallback,
              didSuspend,
              renderLanes,
              null
            )),
            (showFallback.flags |= 2));
        showFallback.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = showFallback;
        workInProgress.child = nextProps;
        nextProps = showFallback;
        showFallback = workInProgress.child;
        didSuspend = current.child.memoizedState;
        didSuspend =
          null === didSuspend
            ? mountSuspenseOffscreenState(renderLanes)
            : {
                baseLanes: didSuspend.baseLanes | renderLanes,
                cachePool: null,
                transitions: didSuspend.transitions,
              };
        showFallback.memoizedState = didSuspend;
        showFallback.childLanes = current.childLanes & ~renderLanes;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
      }

      showFallback = current.child;
      current = showFallback.sibling;
      nextProps = createWorkInProgress(showFallback, {
        mode: "visible",
        children: nextProps.children,
      });
      0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
      nextProps.return = workInProgress;
      nextProps.sibling = null;
      null !== current &&
        ((renderLanes = workInProgress.deletions),
        null === renderLanes
          ? ((workInProgress.deletions = [current]),
            (workInProgress.flags |= 16))
          : renderLanes.push(current));
      workInProgress.child = nextProps;
      workInProgress.memoizedState = null;
      return nextProps;
    }

    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
      primaryChildren = createFiberFromOffscreen(
        {
          mode: "visible",
          children: primaryChildren,
        },
        workInProgress.mode,
        0,
        null
      );
      primaryChildren.return = workInProgress;
      return (workInProgress.child = primaryChildren);
    }

    function retrySuspenseComponentWithoutHydrating(
      current,
      workInProgress,
      renderLanes,
      recoverableError
    ) {
      null !== recoverableError &&
        (null === hydrationErrors
          ? (hydrationErrors = [recoverableError])
          : hydrationErrors.push(recoverableError));
      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      current = mountSuspensePrimaryChildren(
        workInProgress,
        workInProgress.pendingProps.children
      );
      current.flags |= 2;
      workInProgress.memoizedState = null;
      return current;
    }

    function updateDehydratedSuspenseComponent(
      current,
      workInProgress,
      didSuspend,
      nextProps,
      suspenseInstance,
      suspenseState,
      renderLanes
    ) {
      if (didSuspend) {
        if (workInProgress.flags & 256)
          return (
            (workInProgress.flags &= -257),
            retrySuspenseComponentWithoutHydrating(
              current,
              workInProgress,
              renderLanes,
              Error(
                "There was an error while hydrating this Suspense boundary. Switched to client rendering."
              )
            )
          );
        if (null !== workInProgress.memoizedState)
          return (
            (workInProgress.child = current.child),
            (workInProgress.flags |= 128),
            null
          );
        suspenseState = nextProps.fallback;
        didSuspend = workInProgress.mode;
        nextProps = createFiberFromOffscreen(
          {
            mode: "visible",
            children: nextProps.children,
          },
          didSuspend,
          0,
          null
        );
        suspenseState = createFiberFromFragment(
          suspenseState,
          didSuspend,
          renderLanes,
          null
        );
        suspenseState.flags |= 2;
        nextProps.return = workInProgress;
        suspenseState.return = workInProgress;
        nextProps.sibling = suspenseState;
        workInProgress.child = nextProps;
        0 !== (workInProgress.mode & 1) &&
          reconcileChildFibers(
            workInProgress,
            current.child,
            null,
            renderLanes
          );
        workInProgress.child.memoizedState =
          mountSuspenseOffscreenState(renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return suspenseState;
      }

      if (0 === (workInProgress.mode & 1))
        return retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress,
          renderLanes,
          null
        );
      if (shim$1())
        return (
          (suspenseState = shim$1().errorMessage),
          retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes,
            suspenseState
              ? Error(suspenseState)
              : Error(
                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
                )
          )
        );
      didSuspend = 0 !== (renderLanes & current.childLanes);

      if (didReceiveUpdate || didSuspend) {
        nextProps = workInProgressRoot;

        if (null !== nextProps) {
          switch (renderLanes & -renderLanes) {
            case 4:
              didSuspend = 2;
              break;

            case 16:
              didSuspend = 8;
              break;

            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              didSuspend = 32;
              break;

            case 536870912:
              didSuspend = 268435456;
              break;

            default:
              didSuspend = 0;
          }

          nextProps =
            0 !== (didSuspend & (nextProps.suspendedLanes | renderLanes))
              ? 0
              : didSuspend;
          0 !== nextProps &&
            nextProps !== suspenseState.retryLane &&
            ((suspenseState.retryLane = nextProps),
            scheduleUpdateOnFiber(current, nextProps, -1));
        }

        renderDidSuspendDelayIfPossible();
        return retrySuspenseComponentWithoutHydrating(
          current,
          workInProgress,
          renderLanes,
          Error(
            "This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."
          )
        );
      }

      if (shim$1())
        return (
          (workInProgress.flags |= 128),
          (workInProgress.child = current.child),
          retryDehydratedSuspenseBoundary.bind(null, current),
          shim$1(),
          null
        );
      current = mountSuspensePrimaryChildren(
        workInProgress,
        nextProps.children
      );
      current.flags |= 4096;
      return current;
    }

    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
      fiber.lanes |= renderLanes;
      var alternate = fiber.alternate;
      null !== alternate && (alternate.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(
        fiber.return,
        renderLanes,
        propagationRoot
      );
    }

    function initSuspenseListRenderState(
      workInProgress,
      isBackwards,
      tail,
      lastContentRow,
      tailMode
    ) {
      var renderState = workInProgress.memoizedState;
      null === renderState
        ? (workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
          })
        : ((renderState.isBackwards = isBackwards),
          (renderState.rendering = null),
          (renderState.renderingStartTime = 0),
          (renderState.last = lastContentRow),
          (renderState.tail = tail),
          (renderState.tailMode = tailMode));
    }

    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps,
        revealOrder = nextProps.revealOrder,
        tailMode = nextProps.tail;
      reconcileChildren(
        current,
        workInProgress,
        nextProps.children,
        renderLanes
      );
      nextProps = suspenseStackCursor.current;
      if (0 !== (nextProps & 2))
        (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
      else {
        if (null !== current && 0 !== (current.flags & 128))
          a: for (current = workInProgress.child; null !== current; ) {
            if (13 === current.tag)
              null !== current.memoizedState &&
                scheduleSuspenseWorkOnFiber(
                  current,
                  renderLanes,
                  workInProgress
                );
            else if (19 === current.tag)
              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
            else if (null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
            if (current === workInProgress) break a;

            for (; null === current.sibling; ) {
              if (null === current.return || current.return === workInProgress)
                break a;
              current = current.return;
            }

            current.sibling.return = current.return;
            current = current.sibling;
          }
        nextProps &= 1;
      }
      push(suspenseStackCursor, nextProps);
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;
      else
        switch (revealOrder) {
          case "forwards":
            renderLanes = workInProgress.child;

            for (revealOrder = null; null !== renderLanes; ) {
              (current = renderLanes.alternate),
                null !== current &&
                  null === findFirstSuspended(current) &&
                  (revealOrder = renderLanes),
                (renderLanes = renderLanes.sibling);
            }

            renderLanes = revealOrder;
            null === renderLanes
              ? ((revealOrder = workInProgress.child),
                (workInProgress.child = null))
              : ((revealOrder = renderLanes.sibling),
                (renderLanes.sibling = null));
            initSuspenseListRenderState(
              workInProgress,
              false,
              revealOrder,
              renderLanes,
              tailMode
            );
            break;

          case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;

            for (workInProgress.child = null; null !== revealOrder; ) {
              current = revealOrder.alternate;

              if (null !== current && null === findFirstSuspended(current)) {
                workInProgress.child = revealOrder;
                break;
              }

              current = revealOrder.sibling;
              revealOrder.sibling = renderLanes;
              renderLanes = revealOrder;
              revealOrder = current;
            }

            initSuspenseListRenderState(
              workInProgress,
              true,
              renderLanes,
              null,
              tailMode
            );
            break;

          case "together":
            initSuspenseListRenderState(
              workInProgress,
              false,
              null,
              null,
              undefined
            );
            break;

          default:
            workInProgress.memoizedState = null;
        }
      return workInProgress.child;
    }

    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
      0 === (workInProgress.mode & 1) &&
        null !== current &&
        ((current.alternate = null),
        (workInProgress.alternate = null),
        (workInProgress.flags |= 2));
    }

    function bailoutOnAlreadyFinishedWork(
      current,
      workInProgress,
      renderLanes
    ) {
      null !== current && (workInProgress.dependencies = current.dependencies);
      workInProgressRootSkippedLanes |= workInProgress.lanes;
      if (0 === (renderLanes & workInProgress.childLanes)) return null;
      if (null !== current && workInProgress.child !== current.child)
        throw Error("Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;

        for (renderLanes.return = workInProgress; null !== current.sibling; ) {
          (current = current.sibling),
            (renderLanes = renderLanes.sibling =
              createWorkInProgress(current, current.pendingProps)),
            (renderLanes.return = workInProgress);
        }

        renderLanes.sibling = null;
      }

      return workInProgress.child;
    }

    function attemptEarlyBailoutIfNoScheduledUpdate(
      current,
      workInProgress,
      renderLanes
    ) {
      switch (workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          break;

        case 5:
          pushHostContext(workInProgress);
          break;

        case 1:
          isContextProvider(workInProgress.type) &&
            pushContextProvider(workInProgress);
          break;

        case 4:
          pushHostContainer(
            workInProgress,
            workInProgress.stateNode.containerInfo
          );
          break;

        case 10:
          var context = workInProgress.type._context,
            nextValue = workInProgress.memoizedProps.value;
          push(valueCursor, context._currentValue2);
          context._currentValue2 = nextValue;
          break;

        case 13:
          context = workInProgress.memoizedState;

          if (null !== context) {
            if (null !== context.dehydrated)
              return (
                push(suspenseStackCursor, suspenseStackCursor.current & 1),
                (workInProgress.flags |= 128),
                null
              );
            if (0 !== (renderLanes & workInProgress.child.childLanes))
              return updateSuspenseComponent(
                current,
                workInProgress,
                renderLanes
              );
            push(suspenseStackCursor, suspenseStackCursor.current & 1);
            current = bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            );
            return null !== current ? current.sibling : null;
          }

          push(suspenseStackCursor, suspenseStackCursor.current & 1);
          break;

        case 19:
          context = 0 !== (renderLanes & workInProgress.childLanes);

          if (0 !== (current.flags & 128)) {
            if (context)
              return updateSuspenseListComponent(
                current,
                workInProgress,
                renderLanes
              );
            workInProgress.flags |= 128;
          }

          nextValue = workInProgress.memoizedState;
          null !== nextValue &&
            ((nextValue.rendering = null),
            (nextValue.tail = null),
            (nextValue.lastEffect = null));
          push(suspenseStackCursor, suspenseStackCursor.current);
          if (context) break;
          else return null;

        case 22:
        case 23:
          return (
            (workInProgress.lanes = 0),
            updateOffscreenComponent(current, workInProgress, renderLanes)
          );
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    function hadNoMutationsEffects(current, completedWork) {
      if (null !== current && current.child === completedWork.child)
        return true;
      if (0 !== (completedWork.flags & 16)) return false;

      for (current = completedWork.child; null !== current; ) {
        if (
          0 !== (current.flags & 12854) ||
          0 !== (current.subtreeFlags & 12854)
        )
          return false;
        current = current.sibling;
      }

      return true;
    }

    var _appendAllChildren,
      updateHostContainer,
      updateHostComponent$1,
      updateHostText$1;

    _appendAllChildren = function appendAllChildren(
      parent,
      workInProgress,
      needsVisibilityToggle,
      isHidden
    ) {
      for (var node = workInProgress.child; null !== node; ) {
        if (5 === node.tag) {
          var instance = node.stateNode;
          needsVisibilityToggle &&
            isHidden &&
            (instance = cloneHiddenInstance(instance));
          appendChildNode(parent.node, instance.node);
        } else if (6 === node.tag) {
          instance = node.stateNode;
          if (needsVisibilityToggle && isHidden)
            throw Error("Not yet implemented.");
          appendChildNode(parent.node, instance.node);
        } else if (4 !== node.tag)
          if (22 === node.tag && null !== node.memoizedState)
            (instance = node.child),
              null !== instance && (instance.return = node),
              _appendAllChildren(parent, node, true, true);
          else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

        if (node === workInProgress) break;

        for (; null === node.sibling; ) {
          if (null === node.return || node.return === workInProgress) return;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    };

    function appendAllChildrenToContainer(
      containerChildSet,
      workInProgress,
      needsVisibilityToggle,
      isHidden
    ) {
      for (var node = workInProgress.child; null !== node; ) {
        if (5 === node.tag) {
          var instance = node.stateNode;
          needsVisibilityToggle &&
            isHidden &&
            (instance = cloneHiddenInstance(instance));
          appendChildNodeToSet(containerChildSet, instance.node);
        } else if (6 === node.tag) {
          instance = node.stateNode;
          if (needsVisibilityToggle && isHidden)
            throw Error("Not yet implemented.");
          appendChildNodeToSet(containerChildSet, instance.node);
        } else if (4 !== node.tag)
          if (22 === node.tag && null !== node.memoizedState)
            (instance = node.child),
              null !== instance && (instance.return = node),
              appendAllChildrenToContainer(containerChildSet, node, true, true);
          else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

        if (node === workInProgress) break;

        for (; null === node.sibling; ) {
          if (null === node.return || node.return === workInProgress) return;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    updateHostContainer = function updateHostContainer(
      current,
      workInProgress
    ) {
      var portalOrRoot = workInProgress.stateNode;

      if (!hadNoMutationsEffects(current, workInProgress)) {
        current = portalOrRoot.containerInfo;
        var newChildSet = createChildNodeSet(current);
        appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
        portalOrRoot.pendingChildren = newChildSet;
        workInProgress.flags |= 4;
        completeRoot(current, newChildSet);
      }
    };

    updateHostComponent$1 = function updateHostComponent$1(
      current,
      workInProgress,
      type,
      newProps
    ) {
      type = current.stateNode;
      var oldProps = current.memoizedProps;
      if (
        (current = hadNoMutationsEffects(current, workInProgress)) &&
        oldProps === newProps
      )
        workInProgress.stateNode = type;
      else {
        var recyclableInstance = workInProgress.stateNode;
        requiredContext(contextStackCursor$1.current);
        var updatePayload = null;
        oldProps !== newProps &&
          ((oldProps = diffProperties(
            null,
            oldProps,
            newProps,
            recyclableInstance.canonical.viewConfig.validAttributes
          )),
          (recyclableInstance.canonical.currentProps = newProps),
          (updatePayload = oldProps));
        current && null === updatePayload
          ? (workInProgress.stateNode = type)
          : ((newProps = updatePayload),
            (oldProps = type.node),
            (type = {
              node: current
                ? null !== newProps
                  ? cloneNodeWithNewProps(oldProps, newProps)
                  : cloneNode(oldProps)
                : null !== newProps
                ? cloneNodeWithNewChildrenAndProps(oldProps, newProps)
                : cloneNodeWithNewChildren(oldProps),
              canonical: type.canonical,
            }),
            (workInProgress.stateNode = type),
            current
              ? (workInProgress.flags |= 4)
              : _appendAllChildren(type, workInProgress, false, false));
      }
    };

    updateHostText$1 = function updateHostText$1(
      current,
      workInProgress,
      oldText,
      newText
    ) {
      oldText !== newText
        ? ((current = requiredContext(rootInstanceStackCursor.current)),
          (oldText = requiredContext(contextStackCursor$1.current)),
          (workInProgress.stateNode = createTextInstance(
            newText,
            current,
            oldText,
            workInProgress
          )),
          (workInProgress.flags |= 4))
        : (workInProgress.stateNode = current.stateNode);
    };

    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      switch (renderState.tailMode) {
        case "hidden":
          hasRenderedATailFallback = renderState.tail;

          for (var lastTailNode = null; null !== hasRenderedATailFallback; ) {
            null !== hasRenderedATailFallback.alternate &&
              (lastTailNode = hasRenderedATailFallback),
              (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
          }

          null === lastTailNode
            ? (renderState.tail = null)
            : (lastTailNode.sibling = null);
          break;

        case "collapsed":
          lastTailNode = renderState.tail;

          for (var lastTailNode$60 = null; null !== lastTailNode; ) {
            null !== lastTailNode.alternate && (lastTailNode$60 = lastTailNode),
              (lastTailNode = lastTailNode.sibling);
          }

          null === lastTailNode$60
            ? hasRenderedATailFallback || null === renderState.tail
              ? (renderState.tail = null)
              : (renderState.tail.sibling = null)
            : (lastTailNode$60.sibling = null);
      }
    }

    function bubbleProperties(completedWork) {
      var didBailout =
          null !== completedWork.alternate &&
          completedWork.alternate.child === completedWork.child,
        newChildLanes = 0,
        subtreeFlags = 0;
      if (didBailout)
        for (var child$61 = completedWork.child; null !== child$61; ) {
          (newChildLanes |= child$61.lanes | child$61.childLanes),
            (subtreeFlags |= child$61.subtreeFlags & 14680064),
            (subtreeFlags |= child$61.flags & 14680064),
            (child$61.return = completedWork),
            (child$61 = child$61.sibling);
        }
      else
        for (child$61 = completedWork.child; null !== child$61; ) {
          (newChildLanes |= child$61.lanes | child$61.childLanes),
            (subtreeFlags |= child$61.subtreeFlags),
            (subtreeFlags |= child$61.flags),
            (child$61.return = completedWork),
            (child$61 = child$61.sibling);
        }
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }

    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      popTreeContext(workInProgress);

      switch (workInProgress.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress), null;

        case 1:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            bubbleProperties(workInProgress),
            null
          );

        case 3:
          return (
            (renderLanes = workInProgress.stateNode),
            popHostContainer(),
            pop(didPerformWorkStackCursor),
            pop(contextStackCursor),
            resetWorkInProgressVersions(),
            renderLanes.pendingContext &&
              ((renderLanes.context = renderLanes.pendingContext),
              (renderLanes.pendingContext = null)),
            (null !== current && null !== current.child) ||
              null === current ||
              (current.memoizedState.isDehydrated &&
                0 === (workInProgress.flags & 256)) ||
              ((workInProgress.flags |= 1024),
              null !== hydrationErrors &&
                (queueRecoverableErrors(hydrationErrors),
                (hydrationErrors = null))),
            updateHostContainer(current, workInProgress),
            bubbleProperties(workInProgress),
            null
          );

        case 5:
          popHostContext(workInProgress);
          renderLanes = requiredContext(rootInstanceStackCursor.current);
          var type = workInProgress.type;
          if (null !== current && null != workInProgress.stateNode)
            updateHostComponent$1(
              current,
              workInProgress,
              type,
              newProps,
              renderLanes
            ),
              current.ref !== workInProgress.ref &&
                (workInProgress.flags |= 512);
          else {
            if (!newProps) {
              if (null === workInProgress.stateNode)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              bubbleProperties(workInProgress);
              return null;
            }

            requiredContext(contextStackCursor$1.current);
            current = nextReactTag;
            nextReactTag += 2;
            type = getViewConfigForType(type);
            var updatePayload = diffProperties(
              null,
              emptyObject,
              newProps,
              type.validAttributes
            );
            renderLanes = createNode(
              current,
              type.uiViewClassName,
              renderLanes,
              updatePayload,
              workInProgress
            );
            current = new ReactFabricHostComponent(
              current,
              type,
              newProps,
              workInProgress
            );
            current = {
              node: renderLanes,
              canonical: current,
            };

            _appendAllChildren(current, workInProgress, false, false);

            workInProgress.stateNode = current;
            null !== workInProgress.ref && (workInProgress.flags |= 512);
          }
          bubbleProperties(workInProgress);
          return null;

        case 6:
          if (current && null != workInProgress.stateNode)
            updateHostText$1(
              current,
              workInProgress,
              current.memoizedProps,
              newProps
            );
          else {
            if (
              "string" !== typeof newProps &&
              null === workInProgress.stateNode
            )
              throw Error(
                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
              );
            current = requiredContext(rootInstanceStackCursor.current);
            renderLanes = requiredContext(contextStackCursor$1.current);
            workInProgress.stateNode = createTextInstance(
              newProps,
              current,
              renderLanes,
              workInProgress
            );
          }
          bubbleProperties(workInProgress);
          return null;

        case 13:
          pop(suspenseStackCursor);
          newProps = workInProgress.memoizedState;

          if (
            null === current ||
            (null !== current.memoizedState &&
              null !== current.memoizedState.dehydrated)
          ) {
            if (null !== newProps && null !== newProps.dehydrated) {
              if (null === current) {
                throw Error(
                  "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                );
              }

              0 === (workInProgress.flags & 128) &&
                (workInProgress.memoizedState = null);
              workInProgress.flags |= 4;
              bubbleProperties(workInProgress);
              type = false;
            } else
              null !== hydrationErrors &&
                (queueRecoverableErrors(hydrationErrors),
                (hydrationErrors = null)),
                (type = true);

            if (!type)
              return workInProgress.flags & 65536 ? workInProgress : null;
          }

          if (0 !== (workInProgress.flags & 128))
            return (workInProgress.lanes = renderLanes), workInProgress;
          renderLanes = null !== newProps;
          renderLanes !==
            (null !== current && null !== current.memoizedState) &&
            renderLanes &&
            ((workInProgress.child.flags |= 8192),
            0 !== (workInProgress.mode & 1) &&
              (null === current || 0 !== (suspenseStackCursor.current & 1)
                ? 0 === workInProgressRootExitStatus &&
                  (workInProgressRootExitStatus = 3)
                : renderDidSuspendDelayIfPossible()));
          null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
          bubbleProperties(workInProgress);
          return null;

        case 4:
          return (
            popHostContainer(),
            updateHostContainer(current, workInProgress),
            bubbleProperties(workInProgress),
            null
          );

        case 10:
          return (
            popProvider(workInProgress.type._context),
            bubbleProperties(workInProgress),
            null
          );

        case 17:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            bubbleProperties(workInProgress),
            null
          );

        case 19:
          pop(suspenseStackCursor);
          type = workInProgress.memoizedState;
          if (null === type) return bubbleProperties(workInProgress), null;
          newProps = 0 !== (workInProgress.flags & 128);
          updatePayload = type.rendering;
          if (null === updatePayload) {
            if (newProps) cutOffTailIfNeeded(type, false);
            else {
              if (
                0 !== workInProgressRootExitStatus ||
                (null !== current && 0 !== (current.flags & 128))
              )
                for (current = workInProgress.child; null !== current; ) {
                  updatePayload = findFirstSuspended(current);

                  if (null !== updatePayload) {
                    workInProgress.flags |= 128;
                    cutOffTailIfNeeded(type, false);
                    current = updatePayload.updateQueue;
                    null !== current &&
                      ((workInProgress.updateQueue = current),
                      (workInProgress.flags |= 4));
                    workInProgress.subtreeFlags = 0;
                    current = renderLanes;

                    for (
                      renderLanes = workInProgress.child;
                      null !== renderLanes;

                    ) {
                      (newProps = renderLanes),
                        (type = current),
                        (newProps.flags &= 14680066),
                        (updatePayload = newProps.alternate),
                        null === updatePayload
                          ? ((newProps.childLanes = 0),
                            (newProps.lanes = type),
                            (newProps.child = null),
                            (newProps.subtreeFlags = 0),
                            (newProps.memoizedProps = null),
                            (newProps.memoizedState = null),
                            (newProps.updateQueue = null),
                            (newProps.dependencies = null),
                            (newProps.stateNode = null))
                          : ((newProps.childLanes = updatePayload.childLanes),
                            (newProps.lanes = updatePayload.lanes),
                            (newProps.child = updatePayload.child),
                            (newProps.subtreeFlags = 0),
                            (newProps.deletions = null),
                            (newProps.memoizedProps =
                              updatePayload.memoizedProps),
                            (newProps.memoizedState =
                              updatePayload.memoizedState),
                            (newProps.updateQueue = updatePayload.updateQueue),
                            (newProps.type = updatePayload.type),
                            (type = updatePayload.dependencies),
                            (newProps.dependencies =
                              null === type
                                ? null
                                : {
                                    lanes: type.lanes,
                                    firstContext: type.firstContext,
                                  })),
                        (renderLanes = renderLanes.sibling);
                    }

                    push(
                      suspenseStackCursor,
                      (suspenseStackCursor.current & 1) | 2
                    );
                    return workInProgress.child;
                  }

                  current = current.sibling;
                }
              null !== type.tail &&
                now() > workInProgressRootRenderTargetTime &&
                ((workInProgress.flags |= 128),
                (newProps = true),
                cutOffTailIfNeeded(type, false),
                (workInProgress.lanes = 4194304));
            }
          } else {
            if (!newProps)
              if (
                ((current = findFirstSuspended(updatePayload)),
                null !== current)
              ) {
                if (
                  ((workInProgress.flags |= 128),
                  (newProps = true),
                  (current = current.updateQueue),
                  null !== current &&
                    ((workInProgress.updateQueue = current),
                    (workInProgress.flags |= 4)),
                  cutOffTailIfNeeded(type, true),
                  null === type.tail &&
                    "hidden" === type.tailMode &&
                    !updatePayload.alternate)
                )
                  return bubbleProperties(workInProgress), null;
              } else
                2 * now() - type.renderingStartTime >
                  workInProgressRootRenderTargetTime &&
                  1073741824 !== renderLanes &&
                  ((workInProgress.flags |= 128),
                  (newProps = true),
                  cutOffTailIfNeeded(type, false),
                  (workInProgress.lanes = 4194304));
            type.isBackwards
              ? ((updatePayload.sibling = workInProgress.child),
                (workInProgress.child = updatePayload))
              : ((current = type.last),
                null !== current
                  ? (current.sibling = updatePayload)
                  : (workInProgress.child = updatePayload),
                (type.last = updatePayload));
          }
          if (null !== type.tail)
            return (
              (workInProgress = type.tail),
              (type.rendering = workInProgress),
              (type.tail = workInProgress.sibling),
              (type.renderingStartTime = now()),
              (workInProgress.sibling = null),
              (current = suspenseStackCursor.current),
              push(
                suspenseStackCursor,
                newProps ? (current & 1) | 2 : current & 1
              ),
              workInProgress
            );
          bubbleProperties(workInProgress);
          return null;

        case 22:
        case 23:
          return (
            popRenderLanes(),
            (renderLanes = null !== workInProgress.memoizedState),
            null !== current &&
              (null !== current.memoizedState) !== renderLanes &&
              (workInProgress.flags |= 8192),
            renderLanes && 0 !== (workInProgress.mode & 1)
              ? 0 !== (subtreeRenderLanes & 1073741824) &&
                bubbleProperties(workInProgress)
              : bubbleProperties(workInProgress),
            null
          );

        case 24:
          return null;

        case 25:
          return null;
      }

      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    }

    function unwindWork(current, workInProgress) {
      popTreeContext(workInProgress);

      switch (workInProgress.tag) {
        case 1:
          return (
            isContextProvider(workInProgress.type) && popContext(),
            (current = workInProgress.flags),
            current & 65536
              ? ((workInProgress.flags = (current & -65537) | 128),
                workInProgress)
              : null
          );

        case 3:
          return (
            popHostContainer(),
            pop(didPerformWorkStackCursor),
            pop(contextStackCursor),
            resetWorkInProgressVersions(),
            (current = workInProgress.flags),
            0 !== (current & 65536) && 0 === (current & 128)
              ? ((workInProgress.flags = (current & -65537) | 128),
                workInProgress)
              : null
          );

        case 5:
          return popHostContext(workInProgress), null;

        case 13:
          pop(suspenseStackCursor);
          current = workInProgress.memoizedState;
          if (
            null !== current &&
            null !== current.dehydrated &&
            null === workInProgress.alternate
          )
            throw Error(
              "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
            );
          current = workInProgress.flags;
          return current & 65536
            ? ((workInProgress.flags = (current & -65537) | 128),
              workInProgress)
            : null;

        case 19:
          return pop(suspenseStackCursor), null;

        case 4:
          return popHostContainer(), null;

        case 10:
          return popProvider(workInProgress.type._context), null;

        case 22:
        case 23:
          return popRenderLanes(), null;

        case 24:
          return null;

        default:
          return null;
      }
    }

    var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
      nextEffect = null;

    function safelyDetachRef(current, nearestMountedAncestor) {
      var ref = current.ref;
      if (null !== ref)
        if ("function" === typeof ref)
          try {
            ref(null);
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          }
        else ref.current = null;
    }

    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }

    var shouldFireAfterActiveInstanceBlur = false;

    function commitBeforeMutationEffects(root, firstChild) {
      for (nextEffect = firstChild; null !== nextEffect; ) {
        if (
          ((root = nextEffect),
          (firstChild = root.child),
          0 !== (root.subtreeFlags & 1028) && null !== firstChild)
        )
          (firstChild.return = root), (nextEffect = firstChild);
        else
          for (; null !== nextEffect; ) {
            root = nextEffect;

            try {
              var current = root.alternate;
              if (0 !== (root.flags & 1024))
                switch (root.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;

                  case 1:
                    if (null !== current) {
                      var prevProps = current.memoizedProps,
                        prevState = current.memoizedState,
                        instance = root.stateNode,
                        snapshot = instance.getSnapshotBeforeUpdate(
                          root.elementType === root.type
                            ? prevProps
                            : resolveDefaultProps(root.type, prevProps),
                          prevState
                        );
                      instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }

                    break;

                  case 3:
                    break;

                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;

                  default:
                    throw Error(
                      "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                    );
                }
            } catch (error) {
              captureCommitPhaseError(root, root.return, error);
            }

            firstChild = root.sibling;

            if (null !== firstChild) {
              firstChild.return = root.return;
              nextEffect = firstChild;
              break;
            }

            nextEffect = root.return;
          }
      }

      current = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      return current;
    }

    function commitHookEffectListUnmount(
      flags,
      finishedWork,
      nearestMountedAncestor
    ) {
      var updateQueue = finishedWork.updateQueue;
      updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;

      if (null !== updateQueue) {
        var effect = (updateQueue = updateQueue.next);

        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = undefined;
            undefined !== destroy &&
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
          }

          effect = effect.next;
        } while (effect !== updateQueue);
      }
    }

    function commitHookEffectListMount(flags, finishedWork) {
      finishedWork = finishedWork.updateQueue;
      finishedWork = null !== finishedWork ? finishedWork.lastEffect : null;

      if (null !== finishedWork) {
        var effect = (finishedWork = finishedWork.next);

        do {
          if ((effect.tag & flags) === flags) {
            var create$73 = effect.create;
            effect.destroy = create$73();
          }

          effect = effect.next;
        } while (effect !== finishedWork);
      }
    }

    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      null !== alternate &&
        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      fiber.stateNode = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }

    function recursivelyTraverseDeletionEffects(
      finishedRoot,
      nearestMountedAncestor,
      parent
    ) {
      for (parent = parent.child; null !== parent; ) {
        commitDeletionEffectsOnFiber(
          finishedRoot,
          nearestMountedAncestor,
          parent
        ),
          (parent = parent.sibling);
      }
    }

    function commitDeletionEffectsOnFiber(
      finishedRoot,
      nearestMountedAncestor,
      deletedFiber
    ) {
      if (
        injectedHook &&
        "function" === typeof injectedHook.onCommitFiberUnmount
      )
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {}

      switch (deletedFiber.tag) {
        case 5:
          safelyDetachRef(deletedFiber, nearestMountedAncestor);

        case 6:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 18:
          break;

        case 4:
          createChildNodeSet(deletedFiber.stateNode.containerInfo);
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 0:
        case 11:
        case 14:
        case 15:
          var updateQueue = deletedFiber.updateQueue;

          if (
            null !== updateQueue &&
            ((updateQueue = updateQueue.lastEffect), null !== updateQueue)
          ) {
            var effect = (updateQueue = updateQueue.next);

            do {
              var _effect = effect,
                destroy = _effect.destroy;
              _effect = _effect.tag;
              undefined !== destroy &&
                (0 !== (_effect & 2)
                  ? safelyCallDestroy(
                      deletedFiber,
                      nearestMountedAncestor,
                      destroy
                    )
                  : 0 !== (_effect & 4) &&
                    safelyCallDestroy(
                      deletedFiber,
                      nearestMountedAncestor,
                      destroy
                    ));
              effect = effect.next;
            } while (effect !== updateQueue);
          }

          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 1:
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          updateQueue = deletedFiber.stateNode;
          if ("function" === typeof updateQueue.componentWillUnmount)
            try {
              (updateQueue.props = deletedFiber.memoizedProps),
                (updateQueue.state = deletedFiber.memoizedState),
                updateQueue.componentWillUnmount();
            } catch (error) {
              captureCommitPhaseError(
                deletedFiber,
                nearestMountedAncestor,
                error
              );
            }
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 21:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        case 22:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
          break;

        default:
          recursivelyTraverseDeletionEffects(
            finishedRoot,
            nearestMountedAncestor,
            deletedFiber
          );
      }
    }

    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;

      if (null !== wakeables) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        null === retryCache &&
          (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        wakeables.forEach(function (wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          retryCache.has(wakeable) ||
            (retryCache.add(wakeable), wakeable.then(retry, retry));
        });
      }
    }

    function recursivelyTraverseMutationEffects(root, parentFiber) {
      var deletions = parentFiber.deletions;
      if (null !== deletions)
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];

          try {
            commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
            var alternate = childToDelete.alternate;
            null !== alternate && (alternate.return = null);
            childToDelete.return = null;
          } catch (error) {
            captureCommitPhaseError(childToDelete, parentFiber, error);
          }
        }
      if (parentFiber.subtreeFlags & 12854)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          commitMutationEffectsOnFiber(parentFiber, root),
            (parentFiber = parentFiber.sibling);
        }
    }

    function commitMutationEffectsOnFiber(finishedWork, root) {
      var current = finishedWork.alternate,
        flags = finishedWork.flags;

      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);

          if (flags & 4) {
            try {
              commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
                commitHookEffectListMount(3, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }

            try {
              commitHookEffectListUnmount(5, finishedWork, finishedWork.return);
            } catch (error$77) {
              captureCommitPhaseError(
                finishedWork,
                finishedWork.return,
                error$77
              );
            }
          }

          break;

        case 1:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            null !== current &&
            safelyDetachRef(current, current.return);
          break;

        case 5:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 512 &&
            null !== current &&
            safelyDetachRef(current, current.return);
          break;

        case 6:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 3:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 4:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 13:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          root = finishedWork.child;
          root.flags & 8192 &&
            null !== root.memoizedState &&
            (null === root.alternate ||
              null === root.alternate.memoizedState) &&
            (globalMostRecentFallbackTime = now());
          flags & 4 && attachSuspenseRetryListeners(finishedWork);
          break;

        case 22:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;

        case 19:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          flags & 4 && attachSuspenseRetryListeners(finishedWork);
          break;

        case 21:
          break;

        default:
          recursivelyTraverseMutationEffects(root, finishedWork),
            commitReconciliationEffects(finishedWork);
      }
    }

    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      flags & 2 && (finishedWork.flags &= -3);
      flags & 4096 && (finishedWork.flags &= -4097);
    }

    function commitLayoutEffects(finishedWork) {
      for (nextEffect = finishedWork; null !== nextEffect; ) {
        var fiber = nextEffect,
          firstChild = fiber.child;
        if (0 !== (fiber.subtreeFlags & 8772) && null !== firstChild)
          (firstChild.return = fiber), (nextEffect = firstChild);
        else
          for (fiber = finishedWork; null !== nextEffect; ) {
            firstChild = nextEffect;

            if (0 !== (firstChild.flags & 8772)) {
              var current = firstChild.alternate;

              try {
                if (0 !== (firstChild.flags & 8772))
                  switch (firstChild.tag) {
                    case 0:
                    case 11:
                    case 15:
                      commitHookEffectListMount(5, firstChild);
                      break;

                    case 1:
                      var instance = firstChild.stateNode;
                      if (firstChild.flags & 4)
                        if (null === current) instance.componentDidMount();
                        else {
                          var prevProps =
                            firstChild.elementType === firstChild.type
                              ? current.memoizedProps
                              : resolveDefaultProps(
                                  firstChild.type,
                                  current.memoizedProps
                                );
                          instance.componentDidUpdate(
                            prevProps,
                            current.memoizedState,
                            instance.__reactInternalSnapshotBeforeUpdate
                          );
                        }
                      var updateQueue = firstChild.updateQueue;
                      null !== updateQueue &&
                        commitUpdateQueue(firstChild, updateQueue, instance);
                      break;

                    case 3:
                      var updateQueue$74 = firstChild.updateQueue;

                      if (null !== updateQueue$74) {
                        current = null;
                        if (null !== firstChild.child)
                          switch (firstChild.child.tag) {
                            case 5:
                              current = firstChild.child.stateNode.canonical;
                              break;

                            case 1:
                              current = firstChild.child.stateNode;
                          }
                        commitUpdateQueue(firstChild, updateQueue$74, current);
                      }

                      break;

                    case 5:
                      if (null === current && firstChild.flags & 4)
                        throw Error(
                          "The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue."
                        );
                      break;

                    case 6:
                      break;

                    case 4:
                      break;

                    case 12:
                      break;

                    case 13:
                      break;

                    case 19:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                      break;

                    default:
                      throw Error(
                        "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                      );
                  }

                if (firstChild.flags & 512) {
                  current = undefined;
                  var ref = firstChild.ref;

                  if (null !== ref) {
                    var instance$jscomp$0 = firstChild.stateNode;

                    switch (firstChild.tag) {
                      case 5:
                        current = instance$jscomp$0.canonical;
                        break;

                      default:
                        current = instance$jscomp$0;
                    }

                    "function" === typeof ref
                      ? ref(current)
                      : (ref.current = current);
                  }
                }
              } catch (error) {
                captureCommitPhaseError(firstChild, firstChild.return, error);
              }
            }

            if (firstChild === fiber) {
              nextEffect = null;
              break;
            }

            current = firstChild.sibling;

            if (null !== current) {
              current.return = firstChild.return;
              nextEffect = current;
              break;
            }

            nextEffect = firstChild.return;
          }
      }
    }

    var ceil = Math.ceil,
      ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
      executionContext = 0,
      workInProgressRoot = null,
      workInProgress = null,
      workInProgressRootRenderLanes = 0,
      subtreeRenderLanes = 0,
      subtreeRenderLanesCursor = createCursor(0),
      workInProgressRootExitStatus = 0,
      workInProgressRootFatalError = null,
      workInProgressRootSkippedLanes = 0,
      workInProgressRootInterleavedUpdatedLanes = 0,
      workInProgressRootPingedLanes = 0,
      workInProgressRootConcurrentErrors = null,
      workInProgressRootRecoverableErrors = null,
      globalMostRecentFallbackTime = 0,
      workInProgressRootRenderTargetTime = Infinity,
      workInProgressTransitions = null,
      hasUncaughtError = false,
      firstUncaughtError = null,
      legacyErrorBoundariesThatAlreadyFailed = null,
      rootDoesHavePassiveEffects = false,
      rootWithPendingPassiveEffects = null,
      pendingPassiveEffectsLanes = 0,
      nestedUpdateCount = 0,
      rootWithNestedUpdates = null,
      currentEventTime = -1,
      currentEventTransitionLane = 0;

    function requestEventTime() {
      return 0 !== (executionContext & 6)
        ? now()
        : -1 !== currentEventTime
        ? currentEventTime
        : (currentEventTime = now());
    }

    function requestUpdateLane(fiber) {
      if (0 === (fiber.mode & 1)) return 1;
      if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      if (null !== ReactCurrentBatchConfig.transition)
        return (
          0 === currentEventTransitionLane &&
            (currentEventTransitionLane = claimNextTransitionLane()),
          currentEventTransitionLane
        );
      fiber = currentUpdatePriority;
      if (0 === fiber)
        a: {
          fiber = fabricGetCurrentEventPriority
            ? fabricGetCurrentEventPriority()
            : null;
          if (null != fiber)
            switch (fiber) {
              case FabricDiscretePriority:
                fiber = 1;
                break a;
            }
          fiber = 16;
        }
      return fiber;
    }

    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
      if (50 < nestedUpdateCount)
        throw (
          ((nestedUpdateCount = 0),
          (rootWithNestedUpdates = null),
          Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          ))
        );
      var root = markUpdateLaneFromFiberToRoot(fiber, lane);
      if (null === root) return null;
      markRootUpdated(root, lane, eventTime);
      if (0 === (executionContext & 2) || root !== workInProgressRoot)
        root === workInProgressRoot &&
          (0 === (executionContext & 2) &&
            (workInProgressRootInterleavedUpdatedLanes |= lane),
          4 === workInProgressRootExitStatus &&
            markRootSuspended$1(root, workInProgressRootRenderLanes)),
          ensureRootIsScheduled(root, eventTime),
          1 === lane &&
            0 === executionContext &&
            0 === (fiber.mode & 1) &&
            ((workInProgressRootRenderTargetTime = now() + 500),
            includesLegacySyncCallbacks && flushSyncCallbacks());
      return root;
    }

    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      null !== alternate && (alternate.lanes |= lane);
      alternate = sourceFiber;

      for (sourceFiber = sourceFiber.return; null !== sourceFiber; ) {
        (sourceFiber.childLanes |= lane),
          (alternate = sourceFiber.alternate),
          null !== alternate && (alternate.childLanes |= lane),
          (alternate = sourceFiber),
          (sourceFiber = sourceFiber.return);
      }

      return 3 === alternate.tag ? alternate.stateNode : null;
    }

    function isInterleavedUpdate(fiber) {
      return (
        (null !== workInProgressRoot || null !== interleavedQueues) &&
        0 !== (fiber.mode & 1) &&
        0 === (executionContext & 2)
      );
    }

    function ensureRootIsScheduled(root, currentTime) {
      for (
        var existingCallbackNode = root.callbackNode,
          suspendedLanes = root.suspendedLanes,
          pingedLanes = root.pingedLanes,
          expirationTimes = root.expirationTimes,
          lanes = root.pendingLanes;
        0 < lanes;

      ) {
        var index$5 = 31 - clz32(lanes),
          lane = 1 << index$5,
          expirationTime = expirationTimes[index$5];

        if (-1 === expirationTime) {
          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
            expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
        } else expirationTime <= currentTime && (root.expiredLanes |= lane);

        lanes &= ~lane;
      }

      suspendedLanes = getNextLanes(
        root,
        root === workInProgressRoot ? workInProgressRootRenderLanes : 0
      );
      if (0 === suspendedLanes)
        null !== existingCallbackNode && cancelCallback(existingCallbackNode),
          (root.callbackNode = null),
          (root.callbackPriority = 0);
      else if (
        ((currentTime = suspendedLanes & -suspendedLanes),
        root.callbackPriority !== currentTime)
      ) {
        null != existingCallbackNode && cancelCallback(existingCallbackNode);
        if (1 === currentTime)
          0 === root.tag
            ? ((existingCallbackNode = performSyncWorkOnRoot.bind(null, root)),
              (includesLegacySyncCallbacks = true),
              null === syncQueue
                ? (syncQueue = [existingCallbackNode])
                : syncQueue.push(existingCallbackNode))
            : ((existingCallbackNode = performSyncWorkOnRoot.bind(null, root)),
              null === syncQueue
                ? (syncQueue = [existingCallbackNode])
                : syncQueue.push(existingCallbackNode)),
            scheduleCallback(ImmediatePriority, flushSyncCallbacks),
            (existingCallbackNode = null);
        else {
          switch (lanesToEventPriority(suspendedLanes)) {
            case 1:
              existingCallbackNode = ImmediatePriority;
              break;

            case 4:
              existingCallbackNode = UserBlockingPriority;
              break;

            case 16:
              existingCallbackNode = NormalPriority;
              break;

            case 536870912:
              existingCallbackNode = IdlePriority;
              break;

            default:
              existingCallbackNode = NormalPriority;
          }

          existingCallbackNode = scheduleCallback$1(
            existingCallbackNode,
            performConcurrentWorkOnRoot.bind(null, root)
          );
        }
        root.callbackPriority = currentTime;
        root.callbackNode = existingCallbackNode;
      }
    }

    function performConcurrentWorkOnRoot(root, didTimeout) {
      currentEventTime = -1;
      currentEventTransitionLane = 0;
      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      var originalCallbackNode = root.callbackNode;
      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
        return null;
      var lanes = getNextLanes(
        root,
        root === workInProgressRoot ? workInProgressRootRenderLanes : 0
      );
      if (0 === lanes) return null;
      if (0 !== (lanes & 30) || 0 !== (lanes & root.expiredLanes) || didTimeout)
        didTimeout = renderRootSync(root, lanes);
      else {
        didTimeout = lanes;
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher();
        if (
          workInProgressRoot !== root ||
          workInProgressRootRenderLanes !== didTimeout
        )
          (workInProgressTransitions = null),
            (workInProgressRootRenderTargetTime = now() + 500),
            prepareFreshStack(root, didTimeout);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (1);

        resetContextDependencies();
        ReactCurrentDispatcher$2.current = prevDispatcher;
        executionContext = prevExecutionContext;
        null !== workInProgress
          ? (didTimeout = 0)
          : ((workInProgressRoot = null),
            (workInProgressRootRenderLanes = 0),
            (didTimeout = workInProgressRootExitStatus));
      }

      if (0 !== didTimeout) {
        2 === didTimeout &&
          ((prevExecutionContext = getLanesToRetrySynchronouslyOnError(root)),
          0 !== prevExecutionContext &&
            ((lanes = prevExecutionContext),
            (didTimeout = recoverFromConcurrentError(
              root,
              prevExecutionContext
            ))));
        if (1 === didTimeout)
          throw (
            ((originalCallbackNode = workInProgressRootFatalError),
            prepareFreshStack(root, 0),
            markRootSuspended$1(root, lanes),
            ensureRootIsScheduled(root, now()),
            originalCallbackNode)
          );
        if (6 === didTimeout) markRootSuspended$1(root, lanes);
        else {
          prevExecutionContext = root.current.alternate;
          if (
            0 === (lanes & 30) &&
            !isRenderConsistentWithExternalStores(prevExecutionContext) &&
            ((didTimeout = renderRootSync(root, lanes)),
            2 === didTimeout &&
              ((prevDispatcher = getLanesToRetrySynchronouslyOnError(root)),
              0 !== prevDispatcher &&
                ((lanes = prevDispatcher),
                (didTimeout = recoverFromConcurrentError(
                  root,
                  prevDispatcher
                )))),
            1 === didTimeout)
          )
            throw (
              ((originalCallbackNode = workInProgressRootFatalError),
              prepareFreshStack(root, 0),
              markRootSuspended$1(root, lanes),
              ensureRootIsScheduled(root, now()),
              originalCallbackNode)
            );
          root.finishedWork = prevExecutionContext;
          root.finishedLanes = lanes;

          switch (didTimeout) {
            case 0:
            case 1:
              throw Error("Root did not complete. This is a bug in React.");

            case 2:
              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 3:
              markRootSuspended$1(root, lanes);

              if (
                (lanes & 130023424) === lanes &&
                ((didTimeout = globalMostRecentFallbackTime + 500 - now()),
                10 < didTimeout)
              ) {
                if (0 !== getNextLanes(root, 0)) break;
                prevExecutionContext = root.suspendedLanes;

                if ((prevExecutionContext & lanes) !== lanes) {
                  requestEventTime();
                  root.pingedLanes |=
                    root.suspendedLanes & prevExecutionContext;
                  break;
                }

                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(
                    null,
                    root,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions
                  ),
                  didTimeout
                );
                break;
              }

              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 4:
              markRootSuspended$1(root, lanes);
              if ((lanes & 4194240) === lanes) break;
              didTimeout = root.eventTimes;

              for (prevExecutionContext = -1; 0 < lanes; ) {
                var index$4 = 31 - clz32(lanes);
                prevDispatcher = 1 << index$4;
                index$4 = didTimeout[index$4];
                index$4 > prevExecutionContext &&
                  (prevExecutionContext = index$4);
                lanes &= ~prevDispatcher;
              }

              lanes = prevExecutionContext;
              lanes = now() - lanes;
              lanes =
                (120 > lanes
                  ? 120
                  : 480 > lanes
                  ? 480
                  : 1080 > lanes
                  ? 1080
                  : 1920 > lanes
                  ? 1920
                  : 3e3 > lanes
                  ? 3e3
                  : 4320 > lanes
                  ? 4320
                  : 1960 * ceil(lanes / 1960)) - lanes;

              if (10 < lanes) {
                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(
                    null,
                    root,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions
                  ),
                  lanes
                );
                break;
              }

              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            case 5:
              commitRoot(
                root,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;

            default:
              throw Error("Unknown root exit status.");
          }
        }
      }

      ensureRootIsScheduled(root, now());
      return root.callbackNode === originalCallbackNode
        ? performConcurrentWorkOnRoot.bind(null, root)
        : null;
    }

    function recoverFromConcurrentError(root, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      root.current.memoizedState.isDehydrated &&
        (prepareFreshStack(root, errorRetryLanes).flags |= 256);
      root = renderRootSync(root, errorRetryLanes);
      2 !== root &&
        ((errorRetryLanes = workInProgressRootRecoverableErrors),
        (workInProgressRootRecoverableErrors = errorsFromFirstAttempt),
        null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
      return root;
    }

    function queueRecoverableErrors(errors) {
      null === workInProgressRootRecoverableErrors
        ? (workInProgressRootRecoverableErrors = errors)
        : workInProgressRootRecoverableErrors.push.apply(
            workInProgressRootRecoverableErrors,
            errors
          );
    }

    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node = finishedWork; ; ) {
        if (node.flags & 16384) {
          var updateQueue = node.updateQueue;
          if (
            null !== updateQueue &&
            ((updateQueue = updateQueue.stores), null !== updateQueue)
          )
            for (var i = 0; i < updateQueue.length; i++) {
              var check = updateQueue[i],
                getSnapshot = check.getSnapshot;
              check = check.value;

              try {
                if (!objectIs(getSnapshot(), check)) return false;
              } catch (error) {
                return false;
              }
            }
        }

        updateQueue = node.child;
        if (node.subtreeFlags & 16384 && null !== updateQueue)
          (updateQueue.return = node), (node = updateQueue);
        else {
          if (node === finishedWork) break;

          for (; null === node.sibling; ) {
            if (null === node.return || node.return === finishedWork)
              return true;
            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      return true;
    }

    function markRootSuspended$1(root, suspendedLanes) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;

      for (root = root.expirationTimes; 0 < suspendedLanes; ) {
        var index$6 = 31 - clz32(suspendedLanes),
          lane = 1 << index$6;
        root[index$6] = -1;
        suspendedLanes &= ~lane;
      }
    }

    function performSyncWorkOnRoot(root) {
      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      flushPassiveEffects();
      var lanes = getNextLanes(root, 0);
      if (0 === (lanes & 1)) return ensureRootIsScheduled(root, now()), null;
      var exitStatus = renderRootSync(root, lanes);

      if (0 !== root.tag && 2 === exitStatus) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
        0 !== errorRetryLanes &&
          ((lanes = errorRetryLanes),
          (exitStatus = recoverFromConcurrentError(root, errorRetryLanes)));
      }

      if (1 === exitStatus)
        throw (
          ((exitStatus = workInProgressRootFatalError),
          prepareFreshStack(root, 0),
          markRootSuspended$1(root, lanes),
          ensureRootIsScheduled(root, now()),
          exitStatus)
        );
      if (6 === exitStatus)
        throw Error("Root did not complete. This is a bug in React.");
      root.finishedWork = root.current.alternate;
      root.finishedLanes = lanes;
      commitRoot(
        root,
        workInProgressRootRecoverableErrors,
        workInProgressTransitions
      );
      ensureRootIsScheduled(root, now());
      return null;
    }

    function popRenderLanes() {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor);
    }

    function prepareFreshStack(root, lanes) {
      root.finishedWork = null;
      root.finishedLanes = 0;
      var timeoutHandle = root.timeoutHandle;
      -1 !== timeoutHandle &&
        ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));
      if (null !== workInProgress)
        for (timeoutHandle = workInProgress.return; null !== timeoutHandle; ) {
          var interruptedWork = timeoutHandle;
          popTreeContext(interruptedWork);

          switch (interruptedWork.tag) {
            case 1:
              interruptedWork = interruptedWork.type.childContextTypes;
              null !== interruptedWork &&
                undefined !== interruptedWork &&
                popContext();
              break;

            case 3:
              popHostContainer();
              pop(didPerformWorkStackCursor);
              pop(contextStackCursor);
              resetWorkInProgressVersions();
              break;

            case 5:
              popHostContext(interruptedWork);
              break;

            case 4:
              popHostContainer();
              break;

            case 13:
              pop(suspenseStackCursor);
              break;

            case 19:
              pop(suspenseStackCursor);
              break;

            case 10:
              popProvider(interruptedWork.type._context);
              break;

            case 22:
            case 23:
              popRenderLanes();
          }

          timeoutHandle = timeoutHandle.return;
        }
      workInProgressRoot = root;
      workInProgress = root = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = 0;
      workInProgressRootFatalError = null;
      workInProgressRootPingedLanes =
        workInProgressRootInterleavedUpdatedLanes =
        workInProgressRootSkippedLanes =
          0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
        null;

      if (null !== interleavedQueues) {
        for (lanes = 0; lanes < interleavedQueues.length; lanes++) {
          if (
            ((timeoutHandle = interleavedQueues[lanes]),
            (interruptedWork = timeoutHandle.interleaved),
            null !== interruptedWork)
          ) {
            timeoutHandle.interleaved = null;
            var firstInterleavedUpdate = interruptedWork.next,
              lastPendingUpdate = timeoutHandle.pending;

            if (null !== lastPendingUpdate) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              interruptedWork.next = firstPendingUpdate;
            }

            timeoutHandle.pending = interruptedWork;
          }
        }

        interleavedQueues = null;
      }

      return root;
    }

    function handleError(root$jscomp$0, thrownValue) {
      do {
        var erroredWork = workInProgress;

        try {
          resetContextDependencies();
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

          if (didScheduleRenderPhaseUpdate) {
            for (
              var hook = currentlyRenderingFiber$1.memoizedState;
              null !== hook;

            ) {
              var queue = hook.queue;
              null !== queue && (queue.pending = null);
              hook = hook.next;
            }

            didScheduleRenderPhaseUpdate = false;
          }

          renderLanes = 0;
          workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          ReactCurrentOwner$2.current = null;

          if (null === erroredWork || null === erroredWork.return) {
            workInProgressRootExitStatus = 1;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            break;
          }

          a: {
            var root = root$jscomp$0,
              returnFiber = erroredWork.return,
              sourceFiber = erroredWork,
              value = thrownValue;
            thrownValue = workInProgressRootRenderLanes;
            sourceFiber.flags |= 32768;

            if (
              null !== value &&
              "object" === typeof value &&
              "function" === typeof value.then
            ) {
              var wakeable = value,
                sourceFiber$jscomp$0 = sourceFiber,
                tag = sourceFiber$jscomp$0.tag;

              if (
                0 === (sourceFiber$jscomp$0.mode & 1) &&
                (0 === tag || 11 === tag || 15 === tag)
              ) {
                var currentSource = sourceFiber$jscomp$0.alternate;
                currentSource
                  ? ((sourceFiber$jscomp$0.updateQueue =
                      currentSource.updateQueue),
                    (sourceFiber$jscomp$0.memoizedState =
                      currentSource.memoizedState),
                    (sourceFiber$jscomp$0.lanes = currentSource.lanes))
                  : ((sourceFiber$jscomp$0.updateQueue = null),
                    (sourceFiber$jscomp$0.memoizedState = null));
              }

              b: {
                sourceFiber$jscomp$0 = returnFiber;

                do {
                  var JSCompiler_temp;

                  if ((JSCompiler_temp = 13 === sourceFiber$jscomp$0.tag)) {
                    var nextState = sourceFiber$jscomp$0.memoizedState;
                    JSCompiler_temp =
                      null !== nextState
                        ? null !== nextState.dehydrated
                          ? true
                          : false
                        : true;
                  }

                  if (JSCompiler_temp) {
                    var suspenseBoundary = sourceFiber$jscomp$0;
                    break b;
                  }

                  sourceFiber$jscomp$0 = sourceFiber$jscomp$0.return;
                } while (null !== sourceFiber$jscomp$0);

                suspenseBoundary = null;
              }

              if (null !== suspenseBoundary) {
                suspenseBoundary.flags &= -257;
                value = suspenseBoundary;
                sourceFiber$jscomp$0 = thrownValue;
                if (0 === (value.mode & 1)) {
                  if (value === returnFiber) value.flags |= 65536;
                  else {
                    value.flags |= 128;
                    sourceFiber.flags |= 131072;
                    sourceFiber.flags &= -52805;
                    if (1 === sourceFiber.tag)
                      if (null === sourceFiber.alternate) sourceFiber.tag = 17;
                      else {
                        var update = createUpdate(-1, 1);
                        update.tag = 2;
                        enqueueUpdate(sourceFiber, update);
                      }
                    sourceFiber.lanes |= 1;
                  }
                } else
                  (value.flags |= 65536), (value.lanes = sourceFiber$jscomp$0);
                suspenseBoundary.mode & 1 &&
                  attachPingListener(root, wakeable, thrownValue);
                thrownValue = suspenseBoundary;
                root = wakeable;
                var wakeables = thrownValue.updateQueue;

                if (null === wakeables) {
                  var updateQueue = new Set();
                  updateQueue.add(root);
                  thrownValue.updateQueue = updateQueue;
                } else wakeables.add(root);

                break a;
              } else {
                if (0 === (thrownValue & 1)) {
                  attachPingListener(root, wakeable, thrownValue);
                  renderDidSuspendDelayIfPossible();
                  break a;
                }

                value = Error(
                  "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."
                );
              }
            }

            root = value;
            4 !== workInProgressRootExitStatus &&
              (workInProgressRootExitStatus = 2);
            null === workInProgressRootConcurrentErrors
              ? (workInProgressRootConcurrentErrors = [root])
              : workInProgressRootConcurrentErrors.push(root);
            value = createCapturedValue(value, sourceFiber);
            root = returnFiber;

            do {
              switch (root.tag) {
                case 3:
                  wakeable = value;
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update$jscomp$0 = createRootErrorUpdate(
                    root,
                    wakeable,
                    thrownValue
                  );
                  enqueueCapturedUpdate(root, update$jscomp$0);
                  break a;

                case 1:
                  wakeable = value;
                  var ctor = root.type,
                    instance = root.stateNode;

                  if (
                    0 === (root.flags & 128) &&
                    ("function" === typeof ctor.getDerivedStateFromError ||
                      (null !== instance &&
                        "function" === typeof instance.componentDidCatch &&
                        (null === legacyErrorBoundariesThatAlreadyFailed ||
                          !legacyErrorBoundariesThatAlreadyFailed.has(
                            instance
                          ))))
                  ) {
                    root.flags |= 65536;
                    thrownValue &= -thrownValue;
                    root.lanes |= thrownValue;
                    var update$32 = createClassErrorUpdate(
                      root,
                      wakeable,
                      thrownValue
                    );
                    enqueueCapturedUpdate(root, update$32);
                    break a;
                  }
              }

              root = root.return;
            } while (null !== root);
          }

          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          workInProgress === erroredWork &&
            null !== erroredWork &&
            (workInProgress = erroredWork = erroredWork.return);
          continue;
        }

        break;
      } while (1);
    }

    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }

    function renderDidSuspendDelayIfPossible() {
      if (
        0 === workInProgressRootExitStatus ||
        3 === workInProgressRootExitStatus ||
        2 === workInProgressRootExitStatus
      )
        workInProgressRootExitStatus = 4;
      null === workInProgressRoot ||
        (0 === (workInProgressRootSkippedLanes & 268435455) &&
          0 === (workInProgressRootInterleavedUpdatedLanes & 268435455)) ||
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }

    function renderRootSync(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= 2;
      var prevDispatcher = pushDispatcher();
      if (
        workInProgressRoot !== root ||
        workInProgressRootRenderLanes !== lanes
      )
        (workInProgressTransitions = null), prepareFreshStack(root, lanes);

      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (1);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      ReactCurrentDispatcher$2.current = prevDispatcher;
      if (null !== workInProgress)
        throw Error(
          "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."
        );
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      return workInProgressRootExitStatus;
    }

    function workLoopSync() {
      for (; null !== workInProgress; ) {
        performUnitOfWork(workInProgress);
      }
    }

    function workLoopConcurrent() {
      for (; null !== workInProgress && !shouldYield(); ) {
        performUnitOfWork(workInProgress);
      }
    }

    function performUnitOfWork(unitOfWork) {
      var next = beginWork$1(
        unitOfWork.alternate,
        unitOfWork,
        subtreeRenderLanes
      );
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
      ReactCurrentOwner$2.current = null;
    }

    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;

      do {
        var current = completedWork.alternate;
        unitOfWork = completedWork.return;

        if (0 === (completedWork.flags & 32768)) {
          if (
            ((current = completeWork(
              current,
              completedWork,
              subtreeRenderLanes
            )),
            null !== current)
          ) {
            workInProgress = current;
            return;
          }
        } else {
          current = unwindWork(current, completedWork);

          if (null !== current) {
            current.flags &= 32767;
            workInProgress = current;
            return;
          }

          if (null !== unitOfWork)
            (unitOfWork.flags |= 32768),
              (unitOfWork.subtreeFlags = 0),
              (unitOfWork.deletions = null);
          else {
            workInProgressRootExitStatus = 6;
            workInProgress = null;
            return;
          }
        }

        completedWork = completedWork.sibling;

        if (null !== completedWork) {
          workInProgress = completedWork;
          return;
        }

        workInProgress = completedWork = unitOfWork;
      } while (null !== completedWork);

      0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
    }

    function commitRoot(root, recoverableErrors, transitions) {
      var previousUpdateLanePriority = currentUpdatePriority,
        prevTransition = ReactCurrentBatchConfig$2.transition;

      try {
        (ReactCurrentBatchConfig$2.transition = null),
          (currentUpdatePriority = 1),
          commitRootImpl(
            root,
            recoverableErrors,
            transitions,
            previousUpdateLanePriority
          );
      } finally {
        (ReactCurrentBatchConfig$2.transition = prevTransition),
          (currentUpdatePriority = previousUpdateLanePriority);
      }

      return null;
    }

    function commitRootImpl(
      root,
      recoverableErrors,
      transitions,
      renderPriorityLevel
    ) {
      do {
        flushPassiveEffects();
      } while (null !== rootWithPendingPassiveEffects);

      if (0 !== (executionContext & 6))
        throw Error("Should not already be working.");
      transitions = root.finishedWork;
      var lanes = root.finishedLanes;
      if (null === transitions) return null;
      root.finishedWork = null;
      root.finishedLanes = 0;
      if (transitions === root.current)
        throw Error(
          "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
        );
      root.callbackNode = null;
      root.callbackPriority = 0;
      var remainingLanes = transitions.lanes | transitions.childLanes;
      markRootFinished(root, remainingLanes);
      root === workInProgressRoot &&
        ((workInProgress = workInProgressRoot = null),
        (workInProgressRootRenderLanes = 0));
      (0 === (transitions.subtreeFlags & 2064) &&
        0 === (transitions.flags & 2064)) ||
        rootDoesHavePassiveEffects ||
        ((rootDoesHavePassiveEffects = true),
        scheduleCallback$1(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        }));
      remainingLanes = 0 !== (transitions.flags & 15990);

      if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
        remainingLanes = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = null;
        var previousPriority = currentUpdatePriority;
        currentUpdatePriority = 1;
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root, transitions);
        commitMutationEffectsOnFiber(transitions, root);
        root.current = transitions;
        commitLayoutEffects(transitions, root, lanes);
        requestPaint();
        executionContext = prevExecutionContext;
        currentUpdatePriority = previousPriority;
        ReactCurrentBatchConfig$2.transition = remainingLanes;
      } else root.current = transitions;

      rootDoesHavePassiveEffects &&
        ((rootDoesHavePassiveEffects = false),
        (rootWithPendingPassiveEffects = root),
        (pendingPassiveEffectsLanes = lanes));
      remainingLanes = root.pendingLanes;
      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
      onCommitRoot(transitions.stateNode, renderPriorityLevel);
      ensureRootIsScheduled(root, now());
      if (null !== recoverableErrors)
        for (
          renderPriorityLevel = root.onRecoverableError, transitions = 0;
          transitions < recoverableErrors.length;
          transitions++
        ) {
          renderPriorityLevel(recoverableErrors[transitions]);
        }
      if (hasUncaughtError)
        throw (
          ((hasUncaughtError = false),
          (root = firstUncaughtError),
          (firstUncaughtError = null),
          root)
        );
      0 !== (pendingPassiveEffectsLanes & 1) &&
        0 !== root.tag &&
        flushPassiveEffects();
      remainingLanes = root.pendingLanes;
      0 !== (remainingLanes & 1)
        ? root === rootWithNestedUpdates
          ? nestedUpdateCount++
          : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
        : (nestedUpdateCount = 0);
      flushSyncCallbacks();
      return null;
    }

    function flushPassiveEffects() {
      if (null !== rootWithPendingPassiveEffects) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
          prevTransition = ReactCurrentBatchConfig$2.transition,
          previousPriority = currentUpdatePriority;

        try {
          ReactCurrentBatchConfig$2.transition = null;
          currentUpdatePriority = 16 > renderPriority ? 16 : renderPriority;
          if (null === rootWithPendingPassiveEffects)
            var JSCompiler_inline_result = false;
          else {
            renderPriority = rootWithPendingPassiveEffects;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = 0;
            if (0 !== (executionContext & 6))
              throw Error(
                "Cannot flush passive effects while already rendering."
              );
            var prevExecutionContext = executionContext;
            executionContext |= 4;

            for (nextEffect = renderPriority.current; null !== nextEffect; ) {
              var fiber = nextEffect,
                child = fiber.child;

              if (0 !== (nextEffect.flags & 16)) {
                var deletions = fiber.deletions;

                if (null !== deletions) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];

                    for (nextEffect = fiberToDelete; null !== nextEffect; ) {
                      var fiber$jscomp$0 = nextEffect;

                      switch (fiber$jscomp$0.tag) {
                        case 0:
                        case 11:
                        case 15:
                          commitHookEffectListUnmount(8, fiber$jscomp$0, fiber);
                      }

                      var child$jscomp$0 = fiber$jscomp$0.child;
                      if (null !== child$jscomp$0)
                        (child$jscomp$0.return = fiber$jscomp$0),
                          (nextEffect = child$jscomp$0);
                      else
                        for (; null !== nextEffect; ) {
                          fiber$jscomp$0 = nextEffect;
                          var sibling = fiber$jscomp$0.sibling,
                            returnFiber = fiber$jscomp$0.return;
                          detachFiberAfterEffects(fiber$jscomp$0);

                          if (fiber$jscomp$0 === fiberToDelete) {
                            nextEffect = null;
                            break;
                          }

                          if (null !== sibling) {
                            sibling.return = returnFiber;
                            nextEffect = sibling;
                            break;
                          }

                          nextEffect = returnFiber;
                        }
                    }
                  }

                  var previousFiber = fiber.alternate;

                  if (null !== previousFiber) {
                    var detachedChild = previousFiber.child;

                    if (null !== detachedChild) {
                      previousFiber.child = null;

                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (null !== detachedChild);
                    }
                  }

                  nextEffect = fiber;
                }
              }

              if (0 !== (fiber.subtreeFlags & 2064) && null !== child)
                (child.return = fiber), (nextEffect = child);
              else
                b: for (; null !== nextEffect; ) {
                  fiber = nextEffect;
                  if (0 !== (fiber.flags & 2048))
                    switch (fiber.tag) {
                      case 0:
                      case 11:
                      case 15:
                        commitHookEffectListUnmount(9, fiber, fiber.return);
                    }
                  var sibling$jscomp$0 = fiber.sibling;

                  if (null !== sibling$jscomp$0) {
                    sibling$jscomp$0.return = fiber.return;
                    nextEffect = sibling$jscomp$0;
                    break b;
                  }

                  nextEffect = fiber.return;
                }
            }

            var finishedWork = renderPriority.current;

            for (nextEffect = finishedWork; null !== nextEffect; ) {
              child = nextEffect;
              var firstChild = child.child;
              if (0 !== (child.subtreeFlags & 2064) && null !== firstChild)
                (firstChild.return = child), (nextEffect = firstChild);
              else
                b: for (child = finishedWork; null !== nextEffect; ) {
                  deletions = nextEffect;
                  if (0 !== (deletions.flags & 2048))
                    try {
                      switch (deletions.tag) {
                        case 0:
                        case 11:
                        case 15:
                          commitHookEffectListMount(9, deletions);
                      }
                    } catch (error) {
                      captureCommitPhaseError(
                        deletions,
                        deletions.return,
                        error
                      );
                    }

                  if (deletions === child) {
                    nextEffect = null;
                    break b;
                  }

                  var sibling$jscomp$1 = deletions.sibling;

                  if (null !== sibling$jscomp$1) {
                    sibling$jscomp$1.return = deletions.return;
                    nextEffect = sibling$jscomp$1;
                    break b;
                  }

                  nextEffect = deletions.return;
                }
            }

            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            if (
              injectedHook &&
              "function" === typeof injectedHook.onPostCommitFiberRoot
            )
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, renderPriority);
              } catch (err) {}
            JSCompiler_inline_result = true;
          }
          return JSCompiler_inline_result;
        } finally {
          (currentUpdatePriority = previousPriority),
            (ReactCurrentBatchConfig$2.transition = prevTransition);
        }
      }

      return false;
    }

    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValue(error, sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, 1);
      enqueueUpdate(rootFiber, sourceFiber);
      sourceFiber = requestEventTime();
      rootFiber = markUpdateLaneFromFiberToRoot(rootFiber, 1);
      null !== rootFiber &&
        (markRootUpdated(rootFiber, 1, sourceFiber),
        ensureRootIsScheduled(rootFiber, sourceFiber));
    }

    function captureCommitPhaseError(
      sourceFiber,
      nearestMountedAncestor,
      error
    ) {
      if (3 === sourceFiber.tag)
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      else
        for (
          nearestMountedAncestor = sourceFiber.return;
          null !== nearestMountedAncestor;

        ) {
          if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(
              nearestMountedAncestor,
              sourceFiber,
              error
            );
            break;
          } else if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;

            if (
              "function" ===
                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
              ("function" === typeof instance.componentDidCatch &&
                (null === legacyErrorBoundariesThatAlreadyFailed ||
                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
            ) {
              sourceFiber = createCapturedValue(error, sourceFiber);
              sourceFiber = createClassErrorUpdate(
                nearestMountedAncestor,
                sourceFiber,
                1
              );
              enqueueUpdate(nearestMountedAncestor, sourceFiber);
              sourceFiber = requestEventTime();
              nearestMountedAncestor = markUpdateLaneFromFiberToRoot(
                nearestMountedAncestor,
                1
              );
              null !== nearestMountedAncestor &&
                (markRootUpdated(nearestMountedAncestor, 1, sourceFiber),
                ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
              break;
            }
          }

          nearestMountedAncestor = nearestMountedAncestor.return;
        }
    }

    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      null !== pingCache && pingCache.delete(wakeable);
      wakeable = requestEventTime();
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
      workInProgressRoot === root &&
        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
        (4 === workInProgressRootExitStatus ||
        (3 === workInProgressRootExitStatus &&
          (workInProgressRootRenderLanes & 130023424) ===
            workInProgressRootRenderLanes &&
          500 > now() - globalMostRecentFallbackTime)
          ? prepareFreshStack(root, 0)
          : (workInProgressRootPingedLanes |= pingedLanes));
      ensureRootIsScheduled(root, wakeable);
    }

    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      0 === retryLane &&
        (0 === (boundaryFiber.mode & 1)
          ? (retryLane = 1)
          : ((retryLane = nextRetryLane),
            (nextRetryLane <<= 1),
            0 === (nextRetryLane & 130023424) && (nextRetryLane = 4194304)));
      var eventTime = requestEventTime();
      boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
      null !== boundaryFiber &&
        (markRootUpdated(boundaryFiber, retryLane, eventTime),
        ensureRootIsScheduled(boundaryFiber, eventTime));
    }

    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState,
        retryLane = 0;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }

    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;

      switch (boundaryFiber.tag) {
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          break;

        case 19:
          retryCache = boundaryFiber.stateNode;
          break;

        default:
          throw Error(
            "Pinged unknown suspense boundary type. This is probably a bug in React."
          );
      }

      null !== retryCache && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }

    var beginWork$1;

    beginWork$1 = function beginWork$1(current, workInProgress, renderLanes) {
      if (null !== current) {
        if (
          current.memoizedProps !== workInProgress.pendingProps ||
          didPerformWorkStackCursor.current
        )
          didReceiveUpdate = true;
        else {
          if (
            0 === (current.lanes & renderLanes) &&
            0 === (workInProgress.flags & 128)
          )
            return (
              (didReceiveUpdate = false),
              attemptEarlyBailoutIfNoScheduledUpdate(
                current,
                workInProgress,
                renderLanes
              )
            );
          didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
        }
      } else didReceiveUpdate = false;
      workInProgress.lanes = 0;

      switch (workInProgress.tag) {
        case 2:
          var Component = workInProgress.type;
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          var context = getMaskedContext(
            workInProgress,
            contextStackCursor.current
          );
          prepareToReadContext(workInProgress, renderLanes);
          context = renderWithHooks(
            null,
            workInProgress,
            Component,
            current,
            context,
            renderLanes
          );
          workInProgress.flags |= 1;

          if (
            "object" === typeof context &&
            null !== context &&
            "function" === typeof context.render &&
            undefined === context.$$typeof
          ) {
            workInProgress.tag = 1;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;

            if (isContextProvider(Component)) {
              var hasContext = true;
              pushContextProvider(workInProgress);
            } else hasContext = false;

            workInProgress.memoizedState =
              null !== context.state && undefined !== context.state
                ? context.state
                : null;
            initializeUpdateQueue(workInProgress);
            context.updater = classComponentUpdater;
            workInProgress.stateNode = context;
            context._reactInternals = workInProgress;
            mountClassInstance(workInProgress, Component, current, renderLanes);
            workInProgress = finishClassComponent(
              null,
              workInProgress,
              Component,
              true,
              hasContext,
              renderLanes
            );
          } else
            (workInProgress.tag = 0),
              reconcileChildren(null, workInProgress, context, renderLanes),
              (workInProgress = workInProgress.child);

          return workInProgress;

        case 16:
          Component = workInProgress.elementType;

          a: {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
            current = workInProgress.pendingProps;
            context = Component._init;
            Component = context(Component._payload);
            workInProgress.type = Component;
            context = workInProgress.tag = resolveLazyComponentTag(Component);
            current = resolveDefaultProps(Component, current);

            switch (context) {
              case 0:
                workInProgress = updateFunctionComponent(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 1:
                workInProgress = updateClassComponent(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 11:
                workInProgress = updateForwardRef(
                  null,
                  workInProgress,
                  Component,
                  current,
                  renderLanes
                );
                break a;

              case 14:
                workInProgress = updateMemoComponent(
                  null,
                  workInProgress,
                  Component,
                  resolveDefaultProps(Component.type, current),
                  renderLanes
                );
                break a;
            }

            throw Error(
              "Element type is invalid. Received a promise that resolves to: " +
                Component +
                ". Lazy element type must resolve to a class or function."
            );
          }

          return workInProgress;

        case 0:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateFunctionComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 1:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateClassComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 3:
          pushHostRootContext(workInProgress);
          if (null === current)
            throw Error("Should have a current fiber. This is a bug in React.");
          context = workInProgress.pendingProps;
          Component = workInProgress.memoizedState.element;
          cloneUpdateQueue(current, workInProgress);
          processUpdateQueue(workInProgress, context, null, renderLanes);
          context = workInProgress.memoizedState.element;
          context === Component
            ? (workInProgress = bailoutOnAlreadyFinishedWork(
                current,
                workInProgress,
                renderLanes
              ))
            : (reconcileChildren(current, workInProgress, context, renderLanes),
              (workInProgress = workInProgress.child));
          return workInProgress;

        case 5:
          return (
            pushHostContext(workInProgress),
            (Component = workInProgress.pendingProps.children),
            markRef(current, workInProgress),
            reconcileChildren(current, workInProgress, Component, renderLanes),
            workInProgress.child
          );

        case 6:
          return null;

        case 13:
          return updateSuspenseComponent(current, workInProgress, renderLanes);

        case 4:
          return (
            pushHostContainer(
              workInProgress,
              workInProgress.stateNode.containerInfo
            ),
            (Component = workInProgress.pendingProps),
            null === current
              ? (workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  Component,
                  renderLanes
                ))
              : reconcileChildren(
                  current,
                  workInProgress,
                  Component,
                  renderLanes
                ),
            workInProgress.child
          );

        case 11:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            updateForwardRef(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 7:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps,
              renderLanes
            ),
            workInProgress.child
          );

        case 8:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );

        case 12:
          return (
            reconcileChildren(
              current,
              workInProgress,
              workInProgress.pendingProps.children,
              renderLanes
            ),
            workInProgress.child
          );

        case 10:
          a: {
            Component = workInProgress.type._context;
            context = workInProgress.pendingProps;
            hasContext = workInProgress.memoizedProps;
            var newValue = context.value;
            push(valueCursor, Component._currentValue2);
            Component._currentValue2 = newValue;
            if (null !== hasContext)
              if (objectIs(hasContext.value, newValue)) {
                if (
                  hasContext.children === context.children &&
                  !didPerformWorkStackCursor.current
                ) {
                  workInProgress = bailoutOnAlreadyFinishedWork(
                    current,
                    workInProgress,
                    renderLanes
                  );
                  break a;
                }
              } else
                for (
                  hasContext = workInProgress.child,
                    null !== hasContext && (hasContext.return = workInProgress);
                  null !== hasContext;

                ) {
                  var list = hasContext.dependencies;

                  if (null !== list) {
                    newValue = hasContext.child;

                    for (
                      var dependency = list.firstContext;
                      null !== dependency;

                    ) {
                      if (dependency.context === Component) {
                        if (1 === hasContext.tag) {
                          dependency = createUpdate(
                            -1,
                            renderLanes & -renderLanes
                          );
                          dependency.tag = 2;
                          var updateQueue = hasContext.updateQueue;

                          if (null !== updateQueue) {
                            updateQueue = updateQueue.shared;
                            var pending = updateQueue.pending;
                            null === pending
                              ? (dependency.next = dependency)
                              : ((dependency.next = pending.next),
                                (pending.next = dependency));
                            updateQueue.pending = dependency;
                          }
                        }

                        hasContext.lanes |= renderLanes;
                        dependency = hasContext.alternate;
                        null !== dependency &&
                          (dependency.lanes |= renderLanes);
                        scheduleContextWorkOnParentPath(
                          hasContext.return,
                          renderLanes,
                          workInProgress
                        );
                        list.lanes |= renderLanes;
                        break;
                      }

                      dependency = dependency.next;
                    }
                  } else if (10 === hasContext.tag)
                    newValue =
                      hasContext.type === workInProgress.type
                        ? null
                        : hasContext.child;
                  else if (18 === hasContext.tag) {
                    newValue = hasContext.return;
                    if (null === newValue)
                      throw Error(
                        "We just came from a parent so we must have had a parent. This is a bug in React."
                      );
                    newValue.lanes |= renderLanes;
                    list = newValue.alternate;
                    null !== list && (list.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(
                      newValue,
                      renderLanes,
                      workInProgress
                    );
                    newValue = hasContext.sibling;
                  } else newValue = hasContext.child;

                  if (null !== newValue) newValue.return = hasContext;
                  else
                    for (newValue = hasContext; null !== newValue; ) {
                      if (newValue === workInProgress) {
                        newValue = null;
                        break;
                      }

                      hasContext = newValue.sibling;

                      if (null !== hasContext) {
                        hasContext.return = newValue.return;
                        newValue = hasContext;
                        break;
                      }

                      newValue = newValue.return;
                    }
                  hasContext = newValue;
                }
            reconcileChildren(
              current,
              workInProgress,
              context.children,
              renderLanes
            );
            workInProgress = workInProgress.child;
          }

          return workInProgress;

        case 9:
          return (
            (context = workInProgress.type),
            (Component = workInProgress.pendingProps.children),
            prepareToReadContext(workInProgress, renderLanes),
            (context = readContext(context)),
            (Component = Component(context)),
            (workInProgress.flags |= 1),
            reconcileChildren(current, workInProgress, Component, renderLanes),
            workInProgress.child
          );

        case 14:
          return (
            (Component = workInProgress.type),
            (context = resolveDefaultProps(
              Component,
              workInProgress.pendingProps
            )),
            (context = resolveDefaultProps(Component.type, context)),
            updateMemoComponent(
              current,
              workInProgress,
              Component,
              context,
              renderLanes
            )
          );

        case 15:
          return updateSimpleMemoComponent(
            current,
            workInProgress,
            workInProgress.type,
            workInProgress.pendingProps,
            renderLanes
          );

        case 17:
          return (
            (Component = workInProgress.type),
            (context = workInProgress.pendingProps),
            (context =
              workInProgress.elementType === Component
                ? context
                : resolveDefaultProps(Component, context)),
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress),
            (workInProgress.tag = 1),
            isContextProvider(Component)
              ? ((current = true), pushContextProvider(workInProgress))
              : (current = false),
            prepareToReadContext(workInProgress, renderLanes),
            constructClassInstance(workInProgress, Component, context),
            mountClassInstance(workInProgress, Component, context, renderLanes),
            finishClassComponent(
              null,
              workInProgress,
              Component,
              true,
              current,
              renderLanes
            )
          );

        case 19:
          return updateSuspenseListComponent(
            current,
            workInProgress,
            renderLanes
          );

        case 22:
          return updateOffscreenComponent(current, workInProgress, renderLanes);
      }

      throw Error(
        "Unknown unit of work tag (" +
          workInProgress.tag +
          "). This error is likely caused by a bug in React. Please file an issue."
      );
    };

    function scheduleCallback$1(priorityLevel, callback) {
      return scheduleCallback(priorityLevel, callback);
    }

    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling =
        this.child =
        this.return =
        this.stateNode =
        this.type =
        this.elementType =
          null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies =
        this.memoizedState =
        this.updateQueue =
        this.memoizedProps =
          null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }

    function createFiber(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    }

    function shouldConstruct(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }

    function resolveLazyComponentTag(Component) {
      if ("function" === typeof Component)
        return shouldConstruct(Component) ? 1 : 0;

      if (undefined !== Component && null !== Component) {
        Component = Component.$$typeof;
        if (Component === REACT_FORWARD_REF_TYPE) return 11;
        if (Component === REACT_MEMO_TYPE) return 14;
      }

      return 2;
    }

    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      null === workInProgress
        ? ((workInProgress = createFiber(
            current.tag,
            pendingProps,
            current.key,
            current.mode
          )),
          (workInProgress.elementType = current.elementType),
          (workInProgress.type = current.type),
          (workInProgress.stateNode = current.stateNode),
          (workInProgress.alternate = current),
          (current.alternate = workInProgress))
        : ((workInProgress.pendingProps = pendingProps),
          (workInProgress.type = current.type),
          (workInProgress.flags = 0),
          (workInProgress.subtreeFlags = 0),
          (workInProgress.deletions = null));
      workInProgress.flags = current.flags & 14680064;
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      pendingProps = current.dependencies;
      workInProgress.dependencies =
        null === pendingProps
          ? null
          : {
              lanes: pendingProps.lanes,
              firstContext: pendingProps.firstContext,
            };
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      return workInProgress;
    }

    function createFiberFromTypeAndProps(
      type,
      key,
      pendingProps,
      owner,
      mode,
      lanes
    ) {
      var fiberTag = 2;
      owner = type;
      if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
      else if ("string" === typeof type) fiberTag = 5;
      else
        a: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(
              pendingProps.children,
              mode,
              lanes,
              key
            );

          case REACT_STRICT_MODE_TYPE:
            fiberTag = 8;
            mode |= 8;
            break;

          case REACT_PROFILER_TYPE:
            return (
              (type = createFiber(12, pendingProps, key, mode | 2)),
              (type.elementType = REACT_PROFILER_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_SUSPENSE_TYPE:
            return (
              (type = createFiber(13, pendingProps, key, mode)),
              (type.elementType = REACT_SUSPENSE_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_SUSPENSE_LIST_TYPE:
            return (
              (type = createFiber(19, pendingProps, key, mode)),
              (type.elementType = REACT_SUSPENSE_LIST_TYPE),
              (type.lanes = lanes),
              type
            );

          case REACT_OFFSCREEN_TYPE:
            return createFiberFromOffscreen(pendingProps, mode, lanes, key);

          default:
            if ("object" === typeof type && null !== type)
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                  fiberTag = 10;
                  break a;

                case REACT_CONTEXT_TYPE:
                  fiberTag = 9;
                  break a;

                case REACT_FORWARD_REF_TYPE:
                  fiberTag = 11;
                  break a;

                case REACT_MEMO_TYPE:
                  fiberTag = 14;
                  break a;

                case REACT_LAZY_TYPE:
                  fiberTag = 16;
                  owner = null;
                  break a;
              }
            throw Error(
              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
                ((null == type ? type : typeof type) + ".")
            );
        }
      key = createFiber(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = owner;
      key.lanes = lanes;
      return key;
    }

    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiber(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }

    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      pendingProps = createFiber(22, pendingProps, key, mode);
      pendingProps.elementType = REACT_OFFSCREEN_TYPE;
      pendingProps.lanes = lanes;
      pendingProps.stateNode = {};
      return pendingProps;
    }

    function createFiberFromText(content, mode, lanes) {
      content = createFiber(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }

    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiber(
        4,
        null !== portal.children ? portal.children : [],
        portal.key,
        mode
      );
      mode.lanes = lanes;
      mode.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation,
      };
      return mode;
    }

    function FiberRootNode(
      containerInfo,
      tag,
      hydrate,
      identifierPrefix,
      onRecoverableError
    ) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.finishedWork =
        this.pingCache =
        this.current =
        this.pendingChildren =
          null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = createLaneMap(0);
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes =
        this.finishedLanes =
        this.mutableReadLanes =
        this.expiredLanes =
        this.pingedLanes =
        this.suspendedLanes =
        this.pendingLanes =
          0;
      this.entanglements = createLaneMap(0);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
    }

    function createPortal(children, containerInfo, implementation) {
      var key =
        3 < arguments.length && undefined !== arguments[3]
          ? arguments[3]
          : null;
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation,
      };
    }

    function findHostInstance(component) {
      var fiber = component._reactInternals;

      if (undefined === fiber) {
        if ("function" === typeof component.render)
          throw Error("Unable to find node on an unmounted component.");
        component = Object.keys(component).join(",");
        throw Error(
          "Argument appears to not be a ReactComponent. Keys: " + component
        );
      }

      component = findCurrentHostFiber(fiber);
      return null === component ? null : component.stateNode;
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current = container.current,
        eventTime = requestEventTime(),
        lane = requestUpdateLane(current);

      a: if (parentComponent) {
        parentComponent = parentComponent._reactInternals;

        b: {
          if (
            getNearestMountedFiber(parentComponent) !== parentComponent ||
            1 !== parentComponent.tag
          )
            throw Error(
              "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."
            );
          var JSCompiler_inline_result = parentComponent;

          do {
            switch (JSCompiler_inline_result.tag) {
              case 3:
                JSCompiler_inline_result =
                  JSCompiler_inline_result.stateNode.context;
                break b;

              case 1:
                if (isContextProvider(JSCompiler_inline_result.type)) {
                  JSCompiler_inline_result =
                    JSCompiler_inline_result.stateNode
                      .__reactInternalMemoizedMergedChildContext;
                  break b;
                }
            }

            JSCompiler_inline_result = JSCompiler_inline_result.return;
          } while (null !== JSCompiler_inline_result);

          throw Error(
            "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."
          );
        }

        if (1 === parentComponent.tag) {
          var Component = parentComponent.type;

          if (isContextProvider(Component)) {
            parentComponent = processChildContext(
              parentComponent,
              Component,
              JSCompiler_inline_result
            );
            break a;
          }
        }

        parentComponent = JSCompiler_inline_result;
      } else parentComponent = emptyContextObject;

      null === container.context
        ? (container.context = parentComponent)
        : (container.pendingContext = parentComponent);
      container = createUpdate(eventTime, lane);
      container.payload = {
        element: element,
      };
      callback = undefined === callback ? null : callback;
      null !== callback && (container.callback = callback);
      enqueueUpdate(current, container);
      element = scheduleUpdateOnFiber(current, lane, eventTime);
      null !== element && entangleTransitions(element, current, lane);
      return lane;
    }

    function emptyFindFiberByHostInstance() {
      return null;
    }

    function findNodeHandle(componentOrHandle) {
      if (null == componentOrHandle) return null;
      if ("number" === typeof componentOrHandle) return componentOrHandle;
      if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
      if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag)
        return componentOrHandle.canonical._nativeTag;
      componentOrHandle = findHostInstance(componentOrHandle);
      return null == componentOrHandle
        ? componentOrHandle
        : componentOrHandle.canonical
        ? componentOrHandle.canonical._nativeTag
        : componentOrHandle._nativeTag;
    }

    function onRecoverableError(error) {
      console.error(error);
    }

    batchedUpdatesImpl = function batchedUpdatesImpl(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= 1;

      try {
        return fn(a);
      } finally {
        (executionContext = prevExecutionContext),
          0 === executionContext &&
            ((workInProgressRootRenderTargetTime = now() + 500),
            includesLegacySyncCallbacks && flushSyncCallbacks());
      }
    };

    var roots = new Map(),
      devToolsConfig$jscomp$inline_925 = {
        findFiberByHostInstance: getInstanceFromInstance,
        bundleType: 0,
        version: "18.2.0-next-d300cebde-20220601",
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: function getInspectorDataForViewTag() {
            throw Error(
              "getInspectorDataForViewTag() is not available in production"
            );
          },
          getInspectorDataForViewAtPoint: function () {
            throw Error(
              "getInspectorDataForViewAtPoint() is not available in production."
            );
          }.bind(null, findNodeHandle),
        },
      };
    var internals$jscomp$inline_1171 = {
      bundleType: devToolsConfig$jscomp$inline_925.bundleType,
      version: devToolsConfig$jscomp$inline_925.version,
      rendererPackageName: devToolsConfig$jscomp$inline_925.rendererPackageName,
      rendererConfig: devToolsConfig$jscomp$inline_925.rendererConfig,
      overrideHookState: null,
      overrideHookStateDeletePath: null,
      overrideHookStateRenamePath: null,
      overrideProps: null,
      overridePropsDeletePath: null,
      overridePropsRenamePath: null,
      setErrorHandler: null,
      setSuspenseHandler: null,
      scheduleUpdate: null,
      currentDispatcherRef: ReactSharedInternals.ReactCurrentDispatcher,
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance:
        devToolsConfig$jscomp$inline_925.findFiberByHostInstance ||
        emptyFindFiberByHostInstance,
      findHostInstancesForRefresh: null,
      scheduleRefresh: null,
      scheduleRoot: null,
      setRefreshHandler: null,
      getCurrentFiber: null,
      reconcilerVersion: "18.2.0-next-d300cebde-20220601",
    };

    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var hook$jscomp$inline_1172 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (
        !hook$jscomp$inline_1172.isDisabled &&
        hook$jscomp$inline_1172.supportsFiber
      )
        try {
          (rendererID = hook$jscomp$inline_1172.inject(
            internals$jscomp$inline_1171
          )),
            (injectedHook = hook$jscomp$inline_1172);
        } catch (err) {}
    }

    exports.createPortal = function (children, containerTag) {
      return createPortal(
        children,
        containerTag,
        null,
        2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null
      );
    };

    exports.dispatchCommand = function (handle, command, args) {
      null != handle._nativeTag &&
        (null != handle._internalInstanceHandle
          ? ((handle = handle._internalInstanceHandle.stateNode),
            null != handle &&
              nativeFabricUIManager.dispatchCommand(handle.node, command, args))
          : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(
              handle._nativeTag,
              command,
              args
            ));
    };

    exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
      if (null == componentOrHandle) return null;
      if (componentOrHandle._nativeTag) return componentOrHandle;
      if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag)
        return componentOrHandle.canonical;
      componentOrHandle = findHostInstance(componentOrHandle);
      return null == componentOrHandle
        ? componentOrHandle
        : componentOrHandle.canonical
        ? componentOrHandle.canonical
        : componentOrHandle;
    };

    exports.findNodeHandle = findNodeHandle;
    exports.getInspectorDataForInstance = undefined;

    exports.render = function (
      element,
      containerTag,
      callback,
      concurrentRoot
    ) {
      var root = roots.get(containerTag);
      root ||
        ((root = concurrentRoot ? 1 : 0),
        (concurrentRoot = new FiberRootNode(
          containerTag,
          root,
          false,
          "",
          onRecoverableError
        )),
        (root = createFiber(3, null, null, 1 === root ? 1 : 0)),
        (concurrentRoot.current = root),
        (root.stateNode = concurrentRoot),
        (root.memoizedState = {
          element: null,
          isDehydrated: false,
          cache: null,
          transitions: null,
          pendingSuspenseBoundaries: null,
        }),
        initializeUpdateQueue(root),
        (root = concurrentRoot),
        roots.set(containerTag, root));
      updateContainer(element, root, null, callback);

      a: if (((element = root.current), element.child))
        switch (element.child.tag) {
          case 5:
            element = element.child.stateNode.canonical;
            break a;

          default:
            element = element.child.stateNode;
        }
      else element = null;

      return element;
    };

    exports.sendAccessibilityEvent = function (handle, eventType) {
      null != handle._nativeTag &&
        (null != handle._internalInstanceHandle
          ? ((handle = handle._internalInstanceHandle.stateNode),
            null != handle &&
              nativeFabricUIManager.sendAccessibilityEvent(
                handle.node,
                eventType
              ))
          : ReactNativePrivateInterface.legacySendAccessibilityEvent(
              handle._nativeTag,
              eventType
            ));
    };

    exports.stopSurface = function (containerTag) {
      var root = roots.get(containerTag);
      root &&
        updateContainer(null, root, null, function () {
          roots.delete(containerTag);
        });
    };

    exports.unmountComponentAtNode = function (containerTag) {
      this.stopSurface(containerTag);
    };
  },
  125,
  [20, 118, 1, 126]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    {
      module.exports = _$$_REQUIRE(_dependencyMap[0]);
    }
  },
  126,
  [127]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    /**
     * @license React
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";

    function f(a, b) {
      var c = a.length;
      a.push(b);

      a: for (; 0 < c; ) {
        var d = (c - 1) >>> 1,
          e = a[d];
        if (0 < g(e, b)) (a[d] = b), (a[c] = e), (c = d);
        else break a;
      }
    }

    function h(a) {
      return 0 === a.length ? null : a[0];
    }

    function k(a) {
      if (0 === a.length) return null;
      var b = a[0],
        c = a.pop();

      if (c !== b) {
        a[0] = c;

        a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
          var m = 2 * (d + 1) - 1,
            C = a[m],
            n = m + 1,
            x = a[n];
          if (0 > g(C, c))
            n < e && 0 > g(x, C)
              ? ((a[d] = x), (a[n] = c), (d = n))
              : ((a[d] = C), (a[m] = c), (d = m));
          else if (n < e && 0 > g(x, c)) (a[d] = x), (a[n] = c), (d = n);
          else break a;
        }
      }

      return b;
    }

    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }

    if (
      "object" === typeof performance &&
      "function" === typeof performance.now
    ) {
      var l = performance;

      exports.unstable_now = function () {
        return l.now();
      };
    } else {
      var p = Date,
        q = p.now();

      exports.unstable_now = function () {
        return p.now() - q;
      };
    }

    var r = [],
      t = [],
      u = 1,
      v = null,
      y = 3,
      z = false,
      A = false,
      B = false,
      D = "function" === typeof setTimeout ? setTimeout : null,
      E = "function" === typeof clearTimeout ? clearTimeout : null,
      F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator &&
      undefined !== navigator.scheduling &&
      undefined !== navigator.scheduling.isInputPending &&
      navigator.scheduling.isInputPending.bind(navigator.scheduling);

    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback) k(t);
        else if (b.startTime <= a)
          k(t), (b.sortIndex = b.expirationTime), f(r, b);
        else break;
        b = h(t);
      }
    }

    function H(a) {
      B = false;
      G(a);
      if (!A)
        if (null !== h(r)) (A = true), I(J);
        else {
          var b = h(t);
          null !== b && K(H, b.startTime - a);
        }
    }

    function J(a, b) {
      A = false;
      B && ((B = false), E(L), (L = -1));
      z = true;
      var c = y;

      try {
        G(b);

        for (
          v = h(r);
          null !== v && (!(v.expirationTime > b) || (a && !M()));

        ) {
          var d = v.callback;

          if ("function" === typeof d) {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? (v.callback = e) : v === h(r) && k(r);
            G(b);
          } else k(r);

          v = h(r);
        }

        if (null !== v) var w = true;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b);
          w = false;
        }
        return w;
      } finally {
        (v = null), (y = c), (z = false);
      }
    }

    var N = false,
      O = null,
      L = -1,
      P = 5,
      Q = -1;

    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }

    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;

        try {
          b = O(true, a);
        } finally {
          b ? S() : ((N = false), (O = null));
        }
      } else N = false;
    }

    var S;
    if ("function" === typeof F)
      S = function S() {
        F(R);
      };
    else if ("undefined" !== typeof MessageChannel) {
      var T = new MessageChannel(),
        U = T.port2;
      T.port1.onmessage = R;

      S = function S() {
        U.postMessage(null);
      };
    } else
      S = function S() {
        D(R, 0);
      };

    function I(a) {
      O = a;
      N || ((N = true), S());
    }

    function K(a, b) {
      L = D(function () {
        a(exports.unstable_now());
      }, b);
    }

    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;

    exports.unstable_cancelCallback = function (a) {
      a.callback = null;
    };

    exports.unstable_continueExecution = function () {
      A || z || ((A = true), I(J));
    };

    exports.unstable_forceFrameRate = function (a) {
      0 > a || 125 < a
        ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          )
        : (P = 0 < a ? Math.floor(1e3 / a) : 5);
    };

    exports.unstable_getCurrentPriorityLevel = function () {
      return y;
    };

    exports.unstable_getFirstCallbackNode = function () {
      return h(r);
    };

    exports.unstable_next = function (a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;

        default:
          b = y;
      }

      var c = y;
      y = b;

      try {
        return a();
      } finally {
        y = c;
      }
    };

    exports.unstable_pauseExecution = function () {};

    exports.unstable_requestPaint = function () {};

    exports.unstable_runWithPriority = function (a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;

        default:
          a = 3;
      }

      var c = y;
      y = a;

      try {
        return b();
      } finally {
        y = c;
      }
    };

    exports.unstable_scheduleCallback = function (a, b, c) {
      var d = exports.unstable_now();
      "object" === typeof c && null !== c
        ? ((c = c.delay), (c = "number" === typeof c && 0 < c ? d + c : d))
        : (c = d);

      switch (a) {
        case 1:
          var e = -1;
          break;

        case 2:
          e = 250;
          break;

        case 5:
          e = 1073741823;
          break;

        case 4:
          e = 1e4;
          break;

        default:
          e = 5e3;
      }

      e = c + e;
      a = {
        id: u++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1,
      };
      c > d
        ? ((a.sortIndex = c),
          f(t, a),
          null === h(r) &&
            a === h(t) &&
            (B ? (E(L), (L = -1)) : (B = true), K(H, c - d)))
        : ((a.sortIndex = e), f(r, a), A || z || ((A = true), I(J)));
      return a;
    };

    exports.unstable_shouldYield = M;

    exports.unstable_wrapCallback = function (a) {
      var b = y;
      return function () {
        var c = y;
        y = b;

        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  },
  127,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.get = get;
    exports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;
    exports.setRuntimeConfigProvider = setRuntimeConfigProvider;
    exports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;

    var StaticViewConfigValidator = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ViewConfig = _$$_REQUIRE(_dependencyMap[2]);

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _ReactNativeViewConfigRegistry = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getNativeComponentAttributes = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _verifyComponentAttributeEquivalence = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var getRuntimeConfig;

    function setRuntimeConfigProvider(runtimeConfigProvider) {
      (0, _invariant.default)(
        getRuntimeConfig == null,
        "NativeComponentRegistry.setRuntimeConfigProvider() called more than once."
      );
      getRuntimeConfig = runtimeConfigProvider;
    }

    function get(name, viewConfigProvider) {
      _ReactNativeViewConfigRegistry.default.register(name, function () {
        var _getRuntimeConfig;

        var _ref =
            (_getRuntimeConfig =
              getRuntimeConfig == null ? undefined : getRuntimeConfig(name)) !=
            null
              ? _getRuntimeConfig
              : {
                  native: true,
                  strict: false,
                  verify: false,
                },
          native = _ref.native,
          strict = _ref.strict,
          verify = _ref.verify;

        var viewConfig = native
          ? (0, _getNativeComponentAttributes.default)(name)
          : (0, _ViewConfig.createViewConfig)(viewConfigProvider());

        if (verify) {
          var nativeViewConfig = native
            ? viewConfig
            : (0, _getNativeComponentAttributes.default)(name);
          var staticViewConfig = native
            ? (0, _ViewConfig.createViewConfig)(viewConfigProvider())
            : viewConfig;

          if (strict) {
            var validationOutput = StaticViewConfigValidator.validate(
              name,
              nativeViewConfig,
              staticViewConfig
            );

            if (validationOutput.type === "invalid") {
              console.error(
                StaticViewConfigValidator.stringifyValidationResult(
                  name,
                  validationOutput
                )
              );
            }
          } else {
            (0, _verifyComponentAttributeEquivalence.default)(
              nativeViewConfig,
              staticViewConfig
            );
          }
        }

        return viewConfig;
      });

      return name;
    }

    function getWithFallback_DEPRECATED(name, viewConfigProvider) {
      if (getRuntimeConfig == null) {
        if (hasNativeViewConfig(name)) {
          return get(name, viewConfigProvider);
        }
      } else {
        if (getRuntimeConfig(name) != null) {
          return get(name, viewConfigProvider);
        }
      }

      var FallbackNativeComponent = function FallbackNativeComponent(props) {
        return null;
      };

      FallbackNativeComponent.displayName = "Fallback(" + name + ")";
      return FallbackNativeComponent;
    }

    function hasNativeViewConfig(name) {
      (0, _invariant.default)(
        getRuntimeConfig == null,
        "Unexpected invocation!"
      );
      return _UIManager.default.getViewManagerConfig(name) != null;
    }

    function unstable_hasStaticViewConfig(name) {
      var _getRuntimeConfig2;

      var _ref2 =
          (_getRuntimeConfig2 =
            getRuntimeConfig == null ? undefined : getRuntimeConfig(name)) !=
          null
            ? _getRuntimeConfig2
            : {
                native: true,
              },
        native = _ref2.native;

      return !native;
    }
  },
  128,
  [7, 129, 131, 142, 120, 148, 162, 4, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.stringifyValidationResult = stringifyValidationResult;
    exports.validate = validate;

    var _toConsumableArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ViewConfigIgnore = _$$_REQUIRE(_dependencyMap[2]);

    function validate(name, nativeViewConfig, staticViewConfig) {
      var differences = [];
      accumulateDifferences(
        differences,
        [],
        {
          bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
          directEventTypes: nativeViewConfig.directEventTypes,
          uiViewClassName: nativeViewConfig.uiViewClassName,
          validAttributes: nativeViewConfig.validAttributes,
        },
        {
          bubblingEventTypes: staticViewConfig.bubblingEventTypes,
          directEventTypes: staticViewConfig.directEventTypes,
          uiViewClassName: staticViewConfig.uiViewClassName,
          validAttributes: staticViewConfig.validAttributes,
        }
      );

      if (differences.length === 0) {
        return {
          type: "valid",
        };
      }

      return {
        type: "invalid",
        differences: differences,
      };
    }

    function stringifyValidationResult(name, validationResult) {
      var differences = validationResult.differences;
      return [
        "StaticViewConfigValidator: Invalid static view config for '" +
          name +
          "'.",
        "",
      ]
        .concat(
          (0, _toConsumableArray2.default)(
            differences.map(function (difference) {
              var type = difference.type,
                path = difference.path;

              switch (type) {
                case "missing":
                  return "- '" + path.join(".") + "' is missing.";

                case "unequal":
                  return "- '" + path.join(".") + "' is the wrong value.";

                case "unexpected":
                  return (
                    "- '" +
                    path.join(".") +
                    "' is present but not expected to be."
                  );
              }
            })
          ),
          [""]
        )
        .join("\n");
    }

    function accumulateDifferences(
      differences,
      path,
      nativeObject,
      staticObject
    ) {
      for (var nativeKey in nativeObject) {
        var nativeValue = nativeObject[nativeKey];

        if (!staticObject.hasOwnProperty(nativeKey)) {
          differences.push({
            path: [].concat((0, _toConsumableArray2.default)(path), [
              nativeKey,
            ]),
            type: "missing",
            nativeValue: nativeValue,
          });
          continue;
        }

        var staticValue = staticObject[nativeKey];
        var nativeValueIfObject = ifObject(nativeValue);

        if (nativeValueIfObject != null) {
          var staticValueIfObject = ifObject(staticValue);

          if (staticValueIfObject != null) {
            path.push(nativeKey);
            accumulateDifferences(
              differences,
              path,
              nativeValueIfObject,
              staticValueIfObject
            );
            path.pop();
            continue;
          }
        }

        if (nativeValue !== staticValue) {
          differences.push({
            path: [].concat((0, _toConsumableArray2.default)(path), [
              nativeKey,
            ]),
            type: "unequal",
            nativeValue: nativeValue,
            staticValue: staticValue,
          });
        }
      }

      for (var staticKey in staticObject) {
        if (
          !nativeObject.hasOwnProperty(staticKey) &&
          !(0, _ViewConfigIgnore.isIgnored)(staticObject[staticKey])
        ) {
          differences.push({
            path: [].concat((0, _toConsumableArray2.default)(path), [
              staticKey,
            ]),
            type: "unexpected",
            staticValue: staticObject[staticKey],
          });
        }
      }
    }

    function ifObject(value) {
      return typeof value === "object" && !Array.isArray(value) ? value : null;
    }
  },
  129,
  [7, 10, 130]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.ConditionallyIgnoredEventHandlers =
      ConditionallyIgnoredEventHandlers;
    exports.DynamicallyInjectedByGestureHandler =
      DynamicallyInjectedByGestureHandler;
    exports.isIgnored = isIgnored;

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var ignoredViewConfigProps = new WeakSet();

    function DynamicallyInjectedByGestureHandler(object) {
      ignoredViewConfigProps.add(object);
      return object;
    }

    function ConditionallyIgnoredEventHandlers(value) {
      if (
        _Platform.default.OS === "ios" &&
        !(global.RN$ViewConfigEventValidAttributesDisabled === true)
      ) {
        return value;
      }

      return undefined;
    }

    function isIgnored(value) {
      if (typeof value === "object" && value != null) {
        return ignoredViewConfigProps.has(value);
      }

      return false;
    }
  },
  130,
  [7, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.createViewConfig = createViewConfig;

    var _PlatformBaseViewConfig = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    function createViewConfig(partialViewConfig) {
      return {
        uiViewClassName: partialViewConfig.uiViewClassName,
        Commands: {},
        bubblingEventTypes: composeIndexers(
          _PlatformBaseViewConfig.default.bubblingEventTypes,
          partialViewConfig.bubblingEventTypes
        ),
        directEventTypes: composeIndexers(
          _PlatformBaseViewConfig.default.directEventTypes,
          partialViewConfig.directEventTypes
        ),
        validAttributes: composeIndexers(
          _PlatformBaseViewConfig.default.validAttributes,
          partialViewConfig.validAttributes
        ),
      };
    }

    function composeIndexers(maybeA, maybeB) {
      var _ref;

      return maybeA == null || maybeB == null
        ? (_ref = maybeA != null ? maybeA : maybeB) != null
          ? _ref
          : {}
        : Object.assign({}, maybeA, maybeB);
    }
  },
  131,
  [7, 132]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _BaseViewConfig = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var PlatformBaseViewConfig = _BaseViewConfig.default;
    var _default = PlatformBaseViewConfig;
    exports.default = _default;
  },
  132,
  [7, 133]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _ViewConfigIgnore = _$$_REQUIRE(_dependencyMap[1]);

    var _ReactNativeStyleAttributes = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var bubblingEventTypes = {
      topChange: {
        phasedRegistrationNames: {
          captured: "onChangeCapture",
          bubbled: "onChange",
        },
      },
      topSelect: {
        phasedRegistrationNames: {
          captured: "onSelectCapture",
          bubbled: "onSelect",
        },
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          captured: "onTouchEndCapture",
          bubbled: "onTouchEnd",
        },
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          captured: "onTouchCancelCapture",
          bubbled: "onTouchCancel",
        },
      },
      topTouchStart: {
        phasedRegistrationNames: {
          captured: "onTouchStartCapture",
          bubbled: "onTouchStart",
        },
      },
      topTouchMove: {
        phasedRegistrationNames: {
          captured: "onTouchMoveCapture",
          bubbled: "onTouchMove",
        },
      },
      topPointerCancel: {
        phasedRegistrationNames: {
          captured: "onPointerCancelCapture",
          bubbled: "onPointerCancel",
        },
      },
      topPointerDown: {
        phasedRegistrationNames: {
          captured: "onPointerDownCapture",
          bubbled: "onPointerDown",
        },
      },
      topPointerEnter: {
        phasedRegistrationNames: {
          captured: "onPointerEnterCapture",
          bubbled: "onPointerEnter",
          skipBubbling: true,
        },
      },
      topPointerLeave: {
        phasedRegistrationNames: {
          captured: "onPointerLeaveCapture",
          bubbled: "onPointerLeave",
          skipBubbling: true,
        },
      },
      topPointerMove: {
        phasedRegistrationNames: {
          captured: "onPointerMoveCapture",
          bubbled: "onPointerMove",
        },
      },
      topPointerUp: {
        phasedRegistrationNames: {
          captured: "onPointerUpCapture",
          bubbled: "onPointerUp",
        },
      },
    };
    var directEventTypes = {
      topAccessibilityAction: {
        registrationName: "onAccessibilityAction",
      },
      onGestureHandlerEvent: (0,
      _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: "onGestureHandlerEvent",
      }),
      onGestureHandlerStateChange: (0,
      _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
        registrationName: "onGestureHandlerStateChange",
      }),
      topContentSizeChange: {
        registrationName: "onContentSizeChange",
      },
      topScrollBeginDrag: {
        registrationName: "onScrollBeginDrag",
      },
      topMessage: {
        registrationName: "onMessage",
      },
      topSelectionChange: {
        registrationName: "onSelectionChange",
      },
      topLoadingFinish: {
        registrationName: "onLoadingFinish",
      },
      topMomentumScrollEnd: {
        registrationName: "onMomentumScrollEnd",
      },
      topClick: {
        registrationName: "onClick",
      },
      topLoadingStart: {
        registrationName: "onLoadingStart",
      },
      topLoadingError: {
        registrationName: "onLoadingError",
      },
      topMomentumScrollBegin: {
        registrationName: "onMomentumScrollBegin",
      },
      topScrollEndDrag: {
        registrationName: "onScrollEndDrag",
      },
      topScroll: {
        registrationName: "onScroll",
      },
      topLayout: {
        registrationName: "onLayout",
      },
    };
    var validAttributesForNonEventProps = {
      backgroundColor: {
        process: _$$_REQUIRE(_dependencyMap[3]),
      },
      transform: true,
      opacity: true,
      elevation: true,
      shadowColor: {
        process: _$$_REQUIRE(_dependencyMap[3]),
      },
      zIndex: true,
      renderToHardwareTextureAndroid: true,
      testID: true,
      nativeID: true,
      accessibilityLabelledBy: true,
      accessibilityLabel: true,
      accessibilityHint: true,
      accessibilityRole: true,
      accessibilityState: true,
      accessibilityActions: true,
      accessibilityValue: true,
      importantForAccessibility: true,
      rotation: true,
      scaleX: true,
      scaleY: true,
      translateX: true,
      translateY: true,
      accessibilityLiveRegion: true,
      width: true,
      minWidth: true,
      collapsable: true,
      maxWidth: true,
      height: true,
      minHeight: true,
      maxHeight: true,
      flex: true,
      flexGrow: true,
      flexShrink: true,
      flexBasis: true,
      aspectRatio: true,
      flexDirection: true,
      flexWrap: true,
      alignSelf: true,
      alignItems: true,
      alignContent: true,
      justifyContent: true,
      overflow: true,
      display: true,
      margin: true,
      marginVertical: true,
      marginHorizontal: true,
      marginStart: true,
      marginEnd: true,
      marginTop: true,
      marginBottom: true,
      marginLeft: true,
      marginRight: true,
      padding: true,
      paddingVertical: true,
      paddingHorizontal: true,
      paddingStart: true,
      paddingEnd: true,
      paddingTop: true,
      paddingBottom: true,
      paddingLeft: true,
      paddingRight: true,
      borderWidth: true,
      borderStartWidth: true,
      borderEndWidth: true,
      borderTopWidth: true,
      borderBottomWidth: true,
      borderLeftWidth: true,
      borderRightWidth: true,
      start: true,
      end: true,
      left: true,
      right: true,
      top: true,
      bottom: true,
      position: true,
      style: _ReactNativeStyleAttributes.default,
    };
    var validAttributesForEventProps = {
      onLayout: true,
      onMoveShouldSetResponder: true,
      onMoveShouldSetResponderCapture: true,
      onStartShouldSetResponder: true,
      onStartShouldSetResponderCapture: true,
      onResponderGrant: true,
      onResponderReject: true,
      onResponderStart: true,
      onResponderEnd: true,
      onResponderRelease: true,
      onResponderMove: true,
      onResponderTerminate: true,
      onResponderTerminationRequest: true,
      onShouldBlockNativeResponder: true,
      onTouchStart: true,
      onTouchMove: true,
      onTouchEnd: true,
      onTouchCancel: true,
      onPointerEnter: true,
      onPointerLeave: true,
      onPointerMove: true,
    };
    var PlatformBaseViewConfigAndroid = {
      directEventTypes: directEventTypes,
      bubblingEventTypes: bubblingEventTypes,
      validAttributes: Object.assign(
        {},
        validAttributesForNonEventProps,
        validAttributesForEventProps
      ),
    };
    var _default = PlatformBaseViewConfigAndroid;
    exports.default = _default;
  },
  133,
  [7, 130, 134, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _processTransform = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _sizesDiffer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var colorAttributes = {
      process: _processColor.default,
    };
    var ReactNativeStyleAttributes = {
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      borderBottomWidth: true,
      borderEndWidth: true,
      borderLeftWidth: true,
      borderRightWidth: true,
      borderStartWidth: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      direction: true,
      display: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      height: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      position: true,
      right: true,
      start: true,
      top: true,
      width: true,
      zIndex: true,
      elevation: true,
      shadowColor: colorAttributes,
      shadowOffset: {
        diff: _sizesDiffer.default,
      },
      shadowOpacity: true,
      shadowRadius: true,
      transform: {
        process: _processTransform.default,
      },
      backfaceVisibility: true,
      backgroundColor: colorAttributes,
      borderBottomColor: colorAttributes,
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderColor: colorAttributes,
      borderEndColor: colorAttributes,
      borderLeftColor: colorAttributes,
      borderRadius: true,
      borderRightColor: colorAttributes,
      borderStartColor: colorAttributes,
      borderStyle: true,
      borderTopColor: colorAttributes,
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      opacity: true,
      color: colorAttributes,
      fontFamily: true,
      fontSize: true,
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      includeFontPadding: true,
      letterSpacing: true,
      lineHeight: true,
      textAlign: true,
      textAlignVertical: true,
      textDecorationColor: colorAttributes,
      textDecorationLine: true,
      textDecorationStyle: true,
      textShadowColor: colorAttributes,
      textShadowOffset: true,
      textShadowRadius: true,
      textTransform: true,
      writingDirection: true,
      overlayColor: colorAttributes,
      resizeMode: true,
      tintColor: colorAttributes,
    };
    module.exports = ReactNativeStyleAttributes;
  },
  134,
  [7, 135, 139, 141]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var Platform = _$$_REQUIRE(_dependencyMap[0]);

    var normalizeColor = _$$_REQUIRE(_dependencyMap[1]);

    function processColor(color) {
      if (color === undefined || color === null) {
        return color;
      }

      var normalizedColor = normalizeColor(color);

      if (normalizedColor === null || normalizedColor === undefined) {
        return undefined;
      }

      if (typeof normalizedColor === "object") {
        var processColorObject = _$$_REQUIRE(
          _dependencyMap[2]
        ).processColorObject;

        var processedColorObj = processColorObject(normalizedColor);

        if (processedColorObj != null) {
          return processedColorObj;
        }
      }

      if (typeof normalizedColor !== "number") {
        return null;
      }

      normalizedColor =
        ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;
      {
        normalizedColor = normalizedColor | 0x0;
      }
      return normalizedColor;
    }

    module.exports = processColor;
  },
  135,
  [54, 136, 138]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _normalizeColor2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    function normalizeColor(color) {
      if (typeof color === "object" && color != null) {
        var _require = _$$_REQUIRE(_dependencyMap[2]),
          normalizeColorObject = _require.normalizeColorObject;

        var normalizedColor = normalizeColorObject(color);

        if (normalizedColor != null) {
          return normalizedColor;
        }
      }

      if (typeof color === "string" || typeof color === "number") {
        return (0, _normalizeColor2.default)(color);
      }
    }

    module.exports = normalizeColor;
  },
  136,
  [7, 137, 138]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function normalizeColor(color) {
      if (typeof color === "number") {
        if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
          return color;
        }

        return null;
      }

      if (typeof color !== "string") {
        return null;
      }

      var matchers = getMatchers();
      var match;

      if ((match = matchers.hex6.exec(color))) {
        return parseInt(match[1] + "ff", 16) >>> 0;
      }

      var colorFromKeyword = normalizeKeyword(color);

      if (colorFromKeyword != null) {
        return colorFromKeyword;
      }

      if ((match = matchers.rgb.exec(color))) {
        return (
          ((parse255(match[1]) << 24) |
            (parse255(match[2]) << 16) |
            (parse255(match[3]) << 8) |
            0x000000ff) >>>
          0
        );
      }

      if ((match = matchers.rgba.exec(color))) {
        return (
          ((parse255(match[1]) << 24) |
            (parse255(match[2]) << 16) |
            (parse255(match[3]) << 8) |
            parse1(match[4])) >>>
          0
        );
      }

      if ((match = matchers.hex3.exec(color))) {
        return (
          parseInt(
            match[1] +
              match[1] +
              match[2] +
              match[2] +
              match[3] +
              match[3] +
              "ff",
            16
          ) >>> 0
        );
      }

      if ((match = matchers.hex8.exec(color))) {
        return parseInt(match[1], 16) >>> 0;
      }

      if ((match = matchers.hex4.exec(color))) {
        return (
          parseInt(
            match[1] +
              match[1] +
              match[2] +
              match[2] +
              match[3] +
              match[3] +
              match[4] +
              match[4],
            16
          ) >>> 0
        );
      }

      if ((match = matchers.hsl.exec(color))) {
        return (
          (hslToRgb(
            parse360(match[1]),
            parsePercentage(match[2]),
            parsePercentage(match[3])
          ) |
            0x000000ff) >>>
          0
        );
      }

      if ((match = matchers.hsla.exec(color))) {
        return (
          (hslToRgb(
            parse360(match[1]),
            parsePercentage(match[2]),
            parsePercentage(match[3])
          ) |
            parse1(match[4])) >>>
          0
        );
      }

      return null;
    }

    function hue2rgb(p, q, t) {
      if (t < 0) {
        t += 1;
      }

      if (t > 1) {
        t -= 1;
      }

      if (t < 0.16666666666666666) {
        return p + (q - p) * 6 * t;
      }

      if (t < 0.5) {
        return q;
      }

      if (t < 0.6666666666666666) {
        return p + (q - p) * (0.6666666666666666 - t) * 6;
      }

      return p;
    }

    function hslToRgb(h, s, l) {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      var r = hue2rgb(p, q, h + 0.3333333333333333);
      var g = hue2rgb(p, q, h);
      var b = hue2rgb(p, q, h - 0.3333333333333333);
      return (
        (Math.round(r * 255) << 24) |
        (Math.round(g * 255) << 16) |
        (Math.round(b * 255) << 8)
      );
    }

    var NUMBER = "[-+]?\\d*\\.?\\d+";
    var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

    function call() {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
    }

    var cachedMatchers;

    function getMatchers() {
      if (cachedMatchers === undefined) {
        cachedMatchers = {
          rgb: new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER)),
          rgba: new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER)),
          hsl: new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
          hsla: new RegExp(
            "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
          ),
          hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#([0-9a-fA-F]{6})$/,
          hex8: /^#([0-9a-fA-F]{8})$/,
        };
      }

      return cachedMatchers;
    }

    function parse255(str) {
      var int = parseInt(str, 10);

      if (int < 0) {
        return 0;
      }

      if (int > 255) {
        return 255;
      }

      return int;
    }

    function parse360(str) {
      var int = parseFloat(str);
      return (((int % 360) + 360) % 360) / 360;
    }

    function parse1(str) {
      var num = parseFloat(str);

      if (num < 0) {
        return 0;
      }

      if (num > 1) {
        return 255;
      }

      return Math.round(num * 255);
    }

    function parsePercentage(str) {
      var int = parseFloat(str);

      if (int < 0) {
        return 0;
      }

      if (int > 100) {
        return 1;
      }

      return int / 100;
    }

    function normalizeKeyword(name) {
      switch (name) {
        case "transparent":
          return 0x00000000;

        case "aliceblue":
          return 0xf0f8ffff;

        case "antiquewhite":
          return 0xfaebd7ff;

        case "aqua":
          return 0x00ffffff;

        case "aquamarine":
          return 0x7fffd4ff;

        case "azure":
          return 0xf0ffffff;

        case "beige":
          return 0xf5f5dcff;

        case "bisque":
          return 0xffe4c4ff;

        case "black":
          return 0x000000ff;

        case "blanchedalmond":
          return 0xffebcdff;

        case "blue":
          return 0x0000ffff;

        case "blueviolet":
          return 0x8a2be2ff;

        case "brown":
          return 0xa52a2aff;

        case "burlywood":
          return 0xdeb887ff;

        case "burntsienna":
          return 0xea7e5dff;

        case "cadetblue":
          return 0x5f9ea0ff;

        case "chartreuse":
          return 0x7fff00ff;

        case "chocolate":
          return 0xd2691eff;

        case "coral":
          return 0xff7f50ff;

        case "cornflowerblue":
          return 0x6495edff;

        case "cornsilk":
          return 0xfff8dcff;

        case "crimson":
          return 0xdc143cff;

        case "cyan":
          return 0x00ffffff;

        case "darkblue":
          return 0x00008bff;

        case "darkcyan":
          return 0x008b8bff;

        case "darkgoldenrod":
          return 0xb8860bff;

        case "darkgray":
          return 0xa9a9a9ff;

        case "darkgreen":
          return 0x006400ff;

        case "darkgrey":
          return 0xa9a9a9ff;

        case "darkkhaki":
          return 0xbdb76bff;

        case "darkmagenta":
          return 0x8b008bff;

        case "darkolivegreen":
          return 0x556b2fff;

        case "darkorange":
          return 0xff8c00ff;

        case "darkorchid":
          return 0x9932ccff;

        case "darkred":
          return 0x8b0000ff;

        case "darksalmon":
          return 0xe9967aff;

        case "darkseagreen":
          return 0x8fbc8fff;

        case "darkslateblue":
          return 0x483d8bff;

        case "darkslategray":
          return 0x2f4f4fff;

        case "darkslategrey":
          return 0x2f4f4fff;

        case "darkturquoise":
          return 0x00ced1ff;

        case "darkviolet":
          return 0x9400d3ff;

        case "deeppink":
          return 0xff1493ff;

        case "deepskyblue":
          return 0x00bfffff;

        case "dimgray":
          return 0x696969ff;

        case "dimgrey":
          return 0x696969ff;

        case "dodgerblue":
          return 0x1e90ffff;

        case "firebrick":
          return 0xb22222ff;

        case "floralwhite":
          return 0xfffaf0ff;

        case "forestgreen":
          return 0x228b22ff;

        case "fuchsia":
          return 0xff00ffff;

        case "gainsboro":
          return 0xdcdcdcff;

        case "ghostwhite":
          return 0xf8f8ffff;

        case "gold":
          return 0xffd700ff;

        case "goldenrod":
          return 0xdaa520ff;

        case "gray":
          return 0x808080ff;

        case "green":
          return 0x008000ff;

        case "greenyellow":
          return 0xadff2fff;

        case "grey":
          return 0x808080ff;

        case "honeydew":
          return 0xf0fff0ff;

        case "hotpink":
          return 0xff69b4ff;

        case "indianred":
          return 0xcd5c5cff;

        case "indigo":
          return 0x4b0082ff;

        case "ivory":
          return 0xfffff0ff;

        case "khaki":
          return 0xf0e68cff;

        case "lavender":
          return 0xe6e6faff;

        case "lavenderblush":
          return 0xfff0f5ff;

        case "lawngreen":
          return 0x7cfc00ff;

        case "lemonchiffon":
          return 0xfffacdff;

        case "lightblue":
          return 0xadd8e6ff;

        case "lightcoral":
          return 0xf08080ff;

        case "lightcyan":
          return 0xe0ffffff;

        case "lightgoldenrodyellow":
          return 0xfafad2ff;

        case "lightgray":
          return 0xd3d3d3ff;

        case "lightgreen":
          return 0x90ee90ff;

        case "lightgrey":
          return 0xd3d3d3ff;

        case "lightpink":
          return 0xffb6c1ff;

        case "lightsalmon":
          return 0xffa07aff;

        case "lightseagreen":
          return 0x20b2aaff;

        case "lightskyblue":
          return 0x87cefaff;

        case "lightslategray":
          return 0x778899ff;

        case "lightslategrey":
          return 0x778899ff;

        case "lightsteelblue":
          return 0xb0c4deff;

        case "lightyellow":
          return 0xffffe0ff;

        case "lime":
          return 0x00ff00ff;

        case "limegreen":
          return 0x32cd32ff;

        case "linen":
          return 0xfaf0e6ff;

        case "magenta":
          return 0xff00ffff;

        case "maroon":
          return 0x800000ff;

        case "mediumaquamarine":
          return 0x66cdaaff;

        case "mediumblue":
          return 0x0000cdff;

        case "mediumorchid":
          return 0xba55d3ff;

        case "mediumpurple":
          return 0x9370dbff;

        case "mediumseagreen":
          return 0x3cb371ff;

        case "mediumslateblue":
          return 0x7b68eeff;

        case "mediumspringgreen":
          return 0x00fa9aff;

        case "mediumturquoise":
          return 0x48d1ccff;

        case "mediumvioletred":
          return 0xc71585ff;

        case "midnightblue":
          return 0x191970ff;

        case "mintcream":
          return 0xf5fffaff;

        case "mistyrose":
          return 0xffe4e1ff;

        case "moccasin":
          return 0xffe4b5ff;

        case "navajowhite":
          return 0xffdeadff;

        case "navy":
          return 0x000080ff;

        case "oldlace":
          return 0xfdf5e6ff;

        case "olive":
          return 0x808000ff;

        case "olivedrab":
          return 0x6b8e23ff;

        case "orange":
          return 0xffa500ff;

        case "orangered":
          return 0xff4500ff;

        case "orchid":
          return 0xda70d6ff;

        case "palegoldenrod":
          return 0xeee8aaff;

        case "palegreen":
          return 0x98fb98ff;

        case "paleturquoise":
          return 0xafeeeeff;

        case "palevioletred":
          return 0xdb7093ff;

        case "papayawhip":
          return 0xffefd5ff;

        case "peachpuff":
          return 0xffdab9ff;

        case "peru":
          return 0xcd853fff;

        case "pink":
          return 0xffc0cbff;

        case "plum":
          return 0xdda0ddff;

        case "powderblue":
          return 0xb0e0e6ff;

        case "purple":
          return 0x800080ff;

        case "rebeccapurple":
          return 0x663399ff;

        case "red":
          return 0xff0000ff;

        case "rosybrown":
          return 0xbc8f8fff;

        case "royalblue":
          return 0x4169e1ff;

        case "saddlebrown":
          return 0x8b4513ff;

        case "salmon":
          return 0xfa8072ff;

        case "sandybrown":
          return 0xf4a460ff;

        case "seagreen":
          return 0x2e8b57ff;

        case "seashell":
          return 0xfff5eeff;

        case "sienna":
          return 0xa0522dff;

        case "silver":
          return 0xc0c0c0ff;

        case "skyblue":
          return 0x87ceebff;

        case "slateblue":
          return 0x6a5acdff;

        case "slategray":
          return 0x708090ff;

        case "slategrey":
          return 0x708090ff;

        case "snow":
          return 0xfffafaff;

        case "springgreen":
          return 0x00ff7fff;

        case "steelblue":
          return 0x4682b4ff;

        case "tan":
          return 0xd2b48cff;

        case "teal":
          return 0x008080ff;

        case "thistle":
          return 0xd8bfd8ff;

        case "tomato":
          return 0xff6347ff;

        case "turquoise":
          return 0x40e0d0ff;

        case "violet":
          return 0xee82eeff;

        case "wheat":
          return 0xf5deb3ff;

        case "white":
          return 0xffffffff;

        case "whitesmoke":
          return 0xf5f5f5ff;

        case "yellow":
          return 0xffff00ff;

        case "yellowgreen":
          return 0x9acd32ff;
      }

      return null;
    }

    module.exports = normalizeColor;
  },
  137,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.processColorObject =
      exports.normalizeColorObject =
      exports.PlatformColor =
        undefined;

    var PlatformColor = function PlatformColor() {
      for (
        var _len = arguments.length, names = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        names[_key] = arguments[_key];
      }

      return {
        resource_paths: names,
      };
    };

    exports.PlatformColor = PlatformColor;

    var normalizeColorObject = function normalizeColorObject(color) {
      if ("resource_paths" in color) {
        return color;
      }

      return null;
    };

    exports.normalizeColorObject = normalizeColorObject;

    var processColorObject = function processColorObject(color) {
      return color;
    };

    exports.processColorObject = processColorObject;
  },
  138,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var MatrixMath = _$$_REQUIRE(_dependencyMap[0]);

    var Platform = _$$_REQUIRE(_dependencyMap[1]);

    var invariant = _$$_REQUIRE(_dependencyMap[2]);

    var stringifySafe = _$$_REQUIRE(_dependencyMap[3]).default;

    function processTransform(transform) {
      {
        return transform;
      }
    }

    function _multiplyTransform(result, matrixMathFunction, args) {
      var matrixToApply = MatrixMath.createIdentityMatrix();
      var argsWithIdentity = [matrixToApply].concat(args);
      matrixMathFunction.apply(this, argsWithIdentity);
      MatrixMath.multiplyInto(result, result, matrixToApply);
    }

    function _convertToRadians(value) {
      var floatValue = parseFloat(value);
      return value.indexOf("rad") > -1
        ? floatValue
        : (floatValue * Math.PI) / 180;
    }

    module.exports = processTransform;
  },
  139,
  [140, 54, 4, 51]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

    var invariant = _$$_REQUIRE(_dependencyMap[1]);

    var MatrixMath = {
      createIdentityMatrix: function createIdentityMatrix() {
        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      },
      createCopy: function createCopy(m) {
        return [
          m[0],
          m[1],
          m[2],
          m[3],
          m[4],
          m[5],
          m[6],
          m[7],
          m[8],
          m[9],
          m[10],
          m[11],
          m[12],
          m[13],
          m[14],
          m[15],
        ];
      },
      createOrthographic: function createOrthographic(
        left,
        right,
        bottom,
        top,
        near,
        far
      ) {
        var a = 2 / (right - left);
        var b = 2 / (top - bottom);
        var c = -2 / (far - near);
        var tx = -(right + left) / (right - left);
        var ty = -(top + bottom) / (top - bottom);
        var tz = -(far + near) / (far - near);
        return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
      },
      createFrustum: function createFrustum(
        left,
        right,
        bottom,
        top,
        near,
        far
      ) {
        var r_width = 1 / (right - left);
        var r_height = 1 / (top - bottom);
        var r_depth = 1 / (near - far);
        var x = 2 * (near * r_width);
        var y = 2 * (near * r_height);
        var A = (right + left) * r_width;
        var B = (top + bottom) * r_height;
        var C = (far + near) * r_depth;
        var D = 2 * (far * near * r_depth);
        return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
      },
      createPerspective: function createPerspective(
        fovInRadians,
        aspect,
        near,
        far
      ) {
        var h = 1 / Math.tan(fovInRadians / 2);
        var r_depth = 1 / (near - far);
        var C = (far + near) * r_depth;
        var D = 2 * (far * near * r_depth);
        return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
      },
      createTranslate2d: function createTranslate2d(x, y) {
        var mat = MatrixMath.createIdentityMatrix();
        MatrixMath.reuseTranslate2dCommand(mat, x, y);
        return mat;
      },
      reuseTranslate2dCommand: function reuseTranslate2dCommand(
        matrixCommand,
        x,
        y
      ) {
        matrixCommand[12] = x;
        matrixCommand[13] = y;
      },
      reuseTranslate3dCommand: function reuseTranslate3dCommand(
        matrixCommand,
        x,
        y,
        z
      ) {
        matrixCommand[12] = x;
        matrixCommand[13] = y;
        matrixCommand[14] = z;
      },
      createScale: function createScale(factor) {
        var mat = MatrixMath.createIdentityMatrix();
        MatrixMath.reuseScaleCommand(mat, factor);
        return mat;
      },
      reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
        matrixCommand[0] = factor;
        matrixCommand[5] = factor;
      },
      reuseScale3dCommand: function reuseScale3dCommand(
        matrixCommand,
        x,
        y,
        z
      ) {
        matrixCommand[0] = x;
        matrixCommand[5] = y;
        matrixCommand[10] = z;
      },
      reusePerspectiveCommand: function reusePerspectiveCommand(
        matrixCommand,
        p
      ) {
        matrixCommand[11] = -1 / p;
      },
      reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
        matrixCommand[0] = factor;
      },
      reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
        matrixCommand[5] = factor;
      },
      reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
        matrixCommand[10] = factor;
      },
      reuseRotateXCommand: function reuseRotateXCommand(
        matrixCommand,
        radians
      ) {
        matrixCommand[5] = Math.cos(radians);
        matrixCommand[6] = Math.sin(radians);
        matrixCommand[9] = -Math.sin(radians);
        matrixCommand[10] = Math.cos(radians);
      },
      reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
        matrixCommand[0] = Math.cos(amount);
        matrixCommand[2] = -Math.sin(amount);
        matrixCommand[8] = Math.sin(amount);
        matrixCommand[10] = Math.cos(amount);
      },
      reuseRotateZCommand: function reuseRotateZCommand(
        matrixCommand,
        radians
      ) {
        matrixCommand[0] = Math.cos(radians);
        matrixCommand[1] = Math.sin(radians);
        matrixCommand[4] = -Math.sin(radians);
        matrixCommand[5] = Math.cos(radians);
      },
      createRotateZ: function createRotateZ(radians) {
        var mat = MatrixMath.createIdentityMatrix();
        MatrixMath.reuseRotateZCommand(mat, radians);
        return mat;
      },
      reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
        matrixCommand[4] = Math.tan(radians);
      },
      reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
        matrixCommand[1] = Math.tan(radians);
      },
      multiplyInto: function multiplyInto(out, a, b) {
        var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
        var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[4];
        b1 = b[5];
        b2 = b[6];
        b3 = b[7];
        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[8];
        b1 = b[9];
        b2 = b[10];
        b3 = b[11];
        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[12];
        b1 = b[13];
        b2 = b[14];
        b3 = b[15];
        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      },
      determinant: function determinant(matrix) {
        var _matrix = _slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

        return (
          m03 * m12 * m21 * m30 -
          m02 * m13 * m21 * m30 -
          m03 * m11 * m22 * m30 +
          m01 * m13 * m22 * m30 +
          m02 * m11 * m23 * m30 -
          m01 * m12 * m23 * m30 -
          m03 * m12 * m20 * m31 +
          m02 * m13 * m20 * m31 +
          m03 * m10 * m22 * m31 -
          m00 * m13 * m22 * m31 -
          m02 * m10 * m23 * m31 +
          m00 * m12 * m23 * m31 +
          m03 * m11 * m20 * m32 -
          m01 * m13 * m20 * m32 -
          m03 * m10 * m21 * m32 +
          m00 * m13 * m21 * m32 +
          m01 * m10 * m23 * m32 -
          m00 * m11 * m23 * m32 -
          m02 * m11 * m20 * m33 +
          m01 * m12 * m20 * m33 +
          m02 * m10 * m21 * m33 -
          m00 * m12 * m21 * m33 -
          m01 * m10 * m22 * m33 +
          m00 * m11 * m22 * m33
        );
      },
      inverse: function inverse(matrix) {
        var det = MatrixMath.determinant(matrix);

        if (!det) {
          return matrix;
        }

        var _matrix2 = _slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

        return [
          (m12 * m23 * m31 -
            m13 * m22 * m31 +
            m13 * m21 * m32 -
            m11 * m23 * m32 -
            m12 * m21 * m33 +
            m11 * m22 * m33) /
            det,
          (m03 * m22 * m31 -
            m02 * m23 * m31 -
            m03 * m21 * m32 +
            m01 * m23 * m32 +
            m02 * m21 * m33 -
            m01 * m22 * m33) /
            det,
          (m02 * m13 * m31 -
            m03 * m12 * m31 +
            m03 * m11 * m32 -
            m01 * m13 * m32 -
            m02 * m11 * m33 +
            m01 * m12 * m33) /
            det,
          (m03 * m12 * m21 -
            m02 * m13 * m21 -
            m03 * m11 * m22 +
            m01 * m13 * m22 +
            m02 * m11 * m23 -
            m01 * m12 * m23) /
            det,
          (m13 * m22 * m30 -
            m12 * m23 * m30 -
            m13 * m20 * m32 +
            m10 * m23 * m32 +
            m12 * m20 * m33 -
            m10 * m22 * m33) /
            det,
          (m02 * m23 * m30 -
            m03 * m22 * m30 +
            m03 * m20 * m32 -
            m00 * m23 * m32 -
            m02 * m20 * m33 +
            m00 * m22 * m33) /
            det,
          (m03 * m12 * m30 -
            m02 * m13 * m30 -
            m03 * m10 * m32 +
            m00 * m13 * m32 +
            m02 * m10 * m33 -
            m00 * m12 * m33) /
            det,
          (m02 * m13 * m20 -
            m03 * m12 * m20 +
            m03 * m10 * m22 -
            m00 * m13 * m22 -
            m02 * m10 * m23 +
            m00 * m12 * m23) /
            det,
          (m11 * m23 * m30 -
            m13 * m21 * m30 +
            m13 * m20 * m31 -
            m10 * m23 * m31 -
            m11 * m20 * m33 +
            m10 * m21 * m33) /
            det,
          (m03 * m21 * m30 -
            m01 * m23 * m30 -
            m03 * m20 * m31 +
            m00 * m23 * m31 +
            m01 * m20 * m33 -
            m00 * m21 * m33) /
            det,
          (m01 * m13 * m30 -
            m03 * m11 * m30 +
            m03 * m10 * m31 -
            m00 * m13 * m31 -
            m01 * m10 * m33 +
            m00 * m11 * m33) /
            det,
          (m03 * m11 * m20 -
            m01 * m13 * m20 -
            m03 * m10 * m21 +
            m00 * m13 * m21 +
            m01 * m10 * m23 -
            m00 * m11 * m23) /
            det,
          (m12 * m21 * m30 -
            m11 * m22 * m30 -
            m12 * m20 * m31 +
            m10 * m22 * m31 +
            m11 * m20 * m32 -
            m10 * m21 * m32) /
            det,
          (m01 * m22 * m30 -
            m02 * m21 * m30 +
            m02 * m20 * m31 -
            m00 * m22 * m31 -
            m01 * m20 * m32 +
            m00 * m21 * m32) /
            det,
          (m02 * m11 * m30 -
            m01 * m12 * m30 -
            m02 * m10 * m31 +
            m00 * m12 * m31 +
            m01 * m10 * m32 -
            m00 * m11 * m32) /
            det,
          (m01 * m12 * m20 -
            m02 * m11 * m20 +
            m02 * m10 * m21 -
            m00 * m12 * m21 -
            m01 * m10 * m22 +
            m00 * m11 * m22) /
            det,
        ];
      },
      transpose: function transpose(m) {
        return [
          m[0],
          m[4],
          m[8],
          m[12],
          m[1],
          m[5],
          m[9],
          m[13],
          m[2],
          m[6],
          m[10],
          m[14],
          m[3],
          m[7],
          m[11],
          m[15],
        ];
      },
      multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
        var _v = _slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

        return [
          vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12],
          vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13],
          vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14],
          vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15],
        ];
      },
      v3Length: function v3Length(a) {
        return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
      },
      v3Normalize: function v3Normalize(vector, v3Length) {
        var im = 1 / (v3Length || MatrixMath.v3Length(vector));
        return [vector[0] * im, vector[1] * im, vector[2] * im];
      },
      v3Dot: function v3Dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      },
      v3Combine: function v3Combine(a, b, aScale, bScale) {
        return [
          aScale * a[0] + bScale * b[0],
          aScale * a[1] + bScale * b[1],
          aScale * a[2] + bScale * b[2],
        ];
      },
      v3Cross: function v3Cross(a, b) {
        return [
          a[1] * b[2] - a[2] * b[1],
          a[2] * b[0] - a[0] * b[2],
          a[0] * b[1] - a[1] * b[0],
        ];
      },
      quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
        var _q = _slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

        var qw2 = qw * qw;
        var qx2 = qx * qx;
        var qy2 = qy * qy;
        var qz2 = qz * qz;
        var test = qx * qy + qz * qw;
        var unit = qw2 + qx2 + qy2 + qz2;
        var conv = 180 / Math.PI;

        if (test > 0.49999 * unit) {
          return [0, 2 * Math.atan2(qx, qw) * conv, 90];
        }

        if (test < -0.49999 * unit) {
          return [0, -2 * Math.atan2(qx, qw) * conv, -90];
        }

        return [
          MatrixMath.roundTo3Places(
            Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv
          ),
          MatrixMath.roundTo3Places(
            Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv
          ),
          MatrixMath.roundTo3Places(
            Math.asin(2 * qx * qy + 2 * qz * qw) * conv
          ),
        ];
      },
      roundTo3Places: function roundTo3Places(n) {
        var arr = n.toString().split("e");
        return Math.round(arr[0] + "e" + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
      },
      decomposeMatrix: function decomposeMatrix(transformMatrix) {
        invariant(
          transformMatrix.length === 16,
          "Matrix decomposition needs a list of 3d matrix values, received %s",
          transformMatrix
        );
        var perspective = [];
        var quaternion = [];
        var scale = [];
        var skew = [];
        var translation = [];

        if (!transformMatrix[15]) {
          return;
        }

        var matrix = [];
        var perspectiveMatrix = [];

        for (var i = 0; i < 4; i++) {
          matrix.push([]);

          for (var j = 0; j < 4; j++) {
            var value = transformMatrix[i * 4 + j] / transformMatrix[15];
            matrix[i].push(value);
            perspectiveMatrix.push(j === 3 ? 0 : value);
          }
        }

        perspectiveMatrix[15] = 1;

        if (!MatrixMath.determinant(perspectiveMatrix)) {
          return;
        }

        if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
          var rightHandSide = [
            matrix[0][3],
            matrix[1][3],
            matrix[2][3],
            matrix[3][3],
          ];
          var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
          var transposedInversePerspectiveMatrix = MatrixMath.transpose(
            inversePerspectiveMatrix
          );
          perspective = MatrixMath.multiplyVectorByMatrix(
            rightHandSide,
            transposedInversePerspectiveMatrix
          );
        } else {
          perspective[0] = perspective[1] = perspective[2] = 0;
          perspective[3] = 1;
        }

        for (var _i = 0; _i < 3; _i++) {
          translation[_i] = matrix[3][_i];
        }

        var row = [];

        for (var _i2 = 0; _i2 < 3; _i2++) {
          row[_i2] = [matrix[_i2][0], matrix[_i2][1], matrix[_i2][2]];
        }

        scale[0] = MatrixMath.v3Length(row[0]);
        row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
        skew[0] = MatrixMath.v3Dot(row[0], row[1]);
        row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
        scale[1] = MatrixMath.v3Length(row[1]);
        row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
        skew[0] /= scale[1];
        skew[1] = MatrixMath.v3Dot(row[0], row[2]);
        row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
        skew[2] = MatrixMath.v3Dot(row[1], row[2]);
        row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
        scale[2] = MatrixMath.v3Length(row[2]);
        row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
        skew[1] /= scale[2];
        skew[2] /= scale[2];
        var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

        if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
          for (var _i3 = 0; _i3 < 3; _i3++) {
            scale[_i3] *= -1;
            row[_i3][0] *= -1;
            row[_i3][1] *= -1;
            row[_i3][2] *= -1;
          }
        }

        quaternion[0] =
          0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
        quaternion[1] =
          0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
        quaternion[2] =
          0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
        quaternion[3] =
          0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

        if (row[2][1] > row[1][2]) {
          quaternion[0] = -quaternion[0];
        }

        if (row[0][2] > row[2][0]) {
          quaternion[1] = -quaternion[1];
        }

        if (row[1][0] > row[0][1]) {
          quaternion[2] = -quaternion[2];
        }

        var rotationDegrees;

        if (
          quaternion[0] < 0.001 &&
          quaternion[0] >= 0 &&
          quaternion[1] < 0.001 &&
          quaternion[1] >= 0
        ) {
          rotationDegrees = [
            0,
            0,
            MatrixMath.roundTo3Places(
              (Math.atan2(row[0][1], row[0][0]) * 180) / Math.PI
            ),
          ];
        } else {
          rotationDegrees = MatrixMath.quaternionToDegreesXYZ(
            quaternion,
            matrix,
            row
          );
        }

        return {
          rotationDegrees: rotationDegrees,
          perspective: perspective,
          quaternion: quaternion,
          scale: scale,
          skew: skew,
          translation: translation,
          rotate: rotationDegrees[2],
          rotateX: rotationDegrees[0],
          rotateY: rotationDegrees[1],
          scaleX: scale[0],
          scaleY: scale[1],
          translateX: translation[0],
          translateY: translation[1],
        };
      },
    };
    module.exports = MatrixMath;
  },
  140,
  [44, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var dummySize = {
      width: undefined,
      height: undefined,
    };

    var sizesDiffer = function sizesDiffer(one, two) {
      var defaultedOne = one || dummySize;
      var defaultedTwo = two || dummySize;
      return (
        defaultedOne !== defaultedTwo &&
        (defaultedOne.width !== defaultedTwo.width ||
          defaultedOne.height !== defaultedTwo.height)
      );
    };

    module.exports = sizesDiffer;
  },
  141,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var UIManager =
      global.RN$Bridgeless === true
        ? _$$_REQUIRE(_dependencyMap[0])
        : _$$_REQUIRE(_dependencyMap[1]);
    module.exports = UIManager;
  },
  142,
  [143, 145]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _NativeComponentRegistryUnstable = _$$_REQUIRE(_dependencyMap[0]);

    var errorMessageForMethod = function errorMessageForMethod(methodName) {
      return (
        "[ReactNative Architecture][JS] '" +
        methodName +
        "' is not available in the new React Native architecture."
      );
    };

    module.exports = {
      getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
        console.error(
          errorMessageForMethod("getViewManagerConfig") +
            "Use hasViewManagerConfig instead. viewManagerName: " +
            viewManagerName
        );
        return null;
      },
      hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {
        return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(
          viewManagerName
        );
      },
      getConstants: function getConstants() {
        console.error(errorMessageForMethod("getConstants"));
        return {};
      },
      getConstantsForViewManager: function getConstantsForViewManager(
        viewManagerName
      ) {
        console.error(errorMessageForMethod("getConstantsForViewManager"));
        return {};
      },
      getDefaultEventTypes: function getDefaultEventTypes() {
        console.error(errorMessageForMethod("getDefaultEventTypes"));
        return [];
      },
      lazilyLoadView: function lazilyLoadView(name) {
        console.error(errorMessageForMethod("lazilyLoadView"));
        return {};
      },
      createView: function createView(reactTag, viewName, rootTag, props) {
        return console.error(errorMessageForMethod("createView"));
      },
      updateView: function updateView(reactTag, viewName, props) {
        return console.error(errorMessageForMethod("updateView"));
      },
      focus: function focus(reactTag) {
        return console.error(errorMessageForMethod("focus"));
      },
      blur: function blur(reactTag) {
        return console.error(errorMessageForMethod("blur"));
      },
      findSubviewIn: function findSubviewIn(reactTag, point, callback) {
        return console.error(errorMessageForMethod("findSubviewIn"));
      },
      dispatchViewManagerCommand: function dispatchViewManagerCommand(
        reactTag,
        commandID,
        commandArgs
      ) {
        return console.error(
          errorMessageForMethod("dispatchViewManagerCommand")
        );
      },
      measure: function measure(reactTag, callback) {
        return console.error(errorMessageForMethod("measure"));
      },
      measureInWindow: function measureInWindow(reactTag, callback) {
        return console.error(errorMessageForMethod("measureInWindow"));
      },
      viewIsDescendantOf: function viewIsDescendantOf(
        reactTag,
        ancestorReactTag,
        callback
      ) {
        return console.error(errorMessageForMethod("viewIsDescendantOf"));
      },
      measureLayout: function measureLayout(
        reactTag,
        ancestorReactTag,
        errorCallback,
        callback
      ) {
        return console.error(errorMessageForMethod("measureLayout"));
      },
      measureLayoutRelativeToParent: function measureLayoutRelativeToParent(
        reactTag,
        errorCallback,
        callback
      ) {
        return console.error(
          errorMessageForMethod("measureLayoutRelativeToParent")
        );
      },
      setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {
        return console.error(errorMessageForMethod("setJSResponder"));
      },
      clearJSResponder: function clearJSResponder() {},
      configureNextLayoutAnimation: function configureNextLayoutAnimation(
        config,
        callback,
        errorCallback
      ) {
        return console.error(
          errorMessageForMethod("configureNextLayoutAnimation")
        );
      },
      removeSubviewsFromContainerWithID:
        function removeSubviewsFromContainerWithID(containerID) {
          return console.error(
            errorMessageForMethod("removeSubviewsFromContainerWithID")
          );
        },
      replaceExistingNonRootView: function replaceExistingNonRootView(
        reactTag,
        newReactTag
      ) {
        return console.error(
          errorMessageForMethod("replaceExistingNonRootView")
        );
      },
      setChildren: function setChildren(containerTag, reactTags) {
        return console.error(errorMessageForMethod("setChildren"));
      },
      manageChildren: function manageChildren(
        containerTag,
        moveFromIndices,
        moveToIndices,
        addChildReactTags,
        addAtIndices,
        removeAtIndices
      ) {
        return console.error(errorMessageForMethod("manageChildren"));
      },
      setLayoutAnimationEnabledExperimental:
        function setLayoutAnimationEnabledExperimental(enabled) {
          console.error(
            errorMessageForMethod("setLayoutAnimationEnabledExperimental")
          );
        },
      sendAccessibilityEvent: function sendAccessibilityEvent(
        reactTag,
        eventType
      ) {
        return console.error(errorMessageForMethod("sendAccessibilityEvent"));
      },
      showPopupMenu: function showPopupMenu(reactTag, items, error, success) {
        return console.error(errorMessageForMethod("showPopupMenu"));
      },
      dismissPopupMenu: function dismissPopupMenu() {
        return console.error(errorMessageForMethod("dismissPopupMenu"));
      },
    };
  },
  143,
  [144]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.unstable_hasComponent = unstable_hasComponent;
    var componentNameToExists = new Map();

    function unstable_hasComponent(name) {
      var hasNativeComponent = componentNameToExists.get(name);

      if (hasNativeComponent == null) {
        if (global.__nativeComponentRegistry__hasComponent) {
          hasNativeComponent =
            global.__nativeComponentRegistry__hasComponent(name);
          componentNameToExists.set(name, hasNativeComponent);
        } else {
          throw (
            "unstable_hasComponent('" +
            name +
            "'): Global function is not registered"
          );
        }
      }

      return hasNativeComponent;
    }
  },
  144,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeUIManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[3]);

    var Platform = _$$_REQUIRE(_dependencyMap[4]);

    var UIManagerProperties = _$$_REQUIRE(_dependencyMap[5]);

    var viewManagerConfigs = {};
    var triedLoadingConfig = new Set();
    var NativeUIManagerConstants = {};
    var isNativeUIManagerConstantsSet = false;

    function _getConstants() {
      if (!isNativeUIManagerConstantsSet) {
        NativeUIManagerConstants = _NativeUIManager.default.getConstants();
        isNativeUIManagerConstantsSet = true;
      }

      return NativeUIManagerConstants;
    }

    function _getViewManagerConfig(viewManagerName) {
      if (
        viewManagerConfigs[viewManagerName] === undefined &&
        global.nativeCallSyncHook &&
        _NativeUIManager.default.getConstantsForViewManager
      ) {
        try {
          viewManagerConfigs[viewManagerName] =
            _NativeUIManager.default.getConstantsForViewManager(
              viewManagerName
            );
        } catch (e) {
          console.error(
            "NativeUIManager.getConstantsForViewManager('" +
              viewManagerName +
              "') threw an exception.",
            e
          );
          viewManagerConfigs[viewManagerName] = null;
        }
      }

      var config = viewManagerConfigs[viewManagerName];

      if (config) {
        return config;
      }

      if (!global.nativeCallSyncHook) {
        return config;
      }

      if (
        _NativeUIManager.default.lazilyLoadView &&
        !triedLoadingConfig.has(viewManagerName)
      ) {
        var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);

        triedLoadingConfig.add(viewManagerName);

        if (result != null && result.viewConfig != null) {
          _getConstants()[viewManagerName] = result.viewConfig;
          lazifyViewManagerConfig(viewManagerName);
        }
      }

      return viewManagerConfigs[viewManagerName];
    }

    var UIManagerJS = Object.assign({}, _NativeUIManager.default, {
      createView: function createView(reactTag, viewName, rootTag, props) {
        _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
      },
      getConstants: function getConstants() {
        return _getConstants();
      },
      getViewManagerConfig: function getViewManagerConfig(viewManagerName) {
        return _getViewManagerConfig(viewManagerName);
      },
      hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {
        return _getViewManagerConfig(viewManagerName) != null;
      },
    });
    _NativeUIManager.default.getViewManagerConfig =
      UIManagerJS.getViewManagerConfig;

    function lazifyViewManagerConfig(viewName) {
      var viewConfig = _getConstants()[viewName];

      viewManagerConfigs[viewName] = viewConfig;

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, "Constants", {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager &&
              Object.keys(viewManager).forEach(function (key) {
                var value = viewManager[key];

                if (typeof value !== "function") {
                  constants[key] = value;
                }
              });
            return constants;
          },
        });
        defineLazyObjectProperty(viewConfig, "Commands", {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager &&
              Object.keys(viewManager).forEach(function (key) {
                var value = viewManager[key];

                if (typeof value === "function") {
                  commands[key] = index++;
                }
              });
            return commands;
          },
        });
      }
    }

    if (_getConstants().ViewManagerNames) {
      _NativeUIManager.default
        .getConstants()
        .ViewManagerNames.forEach(function (viewManagerName) {
          defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: function get() {
              return _NativeUIManager.default.getConstantsForViewManager(
                viewManagerName
              );
            },
          });
        });
    }

    if (!global.nativeCallSyncHook) {
      Object.keys(_getConstants()).forEach(function (viewManagerName) {
        if (!UIManagerProperties.includes(viewManagerName)) {
          if (!viewManagerConfigs[viewManagerName]) {
            viewManagerConfigs[viewManagerName] =
              _getConstants()[viewManagerName];
          }

          defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
            get: function get() {
              console.warn(
                "Accessing view manager configs directly off UIManager via UIManager['" +
                  viewManagerName +
                  "'] " +
                  ("is no longer supported. Use UIManager.getViewManagerConfig('" +
                    viewManagerName +
                    "') instead.")
              );
              return UIManagerJS.getViewManagerConfig(viewManagerName);
            },
          });
        }
      });
    }

    module.exports = UIManagerJS;
  },
  145,
  [7, 146, 43, 53, 54, 147]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("UIManager");

    exports.default = _default;
  },
  146,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    module.exports = [
      "clearJSResponder",
      "configureNextLayoutAnimation",
      "createView",
      "dismissPopupMenu",
      "dispatchViewManagerCommand",
      "findSubviewIn",
      "getConstantsForViewManager",
      "getDefaultEventTypes",
      "manageChildren",
      "measure",
      "measureInWindow",
      "measureLayout",
      "measureLayoutRelativeToParent",
      "removeRootView",
      "removeSubviewsFromContainerWithID",
      "replaceExistingNonRootView",
      "sendAccessibilityEvent",
      "setChildren",
      "setJSResponder",
      "setLayoutAnimationEnabledExperimental",
      "showPopupMenu",
      "updateView",
      "viewIsDescendantOf",
      "PopupMenu",
      "LazyViewManagersEnabled",
      "ViewManagerNames",
      "StyleConstants",
      "AccessibilityEventTypes",
      "UIView",
      "getViewManagerConfig",
      "hasViewManagerConfig",
      "blur",
      "focus",
      "genericBubblingEventTypes",
      "genericDirectEventTypes",
      "lazilyLoadView",
    ];
  },
  147,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[0]);

    var resolveAssetSource = _$$_REQUIRE(_dependencyMap[1]);

    var processColor = _$$_REQUIRE(_dependencyMap[2]);

    var processColorArray = _$$_REQUIRE(_dependencyMap[3]);

    var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

    var matricesDiffer = _$$_REQUIRE(_dependencyMap[5]);

    var pointsDiffer = _$$_REQUIRE(_dependencyMap[6]);

    var sizesDiffer = _$$_REQUIRE(_dependencyMap[7]);

    var UIManager = _$$_REQUIRE(_dependencyMap[8]);

    var invariant = _$$_REQUIRE(_dependencyMap[9]);

    function getNativeComponentAttributes(uiViewClassName) {
      var _bubblingEventTypes, _directEventTypes;

      var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
      invariant(
        viewConfig != null && viewConfig.NativeProps != null,
        'requireNativeComponent: "%s" was not found in the UIManager.',
        uiViewClassName
      );
      var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
      var nativeProps = viewConfig.NativeProps;
      bubblingEventTypes =
        (_bubblingEventTypes = bubblingEventTypes) != null
          ? _bubblingEventTypes
          : {};
      directEventTypes =
        (_directEventTypes = directEventTypes) != null ? _directEventTypes : {};

      while (baseModuleName) {
        var baseModule = UIManager.getViewManagerConfig(baseModuleName);

        if (!baseModule) {
          baseModuleName = null;
        } else {
          bubblingEventTypes = Object.assign(
            {},
            baseModule.bubblingEventTypes,
            bubblingEventTypes
          );
          directEventTypes = Object.assign(
            {},
            baseModule.directEventTypes,
            directEventTypes
          );
          nativeProps = Object.assign({}, baseModule.NativeProps, nativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      var validAttributes = {};

      for (var key in nativeProps) {
        var typeName = nativeProps[key];
        var diff = getDifferForType(typeName);
        var process = getProcessorForType(typeName);
        validAttributes[key] =
          diff == null
            ? process == null
              ? true
              : {
                  process: process,
                }
            : process == null
            ? {
                diff: diff,
              }
            : {
                diff: diff,
                process: process,
              };
      }

      validAttributes.style = ReactNativeStyleAttributes;
      Object.assign(viewConfig, {
        uiViewClassName: uiViewClassName,
        validAttributes: validAttributes,
        bubblingEventTypes: bubblingEventTypes,
        directEventTypes: directEventTypes,
      });
      attachDefaultEventTypes(viewConfig);
      return viewConfig;
    }

    function attachDefaultEventTypes(viewConfig) {
      var constants = UIManager.getConstants();

      if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
        viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
      } else {
        viewConfig.bubblingEventTypes = merge(
          viewConfig.bubblingEventTypes,
          constants.genericBubblingEventTypes
        );
        viewConfig.directEventTypes = merge(
          viewConfig.directEventTypes,
          constants.genericDirectEventTypes
        );
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (
            typeof sourceValue === "object" &&
            typeof destinationValue === "object"
          ) {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getDifferForType(typeName) {
      switch (typeName) {
        case "CATransform3D":
          return matricesDiffer;

        case "CGPoint":
          return pointsDiffer;

        case "CGSize":
          return sizesDiffer;

        case "UIEdgeInsets":
          return insetsDiffer;

        case "Point":
          return pointsDiffer;

        case "EdgeInsets":
          return insetsDiffer;
      }

      return null;
    }

    function getProcessorForType(typeName) {
      switch (typeName) {
        case "CGColor":
        case "UIColor":
          return processColor;

        case "CGColorArray":
        case "UIColorArray":
          return processColorArray;

        case "CGImage":
        case "UIImage":
        case "RCTImageSource":
          return resolveAssetSource;

        case "Color":
          return processColor;

        case "ColorArray":
          return processColorArray;

        case "ImageSource":
          return resolveAssetSource;
      }

      return null;
    }

    module.exports = getNativeComponentAttributes;
  },
  148,
  [134, 149, 135, 158, 159, 160, 161, 141, 142, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var AssetRegistry = _$$_REQUIRE(_dependencyMap[0]);

    var AssetSourceResolver = _$$_REQUIRE(_dependencyMap[1]);

    var _require = _$$_REQUIRE(_dependencyMap[2]),
      pickScale = _require.pickScale;

    var _customSourceTransformer, _serverURL, _scriptURL;

    var _sourceCodeScriptURL;

    function getSourceCodeScriptURL() {
      if (_sourceCodeScriptURL) {
        return _sourceCodeScriptURL;
      }

      var sourceCode =
        global.nativeExtensions && global.nativeExtensions.SourceCode;

      if (!sourceCode) {
        sourceCode = _$$_REQUIRE(_dependencyMap[3]).default;
      }

      _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
      return _sourceCodeScriptURL;
    }

    function getDevServerURL() {
      if (_serverURL === undefined) {
        var sourceCodeScriptURL = getSourceCodeScriptURL();
        var match =
          sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

        if (match) {
          _serverURL = match[0];
        } else {
          _serverURL = null;
        }
      }

      return _serverURL;
    }

    function _coerceLocalScriptURL(scriptURL) {
      if (scriptURL) {
        if (scriptURL.startsWith("assets://")) {
          return null;
        }

        scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf("/") + 1);

        if (!scriptURL.includes("://")) {
          scriptURL = "file://" + scriptURL;
        }
      }

      return scriptURL;
    }

    function getScriptURL() {
      if (_scriptURL === undefined) {
        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
      }

      return _scriptURL;
    }

    function setCustomSourceTransformer(transformer) {
      _customSourceTransformer = transformer;
    }

    function resolveAssetSource(source) {
      if (typeof source === "object") {
        return source;
      }

      var asset = AssetRegistry.getAssetByID(source);

      if (!asset) {
        return null;
      }

      var resolver = new AssetSourceResolver(
        getDevServerURL(),
        getScriptURL(),
        asset
      );

      if (_customSourceTransformer) {
        return _customSourceTransformer(resolver);
      }

      return resolver.defaultAsset();
    }

    module.exports = resolveAssetSource;
    module.exports.pickScale = pickScale;
    module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
  },
  149,
  [150, 151, 155, 157]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var assets = [];

    function registerAsset(asset) {
      return assets.push(asset);
    }

    function getAssetByID(assetId) {
      return assets[assetId - 1];
    }

    module.exports = {
      registerAsset: registerAsset,
      getAssetByID: getAssetByID,
    };
  },
  150,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var PixelRatio = _$$_REQUIRE(_dependencyMap[2]);

    var _require = _$$_REQUIRE(_dependencyMap[3]),
      pickScale = _require.pickScale;

    var Platform = _$$_REQUIRE(_dependencyMap[4]);

    var invariant = _$$_REQUIRE(_dependencyMap[5]);

    var _require2 = _$$_REQUIRE(_dependencyMap[6]),
      getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
      getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
      getBasePath = _require2.getBasePath;

    function getScaledAssetPath(asset) {
      var scale = pickScale(asset.scales, PixelRatio.get());
      var scaleSuffix = scale === 1 ? "" : "@" + scale + "x";
      var assetDir = getBasePath(asset);
      return assetDir + "/" + asset.name + scaleSuffix + "." + asset.type;
    }

    function getAssetPathInDrawableFolder(asset) {
      var scale = pickScale(asset.scales, PixelRatio.get());
      var drawbleFolder = getAndroidResourceFolderName(asset, scale);
      var fileName = getAndroidResourceIdentifier(asset);
      return drawbleFolder + "/" + fileName + "." + asset.type;
    }

    var AssetSourceResolver = (function () {
      function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
        _classCallCheck(this, AssetSourceResolver);

        this.serverUrl = serverUrl;
        this.jsbundleUrl = jsbundleUrl;
        this.asset = asset;
      }

      _createClass(AssetSourceResolver, [
        {
          key: "isLoadedFromServer",
          value: function isLoadedFromServer() {
            return !!this.serverUrl;
          },
        },
        {
          key: "isLoadedFromFileSystem",
          value: function isLoadedFromFileSystem() {
            return !!(
              this.jsbundleUrl && this.jsbundleUrl.startsWith("file://")
            );
          },
        },
        {
          key: "defaultAsset",
          value: function defaultAsset() {
            if (this.isLoadedFromServer()) {
              return this.assetServerURL();
            }

            {
              return this.isLoadedFromFileSystem()
                ? this.drawableFolderInBundle()
                : this.resourceIdentifierWithoutScale();
            }
          },
        },
        {
          key: "assetServerURL",
          value: function assetServerURL() {
            invariant(!!this.serverUrl, "need server to load from");
            return this.fromSource(
              this.serverUrl +
                getScaledAssetPath(this.asset) +
                "?platform=" +
                "android" +
                "&hash=" +
                this.asset.hash
            );
          },
        },
        {
          key: "scaledAssetPath",
          value: function scaledAssetPath() {
            return this.fromSource(getScaledAssetPath(this.asset));
          },
        },
        {
          key: "scaledAssetURLNearBundle",
          value: function scaledAssetURLNearBundle() {
            var path = this.jsbundleUrl || "file://";
            return this.fromSource(
              path + getScaledAssetPath(this.asset).replace(/\.\.\//g, "_")
            );
          },
        },
        {
          key: "resourceIdentifierWithoutScale",
          value: function resourceIdentifierWithoutScale() {
            invariant(true, "resource identifiers work on Android");
            return this.fromSource(getAndroidResourceIdentifier(this.asset));
          },
        },
        {
          key: "drawableFolderInBundle",
          value: function drawableFolderInBundle() {
            var path = this.jsbundleUrl || "file://";
            return this.fromSource(
              path + getAssetPathInDrawableFolder(this.asset)
            );
          },
        },
        {
          key: "fromSource",
          value: function fromSource(source) {
            return {
              __packager_asset: true,
              width: this.asset.width,
              height: this.asset.height,
              uri: source,
              scale: pickScale(this.asset.scales, PixelRatio.get()),
            };
          },
        },
      ]);

      return AssetSourceResolver;
    })();

    AssetSourceResolver.pickScale = pickScale;
    module.exports = AssetSourceResolver;
  },
  151,
  [16, 17, 152, 155, 54, 4, 156]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var Dimensions = _$$_REQUIRE(_dependencyMap[2]);

    var PixelRatio = (function () {
      function PixelRatio() {
        _classCallCheck(this, PixelRatio);
      }

      _createClass(PixelRatio, null, [
        {
          key: "get",
          value: function get() {
            return Dimensions.get("window").scale;
          },
        },
        {
          key: "getFontScale",
          value: function getFontScale() {
            return Dimensions.get("window").fontScale || PixelRatio.get();
          },
        },
        {
          key: "getPixelSizeForLayoutSize",
          value: function getPixelSizeForLayoutSize(layoutSize) {
            return Math.round(layoutSize * PixelRatio.get());
          },
        },
        {
          key: "roundToNearestPixel",
          value: function roundToNearestPixel(layoutSize) {
            var ratio = PixelRatio.get();
            return Math.round(layoutSize * ratio) / ratio;
          },
        },
        {
          key: "startDetecting",
          value: function startDetecting() {},
        },
      ]);

      return PixelRatio;
    })();

    module.exports = PixelRatio;
  },
  152,
  [16, 17, 153]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _NativeDeviceInfo = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var eventEmitter = new _EventEmitter.default();
    var dimensionsInitialized = false;
    var dimensions;

    var Dimensions = (function () {
      function Dimensions() {
        (0, _classCallCheck2.default)(this, Dimensions);
      }

      (0, _createClass2.default)(Dimensions, null, [
        {
          key: "get",
          value: function get(dim) {
            (0, _invariant.default)(
              dimensions[dim],
              "No dimension set for key " + dim
            );
            return dimensions[dim];
          },
        },
        {
          key: "set",
          value: function set(dims) {
            var screen = dims.screen,
              window = dims.window;
            var windowPhysicalPixels = dims.windowPhysicalPixels;

            if (windowPhysicalPixels) {
              window = {
                width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
                height:
                  windowPhysicalPixels.height / windowPhysicalPixels.scale,
                scale: windowPhysicalPixels.scale,
                fontScale: windowPhysicalPixels.fontScale,
              };
            }

            var screenPhysicalPixels = dims.screenPhysicalPixels;

            if (screenPhysicalPixels) {
              screen = {
                width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
                height:
                  screenPhysicalPixels.height / screenPhysicalPixels.scale,
                scale: screenPhysicalPixels.scale,
                fontScale: screenPhysicalPixels.fontScale,
              };
            } else if (screen == null) {
              screen = window;
            }

            dimensions = {
              window: window,
              screen: screen,
            };

            if (dimensionsInitialized) {
              eventEmitter.emit("change", dimensions);
            } else {
              dimensionsInitialized = true;
            }
          },
        },
        {
          key: "addEventListener",
          value: function addEventListener(type, handler) {
            (0, _invariant.default)(
              type === "change",
              'Trying to subscribe to unknown event: "%s"',
              type
            );
            return eventEmitter.addListener(type, handler);
          },
        },
      ]);
      return Dimensions;
    })();

    var initialDims =
      global.nativeExtensions &&
      global.nativeExtensions.DeviceInfo &&
      global.nativeExtensions.DeviceInfo.Dimensions;

    if (!initialDims) {
      _RCTDeviceEventEmitter.default.addListener(
        "didUpdateDimensions",
        function (update) {
          Dimensions.set(update);
        }
      );

      initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
    }

    Dimensions.set(initialDims);
    module.exports = Dimensions;
  },
  153,
  [7, 16, 17, 9, 8, 154, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var NativeModule = TurboModuleRegistry.getEnforcing("DeviceInfo");
    var constants = null;
    var NativeDeviceInfo = {
      getConstants: function getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }

        return constants;
      },
    };
    var _default = NativeDeviceInfo;
    exports.default = _default;
  },
  154,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.getUrlCacheBreaker = getUrlCacheBreaker;
    exports.pickScale = pickScale;
    exports.setUrlCacheBreaker = setUrlCacheBreaker;

    var _PixelRatio = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var cacheBreaker;
    var warnIfCacheBreakerUnset = true;

    function pickScale(scales, deviceScale) {
      if (deviceScale == null) {
        deviceScale = _PixelRatio.default.get();
      }

      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }

    function setUrlCacheBreaker(appendage) {
      cacheBreaker = appendage;
    }

    function getUrlCacheBreaker() {
      if (cacheBreaker == null) {
        return "";
      }

      return cacheBreaker;
    }
  },
  155,
  [7, 152]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var androidScaleSuffix = {
      0.75: "ldpi",
      1: "mdpi",
      1.5: "hdpi",
      2: "xhdpi",
      3: "xxhdpi",
      4: "xxxhdpi",
    };

    function getAndroidAssetSuffix(scale) {
      if (scale.toString() in androidScaleSuffix) {
        return androidScaleSuffix[scale.toString()];
      }

      throw new Error("no such scale " + scale.toString());
    }

    var drawableFileTypes = new Set([
      "gif",
      "jpeg",
      "jpg",
      "png",
      "svg",
      "webp",
      "xml",
    ]);

    function getAndroidResourceFolderName(asset, scale) {
      if (!drawableFileTypes.has(asset.type)) {
        return "raw";
      }

      var suffix = getAndroidAssetSuffix(scale);

      if (!suffix) {
        throw new Error(
          "Don't know which android drawable suffix to use for scale: " +
            scale +
            "\nAsset: " +
            JSON.stringify(asset, null, "\t") +
            "\nPossible scales are:" +
            JSON.stringify(androidScaleSuffix, null, "\t")
        );
      }

      return "drawable-" + suffix;
    }

    function getAndroidResourceIdentifier(asset) {
      return (getBasePath(asset) + "/" + asset.name)
        .toLowerCase()
        .replace(/\//g, "_")
        .replace(/([^a-z0-9_])/g, "")
        .replace(/^assets_/, "");
    }

    function getBasePath(asset) {
      var basePath = asset.httpServerLocation;
      return basePath.startsWith("/") ? basePath.substr(1) : basePath;
    }

    module.exports = {
      getAndroidResourceFolderName: getAndroidResourceFolderName,
      getAndroidResourceIdentifier: getAndroidResourceIdentifier,
      getBasePath: getBasePath,
    };
  },
  156,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var NativeModule = TurboModuleRegistry.getEnforcing("SourceCode");
    var constants = null;
    var NativeSourceCode = {
      getConstants: function getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }

        return constants;
      },
    };
    var _default = NativeSourceCode;
    exports.default = _default;
  },
  157,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var TRANSPARENT = 0;

    function processColorArray(colors) {
      return colors == null ? null : colors.map(processColorElement);
    }

    function processColorElement(color) {
      var value = (0, _processColor.default)(color);

      if (value == null) {
        console.error("Invalid value in color array:", color);
        return TRANSPARENT;
      }

      return value;
    }

    module.exports = processColorArray;
  },
  158,
  [7, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var dummyInsets = {
      top: undefined,
      left: undefined,
      right: undefined,
      bottom: undefined,
    };

    var insetsDiffer = function insetsDiffer(one, two) {
      one = one || dummyInsets;
      two = two || dummyInsets;
      return (
        one !== two &&
        (one.top !== two.top ||
          one.left !== two.left ||
          one.right !== two.right ||
          one.bottom !== two.bottom)
      );
    };

    module.exports = insetsDiffer;
  },
  159,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var matricesDiffer = function matricesDiffer(one, two) {
      if (one === two) {
        return false;
      }

      return (
        !one ||
        !two ||
        one[12] !== two[12] ||
        one[13] !== two[13] ||
        one[14] !== two[14] ||
        one[5] !== two[5] ||
        one[10] !== two[10] ||
        one[0] !== two[0] ||
        one[1] !== two[1] ||
        one[2] !== two[2] ||
        one[3] !== two[3] ||
        one[4] !== two[4] ||
        one[6] !== two[6] ||
        one[7] !== two[7] ||
        one[8] !== two[8] ||
        one[9] !== two[9] ||
        one[11] !== two[11] ||
        one[15] !== two[15]
      );
    };

    module.exports = matricesDiffer;
  },
  160,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var dummyPoint = {
      x: undefined,
      y: undefined,
    };

    var pointsDiffer = function pointsDiffer(one, two) {
      one = one || dummyPoint;
      two = two || dummyPoint;
      return one !== two && (one.x !== two.x || one.y !== two.y);
    };

    module.exports = pointsDiffer;
  },
  161,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = verifyComponentAttributeEquivalence;
    exports.getConfigWithoutViewProps = getConfigWithoutViewProps;
    exports.stringifyViewConfig = stringifyViewConfig;

    var _PlatformBaseViewConfig = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var IGNORED_KEYS = ["transform", "hitSlop"];

    function verifyComponentAttributeEquivalence(
      nativeViewConfig,
      staticViewConfig
    ) {
      for (var prop of [
        "validAttributes",
        "bubblingEventTypes",
        "directEventTypes",
      ]) {
        var diff = Object.keys(
          lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop])
        );

        if (diff.length > 0) {
          var _staticViewConfig$uiV;

          var name =
            (_staticViewConfig$uiV = staticViewConfig.uiViewClassName) != null
              ? _staticViewConfig$uiV
              : nativeViewConfig.uiViewClassName;
          console.error(
            "'" +
              name +
              "' has a view config that does not match native. " +
              ("'" + prop + "' is missing: " + diff.join(", "))
          );
        }
      }
    }

    function lefthandObjectDiff(leftObj, rightObj) {
      var differentKeys = {};

      function compare(leftItem, rightItem, key) {
        if (typeof leftItem !== typeof rightItem && leftItem != null) {
          differentKeys[key] = rightItem;
          return;
        }

        if (typeof leftItem === "object") {
          var objDiff = lefthandObjectDiff(leftItem, rightItem);

          if (Object.keys(objDiff).length > 1) {
            differentKeys[key] = objDiff;
          }

          return;
        }

        if (leftItem !== rightItem) {
          differentKeys[key] = rightItem;
          return;
        }
      }

      for (var key in leftObj) {
        if (IGNORED_KEYS.includes(key)) {
          continue;
        }

        if (!rightObj) {
          differentKeys[key] = {};
        } else if (leftObj.hasOwnProperty(key)) {
          compare(leftObj[key], rightObj[key], key);
        }
      }

      return differentKeys;
    }

    function getConfigWithoutViewProps(viewConfig, propName) {
      if (!viewConfig[propName]) {
        return {};
      }

      return Object.keys(viewConfig[propName])
        .filter(function (prop) {
          return !_PlatformBaseViewConfig.default[propName][prop];
        })
        .reduce(function (obj, prop) {
          obj[prop] = viewConfig[propName][prop];
          return obj;
        }, {});
    }

    function stringifyViewConfig(viewConfig) {
      return JSON.stringify(
        viewConfig,
        function (key, val) {
          if (typeof val === "function") {
            return "\u0192 " + val.name;
          }

          return val;
        },
        2
      );
    }
  },
  162,
  [7, 132]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default =
      exports.__INTERNAL_VIEW_CONFIG =
      exports.Commands =
        undefined;

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _RCTTextInputViewConfig = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["focus", "blur", "setTextAndSelection"],
    });
    exports.Commands = Commands;

    var __INTERNAL_VIEW_CONFIG = Object.assign(
      {
        uiViewClassName: "RCTSinglelineTextInputView",
      },
      _RCTTextInputViewConfig.default
    );

    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var SinglelineTextInputNativeComponent = NativeComponentRegistry.get(
      "RCTSinglelineTextInputView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = SinglelineTextInputNativeComponent;
    exports.default = _default;
  },
  163,
  [7, 123, 164, 128]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _ViewConfigIgnore = _$$_REQUIRE(_dependencyMap[0]);

    var RCTTextInputViewConfig = {
      bubblingEventTypes: {
        topBlur: {
          phasedRegistrationNames: {
            bubbled: "onBlur",
            captured: "onBlurCapture",
          },
        },
        topChange: {
          phasedRegistrationNames: {
            bubbled: "onChange",
            captured: "onChangeCapture",
          },
        },
        topContentSizeChange: {
          phasedRegistrationNames: {
            captured: "onContentSizeChangeCapture",
            bubbled: "onContentSizeChange",
          },
        },
        topEndEditing: {
          phasedRegistrationNames: {
            bubbled: "onEndEditing",
            captured: "onEndEditingCapture",
          },
        },
        topFocus: {
          phasedRegistrationNames: {
            bubbled: "onFocus",
            captured: "onFocusCapture",
          },
        },
        topKeyPress: {
          phasedRegistrationNames: {
            bubbled: "onKeyPress",
            captured: "onKeyPressCapture",
          },
        },
        topSubmitEditing: {
          phasedRegistrationNames: {
            bubbled: "onSubmitEditing",
            captured: "onSubmitEditingCapture",
          },
        },
        topTouchCancel: {
          phasedRegistrationNames: {
            bubbled: "onTouchCancel",
            captured: "onTouchCancelCapture",
          },
        },
        topTouchEnd: {
          phasedRegistrationNames: {
            bubbled: "onTouchEnd",
            captured: "onTouchEndCapture",
          },
        },
        topTouchMove: {
          phasedRegistrationNames: {
            bubbled: "onTouchMove",
            captured: "onTouchMoveCapture",
          },
        },
      },
      directEventTypes: {
        topTextInput: {
          registrationName: "onTextInput",
        },
        topKeyPressSync: {
          registrationName: "onKeyPressSync",
        },
        topScroll: {
          registrationName: "onScroll",
        },
        topSelectionChange: {
          registrationName: "onSelectionChange",
        },
        topChangeSync: {
          registrationName: "onChangeSync",
        },
      },
      validAttributes: Object.assign(
        {
          fontSize: true,
          fontWeight: true,
          fontVariant: true,
          textShadowOffset: {
            diff: _$$_REQUIRE(_dependencyMap[1]),
          },
          allowFontScaling: true,
          fontStyle: true,
          textTransform: true,
          textAlign: true,
          fontFamily: true,
          lineHeight: true,
          isHighlighted: true,
          writingDirection: true,
          textDecorationLine: true,
          textShadowRadius: true,
          letterSpacing: true,
          textDecorationStyle: true,
          textDecorationColor: {
            process: _$$_REQUIRE(_dependencyMap[2]),
          },
          color: {
            process: _$$_REQUIRE(_dependencyMap[2]),
          },
          maxFontSizeMultiplier: true,
          textShadowColor: {
            process: _$$_REQUIRE(_dependencyMap[2]),
          },
          editable: true,
          inputAccessoryViewID: true,
          caretHidden: true,
          enablesReturnKeyAutomatically: true,
          placeholderTextColor: {
            process: _$$_REQUIRE(_dependencyMap[2]),
          },
          clearButtonMode: true,
          keyboardType: true,
          selection: true,
          returnKeyType: true,
          blurOnSubmit: true,
          mostRecentEventCount: true,
          scrollEnabled: true,
          selectionColor: {
            process: _$$_REQUIRE(_dependencyMap[2]),
          },
          contextMenuHidden: true,
          secureTextEntry: true,
          placeholder: true,
          autoCorrect: true,
          multiline: true,
          textContentType: true,
          maxLength: true,
          autoCapitalize: true,
          keyboardAppearance: true,
          passwordRules: true,
          spellCheck: true,
          selectTextOnFocus: true,
          text: true,
          clearTextOnFocus: true,
          showSoftInputOnFocus: true,
          autoFocus: true,
        },
        (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
          onChange: true,
          onSelectionChange: true,
          onContentSizeChange: true,
          onScroll: true,
          onChangeSync: true,
          onKeyPressSync: true,
          onTextInput: true,
        })
      ),
    };
    module.exports = RCTTextInputViewConfig;
  },
  164,
  [130, 141, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var logListeners;

    function unstable_setLogListeners(listeners) {
      logListeners = listeners;
    }

    var deepDiffer = function deepDiffer(one, two) {
      var maxDepthOrOptions =
        arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
      var options =
        typeof maxDepthOrOptions === "number"
          ? maybeOptions
          : maxDepthOrOptions;
      var maxDepth =
        typeof maxDepthOrOptions === "number" ? maxDepthOrOptions : -1;

      if (maxDepth === 0) {
        return true;
      }

      if (one === two) {
        return false;
      }

      if (typeof one === "function" && typeof two === "function") {
        var unsafelyIgnoreFunctions =
          options == null ? undefined : options.unsafelyIgnoreFunctions;

        if (unsafelyIgnoreFunctions == null) {
          if (
            logListeners &&
            logListeners.onDifferentFunctionsIgnored &&
            (!options || !("unsafelyIgnoreFunctions" in options))
          ) {
            logListeners.onDifferentFunctionsIgnored(one.name, two.name);
          }

          unsafelyIgnoreFunctions = true;
        }

        return !unsafelyIgnoreFunctions;
      }

      if (typeof one !== "object" || one === null) {
        return one !== two;
      }

      if (typeof two !== "object" || two === null) {
        return true;
      }

      if (one.constructor !== two.constructor) {
        return true;
      }

      if (Array.isArray(one)) {
        var len = one.length;

        if (two.length !== len) {
          return true;
        }

        for (var ii = 0; ii < len; ii++) {
          if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
            return true;
          }
        }
      } else {
        for (var key in one) {
          if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
            return true;
          }
        }

        for (var twoKey in two) {
          if (one[twoKey] === undefined && two[twoKey] !== undefined) {
            return true;
          }
        }
      }

      return false;
    };

    module.exports = deepDiffer;
    module.exports.unstable_setLogListeners = unstable_setLogListeners;
  },
  165,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function flattenStyle(style) {
      if (style === null || typeof style !== "object") {
        return undefined;
      }

      if (!Array.isArray(style)) {
        return style;
      }

      var result = {};

      for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
        var computedStyle = flattenStyle(style[i]);

        if (computedStyle) {
          for (var key in computedStyle) {
            result[key] = computedStyle[key];
          }
        }
      }

      return result;
    }

    module.exports = flattenStyle;
  },
  166,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _ExceptionsManager = _$$_REQUIRE(_dependencyMap[0]);

    var ReactFiberErrorDialog = {
      showErrorDialog: function showErrorDialog(_ref) {
        var componentStack = _ref.componentStack,
          errorValue = _ref.error;
        var error;

        if (errorValue instanceof Error) {
          error = errorValue;
        } else if (typeof errorValue === "string") {
          error = new _ExceptionsManager.SyntheticError(errorValue);
        } else {
          error = new _ExceptionsManager.SyntheticError("Unspecified error");
        }

        try {
          error.componentStack = componentStack;
          error.isComponentError = true;
        } catch (_unused) {}

        (0, _ExceptionsManager.handleException)(error, false);
        return false;
      },
    };
    var _default = ReactFiberErrorDialog;
    exports.default = _default;
  },
  167,
  [27]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    function legacySendAccessibilityEvent(reactTag, eventType) {
      if (eventType === "focus") {
        _UIManager.default.sendAccessibilityEvent(
          reactTag,
          _UIManager.default.getConstants().AccessibilityEventTypes
            .typeViewFocused
        );
      }

      if (eventType === "click") {
        _UIManager.default.sendAccessibilityEvent(
          reactTag,
          _UIManager.default.getConstants().AccessibilityEventTypes
            .typeViewClicked
        );
      }
    }

    module.exports = legacySendAccessibilityEvent;
  },
  168,
  [7, 142]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var RawEventEmitter = new _EventEmitter.default();
    var _default = RawEventEmitter;
    exports.default = _default;
  },
  169,
  [7, 9]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _EventPolyfill2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var CustomEvent = (function (_EventPolyfill) {
      (0, _inherits2.default)(CustomEvent, _EventPolyfill);

      var _super = _createSuper(CustomEvent);

      function CustomEvent(typeArg, options) {
        var _this;

        (0, _classCallCheck2.default)(this, CustomEvent);
        var bubbles = options.bubbles,
          cancelable = options.cancelable,
          composed = options.composed;
        _this = _super.call(this, typeArg, {
          bubbles: bubbles,
          cancelable: cancelable,
          composed: composed,
        });
        _this.detail = options.detail;
        return _this;
      }

      return (0, _createClass2.default)(CustomEvent);
    })(_EventPolyfill2.default);

    var _default = CustomEvent;
    exports.default = _default;
  },
  170,
  [7, 17, 16, 28, 30, 33, 171]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var EventPolyfill = (function () {
      function EventPolyfill(type, eventInitDict) {
        (0, _classCallCheck2.default)(this, EventPolyfill);
        this.type = type;
        this.bubbles = !!(
          (eventInitDict != null && eventInitDict.bubbles) ||
          false
        );
        this.cancelable = !!(
          (eventInitDict != null && eventInitDict.cancelable) ||
          false
        );
        this.composed = !!(
          (eventInitDict != null && eventInitDict.composed) ||
          false
        );
        this.scoped = !!(
          (eventInitDict != null && eventInitDict.scoped) ||
          false
        );
        this.isTrusted = false;
        this.timeStamp = Date.now();
        this.defaultPrevented = false;
        this.NONE = 0;
        this.AT_TARGET = 1;
        this.BUBBLING_PHASE = 2;
        this.CAPTURING_PHASE = 3;
        this.eventPhase = this.NONE;
        this.currentTarget = null;
        this.target = null;
        this.srcElement = null;
      }

      (0, _createClass2.default)(EventPolyfill, [
        {
          key: "composedPath",
          value: function composedPath() {
            throw new Error("TODO: not yet implemented");
          },
        },
        {
          key: "preventDefault",
          value: function preventDefault() {
            this.defaultPrevented = true;

            if (this._syntheticEvent != null) {
              this._syntheticEvent.preventDefault();
            }
          },
        },
        {
          key: "initEvent",
          value: function initEvent(type, bubbles, cancelable) {
            throw new Error(
              "TODO: not yet implemented. This method is also deprecated."
            );
          },
        },
        {
          key: "stopImmediatePropagation",
          value: function stopImmediatePropagation() {
            throw new Error("TODO: not yet implemented");
          },
        },
        {
          key: "stopPropagation",
          value: function stopPropagation() {
            if (this._syntheticEvent != null) {
              this._syntheticEvent.stopPropagation();
            }
          },
        },
        {
          key: "setSyntheticEvent",
          value: function setSyntheticEvent(value) {
            this._syntheticEvent = value;
          },
        },
      ]);
      return EventPolyfill;
    })();

    global.Event = EventPolyfill;
    var _default = EventPolyfill;
    exports.default = _default;
  },
  171,
  [7, 16, 17]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("AccessibilityInfo");

    exports.default = _default;
  },
  172,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("AccessibilityManager");

    exports.default = _default;
  },
  173,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[6]);

    var _excluded = [
      "animating",
      "color",
      "hidesWhenStopped",
      "onLayout",
      "size",
      "style",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var PlatformActivityIndicator =
      _Platform.default.OS === "android"
        ? _$$_REQUIRE(_dependencyMap[7])
        : _$$_REQUIRE(_dependencyMap[8]).default;
    var GRAY = "#999999";

    var ActivityIndicator = function ActivityIndicator(_ref, forwardedRef) {
      var _ref$animating = _ref.animating,
        animating = _ref$animating === undefined ? true : _ref$animating,
        _ref$color = _ref.color,
        color =
          _ref$color === undefined
            ? _Platform.default.OS === "ios"
              ? GRAY
              : null
            : _ref$color,
        _ref$hidesWhenStopped = _ref.hidesWhenStopped,
        hidesWhenStopped =
          _ref$hidesWhenStopped === undefined ? true : _ref$hidesWhenStopped,
        onLayout = _ref.onLayout,
        _ref$size = _ref.size,
        size = _ref$size === undefined ? "small" : _ref$size,
        style = _ref.style,
        restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      var sizeStyle;
      var sizeProp;

      switch (size) {
        case "small":
          sizeStyle = styles.sizeSmall;
          sizeProp = "small";
          break;

        case "large":
          sizeStyle = styles.sizeLarge;
          sizeProp = "large";
          break;

        default:
          sizeStyle = {
            height: size,
            width: size,
          };
          break;
      }

      var nativeProps = Object.assign(
        {
          animating: animating,
          color: color,
          hidesWhenStopped: hidesWhenStopped,
        },
        restProps,
        {
          ref: forwardedRef,
          style: sizeStyle,
          size: sizeProp,
        }
      );
      var androidProps = {
        styleAttr: "Normal",
        indeterminate: true,
      };
      return (0, _jsxRuntime.jsx)(_View.default, {
        onLayout: onLayout,
        style: _StyleSheet.default.compose(styles.container, style),
        children:
          _Platform.default.OS === "android"
            ? (0, _jsxRuntime.jsx)(
                PlatformActivityIndicator,
                Object.assign({}, nativeProps, androidProps)
              )
            : (0, _jsxRuntime.jsx)(
                PlatformActivityIndicator,
                Object.assign({}, nativeProps)
              ),
      });
    };

    var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
    ActivityIndicatorWithRef.displayName = "ActivityIndicator";

    var styles = _StyleSheet.default.create({
      container: {
        alignItems: "center",
        justifyContent: "center",
      },
      sizeSmall: {
        width: 20,
        height: 20,
      },
      sizeLarge: {
        width: 36,
        height: 36,
      },
    });

    module.exports = ActivityIndicatorWithRef;
  },
  174,
  [7, 92, 1, 54, 175, 176, 179, 181, 186]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var PixelRatio = _$$_REQUIRE(_dependencyMap[0]);

    var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[1]);

    var flatten = _$$_REQUIRE(_dependencyMap[2]);

    var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

    if (hairlineWidth === 0) {
      hairlineWidth = 1 / PixelRatio.get();
    }

    var absoluteFill = {
      position: "absolute",
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
    };
    module.exports = {
      hairlineWidth: hairlineWidth,
      absoluteFill: absoluteFill,
      absoluteFillObject: absoluteFill,
      compose: function compose(style1, style2) {
        if (style1 != null && style2 != null) {
          return [style1, style2];
        } else {
          return style1 != null ? style1 : style2;
        }
      },
      flatten: flatten,
      setStyleAttributePreprocessor: function setStyleAttributePreprocessor(
        property,
        process
      ) {
        var _ReactNativeStyleAttr, _ReactNativeStyleAttr2;

        var value;

        if (ReactNativeStyleAttributes[property] === true) {
          value = {
            process: process,
          };
        } else if (typeof ReactNativeStyleAttributes[property] === "object") {
          value = Object.assign({}, ReactNativeStyleAttributes[property], {
            process: process,
          });
        } else {
          console.error(property + " is not a valid style attribute");
          return;
        }

        ReactNativeStyleAttributes[property] = value;
      },
      create: function create(obj) {
        return obj;
      },
    };
  },
  175,
  [152, 134, 166]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _ViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var View = React.forwardRef(function (props, forwardedRef) {
      return (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
        value: false,
        children: (0, _jsxRuntime.jsx)(
          _ViewNativeComponent.default,
          Object.assign({}, props, {
            ref: forwardedRef,
          })
        ),
      });
    });
    View.displayName = "View";
    module.exports = View;
  },
  176,
  [7, 177, 178, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default =
      exports.__INTERNAL_VIEW_CONFIG =
      exports.Commands =
        undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG =
      _Platform.default.OS === "android"
        ? {
            uiViewClassName: "RCTView",
            validAttributes: {
              removeClippedSubviews: true,
              accessible: true,
              hasTVPreferredFocus: true,
              nextFocusDown: true,
              nextFocusForward: true,
              nextFocusLeft: true,
              nextFocusRight: true,
              nextFocusUp: true,
              borderRadius: true,
              borderTopLeftRadius: true,
              borderTopRightRadius: true,
              borderBottomRightRadius: true,
              borderBottomLeftRadius: true,
              borderTopStartRadius: true,
              borderTopEndRadius: true,
              borderBottomStartRadius: true,
              borderBottomEndRadius: true,
              borderStyle: true,
              hitSlop: true,
              pointerEvents: true,
              nativeBackgroundAndroid: true,
              nativeForegroundAndroid: true,
              needsOffscreenAlphaCompositing: true,
              borderWidth: true,
              borderLeftWidth: true,
              borderRightWidth: true,
              borderTopWidth: true,
              borderBottomWidth: true,
              borderStartWidth: true,
              borderEndWidth: true,
              borderColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderLeftColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderRightColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderTopColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderBottomColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderStartColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderEndColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              focusable: true,
              overflow: true,
              backfaceVisibility: true,
            },
          }
        : {
            uiViewClassName: "RCTView",
          };

    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var ViewNativeComponent = NativeComponentRegistry.get(
      "RCTView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["hotspotUpdate", "setPressed"],
    });
    exports.Commands = Commands;
    var _default = ViewNativeComponent;
    exports.default = _default;
  },
  177,
  [7, 128, 123, 54, 1, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var React = _$$_REQUIRE(_dependencyMap[0]);

    var TextAncestorContext = React.createContext(false);
    module.exports = TextAncestorContext;
  },
  178,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    {
      module.exports = _$$_REQUIRE(_dependencyMap[0]);
    }
  },
  179,
  [180]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    /**
     * @license React
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";

    var f = _$$_REQUIRE(_dependencyMap[0]),
      k = Symbol.for("react.element"),
      l = Symbol.for("react.fragment"),
      m = Object.prototype.hasOwnProperty,
      n =
        f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
      p = {
        key: true,
        ref: true,
        __self: true,
        __source: true,
      };

    function q(c, a, g) {
      var b,
        d = {},
        e = null,
        h = null;
      undefined !== g && (e = "" + g);
      undefined !== a.key && (e = "" + a.key);
      undefined !== a.ref && (h = a.ref);

      for (b in a) {
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
      }

      if (c && c.defaultProps)
        for (b in ((a = c.defaultProps), a)) {
          undefined === d[b] && (d[b] = a[b]);
        }
      return {
        $$typeof: k,
        type: c,
        key: e,
        ref: h,
        props: d,
        _owner: n.current,
      };
    }

    exports.Fragment = l;
    exports.jsx = q;
    exports.jsxs = q;
  },
  180,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ProgressBarAndroidNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[3]);

    var _excluded = ["styleAttr", "indeterminate", "animating"];

    var React = _$$_REQUIRE(_dependencyMap[4]);

    var ProgressBarAndroid = function ProgressBarAndroid(_ref, forwardedRef) {
      var _ref$styleAttr = _ref.styleAttr,
        styleAttr = _ref$styleAttr === undefined ? "Normal" : _ref$styleAttr,
        _ref$indeterminate = _ref.indeterminate,
        indeterminate =
          _ref$indeterminate === undefined ? true : _ref$indeterminate,
        _ref$animating = _ref.animating,
        animating = _ref$animating === undefined ? true : _ref$animating,
        restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(
        _ProgressBarAndroidNativeComponent.default,
        Object.assign(
          {
            styleAttr: styleAttr,
            indeterminate: indeterminate,
            animating: animating,
          },
          restProps,
          {
            ref: forwardedRef,
          }
        )
      );
    };

    var ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);
    module.exports = ProgressBarAndroidToExport;
  },
  181,
  [7, 92, 182, 179, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)("AndroidProgressBar", {
      interfaceOnly: true,
    });

    exports.default = _default;
  },
  182,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _requireNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    function codegenNativeComponent(componentName, options) {
      if (global.RN$Bridgeless === true) {
        var errorMessage =
          "Native Component '" +
          componentName +
          "' that calls codegenNativeComponent was not code generated at build time. Please check its definition.";
        console.error(errorMessage);
      }

      var componentNameInUse =
        options && options.paperComponentName != null
          ? options.paperComponentName
          : componentName;

      if (options != null && options.paperComponentNameDeprecated != null) {
        if (_UIManager.default.hasViewManagerConfig(componentName)) {
          componentNameInUse = componentName;
        } else if (
          options.paperComponentNameDeprecated != null &&
          _UIManager.default.hasViewManagerConfig(
            options.paperComponentNameDeprecated
          )
        ) {
          componentNameInUse = options.paperComponentNameDeprecated;
        } else {
          var _options$paperCompone;

          throw new Error(
            "Failed to find native component for either " +
              componentName +
              " or " +
              ((_options$paperCompone = options.paperComponentNameDeprecated) !=
              null
                ? _options$paperCompone
                : "(unknown)")
          );
        }
      }

      return (0, _requireNativeComponent.default)(componentNameInUse);
    }

    var _default = codegenNativeComponent;
    exports.default = _default;
  },
  183,
  [7, 184, 142]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[0]);

    var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[1]);

    var requireNativeComponent = function requireNativeComponent(
      uiViewClassName
    ) {
      return createReactNativeComponentClass(uiViewClassName, function () {
        return getNativeComponentAttributes(uiViewClassName);
      });
    };

    module.exports = requireNativeComponent;
  },
  184,
  [185, 148]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[0]);

    var register =
      _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;

    var createReactNativeComponentClass =
      function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

    module.exports = createReactNativeComponentClass;
  },
  185,
  [118]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)(
      "ActivityIndicatorView",
      {
        paperComponentName: "RCTActivityIndicatorView",
      }
    );

    exports.default = _default;
  },
  186,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _TouchableNativeFeedback = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[10])
    );

    var _TouchableOpacity = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[14]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Button = (function (_React$Component) {
      (0, _inherits2.default)(Button, _React$Component);

      var _super = _createSuper(Button);

      function Button() {
        (0, _classCallCheck2.default)(this, Button);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(Button, [
        {
          key: "render",
          value: function render() {
            var _this$props$accessibi, _this$props$accessibi2;

            var _this$props = this.props,
              accessibilityLabel = _this$props.accessibilityLabel,
              color = _this$props.color,
              onPress = _this$props.onPress,
              touchSoundDisabled = _this$props.touchSoundDisabled,
              title = _this$props.title,
              hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
              nextFocusDown = _this$props.nextFocusDown,
              nextFocusForward = _this$props.nextFocusForward,
              nextFocusLeft = _this$props.nextFocusLeft,
              nextFocusRight = _this$props.nextFocusRight,
              nextFocusUp = _this$props.nextFocusUp,
              testID = _this$props.testID,
              accessible = _this$props.accessible,
              accessibilityActions = _this$props.accessibilityActions,
              accessibilityHint = _this$props.accessibilityHint,
              accessibilityLanguage = _this$props.accessibilityLanguage,
              onAccessibilityAction = _this$props.onAccessibilityAction;
            var buttonStyles = [styles.button];
            var textStyles = [styles.text];

            if (color) {
              if (_Platform.default.OS === "ios") {
                textStyles.push({
                  color: color,
                });
              } else {
                buttonStyles.push({
                  backgroundColor: color,
                });
              }
            }

            var disabled =
              this.props.disabled != null
                ? this.props.disabled
                : (_this$props$accessibi = this.props.accessibilityState) ==
                  null
                ? undefined
                : _this$props$accessibi.disabled;
            var accessibilityState =
              disabled !==
              ((_this$props$accessibi2 = this.props.accessibilityState) == null
                ? undefined
                : _this$props$accessibi2.disabled)
                ? Object.assign({}, this.props.accessibilityState, {
                    disabled: disabled,
                  })
                : this.props.accessibilityState;

            if (disabled) {
              buttonStyles.push(styles.buttonDisabled);
              textStyles.push(styles.textDisabled);
            }

            (0, _invariant.default)(
              typeof title === "string",
              "The title prop of a Button must be a string"
            );
            var formattedTitle =
              _Platform.default.OS === "android" ? title.toUpperCase() : title;
            var Touchable =
              _Platform.default.OS === "android"
                ? _TouchableNativeFeedback.default
                : _TouchableOpacity.default;
            return (0, _jsxRuntime.jsx)(Touchable, {
              accessible: accessible,
              accessibilityActions: accessibilityActions,
              onAccessibilityAction: onAccessibilityAction,
              accessibilityLabel: accessibilityLabel,
              accessibilityHint: accessibilityHint,
              accessibilityLanguage: accessibilityLanguage,
              accessibilityRole: "button",
              accessibilityState: accessibilityState,
              hasTVPreferredFocus: hasTVPreferredFocus,
              nextFocusDown: nextFocusDown,
              nextFocusForward: nextFocusForward,
              nextFocusLeft: nextFocusLeft,
              nextFocusRight: nextFocusRight,
              nextFocusUp: nextFocusUp,
              testID: testID,
              disabled: disabled,
              onPress: onPress,
              touchSoundDisabled: touchSoundDisabled,
              children: (0, _jsxRuntime.jsx)(_View.default, {
                style: buttonStyles,
                children: (0, _jsxRuntime.jsx)(_Text.default, {
                  style: textStyles,
                  disabled: disabled,
                  children: formattedTitle,
                }),
              }),
            });
          },
        },
      ]);
      return Button;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      button: _Platform.default.select({
        ios: {},
        android: {
          elevation: 4,
          backgroundColor: "#2196F3",
          borderRadius: 2,
        },
      }),
      text: Object.assign(
        {
          textAlign: "center",
          margin: 8,
        },
        _Platform.default.select({
          ios: {
            color: "#007AFF",
            fontSize: 18,
          },
          android: {
            color: "white",
            fontWeight: "500",
          },
        })
      ),
      buttonDisabled: _Platform.default.select({
        ios: {},
        android: {
          elevation: 0,
          backgroundColor: "#dfdfdf",
        },
      }),
      textDisabled: _Platform.default.select({
        ios: {
          color: "#cdcdcd",
        },
        android: {
          color: "#a1a1a1",
        },
      }),
    });

    module.exports = Button;
  },
  187,
  [7, 16, 17, 28, 30, 33, 1, 54, 175, 188, 200, 201, 176, 4, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var PressabilityDebug = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _usePressability = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _TextNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);

    var _excluded = [
      "accessible",
      "allowFontScaling",
      "ellipsizeMode",
      "onLongPress",
      "onPress",
      "onPressIn",
      "onPressOut",
      "onResponderGrant",
      "onResponderMove",
      "onResponderRelease",
      "onResponderTerminate",
      "onResponderTerminationRequest",
      "onStartShouldSetResponder",
      "pressRetentionOffset",
      "suppressHighlighting",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Text = React.forwardRef(function (props, forwardedRef) {
      var _props$accessibilityS, _props$accessibilityS2;

      var accessible = props.accessible,
        allowFontScaling = props.allowFontScaling,
        ellipsizeMode = props.ellipsizeMode,
        onLongPress = props.onLongPress,
        onPress = props.onPress,
        _onPressIn = props.onPressIn,
        _onPressOut = props.onPressOut,
        _onResponderGrant = props.onResponderGrant,
        _onResponderMove = props.onResponderMove,
        _onResponderRelease = props.onResponderRelease,
        _onResponderTerminate = props.onResponderTerminate,
        onResponderTerminationRequest = props.onResponderTerminationRequest,
        onStartShouldSetResponder = props.onStartShouldSetResponder,
        pressRetentionOffset = props.pressRetentionOffset,
        suppressHighlighting = props.suppressHighlighting,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);

      var _useState = (0, React.useState)(false),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        isHighlighted = _useState2[0],
        setHighlighted = _useState2[1];

      var _disabled =
        restProps.disabled != null
          ? restProps.disabled
          : (_props$accessibilityS = props.accessibilityState) == null
          ? undefined
          : _props$accessibilityS.disabled;

      var _accessibilityState =
        _disabled !==
        ((_props$accessibilityS2 = props.accessibilityState) == null
          ? undefined
          : _props$accessibilityS2.disabled)
          ? Object.assign({}, props.accessibilityState, {
              disabled: _disabled,
            })
          : props.accessibilityState;

      var isPressable =
        (onPress != null ||
          onLongPress != null ||
          onStartShouldSetResponder != null) &&
        _disabled !== true;
      var initialized = useLazyInitialization(isPressable);
      var config = (0, React.useMemo)(
        function () {
          return initialized
            ? {
                disabled: !isPressable,
                pressRectOffset: pressRetentionOffset,
                onLongPress: onLongPress,
                onPress: onPress,
                onPressIn: function onPressIn(event) {
                  setHighlighted(!suppressHighlighting);
                  _onPressIn == null ? undefined : _onPressIn(event);
                },
                onPressOut: function onPressOut(event) {
                  setHighlighted(false);
                  _onPressOut == null ? undefined : _onPressOut(event);
                },
                onResponderTerminationRequest_DEPRECATED:
                  onResponderTerminationRequest,
                onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,
              }
            : null;
        },
        [
          initialized,
          isPressable,
          pressRetentionOffset,
          onLongPress,
          onPress,
          _onPressIn,
          _onPressOut,
          onResponderTerminationRequest,
          onStartShouldSetResponder,
          suppressHighlighting,
        ]
      );
      var eventHandlers = (0, _usePressability.default)(config);
      var eventHandlersForText = (0, React.useMemo)(
        function () {
          return eventHandlers == null
            ? null
            : {
                onResponderGrant: function onResponderGrant(event) {
                  eventHandlers.onResponderGrant(event);

                  if (_onResponderGrant != null) {
                    _onResponderGrant(event);
                  }
                },
                onResponderMove: function onResponderMove(event) {
                  eventHandlers.onResponderMove(event);

                  if (_onResponderMove != null) {
                    _onResponderMove(event);
                  }
                },
                onResponderRelease: function onResponderRelease(event) {
                  eventHandlers.onResponderRelease(event);

                  if (_onResponderRelease != null) {
                    _onResponderRelease(event);
                  }
                },
                onResponderTerminate: function onResponderTerminate(event) {
                  eventHandlers.onResponderTerminate(event);

                  if (_onResponderTerminate != null) {
                    _onResponderTerminate(event);
                  }
                },
                onClick: eventHandlers.onClick,
                onResponderTerminationRequest:
                  eventHandlers.onResponderTerminationRequest,
                onStartShouldSetResponder:
                  eventHandlers.onStartShouldSetResponder,
              };
        },
        [
          eventHandlers,
          _onResponderGrant,
          _onResponderMove,
          _onResponderRelease,
          _onResponderTerminate,
        ]
      );
      var selectionColor =
        restProps.selectionColor == null
          ? null
          : (0, _processColor.default)(restProps.selectionColor);
      var style = restProps.style;
      var numberOfLines = restProps.numberOfLines;

      if (numberOfLines != null && !(numberOfLines >= 0)) {
        console.error(
          "'numberOfLines' in <Text> must be a non-negative number, received: " +
            numberOfLines +
            ". The value will be set to 0."
        );
        numberOfLines = 0;
      }

      var hasTextAncestor = (0, React.useContext)(_TextAncestor.default);

      var _accessible = _Platform.default.select({
        ios: accessible !== false,
        default: accessible,
      });

      return hasTextAncestor
        ? (0, _jsxRuntime.jsx)(
            _TextNativeComponent.NativeVirtualText,
            Object.assign({}, restProps, eventHandlersForText, {
              isHighlighted: isHighlighted,
              isPressable: isPressable,
              numberOfLines: numberOfLines,
              selectionColor: selectionColor,
              style: style,
              ref: forwardedRef,
            })
          )
        : (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
            value: true,
            children: (0, _jsxRuntime.jsx)(
              _TextNativeComponent.NativeText,
              Object.assign({}, restProps, eventHandlersForText, {
                disabled: _disabled,
                accessible: _accessible,
                accessibilityState: _accessibilityState,
                allowFontScaling: allowFontScaling !== false,
                ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : "tail",
                isHighlighted: isHighlighted,
                numberOfLines: numberOfLines,
                selectionColor: selectionColor,
                style: style,
                ref: forwardedRef,
              })
            ),
          });
    });
    Text.displayName = "Text";

    function useLazyInitialization(newValue) {
      var _useState3 = (0, React.useState)(newValue),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        oldValue = _useState4[0],
        setValue = _useState4[1];

      if (!oldValue && newValue) {
        setValue(newValue);
      }

      return oldValue;
    }

    module.exports = Text;
  },
  188,
  [7, 44, 92, 54, 189, 191, 175, 135, 178, 198, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.PressabilityDebugView = PressabilityDebugView;
    exports.isEnabled = isEnabled;
    exports.setEnabled = setEnabled;

    var _normalizeColor = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _Rect = _$$_REQUIRE(_dependencyMap[2]);

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[5]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function PressabilityDebugView(props) {
      return null;
    }

    var isDebugEnabled = false;

    function isEnabled() {
      return false;
    }

    function setEnabled(value) {}
  },
  189,
  [7, 136, 190, 176, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.createSquare = createSquare;
    exports.normalizeRect = normalizeRect;

    function createSquare(size) {
      return {
        bottom: size,
        left: size,
        right: size,
        top: size,
      };
    }

    function normalizeRect(rectOrSize) {
      return typeof rectOrSize === "number"
        ? createSquare(rectOrSize)
        : rectOrSize;
    }
  },
  190,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = usePressability;

    var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _react = _$$_REQUIRE(_dependencyMap[2]);

    function usePressability(config) {
      var pressabilityRef = (0, _react.useRef)(null);

      if (config != null && pressabilityRef.current == null) {
        pressabilityRef.current = new _Pressability.default(config);
      }

      var pressability = pressabilityRef.current;
      (0, _react.useEffect)(
        function () {
          if (config != null && pressability != null) {
            pressability.configure(config);
          }
        },
        [config, pressability]
      );
      (0, _react.useEffect)(
        function () {
          if (pressability != null) {
            return function () {
              pressability.reset();
            };
          }
        },
        [pressability]
      );
      return pressability == null ? null : pressability.getEventHandlers();
    }
  },
  191,
  [7, 192, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _HoverState = _$$_REQUIRE(_dependencyMap[3]);

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _SoundManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _Rect = _$$_REQUIRE(_dependencyMap[6]);

    var _PressabilityPerformanceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _ReactNativeFeatureFlags = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Transitions = Object.freeze({
      NOT_RESPONDER: {
        DELAY: "ERROR",
        RESPONDER_GRANT: "RESPONDER_INACTIVE_PRESS_IN",
        RESPONDER_RELEASE: "ERROR",
        RESPONDER_TERMINATED: "ERROR",
        ENTER_PRESS_RECT: "ERROR",
        LEAVE_PRESS_RECT: "ERROR",
        LONG_PRESS_DETECTED: "ERROR",
      },
      RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: "RESPONDER_ACTIVE_PRESS_IN",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_INACTIVE_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_INACTIVE_PRESS_OUT",
        LONG_PRESS_DETECTED: "ERROR",
      },
      RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: "RESPONDER_ACTIVE_PRESS_OUT",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_INACTIVE_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_INACTIVE_PRESS_OUT",
        LONG_PRESS_DETECTED: "ERROR",
      },
      RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: "ERROR",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_ACTIVE_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_ACTIVE_PRESS_OUT",
        LONG_PRESS_DETECTED: "RESPONDER_ACTIVE_LONG_PRESS_IN",
      },
      RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: "ERROR",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_ACTIVE_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_ACTIVE_PRESS_OUT",
        LONG_PRESS_DETECTED: "ERROR",
      },
      RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: "ERROR",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_ACTIVE_LONG_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_ACTIVE_LONG_PRESS_OUT",
        LONG_PRESS_DETECTED: "RESPONDER_ACTIVE_LONG_PRESS_IN",
      },
      RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: "ERROR",
        RESPONDER_GRANT: "ERROR",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "RESPONDER_ACTIVE_LONG_PRESS_IN",
        LEAVE_PRESS_RECT: "RESPONDER_ACTIVE_LONG_PRESS_OUT",
        LONG_PRESS_DETECTED: "ERROR",
      },
      ERROR: {
        DELAY: "NOT_RESPONDER",
        RESPONDER_GRANT: "RESPONDER_INACTIVE_PRESS_IN",
        RESPONDER_RELEASE: "NOT_RESPONDER",
        RESPONDER_TERMINATED: "NOT_RESPONDER",
        ENTER_PRESS_RECT: "NOT_RESPONDER",
        LEAVE_PRESS_RECT: "NOT_RESPONDER",
        LONG_PRESS_DETECTED: "NOT_RESPONDER",
      },
    });

    var isActiveSignal = function isActiveSignal(signal) {
      return (
        signal === "RESPONDER_ACTIVE_PRESS_IN" ||
        signal === "RESPONDER_ACTIVE_LONG_PRESS_IN"
      );
    };

    var isActivationSignal = function isActivationSignal(signal) {
      return (
        signal === "RESPONDER_ACTIVE_PRESS_OUT" ||
        signal === "RESPONDER_ACTIVE_PRESS_IN"
      );
    };

    var isPressInSignal = function isPressInSignal(signal) {
      return (
        signal === "RESPONDER_INACTIVE_PRESS_IN" ||
        signal === "RESPONDER_ACTIVE_PRESS_IN" ||
        signal === "RESPONDER_ACTIVE_LONG_PRESS_IN"
      );
    };

    var isTerminalSignal = function isTerminalSignal(signal) {
      return (
        signal === "RESPONDER_TERMINATED" || signal === "RESPONDER_RELEASE"
      );
    };

    var DEFAULT_LONG_PRESS_DELAY_MS = 500;
    var DEFAULT_PRESS_RECT_OFFSETS = {
      bottom: 30,
      left: 20,
      right: 20,
      top: 20,
    };
    var DEFAULT_MIN_PRESS_DURATION = 130;

    var Pressability = (function () {
      function Pressability(config) {
        var _this = this;

        (0, _classCallCheck2.default)(this, Pressability);
        this._eventHandlers = null;
        this._hoverInDelayTimeout = null;
        this._hoverOutDelayTimeout = null;
        this._isHovered = false;
        this._longPressDelayTimeout = null;
        this._pressDelayTimeout = null;
        this._pressOutDelayTimeout = null;
        this._responderID = null;
        this._responderRegion = null;
        this._touchState = "NOT_RESPONDER";

        this._measureCallback = function (
          left,
          top,
          width,
          height,
          pageX,
          pageY
        ) {
          if (!left && !top && !width && !height && !pageX && !pageY) {
            return;
          }

          _this._responderRegion = {
            bottom: pageY + height,
            left: pageX,
            right: pageX + width,
            top: pageY,
          };
        };

        this.configure(config);
      }

      (0, _createClass2.default)(Pressability, [
        {
          key: "configure",
          value: function configure(config) {
            this._config = config;
          },
        },
        {
          key: "reset",
          value: function reset() {
            this._cancelHoverInDelayTimeout();

            this._cancelHoverOutDelayTimeout();

            this._cancelLongPressDelayTimeout();

            this._cancelPressDelayTimeout();

            this._cancelPressOutDelayTimeout();

            this._config = Object.freeze({});
          },
        },
        {
          key: "getEventHandlers",
          value: function getEventHandlers() {
            if (this._eventHandlers == null) {
              this._eventHandlers = this._createEventHandlers();
            }

            return this._eventHandlers;
          },
        },
        {
          key: "_createEventHandlers",
          value: function _createEventHandlers() {
            var _this2 = this;

            var focusEventHandlers = {
              onBlur: function onBlur(event) {
                var onBlur = _this2._config.onBlur;

                if (onBlur != null) {
                  onBlur(event);
                }
              },
              onFocus: function onFocus(event) {
                var onFocus = _this2._config.onFocus;

                if (onFocus != null) {
                  onFocus(event);
                }
              },
            };
            var responderEventHandlers = {
              onStartShouldSetResponder: function onStartShouldSetResponder() {
                var disabled = _this2._config.disabled;

                if (disabled == null) {
                  var onStartShouldSetResponder_DEPRECATED =
                    _this2._config.onStartShouldSetResponder_DEPRECATED;
                  return onStartShouldSetResponder_DEPRECATED == null
                    ? true
                    : onStartShouldSetResponder_DEPRECATED();
                }

                return !disabled;
              },
              onResponderGrant: function onResponderGrant(event) {
                event.persist();

                _this2._cancelPressOutDelayTimeout();

                _this2._responderID = event.currentTarget;
                _this2._touchState = "NOT_RESPONDER";

                _this2._receiveSignal("RESPONDER_GRANT", event);

                var delayPressIn = normalizeDelay(_this2._config.delayPressIn);

                if (delayPressIn > 0) {
                  _this2._pressDelayTimeout = setTimeout(function () {
                    _this2._receiveSignal("DELAY", event);
                  }, delayPressIn);
                } else {
                  _this2._receiveSignal("DELAY", event);
                }

                var delayLongPress = normalizeDelay(
                  _this2._config.delayLongPress,
                  10,
                  DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn
                );
                _this2._longPressDelayTimeout = setTimeout(function () {
                  _this2._handleLongPress(event);
                }, delayLongPress + delayPressIn);
              },
              onResponderMove: function onResponderMove(event) {
                var onPressMove = _this2._config.onPressMove;

                if (onPressMove != null) {
                  onPressMove(event);
                }

                var responderRegion = _this2._responderRegion;

                if (responderRegion == null) {
                  return;
                }

                var touch = getTouchFromPressEvent(event);

                if (touch == null) {
                  _this2._cancelLongPressDelayTimeout();

                  _this2._receiveSignal("LEAVE_PRESS_RECT", event);

                  return;
                }

                if (_this2._touchActivatePosition != null) {
                  var deltaX =
                    _this2._touchActivatePosition.pageX - touch.pageX;
                  var deltaY =
                    _this2._touchActivatePosition.pageY - touch.pageY;

                  if (Math.hypot(deltaX, deltaY) > 10) {
                    _this2._cancelLongPressDelayTimeout();
                  }
                }

                if (
                  _this2._isTouchWithinResponderRegion(touch, responderRegion)
                ) {
                  _this2._receiveSignal("ENTER_PRESS_RECT", event);
                } else {
                  _this2._cancelLongPressDelayTimeout();

                  _this2._receiveSignal("LEAVE_PRESS_RECT", event);
                }
              },
              onResponderRelease: function onResponderRelease(event) {
                _this2._receiveSignal("RESPONDER_RELEASE", event);
              },
              onResponderTerminate: function onResponderTerminate(event) {
                _this2._receiveSignal("RESPONDER_TERMINATED", event);
              },
              onResponderTerminationRequest:
                function onResponderTerminationRequest() {
                  var cancelable = _this2._config.cancelable;

                  if (cancelable == null) {
                    var onResponderTerminationRequest_DEPRECATED =
                      _this2._config.onResponderTerminationRequest_DEPRECATED;
                    return onResponderTerminationRequest_DEPRECATED == null
                      ? true
                      : onResponderTerminationRequest_DEPRECATED();
                  }

                  return cancelable;
                },
              onClick: function onClick(event) {
                var _this2$_config = _this2._config,
                  onPress = _this2$_config.onPress,
                  disabled = _this2$_config.disabled;

                if (onPress != null && disabled !== true) {
                  onPress(event);
                }
              },
            };

            if (
              _ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()
            ) {
              var hoverPointerEvents = {
                onPointerEnter: undefined,
                onPointerLeave: undefined,
              };
              var _this$_config = this._config,
                onHoverIn = _this$_config.onHoverIn,
                onHoverOut = _this$_config.onHoverOut;

              if (onHoverIn != null) {
                hoverPointerEvents.onPointerEnter = function (event) {
                  _this2._isHovered = true;

                  _this2._cancelHoverOutDelayTimeout();

                  if (onHoverIn != null) {
                    var delayHoverIn = normalizeDelay(
                      _this2._config.delayHoverIn
                    );

                    if (delayHoverIn > 0) {
                      event.persist();
                      _this2._hoverInDelayTimeout = setTimeout(function () {
                        onHoverIn(convertPointerEventToMouseEvent(event));
                      }, delayHoverIn);
                    } else {
                      onHoverIn(convertPointerEventToMouseEvent(event));
                    }
                  }
                };
              }

              if (onHoverOut != null) {
                hoverPointerEvents.onPointerLeave = function (event) {
                  if (_this2._isHovered) {
                    _this2._isHovered = false;

                    _this2._cancelHoverInDelayTimeout();

                    if (onHoverOut != null) {
                      var delayHoverOut = normalizeDelay(
                        _this2._config.delayHoverOut
                      );

                      if (delayHoverOut > 0) {
                        event.persist();
                        _this2._hoverOutDelayTimeout = setTimeout(function () {
                          onHoverOut(convertPointerEventToMouseEvent(event));
                        }, delayHoverOut);
                      } else {
                        onHoverOut(convertPointerEventToMouseEvent(event));
                      }
                    }
                  }
                };
              }

              return Object.assign(
                {},
                focusEventHandlers,
                responderEventHandlers,
                hoverPointerEvents
              );
            } else {
              var mouseEventHandlers =
                _Platform.default.OS === "ios" ||
                _Platform.default.OS === "android"
                  ? null
                  : {
                      onMouseEnter: function onMouseEnter(event) {
                        if ((0, _HoverState.isHoverEnabled)()) {
                          _this2._isHovered = true;

                          _this2._cancelHoverOutDelayTimeout();

                          var _onHoverIn = _this2._config.onHoverIn;

                          if (_onHoverIn != null) {
                            var delayHoverIn = normalizeDelay(
                              _this2._config.delayHoverIn
                            );

                            if (delayHoverIn > 0) {
                              event.persist();
                              _this2._hoverInDelayTimeout = setTimeout(
                                function () {
                                  _onHoverIn(event);
                                },
                                delayHoverIn
                              );
                            } else {
                              _onHoverIn(event);
                            }
                          }
                        }
                      },
                      onMouseLeave: function onMouseLeave(event) {
                        if (_this2._isHovered) {
                          _this2._isHovered = false;

                          _this2._cancelHoverInDelayTimeout();

                          var _onHoverOut = _this2._config.onHoverOut;

                          if (_onHoverOut != null) {
                            var delayHoverOut = normalizeDelay(
                              _this2._config.delayHoverOut
                            );

                            if (delayHoverOut > 0) {
                              event.persist();
                              _this2._hoverInDelayTimeout = setTimeout(
                                function () {
                                  _onHoverOut(event);
                                },
                                delayHoverOut
                              );
                            } else {
                              _onHoverOut(event);
                            }
                          }
                        }
                      },
                    };
              return Object.assign(
                {},
                focusEventHandlers,
                responderEventHandlers,
                mouseEventHandlers
              );
            }
          },
        },
        {
          key: "_receiveSignal",
          value: function _receiveSignal(signal, event) {
            var _Transitions$prevStat;

            if (event.nativeEvent.timestamp != null) {
              _PressabilityPerformanceEventEmitter.default.emitEvent(
                function () {
                  return {
                    signal: signal,
                    nativeTimestamp: event.nativeEvent.timestamp,
                  };
                }
              );
            }

            var prevState = this._touchState;
            var nextState =
              (_Transitions$prevStat = Transitions[prevState]) == null
                ? undefined
                : _Transitions$prevStat[signal];

            if (this._responderID == null && signal === "RESPONDER_RELEASE") {
              return;
            }

            (0, _invariant.default)(
              nextState != null && nextState !== "ERROR",
              "Pressability: Invalid signal `%s` for state `%s` on responder: %s",
              signal,
              prevState,
              typeof this._responderID === "number"
                ? this._responderID
                : "<<host component>>"
            );

            if (prevState !== nextState) {
              this._performTransitionSideEffects(
                prevState,
                nextState,
                signal,
                event
              );

              this._touchState = nextState;
            }
          },
        },
        {
          key: "_performTransitionSideEffects",
          value: function _performTransitionSideEffects(
            prevState,
            nextState,
            signal,
            event
          ) {
            if (isTerminalSignal(signal)) {
              this._touchActivatePosition = null;

              this._cancelLongPressDelayTimeout();
            }

            var isInitialTransition =
              prevState === "NOT_RESPONDER" &&
              nextState === "RESPONDER_INACTIVE_PRESS_IN";
            var isActivationTransition =
              !isActivationSignal(prevState) && isActivationSignal(nextState);

            if (isInitialTransition || isActivationTransition) {
              this._measureResponderRegion();
            }

            if (
              isPressInSignal(prevState) &&
              signal === "LONG_PRESS_DETECTED"
            ) {
              var onLongPress = this._config.onLongPress;

              if (onLongPress != null) {
                onLongPress(event);
              }
            }

            var isPrevActive = isActiveSignal(prevState);
            var isNextActive = isActiveSignal(nextState);

            if (!isPrevActive && isNextActive) {
              this._activate(event);
            } else if (isPrevActive && !isNextActive) {
              this._deactivate(event);
            }

            if (isPressInSignal(prevState) && signal === "RESPONDER_RELEASE") {
              if (!isNextActive && !isPrevActive) {
                this._activate(event);

                this._deactivate(event);
              }

              var _this$_config2 = this._config,
                _onLongPress = _this$_config2.onLongPress,
                onPress = _this$_config2.onPress,
                android_disableSound = _this$_config2.android_disableSound;

              if (onPress != null) {
                var isPressCanceledByLongPress =
                  _onLongPress != null &&
                  prevState === "RESPONDER_ACTIVE_LONG_PRESS_IN" &&
                  this._shouldLongPressCancelPress();

                if (!isPressCanceledByLongPress) {
                  if (
                    _Platform.default.OS === "android" &&
                    android_disableSound !== true
                  ) {
                    _SoundManager.default.playTouchSound();
                  }

                  onPress(event);
                }
              }
            }

            this._cancelPressDelayTimeout();
          },
        },
        {
          key: "_activate",
          value: function _activate(event) {
            var onPressIn = this._config.onPressIn;

            var _getTouchFromPressEve = getTouchFromPressEvent(event),
              pageX = _getTouchFromPressEve.pageX,
              pageY = _getTouchFromPressEve.pageY;

            this._touchActivatePosition = {
              pageX: pageX,
              pageY: pageY,
            };
            this._touchActivateTime = Date.now();

            if (onPressIn != null) {
              onPressIn(event);
            }
          },
        },
        {
          key: "_deactivate",
          value: function _deactivate(event) {
            var onPressOut = this._config.onPressOut;

            if (onPressOut != null) {
              var _this$_touchActivateT;

              var minPressDuration = normalizeDelay(
                this._config.minPressDuration,
                0,
                DEFAULT_MIN_PRESS_DURATION
              );
              var pressDuration =
                Date.now() -
                ((_this$_touchActivateT = this._touchActivateTime) != null
                  ? _this$_touchActivateT
                  : 0);
              var delayPressOut = Math.max(
                minPressDuration - pressDuration,
                normalizeDelay(this._config.delayPressOut)
              );

              if (delayPressOut > 0) {
                event.persist();
                this._pressOutDelayTimeout = setTimeout(function () {
                  onPressOut(event);
                }, delayPressOut);
              } else {
                onPressOut(event);
              }
            }

            this._touchActivateTime = null;
          },
        },
        {
          key: "_measureResponderRegion",
          value: function _measureResponderRegion() {
            if (this._responderID == null) {
              return;
            }

            if (typeof this._responderID === "number") {
              _UIManager.default.measure(
                this._responderID,
                this._measureCallback
              );
            } else {
              this._responderID.measure(this._measureCallback);
            }
          },
        },
        {
          key: "_isTouchWithinResponderRegion",
          value: function _isTouchWithinResponderRegion(
            touch,
            responderRegion
          ) {
            var _pressRectOffset$bott,
              _pressRectOffset$left,
              _pressRectOffset$righ,
              _pressRectOffset$top;

            var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
            var pressRectOffset = (0, _Rect.normalizeRect)(
              this._config.pressRectOffset
            );
            var regionBottom = responderRegion.bottom;
            var regionLeft = responderRegion.left;
            var regionRight = responderRegion.right;
            var regionTop = responderRegion.top;

            if (hitSlop != null) {
              if (hitSlop.bottom != null) {
                regionBottom += hitSlop.bottom;
              }

              if (hitSlop.left != null) {
                regionLeft -= hitSlop.left;
              }

              if (hitSlop.right != null) {
                regionRight += hitSlop.right;
              }

              if (hitSlop.top != null) {
                regionTop -= hitSlop.top;
              }
            }

            regionBottom +=
              (_pressRectOffset$bott =
                pressRectOffset == null ? undefined : pressRectOffset.bottom) !=
              null
                ? _pressRectOffset$bott
                : DEFAULT_PRESS_RECT_OFFSETS.bottom;
            regionLeft -=
              (_pressRectOffset$left =
                pressRectOffset == null ? undefined : pressRectOffset.left) !=
              null
                ? _pressRectOffset$left
                : DEFAULT_PRESS_RECT_OFFSETS.left;
            regionRight +=
              (_pressRectOffset$righ =
                pressRectOffset == null ? undefined : pressRectOffset.right) !=
              null
                ? _pressRectOffset$righ
                : DEFAULT_PRESS_RECT_OFFSETS.right;
            regionTop -=
              (_pressRectOffset$top =
                pressRectOffset == null ? undefined : pressRectOffset.top) !=
              null
                ? _pressRectOffset$top
                : DEFAULT_PRESS_RECT_OFFSETS.top;
            return (
              touch.pageX > regionLeft &&
              touch.pageX < regionRight &&
              touch.pageY > regionTop &&
              touch.pageY < regionBottom
            );
          },
        },
        {
          key: "_handleLongPress",
          value: function _handleLongPress(event) {
            if (
              this._touchState === "RESPONDER_ACTIVE_PRESS_IN" ||
              this._touchState === "RESPONDER_ACTIVE_LONG_PRESS_IN"
            ) {
              this._receiveSignal("LONG_PRESS_DETECTED", event);
            }
          },
        },
        {
          key: "_shouldLongPressCancelPress",
          value: function _shouldLongPressCancelPress() {
            return (
              this._config.onLongPressShouldCancelPress_DEPRECATED == null ||
              this._config.onLongPressShouldCancelPress_DEPRECATED()
            );
          },
        },
        {
          key: "_cancelHoverInDelayTimeout",
          value: function _cancelHoverInDelayTimeout() {
            if (this._hoverInDelayTimeout != null) {
              clearTimeout(this._hoverInDelayTimeout);
              this._hoverInDelayTimeout = null;
            }
          },
        },
        {
          key: "_cancelHoverOutDelayTimeout",
          value: function _cancelHoverOutDelayTimeout() {
            if (this._hoverOutDelayTimeout != null) {
              clearTimeout(this._hoverOutDelayTimeout);
              this._hoverOutDelayTimeout = null;
            }
          },
        },
        {
          key: "_cancelLongPressDelayTimeout",
          value: function _cancelLongPressDelayTimeout() {
            if (this._longPressDelayTimeout != null) {
              clearTimeout(this._longPressDelayTimeout);
              this._longPressDelayTimeout = null;
            }
          },
        },
        {
          key: "_cancelPressDelayTimeout",
          value: function _cancelPressDelayTimeout() {
            if (this._pressDelayTimeout != null) {
              clearTimeout(this._pressDelayTimeout);
              this._pressDelayTimeout = null;
            }
          },
        },
        {
          key: "_cancelPressOutDelayTimeout",
          value: function _cancelPressOutDelayTimeout() {
            if (this._pressOutDelayTimeout != null) {
              clearTimeout(this._pressOutDelayTimeout);
              this._pressOutDelayTimeout = null;
            }
          },
        },
      ]);
      return Pressability;
    })();

    exports.default = Pressability;

    function normalizeDelay(delay) {
      var min =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var fallback =
        arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return Math.max(min, delay != null ? delay : fallback);
    }

    var getTouchFromPressEvent = function getTouchFromPressEvent(event) {
      var _event$nativeEvent = event.nativeEvent,
        changedTouches = _event$nativeEvent.changedTouches,
        touches = _event$nativeEvent.touches;

      if (touches != null && touches.length > 0) {
        return touches[0];
      }

      if (changedTouches != null && changedTouches.length > 0) {
        return changedTouches[0];
      }

      return event.nativeEvent;
    };

    function convertPointerEventToMouseEvent(input) {
      var _input$nativeEvent = input.nativeEvent,
        clientX = _input$nativeEvent.clientX,
        clientY = _input$nativeEvent.clientY;
      return Object.assign({}, input, {
        nativeEvent: {
          clientX: clientX,
          clientY: clientY,
          pageX: clientX,
          pageY: clientY,
          timestamp: input.timeStamp,
        },
      });
    }
  },
  192,
  [7, 16, 17, 193, 4, 194, 190, 196, 54, 142, 1, 197]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.isHoverEnabled = isHoverEnabled;

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var isEnabled = false;

    if (_Platform.default.OS === "web") {
      var canUseDOM = Boolean(
        typeof window !== "undefined" &&
          window.document &&
          window.document.createElement
      );

      if (canUseDOM) {
        var HOVER_THRESHOLD_MS = 1000;
        var lastTouchTimestamp = 0;

        var enableHover = function enableHover() {
          if (
            isEnabled ||
            Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS
          ) {
            return;
          }

          isEnabled = true;
        };

        var disableHover = function disableHover() {
          lastTouchTimestamp = Date.now();

          if (isEnabled) {
            isEnabled = false;
          }
        };

        document.addEventListener("touchstart", disableHover, true);
        document.addEventListener("touchmove", disableHover, true);
        document.addEventListener("mousemove", enableHover, true);
      }
    }

    function isHoverEnabled() {
      return isEnabled;
    }
  },
  193,
  [7, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeSoundManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var SoundManager = {
      playTouchSound: function playTouchSound() {
        if (_NativeSoundManager.default) {
          _NativeSoundManager.default.playTouchSound();
        }
      },
    };
    module.exports = SoundManager;
  },
  194,
  [7, 195]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("SoundManager");

    exports.default = _default;
  },
  195,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var PressabilityPerformanceEventEmitter = (function () {
      function PressabilityPerformanceEventEmitter() {
        (0, _classCallCheck2.default)(
          this,
          PressabilityPerformanceEventEmitter
        );
        this._listeners = [];
      }

      (0, _createClass2.default)(PressabilityPerformanceEventEmitter, [
        {
          key: "addListener",
          value: function addListener(listener) {
            this._listeners.push(listener);
          },
        },
        {
          key: "removeListener",
          value: function removeListener(listener) {
            var index = this._listeners.indexOf(listener);

            if (index > -1) {
              this._listeners.splice(index, 1);
            }
          },
        },
        {
          key: "emitEvent",
          value: function emitEvent(constructEvent) {
            if (this._listeners.length === 0) {
              return;
            }

            var event = constructEvent();

            this._listeners.forEach(function (listener) {
              return listener(event);
            });
          },
        },
      ]);
      return PressabilityPerformanceEventEmitter;
    })();

    var PressabilityPerformanceEventEmitterSingleton =
      new PressabilityPerformanceEventEmitter();
    var _default = PressabilityPerformanceEventEmitterSingleton;
    exports.default = _default;
  },
  196,
  [7, 16, 17]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var ReactNativeFeatureFlags = {
      isLayoutAnimationEnabled: function isLayoutAnimationEnabled() {
        return true;
      },
      shouldEmitW3CPointerEvents: function shouldEmitW3CPointerEvents() {
        return false;
      },
      shouldPressibilityUseW3CPointerEventsForHover:
        function shouldPressibilityUseW3CPointerEventsForHover() {
          return false;
        },
      animatedShouldDebounceQueueFlush:
        function animatedShouldDebounceQueueFlush() {
          return false;
        },
      animatedShouldUseSingleOp: function animatedShouldUseSingleOp() {
        return false;
      },
    };
    module.exports = ReactNativeFeatureFlags;
  },
  197,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.NativeVirtualText = exports.NativeText = undefined;

    var _ReactNativeViewAttributes = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _createReactNativeComponentClass = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var NativeText = (0, _createReactNativeComponentClass.default)(
      "RCTText",
      function () {
        return {
          validAttributes: Object.assign(
            {},
            _ReactNativeViewAttributes.default.UIView,
            {
              isHighlighted: true,
              isPressable: true,
              numberOfLines: true,
              ellipsizeMode: true,
              allowFontScaling: true,
              maxFontSizeMultiplier: true,
              disabled: true,
              selectable: true,
              selectionColor: true,
              adjustsFontSizeToFit: true,
              minimumFontScale: true,
              textBreakStrategy: true,
              onTextLayout: true,
              onInlineViewLayout: true,
              dataDetectorType: true,
              android_hyphenationFrequency: true,
            }
          ),
          directEventTypes: {
            topTextLayout: {
              registrationName: "onTextLayout",
            },
            topInlineViewLayout: {
              registrationName: "onInlineViewLayout",
            },
          },
          uiViewClassName: "RCTText",
        };
      }
    );
    exports.NativeText = NativeText;
    var NativeVirtualText =
      !global.RN$Bridgeless &&
      !_UIManager.default.hasViewManagerConfig("RCTVirtualText")
        ? NativeText
        : (0, _createReactNativeComponentClass.default)(
            "RCTVirtualText",
            function () {
              return {
                validAttributes: Object.assign(
                  {},
                  _ReactNativeViewAttributes.default.UIView,
                  {
                    isHighlighted: true,
                    isPressable: true,
                    maxFontSizeMultiplier: true,
                  }
                ),
                uiViewClassName: "RCTVirtualText",
              };
            }
          );
    exports.NativeVirtualText = NativeVirtualText;
  },
  198,
  [7, 199, 142, 185]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _ReactNativeStyleAttributes = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var UIView = {
      pointerEvents: true,
      accessible: true,
      accessibilityActions: true,
      accessibilityLabel: true,
      accessibilityLiveRegion: true,
      accessibilityRole: true,
      accessibilityState: true,
      accessibilityValue: true,
      accessibilityHint: true,
      accessibilityLanguage: true,
      importantForAccessibility: true,
      nativeID: true,
      testID: true,
      renderToHardwareTextureAndroid: true,
      shouldRasterizeIOS: true,
      onLayout: true,
      onAccessibilityAction: true,
      onAccessibilityTap: true,
      onMagicTap: true,
      onAccessibilityEscape: true,
      collapsable: true,
      needsOffscreenAlphaCompositing: true,
      style: _ReactNativeStyleAttributes.default,
    };
    var RCTView = Object.assign({}, UIView, {
      removeClippedSubviews: true,
    });
    var ReactNativeViewAttributes = {
      UIView: UIView,
      RCTView: RCTView,
    };
    module.exports = ReactNativeViewAttributes;
  },
  199,
  [7, 134]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[8]);

    var _ViewNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

    var _ReactNative = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[16]);

    var _excluded = ["onBlur", "onFocus"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var TouchableNativeFeedback = (function (_React$Component) {
      (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);

      var _super = _createSuper(TouchableNativeFeedback);

      function TouchableNativeFeedback() {
        var _this;

        (0, _classCallCheck2.default)(this, TouchableNativeFeedback);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          pressability: new _Pressability.default(
            _this._createPressabilityConfig()
          ),
        };
        return _this;
      }

      (0, _createClass2.default)(TouchableNativeFeedback, [
        {
          key: "_createPressabilityConfig",
          value: function _createPressabilityConfig() {
            var _this$props$accessibi,
              _this2 = this;

            return {
              cancelable: !this.props.rejectResponderTermination,
              disabled:
                this.props.disabled != null
                  ? this.props.disabled
                  : (_this$props$accessibi = this.props.accessibilityState) ==
                    null
                  ? undefined
                  : _this$props$accessibi.disabled,
              hitSlop: this.props.hitSlop,
              delayLongPress: this.props.delayLongPress,
              delayPressIn: this.props.delayPressIn,
              delayPressOut: this.props.delayPressOut,
              minPressDuration: 0,
              pressRectOffset: this.props.pressRetentionOffset,
              android_disableSound: this.props.touchSoundDisabled,
              onLongPress: this.props.onLongPress,
              onPress: this.props.onPress,
              onPressIn: function onPressIn(event) {
                if (_Platform.default.OS === "android") {
                  _this2._dispatchHotspotUpdate(event);

                  _this2._dispatchPressedStateChange(true);
                }

                if (_this2.props.onPressIn != null) {
                  _this2.props.onPressIn(event);
                }
              },
              onPressMove: function onPressMove(event) {
                if (_Platform.default.OS === "android") {
                  _this2._dispatchHotspotUpdate(event);
                }
              },
              onPressOut: function onPressOut(event) {
                if (_Platform.default.OS === "android") {
                  _this2._dispatchPressedStateChange(false);
                }

                if (_this2.props.onPressOut != null) {
                  _this2.props.onPressOut(event);
                }
              },
            };
          },
        },
        {
          key: "_dispatchPressedStateChange",
          value: function _dispatchPressedStateChange(pressed) {
            if (_Platform.default.OS === "android") {
              var hostComponentRef =
                _ReactNative.default.findHostInstance_DEPRECATED(this);

              if (hostComponentRef == null) {
                console.warn(
                  "Touchable: Unable to find HostComponent instance. Has your Touchable component been unmounted?"
                );
              } else {
                _ViewNativeComponent.Commands.setPressed(
                  hostComponentRef,
                  pressed
                );
              }
            }
          },
        },
        {
          key: "_dispatchHotspotUpdate",
          value: function _dispatchHotspotUpdate(event) {
            if (_Platform.default.OS === "android") {
              var _event$nativeEvent = event.nativeEvent,
                locationX = _event$nativeEvent.locationX,
                locationY = _event$nativeEvent.locationY;

              var hostComponentRef =
                _ReactNative.default.findHostInstance_DEPRECATED(this);

              if (hostComponentRef == null) {
                console.warn(
                  "Touchable: Unable to find HostComponent instance. Has your Touchable component been unmounted?"
                );
              } else {
                _ViewNativeComponent.Commands.hotspotUpdate(
                  hostComponentRef,
                  locationX != null ? locationX : 0,
                  locationY != null ? locationY : 0
                );
              }
            }
          },
        },
        {
          key: "render",
          value: function render() {
            var element = React.Children.only(this.props.children);
            var children = [element.props.children];

            var _this$state$pressabil =
                this.state.pressability.getEventHandlers(),
              onBlur = _this$state$pressabil.onBlur,
              onFocus = _this$state$pressabil.onFocus,
              eventHandlersWithoutBlurAndFocus = (0,
              _objectWithoutProperties2.default)(
                _this$state$pressabil,
                _excluded
              );

            var accessibilityState =
              this.props.disabled != null
                ? Object.assign({}, this.props.accessibilityState, {
                    disabled: this.props.disabled,
                  })
                : this.props.accessibilityState;
            return React.cloneElement.apply(
              React,
              [
                element,
                Object.assign(
                  {},
                  eventHandlersWithoutBlurAndFocus,
                  getBackgroundProp(
                    this.props.background === undefined
                      ? TouchableNativeFeedback.SelectableBackground()
                      : this.props.background,
                    this.props.useForeground === true
                  ),
                  {
                    accessible: this.props.accessible !== false,
                    accessibilityHint: this.props.accessibilityHint,
                    accessibilityLanguage: this.props.accessibilityLanguage,
                    accessibilityLabel: this.props.accessibilityLabel,
                    accessibilityRole: this.props.accessibilityRole,
                    accessibilityState: accessibilityState,
                    accessibilityActions: this.props.accessibilityActions,
                    onAccessibilityAction: this.props.onAccessibilityAction,
                    accessibilityValue: this.props.accessibilityValue,
                    importantForAccessibility:
                      this.props.importantForAccessibility,
                    accessibilityLiveRegion: this.props.accessibilityLiveRegion,
                    accessibilityViewIsModal:
                      this.props.accessibilityViewIsModal,
                    accessibilityElementsHidden:
                      this.props.accessibilityElementsHidden,
                    hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                    hitSlop: this.props.hitSlop,
                    focusable:
                      this.props.focusable !== false &&
                      this.props.onPress !== undefined &&
                      !this.props.disabled,
                    nativeID: this.props.nativeID,
                    nextFocusDown: this.props.nextFocusDown,
                    nextFocusForward: this.props.nextFocusForward,
                    nextFocusLeft: this.props.nextFocusLeft,
                    nextFocusRight: this.props.nextFocusRight,
                    nextFocusUp: this.props.nextFocusUp,
                    onLayout: this.props.onLayout,
                    testID: this.props.testID,
                  }
                ),
              ].concat(children)
            );
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            this.state.pressability.configure(this._createPressabilityConfig());
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.state.pressability.reset();
          },
        },
      ]);
      return TouchableNativeFeedback;
    })(React.Component);

    TouchableNativeFeedback.SelectableBackground = function (rippleRadius) {
      return {
        type: "ThemeAttrAndroid",
        attribute: "selectableItemBackground",
        rippleRadius: rippleRadius,
      };
    };

    TouchableNativeFeedback.SelectableBackgroundBorderless = function (
      rippleRadius
    ) {
      return {
        type: "ThemeAttrAndroid",
        attribute: "selectableItemBackgroundBorderless",
        rippleRadius: rippleRadius,
      };
    };

    TouchableNativeFeedback.Ripple = function (
      color,
      borderless,
      rippleRadius
    ) {
      var processedColor = (0, _processColor.default)(color);
      (0, _invariant.default)(
        processedColor == null || typeof processedColor === "number",
        "Unexpected color given for Ripple color"
      );
      return {
        type: "RippleAndroid",
        color: processedColor,
        borderless: borderless,
        rippleRadius: rippleRadius,
      };
    };

    TouchableNativeFeedback.canUseNativeForeground = function () {
      return (
        _Platform.default.OS === "android" && _Platform.default.Version >= 23
      );
    };

    var getBackgroundProp =
      _Platform.default.OS === "android"
        ? function (background, useForeground) {
            return useForeground &&
              TouchableNativeFeedback.canUseNativeForeground()
              ? {
                  nativeForegroundAndroid: background,
                }
              : {
                  nativeBackgroundAndroid: background,
                };
          }
        : function (background, useForeground) {
            return null;
          };
    TouchableNativeFeedback.displayName = "TouchableNativeFeedback";
    module.exports = TouchableNativeFeedback;
  },
  200,
  [7, 92, 16, 17, 28, 30, 33, 192, 189, 177, 18, 54, 176, 135, 1, 4, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[8]);

    var _Animated = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _Easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _flattenStyle4 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[14]);

    var _excluded = ["onBlur", "onFocus"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var TouchableOpacity = (function (_React$Component) {
      (0, _inherits2.default)(TouchableOpacity, _React$Component);

      var _super = _createSuper(TouchableOpacity);

      function TouchableOpacity() {
        var _this;

        (0, _classCallCheck2.default)(this, TouchableOpacity);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          anim: new _Animated.default.Value(
            _this._getChildStyleOpacityWithDefault()
          ),
          pressability: new _Pressability.default(
            _this._createPressabilityConfig()
          ),
        };
        return _this;
      }

      (0, _createClass2.default)(TouchableOpacity, [
        {
          key: "_createPressabilityConfig",
          value: function _createPressabilityConfig() {
            var _this$props$disabled,
              _this$props$accessibi,
              _this2 = this;

            return {
              cancelable: !this.props.rejectResponderTermination,
              disabled:
                (_this$props$disabled = this.props.disabled) != null
                  ? _this$props$disabled
                  : (_this$props$accessibi = this.props.accessibilityState) ==
                    null
                  ? undefined
                  : _this$props$accessibi.disabled,
              hitSlop: this.props.hitSlop,
              delayLongPress: this.props.delayLongPress,
              delayPressIn: this.props.delayPressIn,
              delayPressOut: this.props.delayPressOut,
              minPressDuration: 0,
              pressRectOffset: this.props.pressRetentionOffset,
              onBlur: function onBlur(event) {
                if (_Platform.default.isTV) {
                  _this2._opacityInactive(250);
                }

                if (_this2.props.onBlur != null) {
                  _this2.props.onBlur(event);
                }
              },
              onFocus: function onFocus(event) {
                if (_Platform.default.isTV) {
                  _this2._opacityActive(150);
                }

                if (_this2.props.onFocus != null) {
                  _this2.props.onFocus(event);
                }
              },
              onLongPress: this.props.onLongPress,
              onPress: this.props.onPress,
              onPressIn: function onPressIn(event) {
                _this2._opacityActive(
                  event.dispatchConfig.registrationName === "onResponderGrant"
                    ? 0
                    : 150
                );

                if (_this2.props.onPressIn != null) {
                  _this2.props.onPressIn(event);
                }
              },
              onPressOut: function onPressOut(event) {
                _this2._opacityInactive(250);

                if (_this2.props.onPressOut != null) {
                  _this2.props.onPressOut(event);
                }
              },
            };
          },
        },
        {
          key: "_setOpacityTo",
          value: function _setOpacityTo(toValue, duration) {
            _Animated.default
              .timing(this.state.anim, {
                toValue: toValue,
                duration: duration,
                easing: _Easing.default.inOut(_Easing.default.quad),
                useNativeDriver: true,
              })
              .start();
          },
        },
        {
          key: "_opacityActive",
          value: function _opacityActive(duration) {
            var _this$props$activeOpa;

            this._setOpacityTo(
              (_this$props$activeOpa = this.props.activeOpacity) != null
                ? _this$props$activeOpa
                : 0.2,
              duration
            );
          },
        },
        {
          key: "_opacityInactive",
          value: function _opacityInactive(duration) {
            this._setOpacityTo(
              this._getChildStyleOpacityWithDefault(),
              duration
            );
          },
        },
        {
          key: "_getChildStyleOpacityWithDefault",
          value: function _getChildStyleOpacityWithDefault() {
            var _flattenStyle;

            var opacity =
              (_flattenStyle = (0, _flattenStyle4.default)(this.props.style)) ==
              null
                ? undefined
                : _flattenStyle.opacity;
            return typeof opacity === "number" ? opacity : 1;
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$state$pressabil =
                this.state.pressability.getEventHandlers(),
              onBlur = _this$state$pressabil.onBlur,
              onFocus = _this$state$pressabil.onFocus,
              eventHandlersWithoutBlurAndFocus = (0,
              _objectWithoutProperties2.default)(
                _this$state$pressabil,
                _excluded
              );

            var accessibilityState =
              this.props.disabled != null
                ? Object.assign({}, this.props.accessibilityState, {
                    disabled: this.props.disabled,
                  })
                : this.props.accessibilityState;
            return (0, _jsxRuntime.jsxs)(
              _Animated.default.View,
              Object.assign(
                {
                  accessible: this.props.accessible !== false,
                  accessibilityLabel: this.props.accessibilityLabel,
                  accessibilityHint: this.props.accessibilityHint,
                  accessibilityLanguage: this.props.accessibilityLanguage,
                  accessibilityRole: this.props.accessibilityRole,
                  accessibilityState: accessibilityState,
                  accessibilityActions: this.props.accessibilityActions,
                  onAccessibilityAction: this.props.onAccessibilityAction,
                  accessibilityValue: this.props.accessibilityValue,
                  importantForAccessibility:
                    this.props.importantForAccessibility,
                  accessibilityLiveRegion: this.props.accessibilityLiveRegion,
                  accessibilityViewIsModal: this.props.accessibilityViewIsModal,
                  accessibilityElementsHidden:
                    this.props.accessibilityElementsHidden,
                  style: [
                    this.props.style,
                    {
                      opacity: this.state.anim,
                    },
                  ],
                  nativeID: this.props.nativeID,
                  testID: this.props.testID,
                  onLayout: this.props.onLayout,
                  nextFocusDown: this.props.nextFocusDown,
                  nextFocusForward: this.props.nextFocusForward,
                  nextFocusLeft: this.props.nextFocusLeft,
                  nextFocusRight: this.props.nextFocusRight,
                  nextFocusUp: this.props.nextFocusUp,
                  hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                  hitSlop: this.props.hitSlop,
                  focusable:
                    this.props.focusable !== false &&
                    this.props.onPress !== undefined,
                  ref: this.props.hostRef,
                },
                eventHandlersWithoutBlurAndFocus,
                {
                  children: [this.props.children, null],
                }
              )
            );
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            var _flattenStyle2, _flattenStyle3;

            this.state.pressability.configure(this._createPressabilityConfig());

            if (
              this.props.disabled !== prevProps.disabled ||
              (((_flattenStyle2 = (0, _flattenStyle4.default)(
                prevProps.style
              )) == null
                ? undefined
                : _flattenStyle2.opacity) !==
                ((_flattenStyle3 = (0, _flattenStyle4.default)(
                  this.props.style
                )) == null
                  ? undefined
                  : _flattenStyle3.opacity)) !==
                undefined
            ) {
              this._opacityInactive(250);
            }
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.state.pressability.reset();
          },
        },
      ]);
      return TouchableOpacity;
    })(React.Component);

    var Touchable = React.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(
        TouchableOpacity,
        Object.assign({}, props, {
          hostRef: ref,
        })
      );
    });
    Touchable.displayName = "TouchableOpacity";
    module.exports = Touchable;
  },
  201,
  [7, 92, 16, 17, 28, 30, 33, 192, 189, 202, 229, 166, 54, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var AnimatedMock = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    var AnimatedImplementation = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Animated = _Platform.default.isTesting
      ? AnimatedMock
      : AnimatedImplementation;
    module.exports = Object.assign(
      {
        get FlatList() {
          return _$$_REQUIRE(_dependencyMap[4]);
        },

        get Image() {
          return _$$_REQUIRE(_dependencyMap[5]);
        },

        get ScrollView() {
          return _$$_REQUIRE(_dependencyMap[6]);
        },

        get SectionList() {
          return _$$_REQUIRE(_dependencyMap[7]);
        },

        get Text() {
          return _$$_REQUIRE(_dependencyMap[8]);
        },

        get View() {
          return _$$_REQUIRE(_dependencyMap[9]);
        },
      },
      Animated
    );
  },
  202,
  [7, 54, 203, 216, 237, 266, 274, 275, 278, 279]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _require = _$$_REQUIRE(_dependencyMap[2]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

    var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[3]);

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[4]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[5]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[8]);

    var inAnimationCallback = false;

    function mockAnimationStart(start) {
      return function (callback) {
        var guardedCallback =
          callback == null
            ? callback
            : function () {
                if (inAnimationCallback) {
                  console.warn(
                    "Ignoring recursive animation callback when running mock animations"
                  );
                  return;
                }

                inAnimationCallback = true;

                try {
                  callback.apply(undefined, arguments);
                } finally {
                  inAnimationCallback = false;
                }
              };
        start(guardedCallback);
      };
    }

    var emptyAnimation = {
      start: function start() {},
      stop: function stop() {},
      reset: function reset() {},
      _startNativeLoop: function _startNativeLoop() {},
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      },
    };

    var mockCompositeAnimation = function mockCompositeAnimation(animations) {
      return Object.assign({}, emptyAnimation, {
        start: mockAnimationStart(function (callback) {
          animations.forEach(function (animation) {
            return animation.start();
          });
          callback == null
            ? undefined
            : callback({
                finished: true,
              });
        }),
      });
    };

    var spring = function spring(value, config) {
      var anyValue = value;
      return Object.assign({}, emptyAnimation, {
        start: mockAnimationStart(function (callback) {
          anyValue.setValue(config.toValue);
          callback == null
            ? undefined
            : callback({
                finished: true,
              });
        }),
      });
    };

    var timing = function timing(value, config) {
      var anyValue = value;
      return Object.assign({}, emptyAnimation, {
        start: mockAnimationStart(function (callback) {
          anyValue.setValue(config.toValue);
          callback == null
            ? undefined
            : callback({
                finished: true,
              });
        }),
      });
    };

    var decay = function decay(value, config) {
      return emptyAnimation;
    };

    var sequence = function sequence(animations) {
      return mockCompositeAnimation(animations);
    };

    var parallel = function parallel(animations, config) {
      return mockCompositeAnimation(animations);
    };

    var delay = function delay(time) {
      return emptyAnimation;
    };

    var stagger = function stagger(time, animations) {
      return mockCompositeAnimation(animations);
    };

    var loop = function loop(animation) {
      var _ref =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

      return emptyAnimation;
    };

    module.exports = {
      Value: AnimatedValue,
      ValueXY: AnimatedValueXY,
      Color: _AnimatedColor.default,
      Interpolation: AnimatedInterpolation,
      Node: AnimatedNode,
      decay: decay,
      timing: timing,
      spring: spring,
      add: AnimatedImplementation.add,
      subtract: AnimatedImplementation.subtract,
      divide: AnimatedImplementation.divide,
      multiply: AnimatedImplementation.multiply,
      modulo: AnimatedImplementation.modulo,
      diffClamp: AnimatedImplementation.diffClamp,
      delay: delay,
      sequence: sequence,
      parallel: parallel,
      stagger: stagger,
      loop: loop,
      event: AnimatedImplementation.event,
      createAnimatedComponent: createAnimatedComponent,
      attachNativeEvent: attachNativeEvent,
      forkEvent: AnimatedImplementation.forkEvent,
      unforkEvent: AnimatedImplementation.unforkEvent,
      Event: AnimatedEvent,
    };
  },
  203,
  [7, 204, 214, 216, 206, 207, 205, 215, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _AnimatedWithChildren2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _normalizeColor = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _PlatformColorValueTypes = _$$_REQUIRE(_dependencyMap[10]);

    var _NativeAnimatedHelper = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
    var defaultColor = {
      r: 0,
      g: 0,
      b: 0,
      a: 1.0,
    };
    var _uniqueId = 1;

    function processColor(color) {
      if (color === undefined || color === null) {
        return null;
      }

      if (isRgbaValue(color)) {
        return color;
      }

      var normalizedColor = (0, _normalizeColor.default)(color);

      if (normalizedColor === undefined || normalizedColor === null) {
        return null;
      }

      if (typeof normalizedColor === "object") {
        var processedColorObj = (0,
        _PlatformColorValueTypes.processColorObject)(normalizedColor);

        if (processedColorObj != null) {
          return processedColorObj;
        }
      } else if (typeof normalizedColor === "number") {
        var r = (normalizedColor & 0xff000000) >>> 24;
        var g = (normalizedColor & 0x00ff0000) >>> 16;
        var b = (normalizedColor & 0x0000ff00) >>> 8;
        var a = (normalizedColor & 0x000000ff) / 255;
        return {
          r: r,
          g: g,
          b: b,
          a: a,
        };
      }

      return null;
    }

    function isRgbaValue(value) {
      return (
        value &&
        typeof value.r === "number" &&
        typeof value.g === "number" &&
        typeof value.b === "number" &&
        typeof value.a === "number"
      );
    }

    function isRgbaAnimatedValue(value) {
      return (
        value &&
        value.r instanceof _AnimatedValue.default &&
        value.g instanceof _AnimatedValue.default &&
        value.b instanceof _AnimatedValue.default &&
        value.a instanceof _AnimatedValue.default
      );
    }

    var AnimatedColor = (function (_AnimatedWithChildren) {
      (0, _inherits2.default)(AnimatedColor, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedColor);

      function AnimatedColor(valueIn, config) {
        var _this;

        (0, _classCallCheck2.default)(this, AnimatedColor);
        _this = _super.call(this);
        _this._listeners = {};
        var value = valueIn != null ? valueIn : defaultColor;

        if (isRgbaAnimatedValue(value)) {
          var rgbaAnimatedValue = value;
          _this.r = rgbaAnimatedValue.r;
          _this.g = rgbaAnimatedValue.g;
          _this.b = rgbaAnimatedValue.b;
          _this.a = rgbaAnimatedValue.a;
        } else {
          var _processColor;

          var processedColor =
            (_processColor = processColor(value)) != null
              ? _processColor
              : defaultColor;
          var initColor = defaultColor;

          if (isRgbaValue(processedColor)) {
            initColor = processedColor;
          } else {
            _this.nativeColor = processedColor;
          }

          _this.r = new _AnimatedValue.default(initColor.r);
          _this.g = new _AnimatedValue.default(initColor.g);
          _this.b = new _AnimatedValue.default(initColor.b);
          _this.a = new _AnimatedValue.default(initColor.a);
        }

        if (_this.nativeColor || (config && config.useNativeDriver)) {
          _this.__makeNative();
        }

        return _this;
      }

      (0, _createClass2.default)(AnimatedColor, [
        {
          key: "setValue",
          value: function setValue(value) {
            var _processColor2;

            var shouldUpdateNodeConfig = false;

            if (this.__isNative) {
              var nativeTag = this.__getNativeTag();

              NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
            }

            var processedColor =
              (_processColor2 = processColor(value)) != null
                ? _processColor2
                : defaultColor;

            if (isRgbaValue(processedColor)) {
              var rgbaValue = processedColor;
              this.r.setValue(rgbaValue.r);
              this.g.setValue(rgbaValue.g);
              this.b.setValue(rgbaValue.b);
              this.a.setValue(rgbaValue.a);

              if (this.nativeColor != null) {
                this.nativeColor = null;
                shouldUpdateNodeConfig = true;
              }
            } else {
              var nativeColor = processedColor;

              if (this.nativeColor !== nativeColor) {
                this.nativeColor = nativeColor;
                shouldUpdateNodeConfig = true;
              }
            }

            if (this.__isNative) {
              var _nativeTag = this.__getNativeTag();

              if (shouldUpdateNodeConfig) {
                NativeAnimatedAPI.updateAnimatedNodeConfig(
                  _nativeTag,
                  this.__getNativeConfig()
                );
              }

              NativeAnimatedAPI.unsetWaitingForIdentifier(
                _nativeTag.toString()
              );
            }
          },
        },
        {
          key: "setOffset",
          value: function setOffset(offset) {
            this.r.setOffset(offset.r);
            this.g.setOffset(offset.g);
            this.b.setOffset(offset.b);
            this.a.setOffset(offset.a);
          },
        },
        {
          key: "flattenOffset",
          value: function flattenOffset() {
            this.r.flattenOffset();
            this.g.flattenOffset();
            this.b.flattenOffset();
            this.a.flattenOffset();
          },
        },
        {
          key: "extractOffset",
          value: function extractOffset() {
            this.r.extractOffset();
            this.g.extractOffset();
            this.b.extractOffset();
            this.a.extractOffset();
          },
        },
        {
          key: "addListener",
          value: function addListener(callback) {
            var _this2 = this;

            var id = String(_uniqueId++);

            var jointCallback = function jointCallback(_ref) {
              var number = _ref.value;
              callback(_this2.__getValue());
            };

            this._listeners[id] = {
              r: this.r.addListener(jointCallback),
              g: this.g.addListener(jointCallback),
              b: this.b.addListener(jointCallback),
              a: this.a.addListener(jointCallback),
            };
            return id;
          },
        },
        {
          key: "removeListener",
          value: function removeListener(id) {
            this.r.removeListener(this._listeners[id].r);
            this.g.removeListener(this._listeners[id].g);
            this.b.removeListener(this._listeners[id].b);
            this.a.removeListener(this._listeners[id].a);
            delete this._listeners[id];
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners() {
            this.r.removeAllListeners();
            this.g.removeAllListeners();
            this.b.removeAllListeners();
            this.a.removeAllListeners();
            this._listeners = {};
          },
        },
        {
          key: "stopAnimation",
          value: function stopAnimation(callback) {
            this.r.stopAnimation();
            this.g.stopAnimation();
            this.b.stopAnimation();
            this.a.stopAnimation();
            callback && callback(this.__getValue());
          },
        },
        {
          key: "resetAnimation",
          value: function resetAnimation(callback) {
            this.r.resetAnimation();
            this.g.resetAnimation();
            this.b.resetAnimation();
            this.a.resetAnimation();
            callback && callback(this.__getValue());
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            if (this.nativeColor != null) {
              return this.nativeColor;
            } else {
              return (
                "rgba(" +
                this.r.__getValue() +
                ", " +
                this.g.__getValue() +
                ", " +
                this.b.__getValue() +
                ", " +
                this.a.__getValue() +
                ")"
              );
            }
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this.r.__addChild(this);

            this.g.__addChild(this);

            this.b.__addChild(this);

            this.a.__addChild(this);

            (0, _get2.default)(
              (0, _getPrototypeOf2.default)(AnimatedColor.prototype),
              "__attach",
              this
            ).call(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this.r.__removeChild(this);

            this.g.__removeChild(this);

            this.b.__removeChild(this);

            this.a.__removeChild(this);

            (0, _get2.default)(
              (0, _getPrototypeOf2.default)(AnimatedColor.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this.r.__makeNative(platformConfig);

            this.g.__makeNative(platformConfig);

            this.b.__makeNative(platformConfig);

            this.a.__makeNative(platformConfig);

            (0, _get2.default)(
              (0, _getPrototypeOf2.default)(AnimatedColor.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "color",
              r: this.r.__getNativeTag(),
              g: this.g.__getNativeTag(),
              b: this.b.__getNativeTag(),
              a: this.a.__getNativeTag(),
              nativeColor: this.nativeColor,
            };
          },
        },
      ]);
      return AnimatedColor;
    })(_AnimatedWithChildren2.default);

    exports.default = AnimatedColor;
  },
  204,
  [7, 16, 17, 72, 28, 30, 33, 205, 211, 136, 138, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[7]);

    var InteractionManager = _$$_REQUIRE(_dependencyMap[8]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9]);

    var NativeAnimatedAPI = NativeAnimatedHelper.API;

    function _flush(rootNode) {
      var animatedStyles = new Set();

      function findAnimatedStyles(node) {
        if (typeof node.update === "function") {
          animatedStyles.add(node);
        } else {
          node.__getChildren().forEach(findAnimatedStyles);
        }
      }

      findAnimatedStyles(rootNode);
      animatedStyles.forEach(function (animatedStyle) {
        return animatedStyle.update();
      });
    }

    function _executeAsAnimatedBatch(id, operation) {
      NativeAnimatedAPI.setWaitingForIdentifier(id);
      operation();
      NativeAnimatedAPI.unsetWaitingForIdentifier(id);
    }

    var AnimatedValue = (function (_AnimatedWithChildren) {
      _inherits(AnimatedValue, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedValue);

      function AnimatedValue(value, config) {
        var _this;

        _classCallCheck(this, AnimatedValue);

        _this = _super.call(this);

        if (typeof value !== "number") {
          throw new Error(
            "AnimatedValue: Attempting to set value to undefined"
          );
        }

        _this._startingValue = _this._value = value;
        _this._offset = 0;
        _this._animation = null;

        if (config && config.useNativeDriver) {
          _this.__makeNative();
        }

        return _this;
      }

      _createClass(AnimatedValue, [
        {
          key: "__detach",
          value: function __detach() {
            var _this2 = this;

            if (this.__isNative) {
              NativeAnimatedAPI.getValue(
                this.__getNativeTag(),
                function (value) {
                  _this2._value = value - _this2._offset;
                }
              );
            }

            this.stopAnimation();

            _get(
              _getPrototypeOf(AnimatedValue.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._value + this._offset;
          },
        },
        {
          key: "setValue",
          value: function setValue(value) {
            var _this3 = this;

            if (this._animation) {
              this._animation.stop();

              this._animation = null;
            }

            this._updateValue(value, !this.__isNative);

            if (this.__isNative) {
              _executeAsAnimatedBatch(
                this.__getNativeTag().toString(),
                function () {
                  return NativeAnimatedAPI.setAnimatedNodeValue(
                    _this3.__getNativeTag(),
                    value
                  );
                }
              );
            }
          },
        },
        {
          key: "setOffset",
          value: function setOffset(offset) {
            this._offset = offset;

            if (this.__isNative) {
              NativeAnimatedAPI.setAnimatedNodeOffset(
                this.__getNativeTag(),
                offset
              );
            }
          },
        },
        {
          key: "flattenOffset",
          value: function flattenOffset() {
            this._value += this._offset;
            this._offset = 0;

            if (this.__isNative) {
              NativeAnimatedAPI.flattenAnimatedNodeOffset(
                this.__getNativeTag()
              );
            }
          },
        },
        {
          key: "extractOffset",
          value: function extractOffset() {
            this._offset += this._value;
            this._value = 0;

            if (this.__isNative) {
              NativeAnimatedAPI.extractAnimatedNodeOffset(
                this.__getNativeTag()
              );
            }
          },
        },
        {
          key: "stopAnimation",
          value: function stopAnimation(callback) {
            this.stopTracking();
            this._animation && this._animation.stop();
            this._animation = null;

            if (callback) {
              if (this.__isNative) {
                NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
              } else {
                callback(this.__getValue());
              }
            }
          },
        },
        {
          key: "resetAnimation",
          value: function resetAnimation(callback) {
            this.stopAnimation(callback);
            this._value = this._startingValue;

            if (this.__isNative) {
              NativeAnimatedAPI.setAnimatedNodeValue(
                this.__getNativeTag(),
                this._startingValue
              );
            }
          },
        },
        {
          key: "__onAnimatedValueUpdateReceived",
          value: function __onAnimatedValueUpdateReceived(value) {
            this._updateValue(value, false);
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "animate",
          value: function animate(animation, callback) {
            var _this4 = this;

            var handle = null;

            if (animation.__isInteraction) {
              handle = InteractionManager.createInteractionHandle();
            }

            var previousAnimation = this._animation;
            this._animation && this._animation.stop();
            this._animation = animation;
            animation.start(
              this._value,
              function (value) {
                _this4._updateValue(value, true);
              },
              function (result) {
                _this4._animation = null;

                if (handle !== null) {
                  InteractionManager.clearInteractionHandle(handle);
                }

                callback && callback(result);
              },
              previousAnimation,
              this
            );
          },
        },
        {
          key: "stopTracking",
          value: function stopTracking() {
            this._tracking && this._tracking.__detach();
            this._tracking = null;
          },
        },
        {
          key: "track",
          value: function track(tracking) {
            this.stopTracking();
            this._tracking = tracking;
            this._tracking && this._tracking.update();
          },
        },
        {
          key: "_updateValue",
          value: function _updateValue(value, flush) {
            if (value === undefined) {
              throw new Error(
                "AnimatedValue: Attempting to set value to undefined"
              );
            }

            this._value = value;

            if (flush) {
              _flush(this);
            }

            _get(
              _getPrototypeOf(AnimatedValue.prototype),
              "__callListeners",
              this
            ).call(this, this.__getValue());
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "value",
              value: this._value,
              offset: this._offset,
            };
          },
        },
      ]);

      return AnimatedValue;
    })(AnimatedWithChildren);

    module.exports = AnimatedValue;
  },
  205,
  [16, 17, 72, 28, 30, 33, 206, 211, 212, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[7]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[8]);

    var invariant = _$$_REQUIRE(_dependencyMap[9]);

    var normalizeColor = _$$_REQUIRE(_dependencyMap[10]);

    var linear = function linear(t) {
      return t;
    };

    function createInterpolation(config) {
      if (config.outputRange && typeof config.outputRange[0] === "string") {
        return createInterpolationFromStringOutputRange(config);
      }

      var outputRange = config.outputRange;
      var inputRange = config.inputRange;
      var easing = config.easing || linear;
      var extrapolateLeft = "extend";

      if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
      } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
      }

      var extrapolateRight = "extend";

      if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
      } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
      }

      return function (input) {
        invariant(
          typeof input === "number",
          "Cannot interpolation an input which is not a number"
        );
        var range = findRange(input, inputRange);
        return interpolate(
          input,
          inputRange[range],
          inputRange[range + 1],
          outputRange[range],
          outputRange[range + 1],
          easing,
          extrapolateLeft,
          extrapolateRight
        );
      };
    }

    function interpolate(
      input,
      inputMin,
      inputMax,
      outputMin,
      outputMax,
      easing,
      extrapolateLeft,
      extrapolateRight
    ) {
      var result = input;

      if (result < inputMin) {
        if (extrapolateLeft === "identity") {
          return result;
        } else if (extrapolateLeft === "clamp") {
          result = inputMin;
        } else if (extrapolateLeft === "extend") {
        }
      }

      if (result > inputMax) {
        if (extrapolateRight === "identity") {
          return result;
        } else if (extrapolateRight === "clamp") {
          result = inputMax;
        } else if (extrapolateRight === "extend") {
        }
      }

      if (outputMin === outputMax) {
        return outputMin;
      }

      if (inputMin === inputMax) {
        if (input <= inputMin) {
          return outputMin;
        }

        return outputMax;
      }

      if (inputMin === -(1 / 0)) {
        result = -result;
      } else if (inputMax === Infinity) {
        result = result - inputMin;
      } else {
        result = (result - inputMin) / (inputMax - inputMin);
      }

      result = easing(result);

      if (outputMin === -(1 / 0)) {
        result = -result;
      } else if (outputMax === Infinity) {
        result = result + outputMin;
      } else {
        result = result * (outputMax - outputMin) + outputMin;
      }

      return result;
    }

    function colorToRgba(input) {
      var normalizedColor = normalizeColor(input);

      if (normalizedColor === null || typeof normalizedColor !== "number") {
        return input;
      }

      normalizedColor = normalizedColor || 0;
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
    }

    var stringShapeRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;

    function createInterpolationFromStringOutputRange(config) {
      var outputRange = config.outputRange;
      invariant(outputRange.length >= 2, "Bad output range");
      outputRange = outputRange.map(colorToRgba);
      checkPattern(outputRange);
      var outputRanges = outputRange[0]
        .match(stringShapeRegex)
        .map(function () {
          return [];
        });
      outputRange.forEach(function (value) {
        value.match(stringShapeRegex).forEach(function (number, i) {
          outputRanges[i].push(+number);
        });
      });
      var interpolations = outputRange[0]
        .match(stringShapeRegex)
        .map(function (value, i) {
          return createInterpolation(
            Object.assign({}, config, {
              outputRange: outputRanges[i],
            })
          );
        });
      var shouldRound = isRgbOrRgba(outputRange[0]);
      return function (input) {
        var i = 0;
        return outputRange[0].replace(stringShapeRegex, function () {
          var val = +interpolations[i++](input);

          if (shouldRound) {
            val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
          }

          return String(val);
        });
      };
    }

    function isRgbOrRgba(range) {
      return typeof range === "string" && range.startsWith("rgb");
    }

    function checkPattern(arr) {
      var pattern = arr[0].replace(stringShapeRegex, "");

      for (var i = 1; i < arr.length; ++i) {
        invariant(
          pattern === arr[i].replace(stringShapeRegex, ""),
          "invalid pattern " + arr[0] + " and " + arr[i]
        );
      }
    }

    function findRange(input, inputRange) {
      var i;

      for (i = 1; i < inputRange.length - 1; ++i) {
        if (inputRange[i] >= input) {
          break;
        }
      }

      return i - 1;
    }

    var AnimatedInterpolation = (function (_AnimatedWithChildren) {
      _inherits(AnimatedInterpolation, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedInterpolation);

      function AnimatedInterpolation(parent, config) {
        var _this;

        _classCallCheck(this, AnimatedInterpolation);

        _this = _super.call(this);
        _this._parent = parent;
        _this._config = config;
        _this._interpolation = createInterpolation(config);
        return _this;
      }

      _createClass(AnimatedInterpolation, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._parent.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedInterpolation.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            var parentValue = this._parent.__getValue();

            invariant(
              typeof parentValue === "number",
              "Cannot interpolate an input which is not a number."
            );
            return this._interpolation(parentValue);
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._parent.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._parent.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedInterpolation.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__transformDataType",
          value: function __transformDataType(range) {
            return range.map(NativeAnimatedHelper.transformDataType);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              inputRange: this._config.inputRange,
              outputRange: this.__transformDataType(this._config.outputRange),
              extrapolateLeft:
                this._config.extrapolateLeft ||
                this._config.extrapolate ||
                "extend",
              extrapolateRight:
                this._config.extrapolateRight ||
                this._config.extrapolate ||
                "extend",
              type: "interpolation",
            };
          },
        },
      ]);

      return AnimatedInterpolation;
    })(AnimatedWithChildren);

    AnimatedInterpolation.__createInterpolation = createInterpolation;
    module.exports = AnimatedInterpolation;
  },
  206,
  [16, 17, 72, 28, 30, 33, 207, 211, 208, 4, 136]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

    var NativeAnimatedAPI = NativeAnimatedHelper.API;

    var invariant = _$$_REQUIRE(_dependencyMap[3]);

    var _uniqueId = 1;

    var AnimatedNode = (function () {
      function AnimatedNode() {
        _classCallCheck(this, AnimatedNode);

        this._listeners = {};
      }

      _createClass(AnimatedNode, [
        {
          key: "__attach",
          value: function __attach() {},
        },
        {
          key: "__detach",
          value: function __detach() {
            if (this.__isNative && this.__nativeTag != null) {
              NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
              this.__nativeTag = undefined;
            }
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {},
        },
        {
          key: "__getAnimatedValue",
          value: function __getAnimatedValue() {
            return this.__getValue();
          },
        },
        {
          key: "__addChild",
          value: function __addChild(child) {},
        },
        {
          key: "__removeChild",
          value: function __removeChild(child) {},
        },
        {
          key: "__getChildren",
          value: function __getChildren() {
            return [];
          },
        },
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            if (!this.__isNative) {
              throw new Error(
                'This node cannot be made a "native" animated node'
              );
            }

            this._platformConfig = platformConfig;

            if (this.hasListeners()) {
              this._startListeningToNativeValueUpdates();
            }
          },
        },
        {
          key: "addListener",
          value: function addListener(callback) {
            var id = String(_uniqueId++);
            this._listeners[id] = callback;

            if (this.__isNative) {
              this._startListeningToNativeValueUpdates();
            }

            return id;
          },
        },
        {
          key: "removeListener",
          value: function removeListener(id) {
            delete this._listeners[id];

            if (this.__isNative && !this.hasListeners()) {
              this._stopListeningForNativeValueUpdates();
            }
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners() {
            this._listeners = {};

            if (this.__isNative) {
              this._stopListeningForNativeValueUpdates();
            }
          },
        },
        {
          key: "hasListeners",
          value: function hasListeners() {
            return !!Object.keys(this._listeners).length;
          },
        },
        {
          key: "_startListeningToNativeValueUpdates",
          value: function _startListeningToNativeValueUpdates() {
            var _this = this;

            if (
              this.__nativeAnimatedValueListener &&
              !this.__shouldUpdateListenersForNewNativeTag
            ) {
              return;
            }

            if (this.__shouldUpdateListenersForNewNativeTag) {
              this.__shouldUpdateListenersForNewNativeTag = false;

              this._stopListeningForNativeValueUpdates();
            }

            NativeAnimatedAPI.startListeningToAnimatedNodeValue(
              this.__getNativeTag()
            );
            this.__nativeAnimatedValueListener =
              NativeAnimatedHelper.nativeEventEmitter.addListener(
                "onAnimatedValueUpdate",
                function (data) {
                  if (data.tag !== _this.__getNativeTag()) {
                    return;
                  }

                  _this.__onAnimatedValueUpdateReceived(data.value);
                }
              );
          },
        },
        {
          key: "__onAnimatedValueUpdateReceived",
          value: function __onAnimatedValueUpdateReceived(value) {
            this.__callListeners(value);
          },
        },
        {
          key: "__callListeners",
          value: function __callListeners(value) {
            for (var _key in this._listeners) {
              this._listeners[_key]({
                value: value,
              });
            }
          },
        },
        {
          key: "_stopListeningForNativeValueUpdates",
          value: function _stopListeningForNativeValueUpdates() {
            if (!this.__nativeAnimatedValueListener) {
              return;
            }

            this.__nativeAnimatedValueListener.remove();

            this.__nativeAnimatedValueListener = null;
            NativeAnimatedAPI.stopListeningToAnimatedNodeValue(
              this.__getNativeTag()
            );
          },
        },
        {
          key: "__getNativeTag",
          value: function __getNativeTag() {
            var _this$__nativeTag;

            NativeAnimatedHelper.assertNativeAnimatedModule();
            invariant(
              this.__isNative,
              'Attempt to get native tag from node not marked as "native"'
            );
            var nativeTag =
              (_this$__nativeTag = this.__nativeTag) != null
                ? _this$__nativeTag
                : NativeAnimatedHelper.generateNewNodeTag();

            if (this.__nativeTag == null) {
              this.__nativeTag = nativeTag;

              var config = this.__getNativeConfig();

              if (this._platformConfig) {
                config.platformConfig = this._platformConfig;
              }

              NativeAnimatedHelper.API.createAnimatedNode(nativeTag, config);
              this.__shouldUpdateListenersForNewNativeTag = true;
            }

            return nativeTag;
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            throw new Error(
              "This JS animated node type cannot be used as native animated node"
            );
          },
        },
        {
          key: "toJSON",
          value: function toJSON() {
            return this.__getValue();
          },
        },
        {
          key: "__getPlatformConfig",
          value: function __getPlatformConfig() {
            return this._platformConfig;
          },
        },
        {
          key: "__setPlatformConfig",
          value: function __setPlatformConfig(platformConfig) {
            this._platformConfig = platformConfig;
          },
        },
      ]);

      return AnimatedNode;
    })();

    module.exports = AnimatedNode;
  },
  207,
  [16, 17, 208, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeAnimatedModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _NativeAnimatedTurboModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _ReactNativeFeatureFlags = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var NativeAnimatedModule =
      _Platform.default.OS === "ios" && global.RN$Bridgeless === true
        ? _NativeAnimatedTurboModule.default
        : _NativeAnimatedModule.default;
    var __nativeAnimatedNodeTagCount = 1;
    var __nativeAnimationIdCount = 1;
    var nativeEventEmitter;
    var waitingForQueuedOperations = new Set();
    var queueOperations = false;
    var queue = [];
    var singleOpQueue = [];

    var useSingleOpBatching =
      _Platform.default.OS === "android" &&
      !!(
        NativeAnimatedModule != null &&
        NativeAnimatedModule.queueAndExecuteBatchedOperations
      ) &&
      _ReactNativeFeatureFlags.default.animatedShouldUseSingleOp();

    var flushQueueTimeout = null;
    var eventListenerGetValueCallbacks = {};
    var eventListenerAnimationFinishedCallbacks = {};
    var globalEventEmitterGetValueListener = null;
    var globalEventEmitterAnimationFinishedListener = null;
    var nativeOps = useSingleOpBatching
      ? (function () {
          var apis = [
            "createAnimatedNode",
            "updateAnimatedNodeConfig",
            "getValue",
            "startListeningToAnimatedNodeValue",
            "stopListeningToAnimatedNodeValue",
            "connectAnimatedNodes",
            "disconnectAnimatedNodes",
            "startAnimatingNode",
            "stopAnimation",
            "setAnimatedNodeValue",
            "setAnimatedNodeOffset",
            "flattenAnimatedNodeOffset",
            "extractAnimatedNodeOffset",
            "connectAnimatedNodeToView",
            "disconnectAnimatedNodeFromView",
            "restoreDefaultValues",
            "dropAnimatedNode",
            "addAnimatedEventToView",
            "removeAnimatedEventFromView",
            "addListener",
            "removeListener",
          ];
          return apis.reduce(function (acc, functionName, i) {
            acc[functionName] = i + 1;
            return acc;
          }, {});
        })()
      : NativeAnimatedModule;
    var API = {
      getValue: function getValue(tag, saveValueCallback) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );

        if (useSingleOpBatching) {
          if (saveValueCallback) {
            eventListenerGetValueCallbacks[tag] = saveValueCallback;
          }

          API.queueOperation(nativeOps.getValue, tag);
        } else {
          API.queueOperation(nativeOps.getValue, tag, saveValueCallback);
        }
      },
      setWaitingForIdentifier: function setWaitingForIdentifier(id) {
        waitingForQueuedOperations.add(id);
        queueOperations = true;

        if (
          _ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush() &&
          flushQueueTimeout
        ) {
          clearTimeout(flushQueueTimeout);
        }
      },
      unsetWaitingForIdentifier: function unsetWaitingForIdentifier(id) {
        waitingForQueuedOperations.delete(id);

        if (waitingForQueuedOperations.size === 0) {
          queueOperations = false;
          API.disableQueue();
        }
      },
      disableQueue: function disableQueue() {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );

        if (
          _ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush()
        ) {
          var prevTimeout = flushQueueTimeout;
          clearImmediate(prevTimeout);
          flushQueueTimeout = setImmediate(API.flushQueue);
        } else {
          API.flushQueue();
        }
      },
      flushQueue: function flushQueue() {
        (0, _invariant.default)(
          NativeAnimatedModule,
          "Native animated module is not available"
        );
        flushQueueTimeout = null;

        if (useSingleOpBatching && singleOpQueue.length === 0) {
          return;
        }

        if (!useSingleOpBatching && queue.length === 0) {
          return;
        }

        if (useSingleOpBatching) {
          if (
            !globalEventEmitterGetValueListener ||
            !globalEventEmitterAnimationFinishedListener
          ) {
            setupGlobalEventEmitterListeners();
          }

          NativeAnimatedModule.queueAndExecuteBatchedOperations == null
            ? undefined
            : NativeAnimatedModule.queueAndExecuteBatchedOperations(
                singleOpQueue
              );
          singleOpQueue.length = 0;
        } else {
          _Platform.default.OS === "android" &&
            (NativeAnimatedModule.startOperationBatch == null
              ? undefined
              : NativeAnimatedModule.startOperationBatch());

          for (var q = 0, l = queue.length; q < l; q++) {
            queue[q]();
          }

          queue.length = 0;
          _Platform.default.OS === "android" &&
            (NativeAnimatedModule.finishOperationBatch == null
              ? undefined
              : NativeAnimatedModule.finishOperationBatch());
        }
      },
      queueOperation: function queueOperation(fn) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        if (useSingleOpBatching) {
          singleOpQueue.push.apply(singleOpQueue, [fn].concat(args));
          return;
        }

        if (queueOperations || queue.length !== 0) {
          queue.push(function () {
            return fn.apply(undefined, args);
          });
        } else {
          fn.apply(undefined, args);
        }
      },
      createAnimatedNode: function createAnimatedNode(tag, config) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.createAnimatedNode, tag, config);
      },
      updateAnimatedNodeConfig: function updateAnimatedNodeConfig(tag, config) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );

        if (nativeOps.updateAnimatedNodeConfig) {
          API.queueOperation(nativeOps.updateAnimatedNodeConfig, tag, config);
        }
      },
      startListeningToAnimatedNodeValue:
        function startListeningToAnimatedNodeValue(tag) {
          (0, _invariant.default)(
            nativeOps,
            "Native animated module is not available"
          );
          API.queueOperation(nativeOps.startListeningToAnimatedNodeValue, tag);
        },
      stopListeningToAnimatedNodeValue:
        function stopListeningToAnimatedNodeValue(tag) {
          (0, _invariant.default)(
            nativeOps,
            "Native animated module is not available"
          );
          API.queueOperation(nativeOps.stopListeningToAnimatedNodeValue, tag);
        },
      connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.connectAnimatedNodes, parentTag, childTag);
      },
      disconnectAnimatedNodes: function disconnectAnimatedNodes(
        parentTag,
        childTag
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(
          nativeOps.disconnectAnimatedNodes,
          parentTag,
          childTag
        );
      },
      startAnimatingNode: function startAnimatingNode(
        animationId,
        nodeTag,
        config,
        endCallback
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );

        if (useSingleOpBatching) {
          if (endCallback) {
            eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
          }

          API.queueOperation(
            nativeOps.startAnimatingNode,
            animationId,
            nodeTag,
            config
          );
        } else {
          API.queueOperation(
            nativeOps.startAnimatingNode,
            animationId,
            nodeTag,
            config,
            endCallback
          );
        }
      },
      stopAnimation: function stopAnimation(animationId) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.stopAnimation, animationId);
      },
      setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.setAnimatedNodeValue, nodeTag, value);
      },
      setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.setAnimatedNodeOffset, nodeTag, offset);
      },
      flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.flattenAnimatedNodeOffset, nodeTag);
      },
      extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.extractAnimatedNodeOffset, nodeTag);
      },
      connectAnimatedNodeToView: function connectAnimatedNodeToView(
        nodeTag,
        viewTag
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(
          nativeOps.connectAnimatedNodeToView,
          nodeTag,
          viewTag
        );
      },
      disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(
        nodeTag,
        viewTag
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(
          nativeOps.disconnectAnimatedNodeFromView,
          nodeTag,
          viewTag
        );
      },
      restoreDefaultValues: function restoreDefaultValues(nodeTag) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );

        if (nativeOps.restoreDefaultValues != null) {
          API.queueOperation(nativeOps.restoreDefaultValues, nodeTag);
        }
      },
      dropAnimatedNode: function dropAnimatedNode(tag) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(nativeOps.dropAnimatedNode, tag);
      },
      addAnimatedEventToView: function addAnimatedEventToView(
        viewTag,
        eventName,
        eventMapping
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(
          nativeOps.addAnimatedEventToView,
          viewTag,
          eventName,
          eventMapping
        );
      },
      removeAnimatedEventFromView: function removeAnimatedEventFromView(
        viewTag,
        eventName,
        animatedNodeTag
      ) {
        (0, _invariant.default)(
          nativeOps,
          "Native animated module is not available"
        );
        API.queueOperation(
          nativeOps.removeAnimatedEventFromView,
          viewTag,
          eventName,
          animatedNodeTag
        );
      },
    };

    function setupGlobalEventEmitterListeners() {
      globalEventEmitterGetValueListener =
        _RCTDeviceEventEmitter.default.addListener(
          "onNativeAnimatedModuleGetValue",
          function (params) {
            var tag = params.tag;
            var callback = eventListenerGetValueCallbacks[tag];

            if (!callback) {
              return;
            }

            callback(params.value);
            delete eventListenerGetValueCallbacks[tag];
          }
        );
      globalEventEmitterAnimationFinishedListener =
        _RCTDeviceEventEmitter.default.addListener(
          "onNativeAnimatedModuleAnimationFinished",
          function (params) {
            var animationId = params.animationId;
            var callback = eventListenerAnimationFinishedCallbacks[animationId];

            if (!callback) {
              return;
            }

            callback(params);
            delete eventListenerAnimationFinishedCallbacks[animationId];
          }
        );
    }

    var SUPPORTED_COLOR_STYLES = {
      backgroundColor: true,
      borderBottomColor: true,
      borderColor: true,
      borderEndColor: true,
      borderLeftColor: true,
      borderRightColor: true,
      borderStartColor: true,
      borderTopColor: true,
      color: true,
      tintColor: true,
    };
    var SUPPORTED_STYLES = Object.assign({}, SUPPORTED_COLOR_STYLES, {
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderRadius: true,
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      elevation: true,
      opacity: true,
      transform: true,
      zIndex: true,
      shadowOpacity: true,
      shadowRadius: true,
      scaleX: true,
      scaleY: true,
      translateX: true,
      translateY: true,
    });
    var SUPPORTED_TRANSFORMS = {
      translateX: true,
      translateY: true,
      scale: true,
      scaleX: true,
      scaleY: true,
      rotate: true,
      rotateX: true,
      rotateY: true,
      rotateZ: true,
      perspective: true,
    };
    var SUPPORTED_INTERPOLATION_PARAMS = {
      inputRange: true,
      outputRange: true,
      extrapolate: true,
      extrapolateRight: true,
      extrapolateLeft: true,
    };

    function addWhitelistedStyleProp(prop) {
      SUPPORTED_STYLES[prop] = true;
    }

    function addWhitelistedTransformProp(prop) {
      SUPPORTED_TRANSFORMS[prop] = true;
    }

    function addWhitelistedInterpolationParam(param) {
      SUPPORTED_INTERPOLATION_PARAMS[param] = true;
    }

    function isSupportedColorStyleProp(prop) {
      return SUPPORTED_COLOR_STYLES.hasOwnProperty(prop);
    }

    function isSupportedStyleProp(prop) {
      return SUPPORTED_STYLES.hasOwnProperty(prop);
    }

    function isSupportedTransformProp(prop) {
      return SUPPORTED_TRANSFORMS.hasOwnProperty(prop);
    }

    function isSupportedInterpolationParam(param) {
      return SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(param);
    }

    function validateTransform(configs) {
      configs.forEach(function (config) {
        if (!isSupportedTransformProp(config.property)) {
          throw new Error(
            "Property '" +
              config.property +
              "' is not supported by native animated module"
          );
        }
      });
    }

    function validateStyles(styles) {
      for (var _key2 in styles) {
        if (!isSupportedStyleProp(_key2)) {
          throw new Error(
            "Style property '" +
              _key2 +
              "' is not supported by native animated module"
          );
        }
      }
    }

    function validateInterpolation(config) {
      for (var _key3 in config) {
        if (!isSupportedInterpolationParam(_key3)) {
          throw new Error(
            "Interpolation property '" +
              _key3 +
              "' is not supported by native animated module"
          );
        }
      }
    }

    function generateNewNodeTag() {
      return __nativeAnimatedNodeTagCount++;
    }

    function generateNewAnimationId() {
      return __nativeAnimationIdCount++;
    }

    function assertNativeAnimatedModule() {
      (0, _invariant.default)(
        NativeAnimatedModule,
        "Native animated module is not available"
      );
    }

    var _warnedMissingNativeAnimated = false;

    function shouldUseNativeDriver(config) {
      if (config.useNativeDriver == null) {
        console.warn(
          "Animated: `useNativeDriver` was not specified. This is a required option and must be explicitly set to `true` or `false`"
        );
      }

      if (config.useNativeDriver === true && !NativeAnimatedModule) {
        if (!_warnedMissingNativeAnimated) {
          console.warn(
            "Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md"
          );
          _warnedMissingNativeAnimated = true;
        }

        return false;
      }

      return config.useNativeDriver || false;
    }

    function transformDataType(value) {
      if (typeof value !== "string") {
        return value;
      }

      if (/deg$/.test(value)) {
        var degrees = parseFloat(value) || 0;
        var radians = (degrees * Math.PI) / 180.0;
        return radians;
      } else {
        return value;
      }
    }

    module.exports = {
      API: API,
      isSupportedColorStyleProp: isSupportedColorStyleProp,
      isSupportedStyleProp: isSupportedStyleProp,
      isSupportedTransformProp: isSupportedTransformProp,
      isSupportedInterpolationParam: isSupportedInterpolationParam,
      addWhitelistedStyleProp: addWhitelistedStyleProp,
      addWhitelistedTransformProp: addWhitelistedTransformProp,
      addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
      validateStyles: validateStyles,
      validateTransform: validateTransform,
      validateInterpolation: validateInterpolation,
      generateNewNodeTag: generateNewNodeTag,
      generateNewAnimationId: generateNewAnimationId,
      assertNativeAnimatedModule: assertNativeAnimatedModule,
      shouldUseNativeDriver: shouldUseNativeDriver,
      transformDataType: transformDataType,

      get nativeEventEmitter() {
        if (!nativeEventEmitter) {
          nativeEventEmitter = new _NativeEventEmitter.default(
            _Platform.default.OS !== "ios" ? null : NativeAnimatedModule
          );
        }

        return nativeEventEmitter;
      },
    };
  },
  208,
  [7, 209, 210, 82, 54, 197, 4, 8]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("NativeAnimatedModule");

    exports.default = _default;
  },
  209,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("NativeAnimatedTurboModule");

    exports.default = _default;
  },
  210,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[6]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedWithChildren = (function (_AnimatedNode) {
      _inherits(AnimatedWithChildren, _AnimatedNode);

      var _super = _createSuper(AnimatedWithChildren);

      function AnimatedWithChildren() {
        var _this;

        _classCallCheck(this, AnimatedWithChildren);

        _this = _super.call(this);
        _this._children = [];
        return _this;
      }

      _createClass(AnimatedWithChildren, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            if (!this.__isNative) {
              this.__isNative = true;

              for (var child of this._children) {
                child.__makeNative(platformConfig);

                NativeAnimatedHelper.API.connectAnimatedNodes(
                  this.__getNativeTag(),
                  child.__getNativeTag()
                );
              }
            }

            _get(
              _getPrototypeOf(AnimatedWithChildren.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__addChild",
          value: function __addChild(child) {
            if (this._children.length === 0) {
              this.__attach();
            }

            this._children.push(child);

            if (this.__isNative) {
              child.__makeNative(this.__getPlatformConfig());

              NativeAnimatedHelper.API.connectAnimatedNodes(
                this.__getNativeTag(),
                child.__getNativeTag()
              );
            }
          },
        },
        {
          key: "__removeChild",
          value: function __removeChild(child) {
            var index = this._children.indexOf(child);

            if (index === -1) {
              console.warn("Trying to remove a child that doesn't exist");
              return;
            }

            if (this.__isNative && child.__isNative) {
              NativeAnimatedHelper.API.disconnectAnimatedNodes(
                this.__getNativeTag(),
                child.__getNativeTag()
              );
            }

            this._children.splice(index, 1);

            if (this._children.length === 0) {
              this.__detach();
            }
          },
        },
        {
          key: "__getChildren",
          value: function __getChildren() {
            return this._children;
          },
        },
        {
          key: "__callListeners",
          value: function __callListeners(value) {
            _get(
              _getPrototypeOf(AnimatedWithChildren.prototype),
              "__callListeners",
              this
            ).call(this, value);

            if (!this.__isNative) {
              for (var child of this._children) {
                if (child.__getValue) {
                  child.__callListeners(child.__getValue());
                }
              }
            }
          },
        },
      ]);

      return AnimatedWithChildren;
    })(AnimatedNode);

    module.exports = AnimatedWithChildren;
  },
  211,
  [16, 17, 72, 28, 30, 33, 207, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var BatchedBridge = _$$_REQUIRE(_dependencyMap[2]);

    var TaskQueue = _$$_REQUIRE(_dependencyMap[3]);

    var infoLog = _$$_REQUIRE(_dependencyMap[4]);

    var invariant = _$$_REQUIRE(_dependencyMap[5]);

    var _emitter = new _EventEmitter.default();

    var DEBUG_DELAY = 0;
    var DEBUG = false;
    var InteractionManager = {
      Events: {
        interactionStart: "interactionStart",
        interactionComplete: "interactionComplete",
      },
      runAfterInteractions: function runAfterInteractions(task) {
        var tasks = [];
        var promise = new Promise(function (resolve) {
          _scheduleUpdate();

          if (task) {
            tasks.push(task);
          }

          tasks.push({
            run: resolve,
            name: "resolve " + ((task && task.name) || "?"),
          });

          _taskQueue.enqueueTasks(tasks);
        });
        return {
          then: promise.then.bind(promise),
          cancel: function cancel() {
            _taskQueue.cancelTasks(tasks);
          },
        };
      },
      createInteractionHandle: function createInteractionHandle() {
        DEBUG;

        _scheduleUpdate();

        var handle = ++_inc;

        _addInteractionSet.add(handle);

        return handle;
      },
      clearInteractionHandle: function clearInteractionHandle(handle) {
        DEBUG;
        invariant(
          !!handle,
          "InteractionManager: Must provide a handle to clear."
        );

        _scheduleUpdate();

        _addInteractionSet.delete(handle);

        _deleteInteractionSet.add(handle);
      },
      addListener: _emitter.addListener.bind(_emitter),
      setDeadline: function setDeadline(deadline) {
        _deadline = deadline;
      },
    };

    var _interactionSet = new Set();

    var _addInteractionSet = new Set();

    var _deleteInteractionSet = new Set();

    var _taskQueue = new TaskQueue({
      onMoreTasks: _scheduleUpdate,
    });

    var _nextUpdateHandle = 0;
    var _inc = 0;

    var _deadline = -1;

    function _scheduleUpdate() {
      if (!_nextUpdateHandle) {
        if (_deadline > 0) {
          _nextUpdateHandle = setTimeout(_processUpdate, 0);
        } else {
          _nextUpdateHandle = setImmediate(_processUpdate);
        }
      }
    }

    function _processUpdate() {
      _nextUpdateHandle = 0;
      var interactionCount = _interactionSet.size;

      _addInteractionSet.forEach(function (handle) {
        return _interactionSet.add(handle);
      });

      _deleteInteractionSet.forEach(function (handle) {
        return _interactionSet.delete(handle);
      });

      var nextInteractionCount = _interactionSet.size;

      if (interactionCount !== 0 && nextInteractionCount === 0) {
        _emitter.emit(InteractionManager.Events.interactionComplete);
      } else if (interactionCount === 0 && nextInteractionCount !== 0) {
        _emitter.emit(InteractionManager.Events.interactionStart);
      }

      if (nextInteractionCount === 0) {
        while (_taskQueue.hasTasksToProcess()) {
          _taskQueue.processNext();

          if (
            _deadline > 0 &&
            BatchedBridge.getEventLoopRunningTime() >= _deadline
          ) {
            _scheduleUpdate();

            break;
          }
        }
      }

      _addInteractionSet.clear();

      _deleteInteractionSet.clear();
    }

    module.exports = InteractionManager;
  },
  212,
  [7, 9, 48, 213, 80, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var infoLog = _$$_REQUIRE(_dependencyMap[2]);

    var invariant = _$$_REQUIRE(_dependencyMap[3]);

    var DEBUG = false;

    var TaskQueue = (function () {
      function TaskQueue(_ref) {
        var onMoreTasks = _ref.onMoreTasks;

        _classCallCheck(this, TaskQueue);

        this._onMoreTasks = onMoreTasks;
        this._queueStack = [
          {
            tasks: [],
            popable: false,
          },
        ];
      }

      _createClass(TaskQueue, [
        {
          key: "enqueue",
          value: function enqueue(task) {
            this._getCurrentQueue().push(task);
          },
        },
        {
          key: "enqueueTasks",
          value: function enqueueTasks(tasks) {
            var _this = this;

            tasks.forEach(function (task) {
              return _this.enqueue(task);
            });
          },
        },
        {
          key: "cancelTasks",
          value: function cancelTasks(tasksToCancel) {
            this._queueStack = this._queueStack
              .map(function (queue) {
                return Object.assign({}, queue, {
                  tasks: queue.tasks.filter(function (task) {
                    return tasksToCancel.indexOf(task) === -1;
                  }),
                });
              })
              .filter(function (queue, idx) {
                return queue.tasks.length > 0 || idx === 0;
              });
          },
        },
        {
          key: "hasTasksToProcess",
          value: function hasTasksToProcess() {
            return this._getCurrentQueue().length > 0;
          },
        },
        {
          key: "processNext",
          value: function processNext() {
            var queue = this._getCurrentQueue();

            if (queue.length) {
              var task = queue.shift();

              try {
                if (typeof task === "object" && task.gen) {
                  DEBUG;

                  this._genPromise(task);
                } else if (typeof task === "object" && task.run) {
                  DEBUG;
                  task.run();
                } else {
                  invariant(
                    typeof task === "function",
                    "Expected Function, SimpleTask, or PromiseTask, but got:\n" +
                      JSON.stringify(task, null, 2)
                  );
                  DEBUG;
                  task();
                }
              } catch (e) {
                e.message =
                  "TaskQueue: Error with task " +
                  (task.name || "") +
                  ": " +
                  e.message;
                throw e;
              }
            }
          },
        },
        {
          key: "_getCurrentQueue",
          value: function _getCurrentQueue() {
            var stackIdx = this._queueStack.length - 1;
            var queue = this._queueStack[stackIdx];

            if (
              queue.popable &&
              queue.tasks.length === 0 &&
              this._queueStack.length > 1
            ) {
              this._queueStack.pop();

              DEBUG;
              return this._getCurrentQueue();
            } else {
              return queue.tasks;
            }
          },
        },
        {
          key: "_genPromise",
          value: function _genPromise(task) {
            var _this2 = this;

            this._queueStack.push({
              tasks: [],
              popable: false,
            });

            var stackIdx = this._queueStack.length - 1;
            var stackItem = this._queueStack[stackIdx];
            DEBUG;
            DEBUG;
            task
              .gen()
              .then(function () {
                DEBUG;
                stackItem.popable = true;
                _this2.hasTasksToProcess() && _this2._onMoreTasks();
              })
              .catch(function (ex) {
                setTimeout(function () {
                  ex.message =
                    "TaskQueue: Error resolving Promise in task " +
                    task.name +
                    ": " +
                    ex.message;
                  throw ex;
                }, 0);
              });
          },
        },
      ]);

      return TaskQueue;
    })();

    module.exports = TaskQueue;
  },
  213,
  [16, 17, 80, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[2]);

    var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[3]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[4]);

    var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

    var invariant = _$$_REQUIRE(_dependencyMap[6]);

    var _require = _$$_REQUIRE(_dependencyMap[4]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

    function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
      var eventMappings = [];

      var traverse = function traverse(value, path) {
        if (value instanceof AnimatedValue) {
          value.__makeNative(platformConfig);

          eventMappings.push({
            nativeEventPath: path,
            animatedValueTag: value.__getNativeTag(),
          });
        } else if (value instanceof AnimatedValueXY) {
          traverse(value.x, path.concat("x"));
          traverse(value.y, path.concat("y"));
        } else if (typeof value === "object") {
          for (var _key in value) {
            traverse(value[_key], path.concat(_key));
          }
        }
      };

      invariant(
        argMapping[0] && argMapping[0].nativeEvent,
        "Native driven events only support animated values contained inside `nativeEvent`."
      );
      traverse(argMapping[0].nativeEvent, []);
      var viewTag = ReactNative.findNodeHandle(viewRef);

      if (viewTag != null) {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.addAnimatedEventToView(
            viewTag,
            eventName,
            mapping
          );
        });
      }

      return {
        detach: function detach() {
          if (viewTag != null) {
            eventMappings.forEach(function (mapping) {
              NativeAnimatedHelper.API.removeAnimatedEventFromView(
                viewTag,
                eventName,
                mapping.animatedValueTag
              );
            });
          }
        },
      };
    }

    var AnimatedEvent = (function () {
      function AnimatedEvent(argMapping, config) {
        var _this = this;

        _classCallCheck(this, AnimatedEvent);

        this._listeners = [];

        this._callListeners = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key2 = 0;
            _key2 < _len;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          _this._listeners.forEach(function (listener) {
            return listener.apply(undefined, args);
          });
        };

        this._argMapping = argMapping;

        if (config == null) {
          console.warn(
            "Animated.event now requires a second argument for options"
          );
          config = {
            useNativeDriver: false,
          };
        }

        if (config.listener) {
          this.__addListener(config.listener);
        }

        this._attachedEvent = null;
        this.__isNative = shouldUseNativeDriver(config);
        this.__platformConfig = config.platformConfig;
      }

      _createClass(AnimatedEvent, [
        {
          key: "__addListener",
          value: function __addListener(callback) {
            this._listeners.push(callback);
          },
        },
        {
          key: "__removeListener",
          value: function __removeListener(callback) {
            this._listeners = this._listeners.filter(function (listener) {
              return listener !== callback;
            });
          },
        },
        {
          key: "__attach",
          value: function __attach(viewRef, eventName) {
            invariant(
              this.__isNative,
              "Only native driven events need to be attached."
            );
            this._attachedEvent = attachNativeEvent(
              viewRef,
              eventName,
              this._argMapping,
              this.__platformConfig
            );
          },
        },
        {
          key: "__detach",
          value: function __detach(viewTag, eventName) {
            invariant(
              this.__isNative,
              "Only native driven events need to be detached."
            );
            this._attachedEvent && this._attachedEvent.detach();
          },
        },
        {
          key: "__getHandler",
          value: function __getHandler() {
            var _this2 = this;

            if (this.__isNative) {
              {
                return this._callListeners;
              }
            }

            var validatedMapping = false;
            return function () {
              for (
                var _len3 = arguments.length,
                  args = new Array(_len3),
                  _key4 = 0;
                _key4 < _len3;
                _key4++
              ) {
                args[_key4] = arguments[_key4];
              }

              var traverse = function traverse(recMapping, recEvt) {
                if (recMapping instanceof AnimatedValue) {
                  if (typeof recEvt === "number") {
                    recMapping.setValue(recEvt);
                  }
                } else if (recMapping instanceof AnimatedValueXY) {
                  if (typeof recEvt === "object") {
                    traverse(recMapping.x, recEvt.x);
                    traverse(recMapping.y, recEvt.y);
                  }
                } else if (typeof recMapping === "object") {
                  for (var mappingKey in recMapping) {
                    traverse(recMapping[mappingKey], recEvt[mappingKey]);
                  }
                }
              };

              _this2._argMapping.forEach(function (mapping, idx) {
                traverse(mapping, args[idx]);
              });

              _this2._callListeners.apply(_this2, args);
            };
          },
        },
      ]);

      return AnimatedEvent;
    })();

    module.exports = {
      AnimatedEvent: AnimatedEvent,
      attachNativeEvent: attachNativeEvent,
    };
  },
  214,
  [16, 17, 205, 215, 208, 18, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[7]);

    var invariant = _$$_REQUIRE(_dependencyMap[8]);

    var _uniqueId = 1;

    var AnimatedValueXY = (function (_AnimatedWithChildren) {
      _inherits(AnimatedValueXY, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedValueXY);

      function AnimatedValueXY(valueIn, config) {
        var _this;

        _classCallCheck(this, AnimatedValueXY);

        _this = _super.call(this);
        var value = valueIn || {
          x: 0,
          y: 0,
        };

        if (typeof value.x === "number" && typeof value.y === "number") {
          _this.x = new AnimatedValue(value.x);
          _this.y = new AnimatedValue(value.y);
        } else {
          invariant(
            value.x instanceof AnimatedValue &&
              value.y instanceof AnimatedValue,
            "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues."
          );
          _this.x = value.x;
          _this.y = value.y;
        }

        _this._listeners = {};

        if (config && config.useNativeDriver) {
          _this.__makeNative();
        }

        return _this;
      }

      _createClass(AnimatedValueXY, [
        {
          key: "setValue",
          value: function setValue(value) {
            this.x.setValue(value.x);
            this.y.setValue(value.y);
          },
        },
        {
          key: "setOffset",
          value: function setOffset(offset) {
            this.x.setOffset(offset.x);
            this.y.setOffset(offset.y);
          },
        },
        {
          key: "flattenOffset",
          value: function flattenOffset() {
            this.x.flattenOffset();
            this.y.flattenOffset();
          },
        },
        {
          key: "extractOffset",
          value: function extractOffset() {
            this.x.extractOffset();
            this.y.extractOffset();
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return {
              x: this.x.__getValue(),
              y: this.y.__getValue(),
            };
          },
        },
        {
          key: "resetAnimation",
          value: function resetAnimation(callback) {
            this.x.resetAnimation();
            this.y.resetAnimation();
            callback && callback(this.__getValue());
          },
        },
        {
          key: "stopAnimation",
          value: function stopAnimation(callback) {
            this.x.stopAnimation();
            this.y.stopAnimation();
            callback && callback(this.__getValue());
          },
        },
        {
          key: "addListener",
          value: function addListener(callback) {
            var _this2 = this;

            var id = String(_uniqueId++);

            var jointCallback = function jointCallback(_ref) {
              var number = _ref.value;
              callback(_this2.__getValue());
            };

            this._listeners[id] = {
              x: this.x.addListener(jointCallback),
              y: this.y.addListener(jointCallback),
            };
            return id;
          },
        },
        {
          key: "removeListener",
          value: function removeListener(id) {
            this.x.removeListener(this._listeners[id].x);
            this.y.removeListener(this._listeners[id].y);
            delete this._listeners[id];
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners() {
            this.x.removeAllListeners();
            this.y.removeAllListeners();
            this._listeners = {};
          },
        },
        {
          key: "getLayout",
          value: function getLayout() {
            return {
              left: this.x,
              top: this.y,
            };
          },
        },
        {
          key: "getTranslateTransform",
          value: function getTranslateTransform() {
            return [
              {
                translateX: this.x,
              },
              {
                translateY: this.y,
              },
            ];
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this.x.__addChild(this);

            this.y.__addChild(this);

            _get(
              _getPrototypeOf(AnimatedValueXY.prototype),
              "__attach",
              this
            ).call(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this.x.__removeChild(this);

            this.y.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedValueXY.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this.x.__makeNative(platformConfig);

            this.y.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedValueXY.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
      ]);

      return AnimatedValueXY;
    })(AnimatedWithChildren);

    module.exports = AnimatedValueXY;
  },
  215,
  [16, 17, 72, 28, 30, 33, 205, 211, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _require = _$$_REQUIRE(_dependencyMap[2]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

    var AnimatedAddition = _$$_REQUIRE(_dependencyMap[3]);

    var AnimatedDiffClamp = _$$_REQUIRE(_dependencyMap[4]);

    var AnimatedDivision = _$$_REQUIRE(_dependencyMap[5]);

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedModulo = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedMultiplication = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedSubtraction = _$$_REQUIRE(_dependencyMap[10]);

    var AnimatedTracking = _$$_REQUIRE(_dependencyMap[11]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[12]);

    var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[13]);

    var DecayAnimation = _$$_REQUIRE(_dependencyMap[14]);

    var SpringAnimation = _$$_REQUIRE(_dependencyMap[15]);

    var TimingAnimation = _$$_REQUIRE(_dependencyMap[16]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[17]);

    var add = function add(a, b) {
      return new AnimatedAddition(a, b);
    };

    var subtract = function subtract(a, b) {
      return new AnimatedSubtraction(a, b);
    };

    var divide = function divide(a, b) {
      return new AnimatedDivision(a, b);
    };

    var multiply = function multiply(a, b) {
      return new AnimatedMultiplication(a, b);
    };

    var modulo = function modulo(a, modulus) {
      return new AnimatedModulo(a, modulus);
    };

    var diffClamp = function diffClamp(a, min, max) {
      return new AnimatedDiffClamp(a, min, max);
    };

    var _combineCallbacks = function _combineCallbacks(callback, config) {
      if (callback && config.onComplete) {
        return function () {
          config.onComplete && config.onComplete.apply(config, arguments);
          callback && callback.apply(undefined, arguments);
        };
      } else {
        return callback || config.onComplete;
      }
    };

    var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
      if (value instanceof AnimatedValueXY) {
        var configX = Object.assign({}, config);
        var configY = Object.assign({}, config);

        for (var key in config) {
          var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

          if (x !== undefined && y !== undefined) {
            configX[key] = x;
            configY[key] = y;
          }
        }

        var aX = anim(value.x, configX);
        var aY = anim(value.y, configY);
        return parallel([aX, aY], {
          stopTogether: false,
        });
      } else if (value instanceof _AnimatedColor.default) {
        var configR = Object.assign({}, config);
        var configG = Object.assign({}, config);
        var configB = Object.assign({}, config);
        var configA = Object.assign({}, config);

        for (var _key in config) {
          var _config$_key = config[_key],
            r = _config$_key.r,
            g = _config$_key.g,
            b = _config$_key.b,
            a = _config$_key.a;

          if (
            r !== undefined &&
            g !== undefined &&
            b !== undefined &&
            a !== undefined
          ) {
            configR[_key] = r;
            configG[_key] = g;
            configB[_key] = b;
            configA[_key] = a;
          }
        }

        var aR = anim(value.r, configR);
        var aG = anim(value.g, configG);
        var aB = anim(value.b, configB);
        var aA = anim(value.a, configA);
        return parallel([aR, aG, aB, aA], {
          stopTogether: false,
        });
      }

      return null;
    };

    var spring = function spring(value, config) {
      var _start = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();

        if (configuration.toValue instanceof AnimatedNode) {
          singleValue.track(
            new AnimatedTracking(
              singleValue,
              configuration.toValue,
              SpringAnimation,
              singleConfig,
              callback
            )
          );
        } else {
          singleValue.animate(new SpringAnimation(singleConfig), callback);
        }
      };

      return (
        maybeVectorAnim(value, config, spring) || {
          start: function start(callback) {
            _start(value, config, callback);
          },
          stop: function stop() {
            value.stopAnimation();
          },
          reset: function reset() {
            value.resetAnimation();
          },
          _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = Object.assign({}, config, {
              iterations: iterations,
            });

            _start(value, singleConfig);
          },
          _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
          },
        }
      );
    };

    var timing = function timing(value, config) {
      var _start2 = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();

        if (configuration.toValue instanceof AnimatedNode) {
          singleValue.track(
            new AnimatedTracking(
              singleValue,
              configuration.toValue,
              TimingAnimation,
              singleConfig,
              callback
            )
          );
        } else {
          singleValue.animate(new TimingAnimation(singleConfig), callback);
        }
      };

      return (
        maybeVectorAnim(value, config, timing) || {
          start: function start(callback) {
            _start2(value, config, callback);
          },
          stop: function stop() {
            value.stopAnimation();
          },
          reset: function reset() {
            value.resetAnimation();
          },
          _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = Object.assign({}, config, {
              iterations: iterations,
            });

            _start2(value, singleConfig);
          },
          _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
          },
        }
      );
    };

    var decay = function decay(value, config) {
      var _start3 = function start(animatedValue, configuration, callback) {
        callback = _combineCallbacks(callback, configuration);
        var singleValue = animatedValue;
        var singleConfig = configuration;
        singleValue.stopTracking();
        singleValue.animate(new DecayAnimation(singleConfig), callback);
      };

      return (
        maybeVectorAnim(value, config, decay) || {
          start: function start(callback) {
            _start3(value, config, callback);
          },
          stop: function stop() {
            value.stopAnimation();
          },
          reset: function reset() {
            value.resetAnimation();
          },
          _startNativeLoop: function _startNativeLoop(iterations) {
            var singleConfig = Object.assign({}, config, {
              iterations: iterations,
            });

            _start3(value, singleConfig);
          },
          _isUsingNativeDriver: function _isUsingNativeDriver() {
            return config.useNativeDriver || false;
          },
        }
      );
    };

    var sequence = function sequence(animations) {
      var current = 0;
      return {
        start: function start(callback) {
          var onComplete = function onComplete(result) {
            if (!result.finished) {
              callback && callback(result);
              return;
            }

            current++;

            if (current === animations.length) {
              callback && callback(result);
              return;
            }

            animations[current].start(onComplete);
          };

          if (animations.length === 0) {
            callback &&
              callback({
                finished: true,
              });
          } else {
            animations[current].start(onComplete);
          }
        },
        stop: function stop() {
          if (current < animations.length) {
            animations[current].stop();
          }
        },
        reset: function reset() {
          animations.forEach(function (animation, idx) {
            if (idx <= current) {
              animation.reset();
            }
          });
          current = 0;
        },
        _startNativeLoop: function _startNativeLoop() {
          throw new Error(
            "Loops run using the native driver cannot contain Animated.sequence animations"
          );
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
          return false;
        },
      };
    };

    var parallel = function parallel(animations, config) {
      var doneCount = 0;
      var hasEnded = {};
      var stopTogether = !(config && config.stopTogether === false);
      var result = {
        start: function start(callback) {
          if (doneCount === animations.length) {
            callback &&
              callback({
                finished: true,
              });
            return;
          }

          animations.forEach(function (animation, idx) {
            var cb = function cb(endResult) {
              hasEnded[idx] = true;
              doneCount++;

              if (doneCount === animations.length) {
                doneCount = 0;
                callback && callback(endResult);
                return;
              }

              if (!endResult.finished && stopTogether) {
                result.stop();
              }
            };

            if (!animation) {
              cb({
                finished: true,
              });
            } else {
              animation.start(cb);
            }
          });
        },
        stop: function stop() {
          animations.forEach(function (animation, idx) {
            !hasEnded[idx] && animation.stop();
            hasEnded[idx] = true;
          });
        },
        reset: function reset() {
          animations.forEach(function (animation, idx) {
            animation.reset();
            hasEnded[idx] = false;
            doneCount = 0;
          });
        },
        _startNativeLoop: function _startNativeLoop() {
          throw new Error(
            "Loops run using the native driver cannot contain Animated.parallel animations"
          );
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
          return false;
        },
      };
      return result;
    };

    var delay = function delay(time) {
      return timing(new AnimatedValue(0), {
        toValue: 0,
        delay: time,
        duration: 0,
        useNativeDriver: false,
      });
    };

    var stagger = function stagger(time, animations) {
      return parallel(
        animations.map(function (animation, i) {
          return sequence([delay(time * i), animation]);
        })
      );
    };

    var loop = function loop(animation) {
      var _ref =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations,
        _ref$resetBeforeItera = _ref.resetBeforeIteration,
        resetBeforeIteration =
          _ref$resetBeforeItera === undefined ? true : _ref$resetBeforeItera;

      var isFinished = false;
      var iterationsSoFar = 0;
      return {
        start: function start(callback) {
          var restart = function restart() {
            var result =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {
                    finished: true,
                  };

            if (
              isFinished ||
              iterationsSoFar === iterations ||
              result.finished === false
            ) {
              callback && callback(result);
            } else {
              iterationsSoFar++;
              resetBeforeIteration && animation.reset();
              animation.start(restart);
            }
          };

          if (!animation || iterations === 0) {
            callback &&
              callback({
                finished: true,
              });
          } else {
            if (animation._isUsingNativeDriver()) {
              animation._startNativeLoop(iterations);
            } else {
              restart();
            }
          }
        },
        stop: function stop() {
          isFinished = true;
          animation.stop();
        },
        reset: function reset() {
          iterationsSoFar = 0;
          isFinished = false;
          animation.reset();
        },
        _startNativeLoop: function _startNativeLoop() {
          throw new Error(
            "Loops run using the native driver cannot contain Animated.loop animations"
          );
        },
        _isUsingNativeDriver: function _isUsingNativeDriver() {
          return animation._isUsingNativeDriver();
        },
      };
    };

    function forkEvent(event, listener) {
      if (!event) {
        return listener;
      } else if (event instanceof AnimatedEvent) {
        event.__addListener(listener);

        return event;
      } else {
        return function () {
          typeof event === "function" && event.apply(undefined, arguments);
          listener.apply(undefined, arguments);
        };
      }
    }

    function unforkEvent(event, listener) {
      if (event && event instanceof AnimatedEvent) {
        event.__removeListener(listener);
      }
    }

    var event = function event(argMapping, config) {
      var animatedEvent = new AnimatedEvent(argMapping, config);

      if (animatedEvent.__isNative) {
        return animatedEvent;
      } else {
        return animatedEvent.__getHandler();
      }
    };

    module.exports = {
      Value: AnimatedValue,
      ValueXY: AnimatedValueXY,
      Color: _AnimatedColor.default,
      Interpolation: AnimatedInterpolation,
      Node: AnimatedNode,
      decay: decay,
      timing: timing,
      spring: spring,
      add: add,
      subtract: subtract,
      divide: divide,
      multiply: multiply,
      modulo: modulo,
      diffClamp: diffClamp,
      delay: delay,
      sequence: sequence,
      parallel: parallel,
      stagger: stagger,
      loop: loop,
      event: event,
      createAnimatedComponent: createAnimatedComponent,
      attachNativeEvent: attachNativeEvent,
      forkEvent: forkEvent,
      unforkEvent: unforkEvent,
      Event: AnimatedEvent,
    };
  },
  216,
  [
    7, 204, 214, 217, 218, 219, 206, 220, 221, 207, 222, 223, 205, 215, 224,
    226, 228, 231,
  ]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedAddition = (function (_AnimatedWithChildren) {
      _inherits(AnimatedAddition, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedAddition);

      function AnimatedAddition(a, b) {
        var _this;

        _classCallCheck(this, AnimatedAddition);

        _this = _super.call(this);
        _this._a = typeof a === "number" ? new AnimatedValue(a) : a;
        _this._b = typeof b === "number" ? new AnimatedValue(b) : b;
        return _this;
      }

      _createClass(AnimatedAddition, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            this._b.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedAddition.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._a.__getValue() + this._b.__getValue();
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);

            this._b.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            this._b.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedAddition.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "addition",
              input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
            };
          },
        },
      ]);

      return AnimatedAddition;
    })(AnimatedWithChildren);

    module.exports = AnimatedAddition;
  },
  217,
  [16, 17, 72, 28, 30, 33, 206, 207, 205, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedDiffClamp = (function (_AnimatedWithChildren) {
      _inherits(AnimatedDiffClamp, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedDiffClamp);

      function AnimatedDiffClamp(a, min, max) {
        var _this;

        _classCallCheck(this, AnimatedDiffClamp);

        _this = _super.call(this);
        _this._a = a;
        _this._min = min;
        _this._max = max;
        _this._value = _this._lastValue = _this._a.__getValue();
        return _this;
      }

      _createClass(AnimatedDiffClamp, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedDiffClamp.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            var value = this._a.__getValue();

            var diff = value - this._lastValue;
            this._lastValue = value;
            this._value = Math.min(
              Math.max(this._value + diff, this._min),
              this._max
            );
            return this._value;
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedDiffClamp.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "diffclamp",
              input: this._a.__getNativeTag(),
              min: this._min,
              max: this._max,
            };
          },
        },
      ]);

      return AnimatedDiffClamp;
    })(AnimatedWithChildren);

    module.exports = AnimatedDiffClamp;
  },
  218,
  [16, 17, 72, 28, 30, 33, 206, 207, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedDivision = (function (_AnimatedWithChildren) {
      _inherits(AnimatedDivision, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedDivision);

      function AnimatedDivision(a, b) {
        var _this;

        _classCallCheck(this, AnimatedDivision);

        _this = _super.call(this);
        _this._warnedAboutDivideByZero = false;

        if (b === 0 || (b instanceof AnimatedNode && b.__getValue() === 0)) {
          console.error(
            "Detected potential division by zero in AnimatedDivision"
          );
        }

        _this._a = typeof a === "number" ? new AnimatedValue(a) : a;
        _this._b = typeof b === "number" ? new AnimatedValue(b) : b;
        return _this;
      }

      _createClass(AnimatedDivision, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            this._b.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedDivision.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            var a = this._a.__getValue();

            var b = this._b.__getValue();

            if (b === 0) {
              if (!this._warnedAboutDivideByZero) {
                console.error("Detected division by zero in AnimatedDivision");
                this._warnedAboutDivideByZero = true;
              }

              return 0;
            }

            this._warnedAboutDivideByZero = false;
            return a / b;
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);

            this._b.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            this._b.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedDivision.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "division",
              input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
            };
          },
        },
      ]);

      return AnimatedDivision;
    })(AnimatedWithChildren);

    module.exports = AnimatedDivision;
  },
  219,
  [16, 17, 72, 28, 30, 33, 206, 207, 205, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedModulo = (function (_AnimatedWithChildren) {
      _inherits(AnimatedModulo, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedModulo);

      function AnimatedModulo(a, modulus) {
        var _this;

        _classCallCheck(this, AnimatedModulo);

        _this = _super.call(this);
        _this._a = a;
        _this._modulus = modulus;
        return _this;
      }

      _createClass(AnimatedModulo, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedModulo.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return (
              ((this._a.__getValue() % this._modulus) + this._modulus) %
              this._modulus
            );
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedModulo.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "modulus",
              input: this._a.__getNativeTag(),
              modulus: this._modulus,
            };
          },
        },
      ]);

      return AnimatedModulo;
    })(AnimatedWithChildren);

    module.exports = AnimatedModulo;
  },
  220,
  [16, 17, 72, 28, 30, 33, 206, 207, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedMultiplication = (function (_AnimatedWithChildren) {
      _inherits(AnimatedMultiplication, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedMultiplication);

      function AnimatedMultiplication(a, b) {
        var _this;

        _classCallCheck(this, AnimatedMultiplication);

        _this = _super.call(this);
        _this._a = typeof a === "number" ? new AnimatedValue(a) : a;
        _this._b = typeof b === "number" ? new AnimatedValue(b) : b;
        return _this;
      }

      _createClass(AnimatedMultiplication, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            this._b.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedMultiplication.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._a.__getValue() * this._b.__getValue();
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);

            this._b.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            this._b.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedMultiplication.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "multiplication",
              input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
            };
          },
        },
      ]);

      return AnimatedMultiplication;
    })(AnimatedWithChildren);

    module.exports = AnimatedMultiplication;
  },
  221,
  [16, 17, 72, 28, 30, 33, 206, 207, 205, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedSubtraction = (function (_AnimatedWithChildren) {
      _inherits(AnimatedSubtraction, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedSubtraction);

      function AnimatedSubtraction(a, b) {
        var _this;

        _classCallCheck(this, AnimatedSubtraction);

        _this = _super.call(this);
        _this._a = typeof a === "number" ? new AnimatedValue(a) : a;
        _this._b = typeof b === "number" ? new AnimatedValue(b) : b;
        return _this;
      }

      _createClass(AnimatedSubtraction, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._a.__makeNative(platformConfig);

            this._b.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedSubtraction.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._a.__getValue() - this._b.__getValue();
          },
        },
        {
          key: "interpolate",
          value: function interpolate(config) {
            return new AnimatedInterpolation(this, config);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._a.__addChild(this);

            this._b.__addChild(this);
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._a.__removeChild(this);

            this._b.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedSubtraction.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            return {
              type: "subtraction",
              input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
            };
          },
        },
      ]);

      return AnimatedSubtraction;
    })(AnimatedWithChildren);

    module.exports = AnimatedSubtraction;
  },
  222,
  [16, 17, 72, 28, 30, 33, 206, 207, 205, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var _require = _$$_REQUIRE(_dependencyMap[8]),
      generateNewAnimationId = _require.generateNewAnimationId,
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

    var AnimatedTracking = (function (_AnimatedNode) {
      _inherits(AnimatedTracking, _AnimatedNode);

      var _super = _createSuper(AnimatedTracking);

      function AnimatedTracking(
        value,
        parent,
        animationClass,
        animationConfig,
        callback
      ) {
        var _this;

        _classCallCheck(this, AnimatedTracking);

        _this = _super.call(this);
        _this._value = value;
        _this._parent = parent;
        _this._animationClass = animationClass;
        _this._animationConfig = animationConfig;
        _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
        _this._callback = callback;

        _this.__attach();

        return _this;
      }

      _createClass(AnimatedTracking, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this.__isNative = true;

            this._parent.__makeNative(platformConfig);

            _get(
              _getPrototypeOf(AnimatedTracking.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);

            this._value.__makeNative(platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._parent.__getValue();
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            this._parent.__addChild(this);

            if (this._useNativeDriver) {
              var platformConfig = this._animationConfig.platformConfig;

              this.__makeNative(platformConfig);
            }
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            this._parent.__removeChild(this);

            _get(
              _getPrototypeOf(AnimatedTracking.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "update",
          value: function update() {
            this._value.animate(
              new this._animationClass(
                Object.assign({}, this._animationConfig, {
                  toValue: this._animationConfig.toValue.__getValue(),
                })
              ),
              this._callback
            );
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            var animation = new this._animationClass(
              Object.assign({}, this._animationConfig, {
                toValue: undefined,
              })
            );

            var animationConfig = animation.__getNativeAnimationConfig();

            return {
              type: "tracking",
              animationId: generateNewAnimationId(),
              animationConfig: animationConfig,
              toValue: this._parent.__getNativeTag(),
              value: this._value.__getNativeTag(),
            };
          },
        },
      ]);

      return AnimatedTracking;
    })(AnimatedNode);

    module.exports = AnimatedTracking;
  },
  223,
  [16, 17, 72, 28, 30, 33, 205, 207, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Animation = _$$_REQUIRE(_dependencyMap[6]);

    var _require = _$$_REQUIRE(_dependencyMap[7]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

    var DecayAnimation = (function (_Animation) {
      _inherits(DecayAnimation, _Animation);

      var _super = _createSuper(DecayAnimation);

      function DecayAnimation(config) {
        var _config$deceleration, _config$isInteraction, _config$iterations;

        var _this;

        _classCallCheck(this, DecayAnimation);

        _this = _super.call(this);
        _this._deceleration =
          (_config$deceleration = config.deceleration) != null
            ? _config$deceleration
            : 0.998;
        _this._velocity = config.velocity;
        _this._useNativeDriver = shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        _this.__isInteraction =
          (_config$isInteraction = config.isInteraction) != null
            ? _config$isInteraction
            : !_this._useNativeDriver;
        _this.__iterations =
          (_config$iterations = config.iterations) != null
            ? _config$iterations
            : 1;
        return _this;
      }

      _createClass(DecayAnimation, [
        {
          key: "__getNativeAnimationConfig",
          value: function __getNativeAnimationConfig() {
            return {
              type: "decay",
              deceleration: this._deceleration,
              velocity: this._velocity,
              iterations: this.__iterations,
              platformConfig: this._platformConfig,
            };
          },
        },
        {
          key: "start",
          value: function start(
            fromValue,
            onUpdate,
            onEnd,
            previousAnimation,
            animatedValue
          ) {
            this.__active = true;
            this._lastValue = fromValue;
            this._fromValue = fromValue;
            this._onUpdate = onUpdate;
            this.__onEnd = onEnd;
            this._startTime = Date.now();

            if (this._useNativeDriver) {
              this.__startNativeAnimation(animatedValue);
            } else {
              this._animationFrame = requestAnimationFrame(
                this.onUpdate.bind(this)
              );
            }
          },
        },
        {
          key: "onUpdate",
          value: function onUpdate() {
            var now = Date.now();
            var value =
              this._fromValue +
              (this._velocity / (1 - this._deceleration)) *
                (1 -
                  Math.exp(
                    -(1 - this._deceleration) * (now - this._startTime)
                  ));

            this._onUpdate(value);

            if (Math.abs(this._lastValue - value) < 0.1) {
              this.__debouncedOnEnd({
                finished: true,
              });

              return;
            }

            this._lastValue = value;

            if (this.__active) {
              this._animationFrame = requestAnimationFrame(
                this.onUpdate.bind(this)
              );
            }
          },
        },
        {
          key: "stop",
          value: function stop() {
            _get(_getPrototypeOf(DecayAnimation.prototype), "stop", this).call(
              this
            );

            this.__active = false;
            global.cancelAnimationFrame(this._animationFrame);

            this.__debouncedOnEnd({
              finished: false,
            });
          },
        },
      ]);

      return DecayAnimation;
    })(Animation);

    module.exports = DecayAnimation;
  },
  224,
  [16, 17, 72, 28, 30, 33, 225, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

    var startNativeAnimationNextId = 1;

    var Animation = (function () {
      function Animation() {
        _classCallCheck(this, Animation);
      }

      _createClass(Animation, [
        {
          key: "start",
          value: function start(
            fromValue,
            onUpdate,
            onEnd,
            previousAnimation,
            animatedValue
          ) {},
        },
        {
          key: "stop",
          value: function stop() {
            if (this.__nativeId) {
              NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
            }
          },
        },
        {
          key: "__getNativeAnimationConfig",
          value: function __getNativeAnimationConfig() {
            throw new Error(
              "This animation type cannot be offloaded to native"
            );
          },
        },
        {
          key: "__debouncedOnEnd",
          value: function __debouncedOnEnd(result) {
            var onEnd = this.__onEnd;
            this.__onEnd = null;
            onEnd && onEnd(result);
          },
        },
        {
          key: "__startNativeAnimation",
          value: function __startNativeAnimation(animatedValue) {
            var startNativeAnimationWaitId =
              startNativeAnimationNextId + ":startAnimation";
            startNativeAnimationNextId += 1;
            NativeAnimatedHelper.API.setWaitingForIdentifier(
              startNativeAnimationWaitId
            );

            try {
              var config = this.__getNativeAnimationConfig();

              animatedValue.__makeNative(config.platformConfig);

              this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
              NativeAnimatedHelper.API.startAnimatingNode(
                this.__nativeId,
                animatedValue.__getNativeTag(),
                config,
                this.__debouncedOnEnd.bind(this)
              );
            } catch (e) {
              throw e;
            } finally {
              NativeAnimatedHelper.API.unsetWaitingForIdentifier(
                startNativeAnimationWaitId
              );
            }
          },
        },
      ]);

      return Animation;
    })();

    module.exports = Animation;
  },
  225,
  [16, 17, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[10]);

    var Animation = _$$_REQUIRE(_dependencyMap[11]);

    var SpringConfig = _$$_REQUIRE(_dependencyMap[12]);

    var invariant = _$$_REQUIRE(_dependencyMap[13]);

    var _require = _$$_REQUIRE(_dependencyMap[14]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

    var SpringAnimation = (function (_Animation) {
      (0, _inherits2.default)(SpringAnimation, _Animation);

      var _super = _createSuper(SpringAnimation);

      function SpringAnimation(config) {
        var _config$overshootClam,
          _config$restDisplacem,
          _config$restSpeedThre,
          _config$velocity,
          _config$velocity2,
          _config$delay,
          _config$isInteraction,
          _config$iterations;

        var _this;

        (0, _classCallCheck2.default)(this, SpringAnimation);
        _this = _super.call(this);
        _this._overshootClamping =
          (_config$overshootClam = config.overshootClamping) != null
            ? _config$overshootClam
            : false;
        _this._restDisplacementThreshold =
          (_config$restDisplacem = config.restDisplacementThreshold) != null
            ? _config$restDisplacem
            : 0.001;
        _this._restSpeedThreshold =
          (_config$restSpeedThre = config.restSpeedThreshold) != null
            ? _config$restSpeedThre
            : 0.001;
        _this._initialVelocity =
          (_config$velocity = config.velocity) != null ? _config$velocity : 0;
        _this._lastVelocity =
          (_config$velocity2 = config.velocity) != null ? _config$velocity2 : 0;
        _this._toValue = config.toValue;
        _this._delay =
          (_config$delay = config.delay) != null ? _config$delay : 0;
        _this._useNativeDriver = shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        _this.__isInteraction =
          (_config$isInteraction = config.isInteraction) != null
            ? _config$isInteraction
            : !_this._useNativeDriver;
        _this.__iterations =
          (_config$iterations = config.iterations) != null
            ? _config$iterations
            : 1;

        if (
          config.stiffness !== undefined ||
          config.damping !== undefined ||
          config.mass !== undefined
        ) {
          var _config$stiffness, _config$damping, _config$mass;

          invariant(
            config.bounciness === undefined &&
              config.speed === undefined &&
              config.tension === undefined &&
              config.friction === undefined,
            "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one"
          );
          _this._stiffness =
            (_config$stiffness = config.stiffness) != null
              ? _config$stiffness
              : 100;
          _this._damping =
            (_config$damping = config.damping) != null ? _config$damping : 10;
          _this._mass = (_config$mass = config.mass) != null ? _config$mass : 1;
        } else if (
          config.bounciness !== undefined ||
          config.speed !== undefined
        ) {
          var _config$bounciness, _config$speed;

          invariant(
            config.tension === undefined &&
              config.friction === undefined &&
              config.stiffness === undefined &&
              config.damping === undefined &&
              config.mass === undefined,
            "You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one"
          );
          var springConfig = SpringConfig.fromBouncinessAndSpeed(
            (_config$bounciness = config.bounciness) != null
              ? _config$bounciness
              : 8,
            (_config$speed = config.speed) != null ? _config$speed : 12
          );
          _this._stiffness = springConfig.stiffness;
          _this._damping = springConfig.damping;
          _this._mass = 1;
        } else {
          var _config$tension, _config$friction;

          var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(
            (_config$tension = config.tension) != null ? _config$tension : 40,
            (_config$friction = config.friction) != null ? _config$friction : 7
          );

          _this._stiffness = _springConfig.stiffness;
          _this._damping = _springConfig.damping;
          _this._mass = 1;
        }

        invariant(
          _this._stiffness > 0,
          "Stiffness value must be greater than 0"
        );
        invariant(_this._damping > 0, "Damping value must be greater than 0");
        invariant(_this._mass > 0, "Mass value must be greater than 0");
        return _this;
      }

      (0, _createClass2.default)(SpringAnimation, [
        {
          key: "__getNativeAnimationConfig",
          value: function __getNativeAnimationConfig() {
            var _this$_initialVelocit;

            return {
              type: "spring",
              overshootClamping: this._overshootClamping,
              restDisplacementThreshold: this._restDisplacementThreshold,
              restSpeedThreshold: this._restSpeedThreshold,
              stiffness: this._stiffness,
              damping: this._damping,
              mass: this._mass,
              initialVelocity:
                (_this$_initialVelocit = this._initialVelocity) != null
                  ? _this$_initialVelocit
                  : this._lastVelocity,
              toValue: this._toValue,
              iterations: this.__iterations,
              platformConfig: this._platformConfig,
            };
          },
        },
        {
          key: "start",
          value: function start(
            fromValue,
            onUpdate,
            onEnd,
            previousAnimation,
            animatedValue
          ) {
            var _this2 = this;

            this.__active = true;
            this._startPosition = fromValue;
            this._lastPosition = this._startPosition;
            this._onUpdate = onUpdate;
            this.__onEnd = onEnd;
            this._lastTime = Date.now();
            this._frameTime = 0.0;

            if (previousAnimation instanceof SpringAnimation) {
              var internalState = previousAnimation.getInternalState();
              this._lastPosition = internalState.lastPosition;
              this._lastVelocity = internalState.lastVelocity;
              this._initialVelocity = this._lastVelocity;
              this._lastTime = internalState.lastTime;
            }

            var start = function start() {
              if (_this2._useNativeDriver) {
                _this2.__startNativeAnimation(animatedValue);
              } else {
                _this2.onUpdate();
              }
            };

            if (this._delay) {
              this._timeout = setTimeout(start, this._delay);
            } else {
              start();
            }
          },
        },
        {
          key: "getInternalState",
          value: function getInternalState() {
            return {
              lastPosition: this._lastPosition,
              lastVelocity: this._lastVelocity,
              lastTime: this._lastTime,
            };
          },
        },
        {
          key: "onUpdate",
          value: function onUpdate() {
            var MAX_STEPS = 64;
            var now = Date.now();

            if (now > this._lastTime + MAX_STEPS) {
              now = this._lastTime + MAX_STEPS;
            }

            var deltaTime = (now - this._lastTime) / 1000;
            this._frameTime += deltaTime;
            var c = this._damping;
            var m = this._mass;
            var k = this._stiffness;
            var v0 = -this._initialVelocity;
            var zeta = c / (2 * Math.sqrt(k * m));
            var omega0 = Math.sqrt(k / m);
            var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
            var x0 = this._toValue - this._startPosition;
            var position = 0.0;
            var velocity = 0.0;
            var t = this._frameTime;

            if (zeta < 1) {
              var envelope = Math.exp(-zeta * omega0 * t);
              position =
                this._toValue -
                envelope *
                  (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +
                    x0 * Math.cos(omega1 * t));
              velocity =
                zeta *
                  omega0 *
                  envelope *
                  ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +
                    x0 * Math.cos(omega1 * t)) -
                envelope *
                  (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -
                    omega1 * x0 * Math.sin(omega1 * t));
            } else {
              var _envelope = Math.exp(-omega0 * t);

              position =
                this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
              velocity =
                _envelope *
                (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
            }

            this._lastTime = now;
            this._lastPosition = position;
            this._lastVelocity = velocity;

            this._onUpdate(position);

            if (!this.__active) {
              return;
            }

            var isOvershooting = false;

            if (this._overshootClamping && this._stiffness !== 0) {
              if (this._startPosition < this._toValue) {
                isOvershooting = position > this._toValue;
              } else {
                isOvershooting = position < this._toValue;
              }
            }

            var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

            var isDisplacement = true;

            if (this._stiffness !== 0) {
              isDisplacement =
                Math.abs(this._toValue - position) <=
                this._restDisplacementThreshold;
            }

            if (isOvershooting || (isVelocity && isDisplacement)) {
              if (this._stiffness !== 0) {
                this._lastPosition = this._toValue;
                this._lastVelocity = 0;

                this._onUpdate(this._toValue);
              }

              this.__debouncedOnEnd({
                finished: true,
              });

              return;
            }

            this._animationFrame = requestAnimationFrame(
              this.onUpdate.bind(this)
            );
          },
        },
        {
          key: "stop",
          value: function stop() {
            (0, _get2.default)(
              (0, _getPrototypeOf2.default)(SpringAnimation.prototype),
              "stop",
              this
            ).call(this);
            this.__active = false;
            clearTimeout(this._timeout);
            global.cancelAnimationFrame(this._animationFrame);

            this.__debouncedOnEnd({
              finished: false,
            });
          },
        },
      ]);
      return SpringAnimation;
    })(Animation);

    module.exports = SpringAnimation;
  },
  226,
  [7, 16, 17, 72, 28, 30, 33, 204, 205, 215, 206, 225, 227, 4, 208]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function stiffnessFromOrigamiValue(oValue) {
      return (oValue - 30) * 3.62 + 194;
    }

    function dampingFromOrigamiValue(oValue) {
      return (oValue - 8) * 3 + 25;
    }

    function fromOrigamiTensionAndFriction(tension, friction) {
      return {
        stiffness: stiffnessFromOrigamiValue(tension),
        damping: dampingFromOrigamiValue(friction),
      };
    }

    function fromBouncinessAndSpeed(bounciness, speed) {
      function normalize(value, startValue, endValue) {
        return (value - startValue) / (endValue - startValue);
      }

      function projectNormal(n, start, end) {
        return start + n * (end - start);
      }

      function linearInterpolation(t, start, end) {
        return t * end + (1 - t) * start;
      }

      function quadraticOutInterpolation(t, start, end) {
        return linearInterpolation(2 * t - t * t, start, end);
      }

      function b3Friction1(x) {
        return (
          0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28
        );
      }

      function b3Friction2(x) {
        return (
          0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2
        );
      }

      function b3Friction3(x) {
        return (
          0.00000045 * Math.pow(x, 3) -
          0.000332 * Math.pow(x, 2) +
          0.1078 * x +
          5.84
        );
      }

      function b3Nobounce(tension) {
        if (tension <= 18) {
          return b3Friction1(tension);
        } else if (tension > 18 && tension <= 44) {
          return b3Friction2(tension);
        } else {
          return b3Friction3(tension);
        }
      }

      var b = normalize(bounciness / 1.7, 0, 20);
      b = projectNormal(b, 0, 0.8);
      var s = normalize(speed / 1.7, 0, 20);
      var bouncyTension = projectNormal(s, 0.5, 200);
      var bouncyFriction = quadraticOutInterpolation(
        b,
        b3Nobounce(bouncyTension),
        0.01
      );
      return {
        stiffness: stiffnessFromOrigamiValue(bouncyTension),
        damping: dampingFromOrigamiValue(bouncyFriction),
      };
    }

    module.exports = {
      fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
      fromBouncinessAndSpeed: fromBouncinessAndSpeed,
    };
  },
  227,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _AnimatedColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[10]);

    var Animation = _$$_REQUIRE(_dependencyMap[11]);

    var _require = _$$_REQUIRE(_dependencyMap[12]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

    var _easeInOut;

    function easeInOut() {
      if (!_easeInOut) {
        var Easing = _$$_REQUIRE(_dependencyMap[13]);

        _easeInOut = Easing.inOut(Easing.ease);
      }

      return _easeInOut;
    }

    var TimingAnimation = (function (_Animation) {
      (0, _inherits2.default)(TimingAnimation, _Animation);

      var _super = _createSuper(TimingAnimation);

      function TimingAnimation(config) {
        var _config$easing,
          _config$duration,
          _config$delay,
          _config$iterations,
          _config$isInteraction;

        var _this;

        (0, _classCallCheck2.default)(this, TimingAnimation);
        _this = _super.call(this);
        _this._toValue = config.toValue;
        _this._easing =
          (_config$easing = config.easing) != null
            ? _config$easing
            : easeInOut();
        _this._duration =
          (_config$duration = config.duration) != null ? _config$duration : 500;
        _this._delay =
          (_config$delay = config.delay) != null ? _config$delay : 0;
        _this.__iterations =
          (_config$iterations = config.iterations) != null
            ? _config$iterations
            : 1;
        _this._useNativeDriver = shouldUseNativeDriver(config);
        _this._platformConfig = config.platformConfig;
        _this.__isInteraction =
          (_config$isInteraction = config.isInteraction) != null
            ? _config$isInteraction
            : !_this._useNativeDriver;
        return _this;
      }

      (0, _createClass2.default)(TimingAnimation, [
        {
          key: "__getNativeAnimationConfig",
          value: function __getNativeAnimationConfig() {
            var frameDuration = 16.666666666666668;
            var frames = [];
            var numFrames = Math.round(this._duration / frameDuration);

            for (var frame = 0; frame < numFrames; frame++) {
              frames.push(this._easing(frame / numFrames));
            }

            frames.push(this._easing(1));
            return {
              type: "frames",
              frames: frames,
              toValue: this._toValue,
              iterations: this.__iterations,
              platformConfig: this._platformConfig,
            };
          },
        },
        {
          key: "start",
          value: function start(
            fromValue,
            onUpdate,
            onEnd,
            previousAnimation,
            animatedValue
          ) {
            var _this2 = this;

            this.__active = true;
            this._fromValue = fromValue;
            this._onUpdate = onUpdate;
            this.__onEnd = onEnd;

            var start = function start() {
              if (_this2._duration === 0 && !_this2._useNativeDriver) {
                _this2._onUpdate(_this2._toValue);

                _this2.__debouncedOnEnd({
                  finished: true,
                });
              } else {
                _this2._startTime = Date.now();

                if (_this2._useNativeDriver) {
                  _this2.__startNativeAnimation(animatedValue);
                } else {
                  _this2._animationFrame = requestAnimationFrame(
                    _this2.onUpdate.bind(_this2)
                  );
                }
              }
            };

            if (this._delay) {
              this._timeout = setTimeout(start, this._delay);
            } else {
              start();
            }
          },
        },
        {
          key: "onUpdate",
          value: function onUpdate() {
            var now = Date.now();

            if (now >= this._startTime + this._duration) {
              if (this._duration === 0) {
                this._onUpdate(this._toValue);
              } else {
                this._onUpdate(
                  this._fromValue +
                    this._easing(1) * (this._toValue - this._fromValue)
                );
              }

              this.__debouncedOnEnd({
                finished: true,
              });

              return;
            }

            this._onUpdate(
              this._fromValue +
                this._easing((now - this._startTime) / this._duration) *
                  (this._toValue - this._fromValue)
            );

            if (this.__active) {
              this._animationFrame = requestAnimationFrame(
                this.onUpdate.bind(this)
              );
            }
          },
        },
        {
          key: "stop",
          value: function stop() {
            (0, _get2.default)(
              (0, _getPrototypeOf2.default)(TimingAnimation.prototype),
              "stop",
              this
            ).call(this);
            this.__active = false;
            clearTimeout(this._timeout);
            global.cancelAnimationFrame(this._animationFrame);

            this.__debouncedOnEnd({
              finished: false,
            });
          },
        },
      ]);
      return TimingAnimation;
    })(Animation);

    module.exports = TimingAnimation;
  },
  228,
  [7, 16, 17, 72, 28, 30, 33, 204, 205, 215, 206, 225, 208, 229]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _ease;

    var Easing = {
      step0: function step0(n) {
        return n > 0 ? 1 : 0;
      },
      step1: function step1(n) {
        return n >= 1 ? 1 : 0;
      },
      linear: function linear(t) {
        return t;
      },
      ease: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      },
      quad: function quad(t) {
        return t * t;
      },
      cubic: function cubic(t) {
        return t * t * t;
      },
      poly: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      },
      sin: function sin(t) {
        return 1 - Math.cos((t * Math.PI) / 2);
      },
      circle: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      },
      exp: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      },
      elastic: function elastic() {
        var bounciness =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos((t * Math.PI) / 2), 3) * Math.cos(t * p);
        };
      },
      back: function back() {
        var s =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : 1.70158;
        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      },
      bounce: function bounce(t) {
        if (t < 0.36363636363636365) {
          return 7.5625 * t * t;
        }

        if (t < 0.7272727272727273) {
          var _t = t - 0.5454545454545454;

          return 7.5625 * _t * _t + 0.75;
        }

        if (t < 0.9090909090909091) {
          var _t2 = t - 0.8181818181818182;

          return 7.5625 * _t2 * _t2 + 0.9375;
        }

        var t2 = t - 0.9545454545454546;
        return 7.5625 * t2 * t2 + 0.984375;
      },
      bezier: function bezier(x1, y1, x2, y2) {
        var _bezier = _$$_REQUIRE(_dependencyMap[0]);

        return _bezier(x1, y1, x2, y2);
      },
      in: function _in(easing) {
        return easing;
      },
      out: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      },
      inOut: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      },
    };
    module.exports = Easing;
  },
  229,
  [230]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;
    var kSplineTableSize = 11;
    var kSampleStepSize = 0.1;
    var float32ArraySupported = typeof Float32Array === "function";

    function A(aA1, aA2) {
      return 1.0 - 3.0 * aA2 + 3.0 * aA1;
    }

    function B(aA1, aA2) {
      return 3.0 * aA2 - 6.0 * aA1;
    }

    function C(aA1) {
      return 3.0 * aA1;
    }

    function calcBezier(aT, aA1, aA2) {
      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
    }

    function getSlope(aT, aA1, aA2) {
      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
    }

    function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
      var currentX,
        currentT,
        i = 0,
        aA = _aA,
        aB = _aB;

      do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;

        if (currentX > 0.0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (
        Math.abs(currentX) > SUBDIVISION_PRECISION &&
        ++i < SUBDIVISION_MAX_ITERATIONS
      );

      return currentT;
    }

    function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
      var aGuessT = _aGuessT;

      for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);

        if (currentSlope === 0.0) {
          return aGuessT;
        }

        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }

      return aGuessT;
    }

    module.exports = function bezier(mX1, mY1, mX2, mY2) {
      if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
        throw new Error("bezier x values must be in [0, 1] range");
      }

      var sampleValues = float32ArraySupported
        ? new Float32Array(kSplineTableSize)
        : new Array(kSplineTableSize);

      if (mX1 !== mY1 || mX2 !== mY2) {
        for (var i = 0; i < kSplineTableSize; ++i) {
          sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
      }

      function getTForX(aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = 10;

        for (
          ;
          currentSample !== lastSample && sampleValues[currentSample] <= aX;
          ++currentSample
        ) {
          intervalStart += kSampleStepSize;
        }

        --currentSample;
        var dist =
          (aX - sampleValues[currentSample]) /
          (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;
        var initialSlope = getSlope(guessForT, mX1, mX2);

        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(
            aX,
            intervalStart,
            intervalStart + kSampleStepSize,
            mX1,
            mX2
          );
        }
      }

      return function BezierEasing(x) {
        if (mX1 === mY1 && mX2 === mY2) {
          return x;
        }

        if (x === 0) {
          return 0;
        }

        if (x === 1) {
          return 1;
        }

        return calcBezier(getTForX(x), mY1, mY2);
      };
    };
  },
  230,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var createAnimatedComponentInjection = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);

    var _createAnimatedCompon;

    var _excluded = ["style"],
      _excluded2 = ["style"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var View = _$$_REQUIRE(_dependencyMap[9]);

    var _require = _$$_REQUIRE(_dependencyMap[10]),
      AnimatedEvent = _require.AnimatedEvent;

    var AnimatedProps = _$$_REQUIRE(_dependencyMap[11]);

    var React = _$$_REQUIRE(_dependencyMap[12]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[13]);

    var invariant = _$$_REQUIRE(_dependencyMap[14]);

    var setAndForwardRef = _$$_REQUIRE(_dependencyMap[15]);

    var animatedComponentNextId = 1;

    function createAnimatedComponent(Component) {
      invariant(
        typeof Component !== "function" ||
          (Component.prototype && Component.prototype.isReactComponent),
        "`createAnimatedComponent` does not support stateless functional components; use a class component instead."
      );

      var AnimatedComponent = (function (_React$Component) {
        (0, _inherits2.default)(AnimatedComponent, _React$Component);

        var _super = _createSuper(AnimatedComponent);

        function AnimatedComponent() {
          var _this;

          (0, _classCallCheck2.default)(this, AnimatedComponent);

          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this._invokeAnimatedPropsCallbackOnMount = false;
          _this._eventDetachers = [];
          _this._animatedComponentId =
            animatedComponentNextId++ + ":animatedComponent";

          _this._isFabric = function () {
            var _this$_component$_int,
              _this$_component$_int2,
              _this$_component$getN,
              _this$_component$getN2,
              _this$_component$getS,
              _this$_component$getS2;

            if (_this._component == null) {
              return false;
            }

            return (
              ((_this$_component$_int =
                _this._component["_internalInstanceHandle"]) == null
                ? undefined
                : (_this$_component$_int2 = _this$_component$_int.stateNode) ==
                  null
                ? undefined
                : _this$_component$_int2.canonical) != null ||
              (_this._component.getNativeScrollRef != null &&
                _this._component.getNativeScrollRef() != null &&
                ((_this$_component$getN =
                  _this._component.getNativeScrollRef()[
                    "_internalInstanceHandle"
                  ]) == null
                  ? undefined
                  : (_this$_component$getN2 =
                      _this$_component$getN.stateNode) == null
                  ? undefined
                  : _this$_component$getN2.canonical) != null) ||
              (_this._component.getScrollResponder != null &&
                _this._component.getScrollResponder() != null &&
                _this._component.getScrollResponder().getNativeScrollRef !=
                  null &&
                _this._component.getScrollResponder().getNativeScrollRef() !=
                  null &&
                ((_this$_component$getS = _this._component
                  .getScrollResponder()
                  .getNativeScrollRef()["_internalInstanceHandle"]) == null
                  ? undefined
                  : (_this$_component$getS2 =
                      _this$_component$getS.stateNode) == null
                  ? undefined
                  : _this$_component$getS2.canonical) != null)
            );
          };

          _this._waitForUpdate = function () {
            if (_this._isFabric()) {
              NativeAnimatedHelper.API.setWaitingForIdentifier(
                _this._animatedComponentId
              );
            }
          };

          _this._markUpdateComplete = function () {
            if (_this._isFabric()) {
              NativeAnimatedHelper.API.unsetWaitingForIdentifier(
                _this._animatedComponentId
              );
            }
          };

          _this._animatedPropsCallback = function () {
            if (_this._component == null) {
              _this._invokeAnimatedPropsCallbackOnMount = true;
            } else if (
              typeof _this._component.setNativeProps !== "function" ||
              _this._isFabric()
            ) {
              _this.forceUpdate();
            } else if (!_this._propsAnimated.__isNative) {
              _this._component.setNativeProps(
                _this._propsAnimated.__getAnimatedValue()
              );
            } else {
              throw new Error(
                'Attempting to run JS driven animation on animated node that has been moved to "native" earlier by starting an animation with `useNativeDriver: true`'
              );
            }
          };

          _this._setComponentRef = setAndForwardRef({
            getForwardedRef: function getForwardedRef() {
              return _this.props.forwardedRef;
            },
            setLocalRef: function setLocalRef(ref) {
              _this._prevComponent = _this._component;
              _this._component = ref;
            },
          });
          return _this;
        }

        (0, _createClass2.default)(AnimatedComponent, [
          {
            key: "_attachNativeEvents",
            value: function _attachNativeEvents() {
              var _this$_component,
                _this2 = this;

              var scrollableNode =
                (_this$_component = this._component) != null &&
                _this$_component.getScrollableNode
                  ? this._component.getScrollableNode()
                  : this._component;

              var _loop = function _loop(key) {
                var prop = _this2.props[key];

                if (prop instanceof AnimatedEvent && prop.__isNative) {
                  prop.__attach(scrollableNode, key);

                  _this2._eventDetachers.push(function () {
                    return prop.__detach(scrollableNode, key);
                  });
                }
              };

              for (var key in this.props) {
                _loop(key);
              }
            },
          },
          {
            key: "_detachNativeEvents",
            value: function _detachNativeEvents() {
              this._eventDetachers.forEach(function (remove) {
                return remove();
              });

              this._eventDetachers = [];
            },
          },
          {
            key: "_attachProps",
            value: function _attachProps(nextProps) {
              var oldPropsAnimated = this._propsAnimated;
              this._propsAnimated = new AnimatedProps(
                nextProps,
                this._animatedPropsCallback
              );

              this._propsAnimated.__attach();

              if (oldPropsAnimated) {
                oldPropsAnimated.__restoreDefaultValues();

                oldPropsAnimated.__detach();
              }
            },
          },
          {
            key: "render",
            value: function render() {
              var animatedProps =
                this._propsAnimated.__getValue(this._initialAnimatedProps) ||
                {};
              var _animatedProps$style = animatedProps.style,
                style =
                  _animatedProps$style === undefined
                    ? {}
                    : _animatedProps$style,
                props = (0, _objectWithoutProperties2.default)(
                  animatedProps,
                  _excluded
                );

              var _ref = this.props.passthroughAnimatedPropExplicitValues || {},
                _ref$style = _ref.style,
                passthruStyle = _ref$style === undefined ? {} : _ref$style,
                passthruProps = (0, _objectWithoutProperties2.default)(
                  _ref,
                  _excluded2
                );

              var mergedStyle = Object.assign({}, style, passthruStyle);

              if (!this._initialAnimatedProps) {
                this._initialAnimatedProps = animatedProps;
              }

              return (0, _jsxRuntime.jsx)(
                Component,
                Object.assign({}, props, passthruProps, {
                  collapsable: false,
                  style: mergedStyle,
                  ref: this._setComponentRef,
                })
              );
            },
          },
          {
            key: "UNSAFE_componentWillMount",
            value: function UNSAFE_componentWillMount() {
              this._waitForUpdate();

              this._attachProps(this.props);
            },
          },
          {
            key: "componentDidMount",
            value: function componentDidMount() {
              if (this._invokeAnimatedPropsCallbackOnMount) {
                this._invokeAnimatedPropsCallbackOnMount = false;

                this._animatedPropsCallback();
              }

              this._propsAnimated.setNativeView(this._component);

              this._attachNativeEvents();

              this._markUpdateComplete();
            },
          },
          {
            key: "UNSAFE_componentWillReceiveProps",
            value: function UNSAFE_componentWillReceiveProps(newProps) {
              this._waitForUpdate();

              this._attachProps(newProps);
            },
          },
          {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
              if (this._component !== this._prevComponent) {
                this._propsAnimated.setNativeView(this._component);
              }

              if (
                this._component !== this._prevComponent ||
                prevProps !== this.props
              ) {
                this._detachNativeEvents();

                this._attachNativeEvents();
              }

              this._markUpdateComplete();
            },
          },
          {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this._propsAnimated && this._propsAnimated.__detach();

              this._detachNativeEvents();

              this._markUpdateComplete();

              this._component = null;
              this._prevComponent = null;
            },
          },
        ]);
        return AnimatedComponent;
      })(React.Component);

      return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
        return (0, _jsxRuntime.jsx)(
          AnimatedComponent,
          Object.assign(
            {},
            props,
            ref == null
              ? null
              : {
                  forwardedRef: ref,
                }
          )
        );
      });
    }

    module.exports =
      (_createAnimatedCompon =
        createAnimatedComponentInjection.recordAndRetrieve()) != null
        ? _createAnimatedCompon
        : createAnimatedComponent;
  },
  231,
  [7, 92, 16, 17, 28, 30, 33, 232, 179, 176, 214, 233, 1, 208, 4, 236]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.inject = inject;
    exports.recordAndRetrieve = recordAndRetrieve;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var injected;

    function inject(newInjected) {
      if (injected !== undefined) {
        return;
      }

      injected = newInjected;
    }

    function recordAndRetrieve() {
      if (injected === undefined) {
        injected = null;
      }

      return injected;
    }
  },
  232,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

    var _require = _$$_REQUIRE(_dependencyMap[7]),
      AnimatedEvent = _require.AnimatedEvent;

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedStyle = _$$_REQUIRE(_dependencyMap[10]);

    var invariant = _$$_REQUIRE(_dependencyMap[11]);

    var AnimatedProps = (function (_AnimatedNode) {
      _inherits(AnimatedProps, _AnimatedNode);

      var _super = _createSuper(AnimatedProps);

      function AnimatedProps(props, callback) {
        var _this;

        _classCallCheck(this, AnimatedProps);

        _this = _super.call(this);

        if (props.style) {
          props = Object.assign({}, props, {
            style: new AnimatedStyle(props.style),
          });
        }

        _this._props = props;
        _this._callback = callback;
        return _this;
      }

      _createClass(AnimatedProps, [
        {
          key: "__getValue",
          value: function __getValue(initialProps) {
            var props = {};

            for (var key in this._props) {
              var value = this._props[key];

              if (value instanceof AnimatedNode) {
                if (value instanceof AnimatedStyle) {
                  props[key] = value.__getValue(
                    initialProps ? initialProps.style : null
                  );
                } else if (!initialProps || !value.__isNative) {
                  props[key] = value.__getValue();
                } else if (initialProps.hasOwnProperty(key)) {
                  props[key] = initialProps[key];
                }
              } else if (value instanceof AnimatedEvent) {
                props[key] = value.__getHandler();
              } else {
                props[key] = value;
              }
            }

            return props;
          },
        },
        {
          key: "__getAnimatedValue",
          value: function __getAnimatedValue() {
            var props = {};

            for (var key in this._props) {
              var value = this._props[key];

              if (value instanceof AnimatedNode) {
                props[key] = value.__getAnimatedValue();
              }
            }

            return props;
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            for (var key in this._props) {
              var value = this._props[key];

              if (value instanceof AnimatedNode) {
                value.__addChild(this);
              }
            }
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            if (this.__isNative && this._animatedView) {
              this.__disconnectAnimatedView();
            }

            for (var key in this._props) {
              var value = this._props[key];

              if (value instanceof AnimatedNode) {
                value.__removeChild(this);
              }
            }

            _get(
              _getPrototypeOf(AnimatedProps.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "update",
          value: function update() {
            this._callback();
          },
        },
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            if (!this.__isNative) {
              this.__isNative = true;

              for (var key in this._props) {
                var value = this._props[key];

                if (value instanceof AnimatedNode) {
                  value.__makeNative(platformConfig);
                }
              }

              _get(
                _getPrototypeOf(AnimatedProps.prototype),
                "__setPlatformConfig",
                this
              ).call(this, platformConfig);

              if (this._animatedView) {
                this.__connectAnimatedView();
              }
            }
          },
        },
        {
          key: "setNativeView",
          value: function setNativeView(animatedView) {
            if (this._animatedView === animatedView) {
              return;
            }

            this._animatedView = animatedView;

            if (this.__isNative) {
              this.__connectAnimatedView();
            }
          },
        },
        {
          key: "__connectAnimatedView",
          value: function __connectAnimatedView() {
            invariant(
              this.__isNative,
              'Expected node to be marked as "native"'
            );
            var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
            invariant(
              nativeViewTag != null,
              "Unable to locate attached view in the native tree"
            );
            NativeAnimatedHelper.API.connectAnimatedNodeToView(
              this.__getNativeTag(),
              nativeViewTag
            );
          },
        },
        {
          key: "__disconnectAnimatedView",
          value: function __disconnectAnimatedView() {
            invariant(
              this.__isNative,
              'Expected node to be marked as "native"'
            );
            var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
            invariant(
              nativeViewTag != null,
              "Unable to locate attached view in the native tree"
            );
            NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(
              this.__getNativeTag(),
              nativeViewTag
            );
          },
        },
        {
          key: "__restoreDefaultValues",
          value: function __restoreDefaultValues() {
            if (this.__isNative) {
              NativeAnimatedHelper.API.restoreDefaultValues(
                this.__getNativeTag()
              );
            }
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            var propsConfig = {};

            for (var propKey in this._props) {
              var value = this._props[propKey];

              if (value instanceof AnimatedNode) {
                value.__makeNative(this.__getPlatformConfig());

                propsConfig[propKey] = value.__getNativeTag();
              }
            }

            return {
              type: "props",
              props: propsConfig,
            };
          },
        },
      ]);

      return AnimatedProps;
    })(AnimatedNode);

    module.exports = AnimatedProps;
  },
  233,
  [16, 17, 72, 28, 30, 33, 18, 214, 208, 207, 234, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var flattenStyle = _$$_REQUIRE(_dependencyMap[6]);

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedTransform = _$$_REQUIRE(_dependencyMap[9]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[10]);

    var AnimatedStyle = (function (_AnimatedWithChildren) {
      _inherits(AnimatedStyle, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedStyle);

      function AnimatedStyle(style) {
        var _this;

        _classCallCheck(this, AnimatedStyle);

        _this = _super.call(this);
        style = flattenStyle(style) || {};

        if (style.transform) {
          style = Object.assign({}, style, {
            transform: new AnimatedTransform(style.transform),
          });
        }

        _this._style = style;
        return _this;
      }

      _createClass(AnimatedStyle, [
        {
          key: "_walkStyleAndGetValues",
          value: function _walkStyleAndGetValues(style, initialStyle) {
            var updatedStyle = {};

            for (var key in style) {
              var value = style[key];

              if (value instanceof AnimatedNode) {
                if (!initialStyle || !value.__isNative) {
                  updatedStyle[key] = value.__getValue();
                } else if (initialStyle.hasOwnProperty(key)) {
                  updatedStyle[key] = initialStyle[key];
                }
              } else if (
                value &&
                !Array.isArray(value) &&
                typeof value === "object"
              ) {
                updatedStyle[key] = this._walkStyleAndGetValues(
                  value,
                  initialStyle
                );
              } else {
                updatedStyle[key] = value;
              }
            }

            return updatedStyle;
          },
        },
        {
          key: "__getValue",
          value: function __getValue(initialStyle) {
            return this._walkStyleAndGetValues(this._style, initialStyle);
          },
        },
        {
          key: "_walkStyleAndGetAnimatedValues",
          value: function _walkStyleAndGetAnimatedValues(style) {
            var updatedStyle = {};

            for (var key in style) {
              var value = style[key];

              if (value instanceof AnimatedNode) {
                updatedStyle[key] = value.__getAnimatedValue();
              } else if (
                value &&
                !Array.isArray(value) &&
                typeof value === "object"
              ) {
                updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
              }
            }

            return updatedStyle;
          },
        },
        {
          key: "__getAnimatedValue",
          value: function __getAnimatedValue() {
            return this._walkStyleAndGetAnimatedValues(this._style);
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            for (var key in this._style) {
              var value = this._style[key];

              if (value instanceof AnimatedNode) {
                value.__addChild(this);
              }
            }
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            for (var key in this._style) {
              var value = this._style[key];

              if (value instanceof AnimatedNode) {
                value.__removeChild(this);
              }
            }

            _get(
              _getPrototypeOf(AnimatedStyle.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            for (var key in this._style) {
              var value = this._style[key];

              if (value instanceof AnimatedNode) {
                value.__makeNative(platformConfig);
              }
            }

            _get(
              _getPrototypeOf(AnimatedStyle.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            var styleConfig = {};

            for (var styleKey in this._style) {
              if (this._style[styleKey] instanceof AnimatedNode) {
                var style = this._style[styleKey];

                style.__makeNative(this.__getPlatformConfig());

                styleConfig[styleKey] = style.__getNativeTag();
              }
            }

            NativeAnimatedHelper.validateStyles(styleConfig);
            return {
              type: "style",
              style: styleConfig,
            };
          },
        },
      ]);

      return AnimatedStyle;
    })(AnimatedWithChildren);

    module.exports = AnimatedStyle;
  },
  234,
  [16, 17, 72, 28, 30, 33, 166, 208, 207, 235, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _get = _$$_REQUIRE(_dependencyMap[2]);

    var _inherits = _$$_REQUIRE(_dependencyMap[3]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[6]);

    var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

    var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

    var AnimatedTransform = (function (_AnimatedWithChildren) {
      _inherits(AnimatedTransform, _AnimatedWithChildren);

      var _super = _createSuper(AnimatedTransform);

      function AnimatedTransform(transforms) {
        var _this;

        _classCallCheck(this, AnimatedTransform);

        _this = _super.call(this);
        _this._transforms = transforms;
        return _this;
      }

      _createClass(AnimatedTransform, [
        {
          key: "__makeNative",
          value: function __makeNative(platformConfig) {
            this._transforms.forEach(function (transform) {
              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  value.__makeNative(platformConfig);
                }
              }
            });

            _get(
              _getPrototypeOf(AnimatedTransform.prototype),
              "__makeNative",
              this
            ).call(this, platformConfig);
          },
        },
        {
          key: "__getValue",
          value: function __getValue() {
            return this._transforms.map(function (transform) {
              var result = {};

              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  result[key] = value.__getValue();
                } else {
                  result[key] = value;
                }
              }

              return result;
            });
          },
        },
        {
          key: "__getAnimatedValue",
          value: function __getAnimatedValue() {
            return this._transforms.map(function (transform) {
              var result = {};

              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  result[key] = value.__getAnimatedValue();
                } else {
                  result[key] = value;
                }
              }

              return result;
            });
          },
        },
        {
          key: "__attach",
          value: function __attach() {
            var _this2 = this;

            this._transforms.forEach(function (transform) {
              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  value.__addChild(_this2);
                }
              }
            });
          },
        },
        {
          key: "__detach",
          value: function __detach() {
            var _this3 = this;

            this._transforms.forEach(function (transform) {
              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  value.__removeChild(_this3);
                }
              }
            });

            _get(
              _getPrototypeOf(AnimatedTransform.prototype),
              "__detach",
              this
            ).call(this);
          },
        },
        {
          key: "__getNativeConfig",
          value: function __getNativeConfig() {
            var transConfigs = [];

            this._transforms.forEach(function (transform) {
              for (var key in transform) {
                var value = transform[key];

                if (value instanceof AnimatedNode) {
                  transConfigs.push({
                    type: "animated",
                    property: key,
                    nodeTag: value.__getNativeTag(),
                  });
                } else {
                  transConfigs.push({
                    type: "static",
                    property: key,
                    value: NativeAnimatedHelper.transformDataType(value),
                  });
                }
              }
            });

            NativeAnimatedHelper.validateTransform(transConfigs);
            return {
              type: "transform",
              transforms: transConfigs,
            };
          },
        },
      ]);

      return AnimatedTransform;
    })(AnimatedWithChildren);

    module.exports = AnimatedTransform;
  },
  235,
  [16, 17, 72, 28, 30, 33, 208, 207, 211]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function setAndForwardRef(_ref) {
      var getForwardedRef = _ref.getForwardedRef,
        setLocalRef = _ref.setLocalRef;
      return function forwardRef(ref) {
        var forwardedRef = getForwardedRef();
        setLocalRef(ref);

        if (typeof forwardedRef === "function") {
          forwardedRef(ref);
        } else if (typeof forwardedRef === "object" && forwardedRef != null) {
          forwardedRef.current = ref;
        }
      };
    }

    module.exports = setAndForwardRef;
  },
  236,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[1]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var FlatList = _$$_REQUIRE(_dependencyMap[2]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[3]);

    var FlatListWithEventThrottle = React.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(
        FlatList,
        Object.assign(
          {
            scrollEventThrottle: 0.0001,
          },
          props,
          {
            ref: ref,
          }
        )
      );
    });
    module.exports = createAnimatedComponent(FlatListWithEventThrottle);
  },
  237,
  [1, 179, 238, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _defineProperty2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _VirtualizeUtils = _$$_REQUIRE(_dependencyMap[8]);

    var _memoizeOne = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

    var _excluded = [
      "numColumns",
      "columnWrapperStyle",
      "removeClippedSubviews",
      "strictMode",
    ];

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Platform = _$$_REQUIRE(_dependencyMap[11]);

    var deepDiffer = _$$_REQUIRE(_dependencyMap[12]);

    var React = _$$_REQUIRE(_dependencyMap[13]);

    var View = _$$_REQUIRE(_dependencyMap[14]);

    var VirtualizedList = _$$_REQUIRE(_dependencyMap[15]);

    var StyleSheet = _$$_REQUIRE(_dependencyMap[16]);

    var invariant = _$$_REQUIRE(_dependencyMap[17]);

    function removeClippedSubviewsOrDefault(removeClippedSubviews) {
      return removeClippedSubviews != null ? removeClippedSubviews : true;
    }

    function numColumnsOrDefault(numColumns) {
      return numColumns != null ? numColumns : 1;
    }

    var FlatList = (function (_React$PureComponent) {
      (0, _inherits2.default)(FlatList, _React$PureComponent);

      var _super = _createSuper(FlatList);

      function FlatList(_props) {
        var _this;

        (0, _classCallCheck2.default)(this, FlatList);
        _this = _super.call(this, _props);
        _this._virtualizedListPairs = [];

        _this._captureRef = function (ref) {
          _this._listRef = ref;
        };

        _this._getItem = function (data, index) {
          var numColumns = numColumnsOrDefault(_this.props.numColumns);

          if (numColumns > 1) {
            var ret = [];

            for (var kk = 0; kk < numColumns; kk++) {
              var _item = data[index * numColumns + kk];

              if (_item != null) {
                ret.push(_item);
              }
            }

            return ret;
          } else {
            return data[index];
          }
        };

        _this._getItemCount = function (data) {
          if (data) {
            var numColumns = numColumnsOrDefault(_this.props.numColumns);
            return numColumns > 1
              ? Math.ceil(data.length / numColumns)
              : data.length;
          } else {
            return 0;
          }
        };

        _this._keyExtractor = function (items, index) {
          var _this$props$keyExtrac;

          var numColumns = numColumnsOrDefault(_this.props.numColumns);
          var keyExtractor =
            (_this$props$keyExtrac = _this.props.keyExtractor) != null
              ? _this$props$keyExtrac
              : _VirtualizeUtils.keyExtractor;

          if (numColumns > 1) {
            if (Array.isArray(items)) {
              return items
                .map(function (item, kk) {
                  return keyExtractor(item, index * numColumns + kk);
                })
                .join(":");
            } else {
              invariant(
                Array.isArray(items),
                "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.",
                numColumns
              );
            }
          } else {
            return keyExtractor(items, index);
          }
        };

        _this._renderer = function (
          ListItemComponent,
          renderItem,
          columnWrapperStyle,
          numColumns,
          extraData
        ) {
          var cols = numColumnsOrDefault(numColumns);
          var virtualizedListRenderKey = ListItemComponent
            ? "ListItemComponent"
            : "renderItem";

          var renderer = function renderer(props) {
            if (ListItemComponent) {
              return (0, _jsxRuntime.jsx)(
                ListItemComponent,
                Object.assign({}, props)
              );
            } else if (renderItem) {
              return renderItem(props);
            } else {
              return null;
            }
          };

          return (0, _defineProperty2.default)(
            {},
            virtualizedListRenderKey,
            function (info) {
              if (cols > 1) {
                var _item2 = info.item,
                  _index = info.index;
                invariant(
                  Array.isArray(_item2),
                  "Expected array of items with numColumns > 1"
                );
                return (0, _jsxRuntime.jsx)(View, {
                  style: StyleSheet.compose(styles.row, columnWrapperStyle),
                  children: _item2.map(function (it, kk) {
                    var element = renderer({
                      item: it,
                      index: _index * cols + kk,
                      separators: info.separators,
                    });
                    return element != null
                      ? (0, _jsxRuntime.jsx)(
                          React.Fragment,
                          {
                            children: element,
                          },
                          kk
                        )
                      : null;
                  }),
                });
              } else {
                return renderer(info);
              }
            }
          );
        };

        _this._memoizedRenderer = (0, _memoizeOne.default)(_this._renderer);

        _this._checkProps(_this.props);

        if (_this.props.viewabilityConfigCallbackPairs) {
          _this._virtualizedListPairs =
            _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
              return {
                viewabilityConfig: pair.viewabilityConfig,
                onViewableItemsChanged: _this._createOnViewableItemsChanged(
                  pair.onViewableItemsChanged
                ),
              };
            });
        } else if (_this.props.onViewableItemsChanged) {
          _this._virtualizedListPairs.push({
            viewabilityConfig: _this.props.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(
              _this.props.onViewableItemsChanged
            ),
          });
        }

        return _this;
      }

      (0, _createClass2.default)(FlatList, [
        {
          key: "scrollToEnd",
          value: function scrollToEnd(params) {
            if (this._listRef) {
              this._listRef.scrollToEnd(params);
            }
          },
        },
        {
          key: "scrollToIndex",
          value: function scrollToIndex(params) {
            if (this._listRef) {
              this._listRef.scrollToIndex(params);
            }
          },
        },
        {
          key: "scrollToItem",
          value: function scrollToItem(params) {
            if (this._listRef) {
              this._listRef.scrollToItem(params);
            }
          },
        },
        {
          key: "scrollToOffset",
          value: function scrollToOffset(params) {
            if (this._listRef) {
              this._listRef.scrollToOffset(params);
            }
          },
        },
        {
          key: "recordInteraction",
          value: function recordInteraction() {
            if (this._listRef) {
              this._listRef.recordInteraction();
            }
          },
        },
        {
          key: "flashScrollIndicators",
          value: function flashScrollIndicators() {
            if (this._listRef) {
              this._listRef.flashScrollIndicators();
            }
          },
        },
        {
          key: "getScrollResponder",
          value: function getScrollResponder() {
            if (this._listRef) {
              return this._listRef.getScrollResponder();
            }
          },
        },
        {
          key: "getNativeScrollRef",
          value: function getNativeScrollRef() {
            if (this._listRef) {
              return this._listRef.getScrollRef();
            }
          },
        },
        {
          key: "getScrollableNode",
          value: function getScrollableNode() {
            if (this._listRef) {
              return this._listRef.getScrollableNode();
            }
          },
        },
        {
          key: "setNativeProps",
          value: function setNativeProps(props) {
            if (this._listRef) {
              this._listRef.setNativeProps(props);
            }
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            invariant(
              prevProps.numColumns === this.props.numColumns,
              "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component."
            );
            invariant(
              prevProps.onViewableItemsChanged ===
                this.props.onViewableItemsChanged,
              "Changing onViewableItemsChanged on the fly is not supported"
            );
            invariant(
              !deepDiffer(
                prevProps.viewabilityConfig,
                this.props.viewabilityConfig
              ),
              "Changing viewabilityConfig on the fly is not supported"
            );
            invariant(
              prevProps.viewabilityConfigCallbackPairs ===
                this.props.viewabilityConfigCallbackPairs,
              "Changing viewabilityConfigCallbackPairs on the fly is not supported"
            );

            this._checkProps(this.props);
          },
        },
        {
          key: "_checkProps",
          value: function _checkProps(props) {
            var getItem = props.getItem,
              getItemCount = props.getItemCount,
              horizontal = props.horizontal,
              columnWrapperStyle = props.columnWrapperStyle,
              onViewableItemsChanged = props.onViewableItemsChanged,
              viewabilityConfigCallbackPairs =
                props.viewabilityConfigCallbackPairs;
            var numColumns = numColumnsOrDefault(this.props.numColumns);
            invariant(
              !getItem && !getItemCount,
              "FlatList does not support custom data formats."
            );

            if (numColumns > 1) {
              invariant(!horizontal, "numColumns does not support horizontal.");
            } else {
              invariant(
                !columnWrapperStyle,
                "columnWrapperStyle not supported for single column lists"
              );
            }

            invariant(
              !(onViewableItemsChanged && viewabilityConfigCallbackPairs),
              "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs."
            );
          },
        },
        {
          key: "_pushMultiColumnViewable",
          value: function _pushMultiColumnViewable(arr, v) {
            var _this$props$keyExtrac2;

            var numColumns = numColumnsOrDefault(this.props.numColumns);
            var keyExtractor =
              (_this$props$keyExtrac2 = this.props.keyExtractor) != null
                ? _this$props$keyExtrac2
                : _VirtualizeUtils.keyExtractor;
            v.item.forEach(function (item, ii) {
              invariant(v.index != null, "Missing index!");
              var index = v.index * numColumns + ii;
              arr.push(
                Object.assign({}, v, {
                  item: item,
                  key: keyExtractor(item, index),
                  index: index,
                })
              );
            });
          },
        },
        {
          key: "_createOnViewableItemsChanged",
          value: function _createOnViewableItemsChanged(
            onViewableItemsChanged
          ) {
            var _this2 = this;

            return function (info) {
              var numColumns = numColumnsOrDefault(_this2.props.numColumns);

              if (onViewableItemsChanged) {
                if (numColumns > 1) {
                  var changed = [];
                  var viewableItems = [];
                  info.viewableItems.forEach(function (v) {
                    return _this2._pushMultiColumnViewable(viewableItems, v);
                  });
                  info.changed.forEach(function (v) {
                    return _this2._pushMultiColumnViewable(changed, v);
                  });
                  onViewableItemsChanged({
                    viewableItems: viewableItems,
                    changed: changed,
                  });
                } else {
                  onViewableItemsChanged(info);
                }
              }
            };
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$props = this.props,
              numColumns = _this$props.numColumns,
              columnWrapperStyle = _this$props.columnWrapperStyle,
              _removeClippedSubviews = _this$props.removeClippedSubviews,
              _this$props$strictMod = _this$props.strictMode,
              strictMode =
                _this$props$strictMod === undefined
                  ? false
                  : _this$props$strictMod,
              restProps = (0, _objectWithoutProperties2.default)(
                _this$props,
                _excluded
              );
            var renderer = strictMode ? this._memoizedRenderer : this._renderer;
            return (0, _jsxRuntime.jsx)(
              VirtualizedList,
              Object.assign(
                {},
                restProps,
                {
                  getItem: this._getItem,
                  getItemCount: this._getItemCount,
                  keyExtractor: this._keyExtractor,
                  ref: this._captureRef,
                  viewabilityConfigCallbackPairs: this._virtualizedListPairs,
                  removeClippedSubviews: removeClippedSubviewsOrDefault(
                    _removeClippedSubviews
                  ),
                },
                renderer(
                  this.props.ListItemComponent,
                  this.props.renderItem,
                  columnWrapperStyle,
                  numColumns,
                  this.props.extraData
                )
              )
            );
          },
        },
      ]);
      return FlatList;
    })(React.PureComponent);

    var styles = StyleSheet.create({
      row: {
        flexDirection: "row",
      },
    });
    module.exports = FlatList;
  },
  238,
  [7, 92, 239, 16, 17, 28, 30, 33, 240, 241, 179, 54, 165, 1, 176, 242, 175, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true,
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    (module.exports = _defineProperty),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  239,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.computeWindowedRenderLimits = computeWindowedRenderLimits;
    exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;
    exports.keyExtractor = keyExtractor;
    exports.newRangeCount = newRangeCount;

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
      var zoomScale =
        arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var result = [];

      for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {
        var currentOffset = offsets[offsetIndex];
        var left = 0;
        var right = itemCount - 1;

        while (left <= right) {
          var mid = left + ((right - left) >>> 1);
          var frame = getFrameMetrics(mid);
          var scaledOffsetStart = frame.offset * zoomScale;
          var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;

          if (
            (mid === 0 && currentOffset < scaledOffsetStart) ||
            (mid !== 0 && currentOffset <= scaledOffsetStart)
          ) {
            right = mid - 1;
          } else if (currentOffset > scaledOffsetEnd) {
            left = mid + 1;
          } else {
            result[offsetIndex] = mid;
            break;
          }
        }
      }

      return result;
    }

    function newRangeCount(prev, next) {
      return (
        next.last -
        next.first +
        1 -
        Math.max(
          0,
          1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first)
        )
      );
    }

    function computeWindowedRenderLimits(
      data,
      getItemCount,
      maxToRenderPerBatch,
      windowSize,
      prev,
      getFrameMetricsApprox,
      scrollMetrics
    ) {
      var itemCount = getItemCount(data);

      if (itemCount === 0) {
        return prev;
      }

      var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength,
        _scrollMetrics$zoomSc = scrollMetrics.zoomScale,
        zoomScale =
          _scrollMetrics$zoomSc === undefined ? 1 : _scrollMetrics$zoomSc;
      var visibleBegin = Math.max(0, offset);
      var visibleEnd = visibleBegin + visibleLength;
      var overscanLength = (windowSize - 1) * visibleLength;
      var leadFactor = 0.5;
      var fillPreference =
        velocity > 1 ? "after" : velocity < -1 ? "before" : "none";
      var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
      var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
      var lastItemOffset =
        getFrameMetricsApprox(itemCount - 1).offset * zoomScale;

      if (lastItemOffset < overscanBegin) {
        return {
          first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
          last: itemCount - 1,
        };
      }

      var _elementsThatOverlapO = elementsThatOverlapOffsets(
          [overscanBegin, visibleBegin, visibleEnd, overscanEnd],
          itemCount,
          getFrameMetricsApprox,
          zoomScale
        ),
        _elementsThatOverlapO2 = (0, _slicedToArray2.default)(
          _elementsThatOverlapO,
          4
        ),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

      overscanFirst = overscanFirst == null ? 0 : overscanFirst;
      first = first == null ? Math.max(0, overscanFirst) : first;
      overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
      last =
        last == null
          ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)
          : last;
      var visible = {
        first: first,
        last: last,
      };
      var newCellCount = newRangeCount(prev, visible);

      while (true) {
        if (first <= overscanFirst && last >= overscanLast) {
          break;
        }

        var maxNewCells = newCellCount >= maxToRenderPerBatch;
        var firstWillAddMore = first <= prev.first || first > prev.last;
        var firstShouldIncrement =
          first > overscanFirst && (!maxNewCells || !firstWillAddMore);
        var lastWillAddMore = last >= prev.last || last < prev.first;
        var lastShouldIncrement =
          last < overscanLast && (!maxNewCells || !lastWillAddMore);

        if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
          break;
        }

        if (
          firstShouldIncrement &&
          !(
            fillPreference === "after" &&
            lastShouldIncrement &&
            lastWillAddMore
          )
        ) {
          if (firstWillAddMore) {
            newCellCount++;
          }

          first--;
        }

        if (
          lastShouldIncrement &&
          !(
            fillPreference === "before" &&
            firstShouldIncrement &&
            firstWillAddMore
          )
        ) {
          if (lastWillAddMore) {
            newCellCount++;
          }

          last++;
        }
      }

      if (
        !(
          last >= first &&
          first >= 0 &&
          last < itemCount &&
          first >= overscanFirst &&
          last <= overscanLast &&
          first <= visible.first &&
          last >= visible.last
        )
      ) {
        throw new Error(
          "Bad window calculation " +
            JSON.stringify({
              first: first,
              last: last,
              itemCount: itemCount,
              overscanFirst: overscanFirst,
              overscanLast: overscanLast,
              visible: visible,
            })
        );
      }

      return {
        first: first,
        last: last,
      };
    }

    function keyExtractor(item, index) {
      if (
        typeof item === "object" &&
        (item == null ? undefined : item.key) != null
      ) {
        return item.key;
      }

      if (
        typeof item === "object" &&
        (item == null ? undefined : item.id) != null
      ) {
        return item.id;
      }

      return String(index);
    }
  },
  240,
  [7, 44, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var safeIsNaN =
      Number.isNaN ||
      function ponyfill(value) {
        return typeof value === "number" && value !== value;
      };

    function isEqual(first, second) {
      if (first === second) {
        return true;
      }

      if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
      }

      return false;
    }

    function areInputsEqual(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
        return false;
      }

      for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
          return false;
        }
      }

      return true;
    }

    function memoizeOne(resultFn, isEqual) {
      if (isEqual === undefined) {
        isEqual = areInputsEqual;
      }

      var lastThis;
      var lastArgs = [];
      var lastResult;
      var calledOnce = false;

      function memoized() {
        var newArgs = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          newArgs[_i] = arguments[_i];
        }

        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
          return lastResult;
        }

        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
      }

      return memoized;
    }

    module.exports = memoizeOne;
  },
  241,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _defineProperty2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _assertThisInitialized2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _VirtualizedListContext = _$$_REQUIRE(_dependencyMap[8]);

    var _VirtualizeUtils = _$$_REQUIRE(_dependencyMap[9]);

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var RefreshControl = _$$_REQUIRE(_dependencyMap[12]);

    var ScrollView = _$$_REQUIRE(_dependencyMap[13]);

    var View = _$$_REQUIRE(_dependencyMap[14]);

    var Batchinator = _$$_REQUIRE(_dependencyMap[15]);

    var ReactNative = _$$_REQUIRE(_dependencyMap[16]);

    var flattenStyle = _$$_REQUIRE(_dependencyMap[17]);

    var StyleSheet = _$$_REQUIRE(_dependencyMap[18]);

    var infoLog = _$$_REQUIRE(_dependencyMap[19]);

    var FillRateHelper = _$$_REQUIRE(_dependencyMap[20]);

    var ViewabilityHelper = _$$_REQUIRE(_dependencyMap[21]);

    var invariant = _$$_REQUIRE(_dependencyMap[22]);

    var ON_END_REACHED_EPSILON = 0.001;
    var _usedIndexForKey = false;
    var _keylessItemComponentName = "";

    function horizontalOrDefault(horizontal) {
      return horizontal != null ? horizontal : false;
    }

    function initialNumToRenderOrDefault(initialNumToRender) {
      return initialNumToRender != null ? initialNumToRender : 10;
    }

    function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
      return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
    }

    function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
      return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
    }

    function scrollEventThrottleOrDefault(scrollEventThrottle) {
      return scrollEventThrottle != null ? scrollEventThrottle : 50;
    }

    function windowSizeOrDefault(windowSize) {
      return windowSize != null ? windowSize : 21;
    }

    var VirtualizedList = (function (_React$PureComponent) {
      (0, _inherits2.default)(VirtualizedList, _React$PureComponent);

      var _super = _createSuper(VirtualizedList);

      function VirtualizedList(_props) {
        var _this$props$updateCel;

        var _this;

        (0, _classCallCheck2.default)(this, VirtualizedList);
        _this = _super.call(this, _props);

        _this._getScrollMetrics = function () {
          return _this._scrollMetrics;
        };

        _this._getOutermostParentListRef = function () {
          if (_this._isNestedWithSameOrientation()) {
            return _this.context.getOutermostParentListRef();
          } else {
            return (0, _assertThisInitialized2.default)(_this);
          }
        };

        _this._getNestedChildState = function (key) {
          var existingChildData = _this._nestedChildLists.get(key);

          return existingChildData && existingChildData.state;
        };

        _this._registerAsNestedChild = function (childList) {
          var childListsInCell =
            _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
          childListsInCell.add(childList.key);

          _this._cellKeysToChildListKeys.set(
            childList.cellKey,
            childListsInCell
          );

          var existingChildData = _this._nestedChildLists.get(childList.key);

          if (existingChildData && existingChildData.ref !== null) {
            console.error(
              "A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list.\n\n" +
                describeNestedLists(
                  Object.assign({}, childList, {
                    horizontal: !!childList.ref.props.horizontal,
                  })
                )
            );
          }

          _this._nestedChildLists.set(childList.key, {
            ref: childList.ref,
            state: null,
          });

          if (_this._hasInteracted) {
            childList.ref.recordInteraction();
          }
        };

        _this._unregisterAsNestedChild = function (childList) {
          _this._nestedChildLists.set(childList.key, {
            ref: null,
            state: childList.state,
          });
        };

        _this._onUpdateSeparators = function (keys, newProps) {
          keys.forEach(function (key) {
            var ref = key != null && _this._cellRefs[key];
            ref && ref.updateSeparatorProps(newProps);
          });
        };

        _this._getSpacerKey = function (isVertical) {
          return isVertical ? "height" : "width";
        };

        _this._averageCellLength = 0;
        _this._cellKeysToChildListKeys = new Map();
        _this._cellRefs = {};
        _this._frames = {};
        _this._footerLength = 0;
        _this._hasTriggeredInitialScrollToIndex = false;
        _this._hasInteracted = false;
        _this._hasMore = false;
        _this._hasWarned = {};
        _this._headerLength = 0;
        _this._hiPriInProgress = false;
        _this._highestMeasuredFrameIndex = 0;
        _this._indicesToKeys = new Map();
        _this._nestedChildLists = new Map();
        _this._offsetFromParentVirtualizedList = 0;
        _this._prevParentOffset = 0;
        _this._scrollMetrics = {
          contentLength: 0,
          dOffset: 0,
          dt: 10,
          offset: 0,
          timestamp: 0,
          velocity: 0,
          visibleLength: 0,
          zoomScale: 1,
        };
        _this._scrollRef = null;
        _this._sentEndForContentLength = 0;
        _this._totalCellLength = 0;
        _this._totalCellsMeasured = 0;
        _this._viewabilityTuples = [];

        _this._captureScrollRef = function (ref) {
          _this._scrollRef = ref;
        };

        _this._defaultRenderScrollComponent = function (props) {
          var onRefresh = props.onRefresh;

          if (_this._isNestedWithSameOrientation()) {
            return (0, _jsxRuntime.jsx)(View, Object.assign({}, props));
          } else if (onRefresh) {
            var _props$refreshing;

            invariant(
              typeof props.refreshing === "boolean",
              "`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `" +
                JSON.stringify(
                  (_props$refreshing = props.refreshing) != null
                    ? _props$refreshing
                    : "undefined"
                ) +
                "`"
            );
            return (0, _jsxRuntime.jsx)(
              ScrollView,
              Object.assign({}, props, {
                refreshControl:
                  props.refreshControl == null
                    ? (0, _jsxRuntime.jsx)(RefreshControl, {
                        refreshing: props.refreshing,
                        onRefresh: onRefresh,
                        progressViewOffset: props.progressViewOffset,
                      })
                    : props.refreshControl,
              })
            );
          } else {
            return (0, _jsxRuntime.jsx)(ScrollView, Object.assign({}, props));
          }
        };

        _this._onCellLayout = function (e, cellKey, index) {
          var layout = e.nativeEvent.layout;
          var next = {
            offset: _this._selectOffset(layout),
            length: _this._selectLength(layout),
            index: index,
            inLayout: true,
          };
          var curr = _this._frames[cellKey];

          if (
            !curr ||
            next.offset !== curr.offset ||
            next.length !== curr.length ||
            index !== curr.index
          ) {
            _this._totalCellLength += next.length - (curr ? curr.length : 0);
            _this._totalCellsMeasured += curr ? 0 : 1;
            _this._averageCellLength =
              _this._totalCellLength / _this._totalCellsMeasured;
            _this._frames[cellKey] = next;
            _this._highestMeasuredFrameIndex = Math.max(
              _this._highestMeasuredFrameIndex,
              index
            );

            _this._scheduleCellsToRenderUpdate();
          } else {
            _this._frames[cellKey].inLayout = true;
          }

          _this._triggerRemeasureForChildListsInCell(cellKey);

          _this._computeBlankness();

          _this._updateViewableItems(_this.props.data);
        };

        _this._onCellUnmount = function (cellKey) {
          var curr = _this._frames[cellKey];

          if (curr) {
            _this._frames[cellKey] = Object.assign({}, curr, {
              inLayout: false,
            });
          }
        };

        _this._onLayout = function (e) {
          if (_this._isNestedWithSameOrientation()) {
            _this.measureLayoutRelativeToContainingList();
          } else {
            _this._scrollMetrics.visibleLength = _this._selectLength(
              e.nativeEvent.layout
            );
          }

          _this.props.onLayout && _this.props.onLayout(e);

          _this._scheduleCellsToRenderUpdate();

          _this._maybeCallOnEndReached();
        };

        _this._onLayoutEmpty = function (e) {
          _this.props.onLayout && _this.props.onLayout(e);
        };

        _this._onLayoutFooter = function (e) {
          _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());

          _this._footerLength = _this._selectLength(e.nativeEvent.layout);
        };

        _this._onLayoutHeader = function (e) {
          _this._headerLength = _this._selectLength(e.nativeEvent.layout);
        };

        _this._onContentSizeChange = function (width, height) {
          if (
            width > 0 &&
            height > 0 &&
            _this.props.initialScrollIndex != null &&
            _this.props.initialScrollIndex > 0 &&
            !_this._hasTriggeredInitialScrollToIndex
          ) {
            if (_this.props.contentOffset == null) {
              _this.scrollToIndex({
                animated: false,
                index: _this.props.initialScrollIndex,
              });
            }

            _this._hasTriggeredInitialScrollToIndex = true;
          }

          if (_this.props.onContentSizeChange) {
            _this.props.onContentSizeChange(width, height);
          }

          _this._scrollMetrics.contentLength = _this._selectLength({
            height: height,
            width: width,
          });

          _this._scheduleCellsToRenderUpdate();

          _this._maybeCallOnEndReached();
        };

        _this._convertParentScrollMetrics = function (metrics) {
          var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
          var visibleLength = metrics.visibleLength;
          var dOffset = offset - _this._scrollMetrics.offset;
          var contentLength = _this._scrollMetrics.contentLength;
          return {
            visibleLength: visibleLength,
            contentLength: contentLength,
            offset: offset,
            dOffset: dOffset,
          };
        };

        _this._onScroll = function (e) {
          _this._nestedChildLists.forEach(function (childList) {
            childList.ref && childList.ref._onScroll(e);
          });

          if (_this.props.onScroll) {
            _this.props.onScroll(e);
          }

          var timestamp = e.timeStamp;

          var visibleLength = _this._selectLength(
            e.nativeEvent.layoutMeasurement
          );

          var contentLength = _this._selectLength(e.nativeEvent.contentSize);

          var offset = _this._selectOffset(e.nativeEvent.contentOffset);

          var dOffset = offset - _this._scrollMetrics.offset;

          if (_this._isNestedWithSameOrientation()) {
            if (_this._scrollMetrics.contentLength === 0) {
              return;
            }

            var _this$_convertParentS = _this._convertParentScrollMetrics({
              visibleLength: visibleLength,
              offset: offset,
            });

            visibleLength = _this$_convertParentS.visibleLength;
            contentLength = _this$_convertParentS.contentLength;
            offset = _this$_convertParentS.offset;
            dOffset = _this$_convertParentS.dOffset;
          }

          var dt = _this._scrollMetrics.timestamp
            ? Math.max(1, timestamp - _this._scrollMetrics.timestamp)
            : 1;
          var velocity = dOffset / dt;

          if (
            dt > 500 &&
            _this._scrollMetrics.dt > 500 &&
            contentLength > 5 * visibleLength &&
            !_this._hasWarned.perf
          ) {
            infoLog(
              "VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.",
              {
                dt: dt,
                prevDt: _this._scrollMetrics.dt,
                contentLength: contentLength,
              }
            );
            _this._hasWarned.perf = true;
          }

          var zoomScale =
            e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
          _this._scrollMetrics = {
            contentLength: contentLength,
            dt: dt,
            dOffset: dOffset,
            offset: offset,
            timestamp: timestamp,
            velocity: velocity,
            visibleLength: visibleLength,
            zoomScale: zoomScale,
          };

          _this._updateViewableItems(_this.props.data);

          if (!_this.props) {
            return;
          }

          _this._maybeCallOnEndReached();

          if (velocity !== 0) {
            _this._fillRateHelper.activate();
          }

          _this._computeBlankness();

          _this._scheduleCellsToRenderUpdate();
        };

        _this._onScrollBeginDrag = function (e) {
          _this._nestedChildLists.forEach(function (childList) {
            childList.ref && childList.ref._onScrollBeginDrag(e);
          });

          _this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.recordInteraction();
          });

          _this._hasInteracted = true;
          _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        };

        _this._onScrollEndDrag = function (e) {
          _this._nestedChildLists.forEach(function (childList) {
            childList.ref && childList.ref._onScrollEndDrag(e);
          });

          var velocity = e.nativeEvent.velocity;

          if (velocity) {
            _this._scrollMetrics.velocity = _this._selectOffset(velocity);
          }

          _this._computeBlankness();

          _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        };

        _this._onMomentumScrollBegin = function (e) {
          _this._nestedChildLists.forEach(function (childList) {
            childList.ref && childList.ref._onMomentumScrollBegin(e);
          });

          _this.props.onMomentumScrollBegin &&
            _this.props.onMomentumScrollBegin(e);
        };

        _this._onMomentumScrollEnd = function (e) {
          _this._nestedChildLists.forEach(function (childList) {
            childList.ref && childList.ref._onMomentumScrollEnd(e);
          });

          _this._scrollMetrics.velocity = 0;

          _this._computeBlankness();

          _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        };

        _this._updateCellsToRender = function () {
          var _this$props = _this.props,
            data = _this$props.data,
            getItemCount = _this$props.getItemCount,
            _onEndReachedThreshold = _this$props.onEndReachedThreshold;
          var onEndReachedThreshold = onEndReachedThresholdOrDefault(
            _onEndReachedThreshold
          );

          var isVirtualizationDisabled = _this._isVirtualizationDisabled();

          _this._updateViewableItems(data);

          if (!data) {
            return;
          }

          _this.setState(function (state) {
            var newState;
            var _this$_scrollMetrics = _this._scrollMetrics,
              contentLength = _this$_scrollMetrics.contentLength,
              offset = _this$_scrollMetrics.offset,
              visibleLength = _this$_scrollMetrics.visibleLength;
            var distanceFromEnd = contentLength - visibleLength - offset;

            if (!isVirtualizationDisabled) {
              if (visibleLength > 0 && contentLength > 0) {
                if (
                  !_this.props.initialScrollIndex ||
                  _this._scrollMetrics.offset ||
                  Math.abs(distanceFromEnd) < Number.EPSILON
                ) {
                  newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(
                    _this.props.data,
                    _this.props.getItemCount,
                    maxToRenderPerBatchOrDefault(
                      _this.props.maxToRenderPerBatch
                    ),
                    windowSizeOrDefault(_this.props.windowSize),
                    state,
                    _this.__getFrameMetricsApprox,
                    _this._scrollMetrics
                  );
                }
              }
            } else {
              var renderAhead =
                distanceFromEnd < onEndReachedThreshold * visibleLength
                  ? maxToRenderPerBatchOrDefault(
                      _this.props.maxToRenderPerBatch
                    )
                  : 0;
              newState = {
                first: 0,
                last: Math.min(
                  state.last + renderAhead,
                  getItemCount(data) - 1
                ),
              };
            }

            if (newState && _this._nestedChildLists.size > 0) {
              var newFirst = newState.first;
              var newLast = newState.last;

              for (var ii = newFirst; ii <= newLast; ii++) {
                var cellKeyForIndex = _this._indicesToKeys.get(ii);

                var childListKeys =
                  cellKeyForIndex &&
                  _this._cellKeysToChildListKeys.get(cellKeyForIndex);

                if (!childListKeys) {
                  continue;
                }

                var someChildHasMore = false;

                for (var childKey of childListKeys) {
                  var childList = _this._nestedChildLists.get(childKey);

                  if (childList && childList.ref && childList.ref.hasMore()) {
                    someChildHasMore = true;
                    break;
                  }
                }

                if (someChildHasMore) {
                  newState.last = ii;
                  break;
                }
              }
            }

            if (
              newState != null &&
              newState.first === state.first &&
              newState.last === state.last
            ) {
              newState = null;
            }

            return newState;
          });
        };

        _this._createViewToken = function (index, isViewable) {
          var _this$props2 = _this.props,
            data = _this$props2.data,
            getItem = _this$props2.getItem;
          var item = getItem(data, index);
          return {
            index: index,
            item: item,
            key: _this._keyExtractor(item, index),
            isViewable: isViewable,
          };
        };

        _this.__getFrameMetricsApprox = function (index) {
          var frame = _this._getFrameMetrics(index);

          if (frame && frame.index === index) {
            return frame;
          } else {
            var getItemLayout = _this.props.getItemLayout;
            invariant(
              !getItemLayout,
              "Should not have to estimate frames when a measurement metrics function is provided"
            );
            return {
              length: _this._averageCellLength,
              offset: _this._averageCellLength * index,
            };
          }
        };

        _this._getFrameMetrics = function (index) {
          var _this$props3 = _this.props,
            data = _this$props3.data,
            getItem = _this$props3.getItem,
            getItemCount = _this$props3.getItemCount,
            getItemLayout = _this$props3.getItemLayout;
          invariant(
            getItemCount(data) > index,
            "Tried to get frame for out of range index " + index
          );
          var item = getItem(data, index);

          var frame = item && _this._frames[_this._keyExtractor(item, index)];

          if (!frame || frame.index !== index) {
            if (getItemLayout) {
              return getItemLayout(data, index);
            }
          }

          return frame;
        };

        invariant(
          !_props.onScroll || !_props.onScroll.__isNative,
          "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver"
        );
        invariant(
          windowSizeOrDefault(_props.windowSize) > 0,
          "VirtualizedList: The windowSize prop must be present and set to a value greater than 0."
        );
        _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
        _this._updateCellsToRenderBatcher = new Batchinator(
          _this._updateCellsToRender,
          (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) !=
          null
            ? _this$props$updateCel
            : 50
        );

        if (_this.props.viewabilityConfigCallbackPairs) {
          _this._viewabilityTuples =
            _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
              return {
                viewabilityHelper: new ViewabilityHelper(
                  pair.viewabilityConfig
                ),
                onViewableItemsChanged: pair.onViewableItemsChanged,
              };
            });
        } else {
          var _this$props4 = _this.props,
            onViewableItemsChanged = _this$props4.onViewableItemsChanged,
            viewabilityConfig = _this$props4.viewabilityConfig;

          if (onViewableItemsChanged) {
            _this._viewabilityTuples.push({
              viewabilityHelper: new ViewabilityHelper(viewabilityConfig),
              onViewableItemsChanged: onViewableItemsChanged,
            });
          }
        }

        var initialState = {
          first: _this.props.initialScrollIndex || 0,
          last:
            Math.min(
              _this.props.getItemCount(_this.props.data),
              (_this.props.initialScrollIndex || 0) +
                initialNumToRenderOrDefault(_this.props.initialNumToRender)
            ) - 1,
        };

        if (_this._isNestedWithSameOrientation()) {
          var storedState = _this.context.getNestedChildState(
            _this._getListKey()
          );

          if (storedState) {
            initialState = storedState;
            _this.state = storedState;
            _this._frames = storedState.frames;
          }
        }

        _this.state = initialState;
        return _this;
      }

      (0, _createClass2.default)(
        VirtualizedList,
        [
          {
            key: "scrollToEnd",
            value: function scrollToEnd(params) {
              var animated = params ? params.animated : true;
              var veryLast = this.props.getItemCount(this.props.data) - 1;

              var frame = this.__getFrameMetricsApprox(veryLast);

              var offset = Math.max(
                0,
                frame.offset +
                  frame.length +
                  this._footerLength -
                  this._scrollMetrics.visibleLength
              );

              if (this._scrollRef == null) {
                return;
              }

              if (this._scrollRef.scrollTo == null) {
                console.warn(
                  "No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo."
                );
                return;
              }

              this._scrollRef.scrollTo(
                horizontalOrDefault(this.props.horizontal)
                  ? {
                      x: offset,
                      animated: animated,
                    }
                  : {
                      y: offset,
                      animated: animated,
                    }
              );
            },
          },
          {
            key: "scrollToIndex",
            value: function scrollToIndex(params) {
              var _this$props5 = this.props,
                data = _this$props5.data,
                horizontal = _this$props5.horizontal,
                getItemCount = _this$props5.getItemCount,
                getItemLayout = _this$props5.getItemLayout,
                onScrollToIndexFailed = _this$props5.onScrollToIndexFailed;
              var animated = params.animated,
                index = params.index,
                viewOffset = params.viewOffset,
                viewPosition = params.viewPosition;
              invariant(
                index >= 0,
                "scrollToIndex out of range: requested index " +
                  index +
                  " but minimum is 0"
              );
              invariant(
                getItemCount(data) >= 1,
                "scrollToIndex out of range: item length " +
                  getItemCount(data) +
                  " but minimum is 1"
              );
              invariant(
                index < getItemCount(data),
                "scrollToIndex out of range: requested index " +
                  index +
                  " is out of 0 to " +
                  (getItemCount(data) - 1)
              );

              if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
                invariant(
                  !!onScrollToIndexFailed,
                  "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures."
                );
                onScrollToIndexFailed({
                  averageItemLength: this._averageCellLength,
                  highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
                  index: index,
                });
                return;
              }

              var frame = this.__getFrameMetricsApprox(index);

              var offset =
                Math.max(
                  0,
                  frame.offset -
                    (viewPosition || 0) *
                      (this._scrollMetrics.visibleLength - frame.length)
                ) - (viewOffset || 0);

              if (this._scrollRef == null) {
                return;
              }

              if (this._scrollRef.scrollTo == null) {
                console.warn(
                  "No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo."
                );
                return;
              }

              this._scrollRef.scrollTo(
                horizontal
                  ? {
                      x: offset,
                      animated: animated,
                    }
                  : {
                      y: offset,
                      animated: animated,
                    }
              );
            },
          },
          {
            key: "scrollToItem",
            value: function scrollToItem(params) {
              var item = params.item;
              var _this$props6 = this.props,
                data = _this$props6.data,
                getItem = _this$props6.getItem,
                getItemCount = _this$props6.getItemCount;
              var itemCount = getItemCount(data);

              for (var _index = 0; _index < itemCount; _index++) {
                if (getItem(data, _index) === item) {
                  this.scrollToIndex(
                    Object.assign({}, params, {
                      index: _index,
                    })
                  );
                  break;
                }
              }
            },
          },
          {
            key: "scrollToOffset",
            value: function scrollToOffset(params) {
              var animated = params.animated,
                offset = params.offset;

              if (this._scrollRef == null) {
                return;
              }

              if (this._scrollRef.scrollTo == null) {
                console.warn(
                  "No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo."
                );
                return;
              }

              this._scrollRef.scrollTo(
                horizontalOrDefault(this.props.horizontal)
                  ? {
                      x: offset,
                      animated: animated,
                    }
                  : {
                      y: offset,
                      animated: animated,
                    }
              );
            },
          },
          {
            key: "recordInteraction",
            value: function recordInteraction() {
              this._nestedChildLists.forEach(function (childList) {
                childList.ref && childList.ref.recordInteraction();
              });

              this._viewabilityTuples.forEach(function (t) {
                t.viewabilityHelper.recordInteraction();
              });

              this._updateViewableItems(this.props.data);
            },
          },
          {
            key: "flashScrollIndicators",
            value: function flashScrollIndicators() {
              if (this._scrollRef == null) {
                return;
              }

              this._scrollRef.flashScrollIndicators();
            },
          },
          {
            key: "getScrollResponder",
            value: function getScrollResponder() {
              if (this._scrollRef && this._scrollRef.getScrollResponder) {
                return this._scrollRef.getScrollResponder();
              }
            },
          },
          {
            key: "getScrollableNode",
            value: function getScrollableNode() {
              if (this._scrollRef && this._scrollRef.getScrollableNode) {
                return this._scrollRef.getScrollableNode();
              } else {
                return ReactNative.findNodeHandle(this._scrollRef);
              }
            },
          },
          {
            key: "getScrollRef",
            value: function getScrollRef() {
              if (this._scrollRef && this._scrollRef.getScrollRef) {
                return this._scrollRef.getScrollRef();
              } else {
                return this._scrollRef;
              }
            },
          },
          {
            key: "setNativeProps",
            value: function setNativeProps(props) {
              if (this._scrollRef) {
                this._scrollRef.setNativeProps(props);
              }
            },
          },
          {
            key: "_getCellKey",
            value: function _getCellKey() {
              var _this$context;

              return (
                ((_this$context = this.context) == null
                  ? undefined
                  : _this$context.cellKey) || "rootList"
              );
            },
          },
          {
            key: "_getListKey",
            value: function _getListKey() {
              return this.props.listKey || this._getCellKey();
            },
          },
          {
            key: "_getDebugInfo",
            value: function _getDebugInfo() {
              var _this$context2;

              return {
                listKey: this._getListKey(),
                cellKey: this._getCellKey(),
                horizontal: horizontalOrDefault(this.props.horizontal),
                parent:
                  (_this$context2 = this.context) == null
                    ? undefined
                    : _this$context2.debugInfo,
              };
            },
          },
          {
            key: "hasMore",
            value: function hasMore() {
              return this._hasMore;
            },
          },
          {
            key: "componentDidMount",
            value: function componentDidMount() {
              if (this._isNestedWithSameOrientation()) {
                this.context.registerAsNestedChild({
                  cellKey: this._getCellKey(),
                  key: this._getListKey(),
                  ref: this,
                  parentDebugInfo: this.context.debugInfo,
                });
              }
            },
          },
          {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              if (this._isNestedWithSameOrientation()) {
                this.context.unregisterAsNestedChild({
                  key: this._getListKey(),
                  state: {
                    first: this.state.first,
                    last: this.state.last,
                    frames: this._frames,
                  },
                });
              }

              this._updateViewableItems(null);

              this._updateCellsToRenderBatcher.dispose({
                abort: true,
              });

              this._viewabilityTuples.forEach(function (tuple) {
                tuple.viewabilityHelper.dispose();
              });

              this._fillRateHelper.deactivateAndFlush();
            },
          },
          {
            key: "_pushCells",
            value: function _pushCells(
              cells,
              stickyHeaderIndices,
              stickyIndicesFromProps,
              first,
              last,
              inversionStyle
            ) {
              var _this2 = this;

              var _this$props7 = this.props,
                CellRendererComponent = _this$props7.CellRendererComponent,
                ItemSeparatorComponent = _this$props7.ItemSeparatorComponent,
                ListHeaderComponent = _this$props7.ListHeaderComponent,
                ListItemComponent = _this$props7.ListItemComponent,
                data = _this$props7.data,
                debug = _this$props7.debug,
                getItem = _this$props7.getItem,
                getItemCount = _this$props7.getItemCount,
                getItemLayout = _this$props7.getItemLayout,
                horizontal = _this$props7.horizontal,
                renderItem = _this$props7.renderItem;
              var stickyOffset = ListHeaderComponent ? 1 : 0;
              var end = getItemCount(data) - 1;
              var prevCellKey;
              last = Math.min(end, last);

              var _loop = function _loop(ii) {
                var item = getItem(data, ii);

                var key = _this2._keyExtractor(item, ii);

                _this2._indicesToKeys.set(ii, key);

                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  stickyHeaderIndices.push(cells.length);
                }

                cells.push(
                  (0, _jsxRuntime.jsx)(
                    CellRenderer,
                    {
                      CellRendererComponent: CellRendererComponent,
                      ItemSeparatorComponent:
                        ii < end ? ItemSeparatorComponent : undefined,
                      ListItemComponent: ListItemComponent,
                      cellKey: key,
                      debug: debug,
                      fillRateHelper: _this2._fillRateHelper,
                      getItemLayout: getItemLayout,
                      horizontal: horizontal,
                      index: ii,
                      inversionStyle: inversionStyle,
                      item: item,
                      prevCellKey: prevCellKey,
                      onCellLayout: _this2._onCellLayout,
                      onUpdateSeparators: _this2._onUpdateSeparators,
                      onUnmount: _this2._onCellUnmount,
                      ref: function ref(_ref) {
                        _this2._cellRefs[key] = _ref;
                      },
                      renderItem: renderItem,
                    },
                    key
                  )
                );
                prevCellKey = key;
              };

              for (var ii = first; ii <= last; ii++) {
                _loop(ii);
              }
            },
          },
          {
            key: "_isVirtualizationDisabled",
            value: function _isVirtualizationDisabled() {
              return this.props.disableVirtualization || false;
            },
          },
          {
            key: "_isNestedWithSameOrientation",
            value: function _isNestedWithSameOrientation() {
              var nestedContext = this.context;
              return !!(
                nestedContext &&
                !!nestedContext.horizontal ===
                  horizontalOrDefault(this.props.horizontal)
              );
            },
          },
          {
            key: "_keyExtractor",
            value: function _keyExtractor(item, index) {
              if (this.props.keyExtractor != null) {
                return this.props.keyExtractor(item, index);
              }

              var key = (0, _VirtualizeUtils.keyExtractor)(item, index);

              if (key === String(index)) {
                _usedIndexForKey = true;

                if (item.type && item.type.displayName) {
                  _keylessItemComponentName = item.type.displayName;
                }
              }

              return key;
            },
          },
          {
            key: "render",
            value: function render() {
              var _this3 = this;

              var _this$props8 = this.props,
                ListEmptyComponent = _this$props8.ListEmptyComponent,
                ListFooterComponent = _this$props8.ListFooterComponent,
                ListHeaderComponent = _this$props8.ListHeaderComponent;
              var _this$props9 = this.props,
                data = _this$props9.data,
                horizontal = _this$props9.horizontal;

              var isVirtualizationDisabled = this._isVirtualizationDisabled();

              var inversionStyle = this.props.inverted
                ? horizontalOrDefault(this.props.horizontal)
                  ? styles.horizontallyInverted
                  : styles.verticallyInverted
                : null;
              var cells = [];
              var stickyIndicesFromProps = new Set(
                this.props.stickyHeaderIndices
              );
              var stickyHeaderIndices = [];

              if (ListHeaderComponent) {
                if (stickyIndicesFromProps.has(0)) {
                  stickyHeaderIndices.push(0);
                }

                var element = React.isValidElement(ListHeaderComponent)
                  ? ListHeaderComponent
                  : (0, _jsxRuntime.jsx)(ListHeaderComponent, {});
                cells.push(
                  (0, _jsxRuntime.jsx)(
                    _VirtualizedListContext.VirtualizedListCellContextProvider,
                    {
                      cellKey: this._getCellKey() + "-header",
                      children: (0, _jsxRuntime.jsx)(View, {
                        onLayout: this._onLayoutHeader,
                        style: StyleSheet.compose(
                          inversionStyle,
                          this.props.ListHeaderComponentStyle
                        ),
                        children: element,
                      }),
                    },
                    "$header"
                  )
                );
              }

              var itemCount = this.props.getItemCount(data);

              if (itemCount > 0) {
                _usedIndexForKey = false;
                _keylessItemComponentName = "";

                var spacerKey = this._getSpacerKey(!horizontal);

                var lastInitialIndex = this.props.initialScrollIndex
                  ? -1
                  : initialNumToRenderOrDefault(this.props.initialNumToRender) -
                    1;
                var _this$state = this.state,
                  first = _this$state.first,
                  last = _this$state.last;

                this._pushCells(
                  cells,
                  stickyHeaderIndices,
                  stickyIndicesFromProps,
                  0,
                  lastInitialIndex,
                  inversionStyle
                );

                var firstAfterInitial = Math.max(lastInitialIndex + 1, first);

                if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
                  var insertedStickySpacer = false;

                  if (stickyIndicesFromProps.size > 0) {
                    var stickyOffset = ListHeaderComponent ? 1 : 0;

                    for (
                      var ii = firstAfterInitial - 1;
                      ii > lastInitialIndex;
                      ii--
                    ) {
                      if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                        var initBlock =
                          this.__getFrameMetricsApprox(lastInitialIndex);

                        var stickyBlock = this.__getFrameMetricsApprox(ii);

                        var leadSpace =
                          stickyBlock.offset -
                          initBlock.offset -
                          (this.props.initialScrollIndex
                            ? 0
                            : initBlock.length);
                        cells.push(
                          (0, _jsxRuntime.jsx)(
                            View,
                            {
                              style: (0, _defineProperty2.default)(
                                {},
                                spacerKey,
                                leadSpace
                              ),
                            },
                            "$sticky_lead"
                          )
                        );

                        this._pushCells(
                          cells,
                          stickyHeaderIndices,
                          stickyIndicesFromProps,
                          ii,
                          ii,
                          inversionStyle
                        );

                        var trailSpace =
                          this.__getFrameMetricsApprox(first).offset -
                          (stickyBlock.offset + stickyBlock.length);
                        cells.push(
                          (0, _jsxRuntime.jsx)(
                            View,
                            {
                              style: (0, _defineProperty2.default)(
                                {},
                                spacerKey,
                                trailSpace
                              ),
                            },
                            "$sticky_trail"
                          )
                        );
                        insertedStickySpacer = true;
                        break;
                      }
                    }
                  }

                  if (!insertedStickySpacer) {
                    var _initBlock =
                      this.__getFrameMetricsApprox(lastInitialIndex);

                    var firstSpace =
                      this.__getFrameMetricsApprox(first).offset -
                      (_initBlock.offset + _initBlock.length);

                    cells.push(
                      (0, _jsxRuntime.jsx)(
                        View,
                        {
                          style: (0, _defineProperty2.default)(
                            {},
                            spacerKey,
                            firstSpace
                          ),
                        },
                        "$lead_spacer"
                      )
                    );
                  }
                }

                this._pushCells(
                  cells,
                  stickyHeaderIndices,
                  stickyIndicesFromProps,
                  firstAfterInitial,
                  last,
                  inversionStyle
                );

                if (!this._hasWarned.keys && _usedIndexForKey) {
                  console.warn(
                    "VirtualizedList: missing keys for items, make sure to specify a key or id property on each item or provide a custom keyExtractor.",
                    _keylessItemComponentName
                  );
                  this._hasWarned.keys = true;
                }

                if (!isVirtualizationDisabled && last < itemCount - 1) {
                  var lastFrame = this.__getFrameMetricsApprox(last);

                  var end = this.props.getItemLayout
                    ? itemCount - 1
                    : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

                  var endFrame = this.__getFrameMetricsApprox(end);

                  var tailSpacerLength =
                    endFrame.offset +
                    endFrame.length -
                    (lastFrame.offset + lastFrame.length);
                  cells.push(
                    (0, _jsxRuntime.jsx)(
                      View,
                      {
                        style: (0, _defineProperty2.default)(
                          {},
                          spacerKey,
                          tailSpacerLength
                        ),
                      },
                      "$tail_spacer"
                    )
                  );
                }
              } else if (ListEmptyComponent) {
                var _element = React.isValidElement(ListEmptyComponent)
                  ? ListEmptyComponent
                  : (0, _jsxRuntime.jsx)(ListEmptyComponent, {});

                cells.push(
                  React.cloneElement(_element, {
                    key: "$empty",
                    onLayout: function onLayout(event) {
                      _this3._onLayoutEmpty(event);

                      if (_element.props.onLayout) {
                        _element.props.onLayout(event);
                      }
                    },
                    style: StyleSheet.compose(
                      inversionStyle,
                      _element.props.style
                    ),
                  })
                );
              }

              if (ListFooterComponent) {
                var _element2 = React.isValidElement(ListFooterComponent)
                  ? ListFooterComponent
                  : (0, _jsxRuntime.jsx)(ListFooterComponent, {});

                cells.push(
                  (0, _jsxRuntime.jsx)(
                    _VirtualizedListContext.VirtualizedListCellContextProvider,
                    {
                      cellKey: this._getFooterCellKey(),
                      children: (0, _jsxRuntime.jsx)(View, {
                        onLayout: this._onLayoutFooter,
                        style: StyleSheet.compose(
                          inversionStyle,
                          this.props.ListFooterComponentStyle
                        ),
                        children: _element2,
                      }),
                    },
                    "$footer"
                  )
                );
              }

              var scrollProps = Object.assign({}, this.props, {
                onContentSizeChange: this._onContentSizeChange,
                onLayout: this._onLayout,
                onScroll: this._onScroll,
                onScrollBeginDrag: this._onScrollBeginDrag,
                onScrollEndDrag: this._onScrollEndDrag,
                onMomentumScrollBegin: this._onMomentumScrollBegin,
                onMomentumScrollEnd: this._onMomentumScrollEnd,
                scrollEventThrottle: scrollEventThrottleOrDefault(
                  this.props.scrollEventThrottle
                ),
                invertStickyHeaders:
                  this.props.invertStickyHeaders !== undefined
                    ? this.props.invertStickyHeaders
                    : this.props.inverted,
                stickyHeaderIndices: stickyHeaderIndices,
                style: inversionStyle
                  ? [inversionStyle, this.props.style]
                  : this.props.style,
              });
              this._hasMore =
                this.state.last < this.props.getItemCount(this.props.data) - 1;
              var innerRet = (0, _jsxRuntime.jsx)(
                _VirtualizedListContext.VirtualizedListContextProvider,
                {
                  value: {
                    cellKey: null,
                    getScrollMetrics: this._getScrollMetrics,
                    horizontal: horizontalOrDefault(this.props.horizontal),
                    getOutermostParentListRef: this._getOutermostParentListRef,
                    getNestedChildState: this._getNestedChildState,
                    registerAsNestedChild: this._registerAsNestedChild,
                    unregisterAsNestedChild: this._unregisterAsNestedChild,
                    debugInfo: this._getDebugInfo(),
                  },
                  children: React.cloneElement(
                    (
                      this.props.renderScrollComponent ||
                      this._defaultRenderScrollComponent
                    )(scrollProps),
                    {
                      ref: this._captureScrollRef,
                    },
                    cells
                  ),
                }
              );
              var ret = innerRet;

              if (this.props.debug) {
                return (0, _jsxRuntime.jsxs)(View, {
                  style: styles.debug,
                  children: [ret, this._renderDebugOverlay()],
                });
              } else {
                return ret;
              }
            },
          },
          {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
              var _this$props10 = this.props,
                data = _this$props10.data,
                extraData = _this$props10.extraData;

              if (
                data !== prevProps.data ||
                extraData !== prevProps.extraData
              ) {
                this._viewabilityTuples.forEach(function (tuple) {
                  tuple.viewabilityHelper.resetViewableIndices();
                });
              }

              var hiPriInProgress = this._hiPriInProgress;

              this._scheduleCellsToRenderUpdate();

              if (hiPriInProgress) {
                this._hiPriInProgress = false;
              }
            },
          },
          {
            key: "_computeBlankness",
            value: function _computeBlankness() {
              this._fillRateHelper.computeBlankness(
                this.props,
                this.state,
                this._scrollMetrics
              );
            },
          },
          {
            key: "_triggerRemeasureForChildListsInCell",
            value: function _triggerRemeasureForChildListsInCell(cellKey) {
              var childListKeys = this._cellKeysToChildListKeys.get(cellKey);

              if (childListKeys) {
                for (var childKey of childListKeys) {
                  var childList = this._nestedChildLists.get(childKey);

                  childList &&
                    childList.ref &&
                    childList.ref.measureLayoutRelativeToContainingList();
                }
              }
            },
          },
          {
            key: "measureLayoutRelativeToContainingList",
            value: function measureLayoutRelativeToContainingList() {
              var _this4 = this;

              try {
                if (!this._scrollRef) {
                  return;
                }

                this._scrollRef.measureLayout(
                  this.context.getOutermostParentListRef().getScrollRef(),
                  function (x, y, width, height) {
                    _this4._offsetFromParentVirtualizedList =
                      _this4._selectOffset({
                        x: x,
                        y: y,
                      });
                    _this4._scrollMetrics.contentLength = _this4._selectLength({
                      width: width,
                      height: height,
                    });

                    var scrollMetrics = _this4._convertParentScrollMetrics(
                      _this4.context.getScrollMetrics()
                    );

                    var metricsChanged =
                      _this4._scrollMetrics.visibleLength !==
                        scrollMetrics.visibleLength ||
                      _this4._scrollMetrics.offset !== scrollMetrics.offset;

                    if (metricsChanged) {
                      _this4._scrollMetrics.visibleLength =
                        scrollMetrics.visibleLength;
                      _this4._scrollMetrics.offset = scrollMetrics.offset;

                      _this4._cellKeysToChildListKeys.forEach(function (
                        childListKeys
                      ) {
                        if (childListKeys) {
                          for (var childKey of childListKeys) {
                            var childList =
                              _this4._nestedChildLists.get(childKey);

                            childList &&
                              childList.ref &&
                              childList.ref.measureLayoutRelativeToContainingList();
                          }
                        }
                      });
                    }
                  },
                  function (error) {
                    console.warn(
                      "VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList."
                    );
                  }
                );
              } catch (error) {
                console.warn(
                  "measureLayoutRelativeToContainingList threw an error",
                  error.stack
                );
              }
            },
          },
          {
            key: "_getFooterCellKey",
            value: function _getFooterCellKey() {
              return this._getCellKey() + "-footer";
            },
          },
          {
            key: "_renderDebugOverlay",
            value: function _renderDebugOverlay() {
              var normalize =
                this._scrollMetrics.visibleLength /
                (this._scrollMetrics.contentLength || 1);
              var framesInLayout = [];
              var itemCount = this.props.getItemCount(this.props.data);

              for (var ii = 0; ii < itemCount; ii++) {
                var frame = this.__getFrameMetricsApprox(ii);

                if (frame.inLayout) {
                  framesInLayout.push(frame);
                }
              }

              var windowTop = this.__getFrameMetricsApprox(
                this.state.first
              ).offset;

              var frameLast = this.__getFrameMetricsApprox(this.state.last);

              var windowLen = frameLast.offset + frameLast.length - windowTop;
              var visTop = this._scrollMetrics.offset;
              var visLen = this._scrollMetrics.visibleLength;
              return (0, _jsxRuntime.jsxs)(View, {
                style: [styles.debugOverlayBase, styles.debugOverlay],
                children: [
                  framesInLayout.map(function (f, ii) {
                    return (0, _jsxRuntime.jsx)(
                      View,
                      {
                        style: [
                          styles.debugOverlayBase,
                          styles.debugOverlayFrame,
                          {
                            top: f.offset * normalize,
                            height: f.length * normalize,
                          },
                        ],
                      },
                      "f" + ii
                    );
                  }),
                  (0, _jsxRuntime.jsx)(View, {
                    style: [
                      styles.debugOverlayBase,
                      styles.debugOverlayFrameLast,
                      {
                        top: windowTop * normalize,
                        height: windowLen * normalize,
                      },
                    ],
                  }),
                  (0, _jsxRuntime.jsx)(View, {
                    style: [
                      styles.debugOverlayBase,
                      styles.debugOverlayFrameVis,
                      {
                        top: visTop * normalize,
                        height: visLen * normalize,
                      },
                    ],
                  }),
                ],
              });
            },
          },
          {
            key: "_selectLength",
            value: function _selectLength(metrics) {
              return !horizontalOrDefault(this.props.horizontal)
                ? metrics.height
                : metrics.width;
            },
          },
          {
            key: "_selectOffset",
            value: function _selectOffset(metrics) {
              return !horizontalOrDefault(this.props.horizontal)
                ? metrics.y
                : metrics.x;
            },
          },
          {
            key: "_maybeCallOnEndReached",
            value: function _maybeCallOnEndReached() {
              var _this$props11 = this.props,
                data = _this$props11.data,
                getItemCount = _this$props11.getItemCount,
                onEndReached = _this$props11.onEndReached,
                onEndReachedThreshold = _this$props11.onEndReachedThreshold;
              var _this$_scrollMetrics2 = this._scrollMetrics,
                contentLength = _this$_scrollMetrics2.contentLength,
                visibleLength = _this$_scrollMetrics2.visibleLength,
                offset = _this$_scrollMetrics2.offset;
              var distanceFromEnd = contentLength - visibleLength - offset;

              if (distanceFromEnd < ON_END_REACHED_EPSILON) {
                distanceFromEnd = 0;
              }

              var threshold =
                onEndReachedThreshold != null
                  ? onEndReachedThreshold * visibleLength
                  : 2;

              if (
                onEndReached &&
                this.state.last === getItemCount(data) - 1 &&
                distanceFromEnd <= threshold &&
                this._scrollMetrics.contentLength !==
                  this._sentEndForContentLength
              ) {
                this._sentEndForContentLength =
                  this._scrollMetrics.contentLength;
                onEndReached({
                  distanceFromEnd: distanceFromEnd,
                });
              } else if (distanceFromEnd > threshold) {
                this._sentEndForContentLength = 0;
              }
            },
          },
          {
            key: "_scheduleCellsToRenderUpdate",
            value: function _scheduleCellsToRenderUpdate() {
              var _this$state2 = this.state,
                first = _this$state2.first,
                last = _this$state2.last;
              var _this$_scrollMetrics3 = this._scrollMetrics,
                offset = _this$_scrollMetrics3.offset,
                visibleLength = _this$_scrollMetrics3.visibleLength,
                velocity = _this$_scrollMetrics3.velocity;
              var itemCount = this.props.getItemCount(this.props.data);
              var hiPri = false;
              var onEndReachedThreshold = onEndReachedThresholdOrDefault(
                this.props.onEndReachedThreshold
              );
              var scrollingThreshold =
                (onEndReachedThreshold * visibleLength) / 2;

              if (first > 0) {
                var distTop =
                  offset - this.__getFrameMetricsApprox(first).offset;

                hiPri =
                  hiPri ||
                  distTop < 0 ||
                  (velocity < -2 && distTop < scrollingThreshold);
              }

              if (last < itemCount - 1) {
                var distBottom =
                  this.__getFrameMetricsApprox(last).offset -
                  (offset + visibleLength);
                hiPri =
                  hiPri ||
                  distBottom < 0 ||
                  (velocity > 2 && distBottom < scrollingThreshold);
              }

              if (
                hiPri &&
                (this._averageCellLength || this.props.getItemLayout) &&
                !this._hiPriInProgress
              ) {
                this._hiPriInProgress = true;

                this._updateCellsToRenderBatcher.dispose({
                  abort: true,
                });

                this._updateCellsToRender();

                return;
              } else {
                this._updateCellsToRenderBatcher.schedule();
              }
            },
          },
          {
            key: "_updateViewableItems",
            value: function _updateViewableItems(data) {
              var _this5 = this;

              var getItemCount = this.props.getItemCount;

              this._viewabilityTuples.forEach(function (tuple) {
                tuple.viewabilityHelper.onUpdate(
                  getItemCount(data),
                  _this5._scrollMetrics.offset,
                  _this5._scrollMetrics.visibleLength,
                  _this5._getFrameMetrics,
                  _this5._createViewToken,
                  tuple.onViewableItemsChanged,
                  _this5.state
                );
              });
            },
          },
        ],
        [
          {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(newProps, prevState) {
              var data = newProps.data,
                getItemCount = newProps.getItemCount;
              var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(
                newProps.maxToRenderPerBatch
              );
              return {
                first: Math.max(
                  0,
                  Math.min(
                    prevState.first,
                    getItemCount(data) - 1 - maxToRenderPerBatch
                  )
                ),
                last: Math.max(
                  0,
                  Math.min(prevState.last, getItemCount(data) - 1)
                ),
              };
            },
          },
        ]
      );
      return VirtualizedList;
    })(React.PureComponent);

    VirtualizedList.contextType =
      _VirtualizedListContext.VirtualizedListContext;

    var CellRenderer = (function (_React$Component) {
      (0, _inherits2.default)(CellRenderer, _React$Component);

      var _super2 = _createSuper(CellRenderer);

      function CellRenderer() {
        var _this6;

        (0, _classCallCheck2.default)(this, CellRenderer);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this6 = _super2.call.apply(_super2, [this].concat(args));
        _this6.state = {
          separatorProps: {
            highlighted: false,
            leadingItem: _this6.props.item,
          },
        };
        _this6._separators = {
          highlight: function highlight() {
            var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

            _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
              highlighted: true,
            });
          },
          unhighlight: function unhighlight() {
            var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

            _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
              highlighted: false,
            });
          },
          updateProps: function updateProps(select, newProps) {
            var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

            _this6.props.onUpdateSeparators(
              [select === "leading" ? prevCellKey : cellKey],
              newProps
            );
          },
        };

        _this6._onLayout = function (nativeEvent) {
          _this6.props.onCellLayout &&
            _this6.props.onCellLayout(
              nativeEvent,
              _this6.props.cellKey,
              _this6.props.index
            );
        };

        return _this6;
      }

      (0, _createClass2.default)(
        CellRenderer,
        [
          {
            key: "updateSeparatorProps",
            value: function updateSeparatorProps(newProps) {
              this.setState(function (state) {
                return {
                  separatorProps: Object.assign(
                    {},
                    state.separatorProps,
                    newProps
                  ),
                };
              });
            },
          },
          {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.props.onUnmount(this.props.cellKey);
            },
          },
          {
            key: "_renderElement",
            value: function _renderElement(
              renderItem,
              ListItemComponent,
              item,
              index
            ) {
              if (renderItem && ListItemComponent) {
                console.warn(
                  "VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem."
                );
              }

              if (ListItemComponent) {
                return React.createElement(ListItemComponent, {
                  item: item,
                  index: index,
                  separators: this._separators,
                });
              }

              if (renderItem) {
                return renderItem({
                  item: item,
                  index: index,
                  separators: this._separators,
                });
              }

              invariant(
                false,
                "VirtualizedList: Either ListItemComponent or renderItem props are required but none were found."
              );
            },
          },
          {
            key: "render",
            value: function render() {
              var _this$props12 = this.props,
                CellRendererComponent = _this$props12.CellRendererComponent,
                ItemSeparatorComponent = _this$props12.ItemSeparatorComponent,
                ListItemComponent = _this$props12.ListItemComponent,
                debug = _this$props12.debug,
                fillRateHelper = _this$props12.fillRateHelper,
                getItemLayout = _this$props12.getItemLayout,
                horizontal = _this$props12.horizontal,
                item = _this$props12.item,
                index = _this$props12.index,
                inversionStyle = _this$props12.inversionStyle,
                renderItem = _this$props12.renderItem;

              var element = this._renderElement(
                renderItem,
                ListItemComponent,
                item,
                index
              );

              var onLayout =
                (getItemLayout && !debug && !fillRateHelper.enabled()) ||
                !this.props.onCellLayout
                  ? undefined
                  : this._onLayout;
              var itemSeparator = React.isValidElement(ItemSeparatorComponent)
                ? ItemSeparatorComponent
                : ItemSeparatorComponent &&
                  (0, _jsxRuntime.jsx)(
                    ItemSeparatorComponent,
                    Object.assign({}, this.state.separatorProps)
                  );
              var cellStyle = inversionStyle
                ? horizontal
                  ? [styles.rowReverse, inversionStyle]
                  : [styles.columnReverse, inversionStyle]
                : horizontal
                ? [styles.row, inversionStyle]
                : inversionStyle;
              var result = !CellRendererComponent
                ? (0, _jsxRuntime.jsxs)(View, {
                    style: cellStyle,
                    onLayout: onLayout,
                    children: [element, itemSeparator],
                  })
                : (0, _jsxRuntime.jsxs)(
                    CellRendererComponent,
                    Object.assign({}, this.props, {
                      style: cellStyle,
                      onLayout: onLayout,
                      children: [element, itemSeparator],
                    })
                  );
              return (0, _jsxRuntime.jsx)(
                _VirtualizedListContext.VirtualizedListCellContextProvider,
                {
                  cellKey: this.props.cellKey,
                  children: result,
                }
              );
            },
          },
        ],
        [
          {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, prevState) {
              return {
                separatorProps: Object.assign({}, prevState.separatorProps, {
                  leadingItem: props.item,
                }),
              };
            },
          },
        ]
      );
      return CellRenderer;
    })(React.Component);

    function describeNestedLists(childList) {
      var trace =
        "VirtualizedList trace:\n" +
        ("  Child (" +
          (childList.horizontal ? "horizontal" : "vertical") +
          "):\n") +
        ("    listKey: " + childList.key + "\n") +
        ("    cellKey: " + childList.cellKey);
      var debugInfo = childList.parentDebugInfo;

      while (debugInfo) {
        trace +=
          "\n  Parent (" +
          (debugInfo.horizontal ? "horizontal" : "vertical") +
          "):\n" +
          ("    listKey: " + debugInfo.listKey + "\n") +
          ("    cellKey: " + debugInfo.cellKey);
        debugInfo = debugInfo.parent;
      }

      return trace;
    }

    var styles = StyleSheet.create({
      verticallyInverted: {
        transform: [
          {
            scaleY: -1,
          },
        ],
      },
      horizontallyInverted: {
        transform: [
          {
            scaleX: -1,
          },
        ],
      },
      row: {
        flexDirection: "row",
      },
      rowReverse: {
        flexDirection: "row-reverse",
      },
      columnReverse: {
        flexDirection: "column-reverse",
      },
      debug: {
        flex: 1,
      },
      debugOverlayBase: {
        position: "absolute",
        top: 0,
        right: 0,
      },
      debugOverlay: {
        bottom: 0,
        width: 20,
        borderColor: "blue",
        borderWidth: 1,
      },
      debugOverlayFrame: {
        left: 0,
        backgroundColor: "orange",
      },
      debugOverlayFrameLast: {
        left: 0,
        borderColor: "green",
        borderWidth: 2,
      },
      debugOverlayFrameVis: {
        left: 0,
        borderColor: "red",
        borderWidth: 2,
      },
    });
    module.exports = VirtualizedList;
  },
  242,
  [
    7, 239, 16, 17, 32, 28, 30, 33, 243, 240, 1, 179, 244, 247, 176, 263, 18,
    166, 175, 80, 264, 265, 4,
  ]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.VirtualizedListCellContextProvider =
      VirtualizedListCellContextProvider;
    exports.VirtualizedListContext = undefined;
    exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
    exports.VirtualizedListContextResetter = VirtualizedListContextResetter;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[1]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var VirtualizedListContext = React.createContext(null);
    exports.VirtualizedListContext = VirtualizedListContext;

    function VirtualizedListContextResetter(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
        value: null,
        children: children,
      });
    }

    function VirtualizedListContextProvider(_ref2) {
      var children = _ref2.children,
        value = _ref2.value;
      var context = (0, React.useMemo)(
        function () {
          return {
            cellKey: null,
            getScrollMetrics: value.getScrollMetrics,
            horizontal: value.horizontal,
            getOutermostParentListRef: value.getOutermostParentListRef,
            getNestedChildState: value.getNestedChildState,
            registerAsNestedChild: value.registerAsNestedChild,
            unregisterAsNestedChild: value.unregisterAsNestedChild,
            debugInfo: {
              cellKey: value.debugInfo.cellKey,
              horizontal: value.debugInfo.horizontal,
              listKey: value.debugInfo.listKey,
              parent: value.debugInfo.parent,
            },
          };
        },
        [
          value.getScrollMetrics,
          value.horizontal,
          value.getOutermostParentListRef,
          value.getNestedChildState,
          value.registerAsNestedChild,
          value.unregisterAsNestedChild,
          value.debugInfo.cellKey,
          value.debugInfo.horizontal,
          value.debugInfo.listKey,
          value.debugInfo.parent,
        ]
      );
      return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
        value: context,
        children: children,
      });
    }

    function VirtualizedListCellContextProvider(_ref3) {
      var cellKey = _ref3.cellKey,
        children = _ref3.children;
      var currContext = (0, React.useContext)(VirtualizedListContext);
      var context = (0, React.useMemo)(
        function () {
          return currContext == null
            ? null
            : Object.assign({}, currContext, {
                cellKey: cellKey,
              });
        },
        [currContext, cellKey]
      );
      return (0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
        value: context,
        children: children,
      });
    }
  },
  243,
  [1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _PullToRefreshViewNativeComponent = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);

    var _excluded = ["enabled", "colors", "progressBackgroundColor", "size"],
      _excluded2 = ["tintColor", "titleColor", "title"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Platform = _$$_REQUIRE(_dependencyMap[10]);

    var React = _$$_REQUIRE(_dependencyMap[11]);

    var RefreshControl = (function (_React$Component) {
      (0, _inherits2.default)(RefreshControl, _React$Component);

      var _super = _createSuper(RefreshControl);

      function RefreshControl() {
        var _this;

        (0, _classCallCheck2.default)(this, RefreshControl);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._lastNativeRefreshing = false;

        _this._onRefresh = function () {
          _this._lastNativeRefreshing = true;
          _this.props.onRefresh && _this.props.onRefresh();

          _this.forceUpdate();
        };

        _this._setNativeRef = function (ref) {
          _this._nativeRef = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(RefreshControl, [
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            this._lastNativeRefreshing = this.props.refreshing;
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.refreshing !== prevProps.refreshing) {
              this._lastNativeRefreshing = this.props.refreshing;
            } else if (
              this.props.refreshing !== this._lastNativeRefreshing &&
              this._nativeRef
            ) {
              {
                _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(
                  this._nativeRef,
                  this.props.refreshing
                );
              }
              this._lastNativeRefreshing = this.props.refreshing;
            }
          },
        },
        {
          key: "render",
          value: function render() {
            {
              var _this$props2 = this.props,
                tintColor = _this$props2.tintColor,
                titleColor = _this$props2.titleColor,
                title = _this$props2.title,
                _props = (0, _objectWithoutProperties2.default)(
                  _this$props2,
                  _excluded2
                );

              return (0, _jsxRuntime.jsx)(
                _AndroidSwipeRefreshLayoutNativeComponent.default,
                Object.assign({}, _props, {
                  ref: this._setNativeRef,
                  onRefresh: this._onRefresh,
                })
              );
            }
          },
        },
      ]);
      return RefreshControl;
    })(React.Component);

    module.exports = RefreshControl;
  },
  244,
  [7, 92, 16, 17, 28, 30, 33, 245, 246, 179, 54, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.Commands = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["setNativeRefreshing"],
    });
    exports.Commands = Commands;

    var _default = (0, _codegenNativeComponent.default)(
      "AndroidSwipeRefreshLayout"
    );

    exports.default = _default;
  },
  245,
  [7, 1, 123, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.Commands = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["setNativeRefreshing"],
    });
    exports.Commands = Commands;

    var _default = (0, _codegenNativeComponent.default)("PullToRefreshView", {
      paperComponentName: "RCTRefreshControl",
      excludedPlatforms: ["android"],
    });

    exports.default = _default;
  },
  246,
  [7, 1, 183, 123]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _assertThisInitialized2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _AnimatedImplementation = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

    var _ReactNative = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var _ScrollViewStickyHeader = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[13])
    );

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

    var _Keyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

    var _FrameRateLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[18])
    );

    var _TextInputState = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[19])
    );

    var _dismissKeyboard = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[20])
    );

    var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

    var _processDecelerationRate = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[23])
    );

    var _splitLayoutProps2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[24])
    );

    var _setAndForwardRef = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[25])
    );

    var _ScrollViewContext = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[26])
    );

    var _ScrollViewCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[27])
    );

    var _AndroidHorizontalScrollContentViewNativeComponent =
      _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

    var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[29])
    );

    var _ScrollContentViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[30])
    );

    var _ScrollViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[31])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[32]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    _$$_REQUIRE(_dependencyMap[12]);

    var _ref =
        _Platform.default.OS === "android"
          ? {
              NativeHorizontalScrollViewTuple: [
                _AndroidHorizontalScrollViewNativeComponent.default,
                _AndroidHorizontalScrollContentViewNativeComponent.default,
              ],
              NativeVerticalScrollViewTuple: [
                _ScrollViewNativeComponent.default,
                _View.default,
              ],
            }
          : {
              NativeHorizontalScrollViewTuple: [
                _ScrollViewNativeComponent.default,
                _ScrollContentViewNativeComponent.default,
              ],
              NativeVerticalScrollViewTuple: [
                _ScrollViewNativeComponent.default,
                _ScrollContentViewNativeComponent.default,
              ],
            },
      NativeHorizontalScrollViewTuple = _ref.NativeHorizontalScrollViewTuple,
      NativeVerticalScrollViewTuple = _ref.NativeVerticalScrollViewTuple;

    var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

    var ScrollView = (function (_React$Component) {
      (0, _inherits2.default)(ScrollView, _React$Component);

      var _super = _createSuper(ScrollView);

      function ScrollView(props) {
        var _this$props$contentOf,
          _this$props$contentOf2,
          _this$props$contentIn,
          _this$props$contentIn2;

        var _this;

        (0, _classCallCheck2.default)(this, ScrollView);
        _this = _super.call(this, props);
        _this._scrollAnimatedValueAttachment = null;
        _this._stickyHeaderRefs = new Map();
        _this._headerLayoutYs = new Map();
        _this._keyboardWillOpenTo = null;
        _this._additionalScrollOffset = 0;
        _this._isTouching = false;
        _this._lastMomentumScrollBeginTime = 0;
        _this._lastMomentumScrollEndTime = 0;
        _this._observedScrollSinceBecomingResponder = false;
        _this._becameResponderWhileAnimating = false;
        _this._preventNegativeScrollOffset = null;
        _this._animated = null;
        _this._subscriptionKeyboardWillShow = null;
        _this._subscriptionKeyboardWillHide = null;
        _this._subscriptionKeyboardDidShow = null;
        _this._subscriptionKeyboardDidHide = null;
        _this.state = {
          layoutHeight: null,
        };
        _this._setNativeRef = (0, _setAndForwardRef.default)({
          getForwardedRef: function getForwardedRef() {
            return _this.props.scrollViewRef;
          },
          setLocalRef: function setLocalRef(ref) {
            _this._scrollViewRef = ref;

            if (ref) {
              ref.getScrollResponder = _this.getScrollResponder;
              ref.getScrollableNode = _this.getScrollableNode;
              ref.getInnerViewNode = _this.getInnerViewNode;
              ref.getInnerViewRef = _this.getInnerViewRef;
              ref.getNativeScrollRef = _this.getNativeScrollRef;
              ref.scrollTo = _this.scrollTo;
              ref.scrollToEnd = _this.scrollToEnd;
              ref.flashScrollIndicators = _this.flashScrollIndicators;
              ref.scrollResponderZoomTo = _this.scrollResponderZoomTo;
              ref.scrollResponderScrollNativeHandleToKeyboard =
                _this.scrollResponderScrollNativeHandleToKeyboard;
            }
          },
        });

        _this.getScrollResponder = function () {
          return (0, _assertThisInitialized2.default)(_this);
        };

        _this.getScrollableNode = function () {
          return _ReactNative.default.findNodeHandle(_this._scrollViewRef);
        };

        _this.getInnerViewNode = function () {
          return _ReactNative.default.findNodeHandle(_this._innerViewRef);
        };

        _this.getInnerViewRef = function () {
          return _this._innerViewRef;
        };

        _this.getNativeScrollRef = function () {
          return _this._scrollViewRef;
        };

        _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
          var x, y, animated;

          if (typeof options === "number") {
            console.warn(
              "`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead."
            );
            y = options;
            x = deprecatedX;
            animated = deprecatedAnimated;
          } else if (options) {
            y = options.y;
            x = options.x;
            animated = options.animated;
          }

          if (_this._scrollViewRef == null) {
            return;
          }

          _ScrollViewCommands.default.scrollTo(
            _this._scrollViewRef,
            x || 0,
            y || 0,
            animated !== false
          );
        };

        _this.scrollToEnd = function (options) {
          var animated = (options && options.animated) !== false;

          if (_this._scrollViewRef == null) {
            return;
          }

          _ScrollViewCommands.default.scrollToEnd(
            _this._scrollViewRef,
            animated
          );
        };

        _this.flashScrollIndicators = function () {
          if (_this._scrollViewRef == null) {
            return;
          }

          _ScrollViewCommands.default.flashScrollIndicators(
            _this._scrollViewRef
          );
        };

        _this.scrollResponderScrollNativeHandleToKeyboard = function (
          nodeHandle,
          additionalOffset,
          preventNegativeScrollOffset
        ) {
          _this._additionalScrollOffset = additionalOffset || 0;
          _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;

          if (_this._innerViewRef == null) {
            return;
          }

          if (typeof nodeHandle === "number") {
            _UIManager.default.measureLayout(
              nodeHandle,
              _ReactNative.default.findNodeHandle(
                (0, _assertThisInitialized2.default)(_this)
              ),
              _this._textInputFocusError,
              _this._inputMeasureAndScrollToKeyboard
            );
          } else {
            nodeHandle.measureLayout(
              _this._innerViewRef,
              _this._inputMeasureAndScrollToKeyboard,
              _this._textInputFocusError
            );
          }
        };

        _this.scrollResponderZoomTo = function (rect, animated) {
          (0, _invariant.default)(
            _Platform.default.OS === "ios",
            "zoomToRect is not implemented"
          );

          if ("animated" in rect) {
            _this._animated = rect.animated;
            delete rect.animated;
          } else if (typeof animated !== "undefined") {
            console.warn(
              "`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead"
            );
          }

          if (_this._scrollViewRef == null) {
            return;
          }

          _ScrollViewCommands.default.zoomToRect(
            _this._scrollViewRef,
            rect,
            animated !== false
          );
        };

        _this._inputMeasureAndScrollToKeyboard = function (
          left,
          top,
          width,
          height
        ) {
          var keyboardScreenY = _Dimensions.default.get("window").height;

          var scrollTextInputIntoVisibleRect =
            function scrollTextInputIntoVisibleRect() {
              if (_this._keyboardWillOpenTo != null) {
                keyboardScreenY =
                  _this._keyboardWillOpenTo.endCoordinates.screenY;
              }

              var scrollOffsetY =
                top - keyboardScreenY + height + _this._additionalScrollOffset;

              if (_this._preventNegativeScrollOffset === true) {
                scrollOffsetY = Math.max(0, scrollOffsetY);
              }

              _this.scrollTo({
                x: 0,
                y: scrollOffsetY,
                animated: true,
              });

              _this._additionalScrollOffset = 0;
              _this._preventNegativeScrollOffset = false;
            };

          if (_this._keyboardWillOpenTo == null) {
            setTimeout(function () {
              scrollTextInputIntoVisibleRect();
            }, 0);
          } else {
            scrollTextInputIntoVisibleRect();
          }
        };

        _this._handleScroll = function (e) {
          _this._observedScrollSinceBecomingResponder = true;
          _this.props.onScroll && _this.props.onScroll(e);
        };

        _this._handleLayout = function (e) {
          if (_this.props.invertStickyHeaders === true) {
            _this.setState({
              layoutHeight: e.nativeEvent.layout.height,
            });
          }

          if (_this.props.onLayout) {
            _this.props.onLayout(e);
          }
        };

        _this._handleContentOnLayout = function (e) {
          var _e$nativeEvent$layout = e.nativeEvent.layout,
            width = _e$nativeEvent$layout.width,
            height = _e$nativeEvent$layout.height;
          _this.props.onContentSizeChange &&
            _this.props.onContentSizeChange(width, height);
        };

        _this._scrollViewRef = null;
        _this._innerViewRef = null;
        _this._setInnerViewRef = (0, _setAndForwardRef.default)({
          getForwardedRef: function getForwardedRef() {
            return _this.props.innerViewRef;
          },
          setLocalRef: function setLocalRef(ref) {
            _this._innerViewRef = ref;
          },
        });

        _this.scrollResponderKeyboardWillShow = function (e) {
          _this._keyboardWillOpenTo = e;
          _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
        };

        _this.scrollResponderKeyboardWillHide = function (e) {
          _this._keyboardWillOpenTo = null;
          _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
        };

        _this.scrollResponderKeyboardDidShow = function (e) {
          if (e) {
            _this._keyboardWillOpenTo = e;
          }

          _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
        };

        _this.scrollResponderKeyboardDidHide = function (e) {
          _this._keyboardWillOpenTo = null;
          _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
        };

        _this._handleMomentumScrollBegin = function (e) {
          _this._lastMomentumScrollBeginTime = global.performance.now();
          _this.props.onMomentumScrollBegin &&
            _this.props.onMomentumScrollBegin(e);
        };

        _this._handleMomentumScrollEnd = function (e) {
          _FrameRateLogger.default.endScroll();

          _this._lastMomentumScrollEndTime = global.performance.now();
          _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
        };

        _this._handleScrollBeginDrag = function (e) {
          _FrameRateLogger.default.beginScroll();

          if (
            _Platform.default.OS === "android" &&
            _this.props.keyboardDismissMode === "on-drag"
          ) {
            (0, _dismissKeyboard.default)();
          }

          _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
        };

        _this._handleScrollEndDrag = function (e) {
          var velocity = e.nativeEvent.velocity;

          if (
            !_this._isAnimating() &&
            (!velocity || (velocity.x === 0 && velocity.y === 0))
          ) {
            _FrameRateLogger.default.endScroll();
          }

          _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
        };

        _this._isAnimating = function () {
          var now = global.performance.now();
          var timeSinceLastMomentumScrollEnd =
            now - _this._lastMomentumScrollEndTime;
          var isAnimating =
            timeSinceLastMomentumScrollEnd <
              IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||
            _this._lastMomentumScrollEndTime <
              _this._lastMomentumScrollBeginTime;
          return isAnimating;
        };

        _this._handleResponderGrant = function (e) {
          _this._observedScrollSinceBecomingResponder = false;
          _this.props.onResponderGrant && _this.props.onResponderGrant(e);
          _this._becameResponderWhileAnimating = _this._isAnimating();
        };

        _this._handleResponderReject = function () {};

        _this._handleResponderRelease = function (e) {
          _this._isTouching = e.nativeEvent.touches.length !== 0;
          _this.props.onResponderRelease && _this.props.onResponderRelease(e);

          if (typeof e.target === "number") {
            return;
          }

          var currentlyFocusedTextInput =
            _TextInputState.default.currentlyFocusedInput();

          if (
            _this.props.keyboardShouldPersistTaps !== true &&
            _this.props.keyboardShouldPersistTaps !== "always" &&
            _this._keyboardIsDismissible() &&
            e.target !== currentlyFocusedTextInput &&
            !_this._observedScrollSinceBecomingResponder &&
            !_this._becameResponderWhileAnimating
          ) {
            _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
          }
        };

        _this._handleResponderTerminationRequest = function () {
          return !_this._observedScrollSinceBecomingResponder;
        };

        _this._handleScrollShouldSetResponder = function () {
          if (_this.props.disableScrollViewPanResponder === true) {
            return false;
          }

          return _this._isTouching;
        };

        _this._handleStartShouldSetResponder = function (e) {
          if (_this.props.disableScrollViewPanResponder === true) {
            return false;
          }

          var currentlyFocusedInput =
            _TextInputState.default.currentlyFocusedInput();

          if (
            _this.props.keyboardShouldPersistTaps === "handled" &&
            _this._keyboardIsDismissible() &&
            e.target !== currentlyFocusedInput
          ) {
            return true;
          }

          return false;
        };

        _this._handleStartShouldSetResponderCapture = function (e) {
          if (_this._isAnimating()) {
            return true;
          }

          if (_this.props.disableScrollViewPanResponder === true) {
            return false;
          }

          var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
          var keyboardNeverPersistTaps =
            !keyboardShouldPersistTaps || keyboardShouldPersistTaps === "never";

          if (typeof e.target === "number") {
            return false;
          }

          if (
            keyboardNeverPersistTaps &&
            _this._keyboardIsDismissible() &&
            e.target != null &&
            !_TextInputState.default.isTextInput(e.target)
          ) {
            return true;
          }

          return false;
        };

        _this._keyboardIsDismissible = function () {
          var currentlyFocusedInput =
            _TextInputState.default.currentlyFocusedInput();

          var hasFocusedTextInput =
            currentlyFocusedInput != null &&
            _TextInputState.default.isTextInput(currentlyFocusedInput);

          var softKeyboardMayBeOpen =
            _this._keyboardWillOpenTo != null ||
            _Platform.default.OS === "android";
          return hasFocusedTextInput && softKeyboardMayBeOpen;
        };

        _this._handleTouchEnd = function (e) {
          var nativeEvent = e.nativeEvent;
          _this._isTouching = nativeEvent.touches.length !== 0;
          _this.props.onTouchEnd && _this.props.onTouchEnd(e);
        };

        _this._handleTouchCancel = function (e) {
          _this._isTouching = false;
          _this.props.onTouchCancel && _this.props.onTouchCancel(e);
        };

        _this._handleTouchStart = function (e) {
          _this._isTouching = true;
          _this.props.onTouchStart && _this.props.onTouchStart(e);
        };

        _this._handleTouchMove = function (e) {
          _this.props.onTouchMove && _this.props.onTouchMove(e);
        };

        _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value(
          (_this$props$contentOf =
            (_this$props$contentOf2 = _this.props.contentOffset) == null
              ? undefined
              : _this$props$contentOf2.y) != null
            ? _this$props$contentOf
            : 0
        );

        _this._scrollAnimatedValue.setOffset(
          (_this$props$contentIn =
            (_this$props$contentIn2 = _this.props.contentInset) == null
              ? undefined
              : _this$props$contentIn2.top) != null
            ? _this$props$contentIn
            : 0
        );

        return _this;
      }

      (0, _createClass2.default)(ScrollView, [
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            if (typeof this.props.keyboardShouldPersistTaps === "boolean") {
              console.warn(
                "'keyboardShouldPersistTaps={" +
                  (this.props.keyboardShouldPersistTaps === true
                    ? "true"
                    : "false") +
                  "}' is deprecated. " +
                  ("Use 'keyboardShouldPersistTaps=\"" +
                    (this.props.keyboardShouldPersistTaps
                      ? "always"
                      : "never") +
                    "\"' instead")
              );
            }

            this._keyboardWillOpenTo = null;
            this._additionalScrollOffset = 0;
            this._subscriptionKeyboardWillShow = _Keyboard.default.addListener(
              "keyboardWillShow",
              this.scrollResponderKeyboardWillShow
            );
            this._subscriptionKeyboardWillHide = _Keyboard.default.addListener(
              "keyboardWillHide",
              this.scrollResponderKeyboardWillHide
            );
            this._subscriptionKeyboardDidShow = _Keyboard.default.addListener(
              "keyboardDidShow",
              this.scrollResponderKeyboardDidShow
            );
            this._subscriptionKeyboardDidHide = _Keyboard.default.addListener(
              "keyboardDidHide",
              this.scrollResponderKeyboardDidHide
            );

            this._updateAnimatedNodeAttachment();
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var prevContentInsetTop = prevProps.contentInset
              ? prevProps.contentInset.top
              : 0;
            var newContentInsetTop = this.props.contentInset
              ? this.props.contentInset.top
              : 0;

            if (prevContentInsetTop !== newContentInsetTop) {
              this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
            }

            this._updateAnimatedNodeAttachment();
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this._subscriptionKeyboardWillShow != null) {
              this._subscriptionKeyboardWillShow.remove();
            }

            if (this._subscriptionKeyboardWillHide != null) {
              this._subscriptionKeyboardWillHide.remove();
            }

            if (this._subscriptionKeyboardDidShow != null) {
              this._subscriptionKeyboardDidShow.remove();
            }

            if (this._subscriptionKeyboardDidHide != null) {
              this._subscriptionKeyboardDidHide.remove();
            }

            if (this._scrollAnimatedValueAttachment) {
              this._scrollAnimatedValueAttachment.detach();
            }
          },
        },
        {
          key: "_textInputFocusError",
          value: function _textInputFocusError() {
            console.warn("Error measuring text field.");
          },
        },
        {
          key: "_getKeyForIndex",
          value: function _getKeyForIndex(index, childArray) {
            var child = childArray[index];
            return child && child.key;
          },
        },
        {
          key: "_updateAnimatedNodeAttachment",
          value: function _updateAnimatedNodeAttachment() {
            if (this._scrollAnimatedValueAttachment) {
              this._scrollAnimatedValueAttachment.detach();
            }

            if (
              this.props.stickyHeaderIndices &&
              this.props.stickyHeaderIndices.length > 0
            ) {
              this._scrollAnimatedValueAttachment =
                _AnimatedImplementation.default.attachNativeEvent(
                  this._scrollViewRef,
                  "onScroll",
                  [
                    {
                      nativeEvent: {
                        contentOffset: {
                          y: this._scrollAnimatedValue,
                        },
                      },
                    },
                  ]
                );
            }
          },
        },
        {
          key: "_setStickyHeaderRef",
          value: function _setStickyHeaderRef(key, ref) {
            if (ref) {
              this._stickyHeaderRefs.set(key, ref);
            } else {
              this._stickyHeaderRefs.delete(key);
            }
          },
        },
        {
          key: "_onStickyHeaderLayout",
          value: function _onStickyHeaderLayout(index, event, key) {
            var stickyHeaderIndices = this.props.stickyHeaderIndices;

            if (!stickyHeaderIndices) {
              return;
            }

            var childArray = React.Children.toArray(this.props.children);

            if (key !== this._getKeyForIndex(index, childArray)) {
              return;
            }

            var layoutY = event.nativeEvent.layout.y;

            this._headerLayoutYs.set(key, layoutY);

            var indexOfIndex = stickyHeaderIndices.indexOf(index);
            var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];

            if (previousHeaderIndex != null) {
              var previousHeader = this._stickyHeaderRefs.get(
                this._getKeyForIndex(previousHeaderIndex, childArray)
              );

              previousHeader &&
                previousHeader.setNextHeaderY &&
                previousHeader.setNextHeaderY(layoutY);
            }
          },
        },
        {
          key: "render",
          value: function render() {
            var _this2 = this;

            var _ref2 =
                this.props.horizontal === true
                  ? NativeHorizontalScrollViewTuple
                  : NativeVerticalScrollViewTuple,
              _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
              NativeDirectionalScrollView = _ref3[0],
              NativeDirectionalScrollContentView = _ref3[1];

            var contentContainerStyle = [
              this.props.horizontal === true &&
                styles.contentContainerHorizontal,
              this.props.contentContainerStyle,
            ];
            var contentSizeChangeProps =
              this.props.onContentSizeChange == null
                ? null
                : {
                    onLayout: this._handleContentOnLayout,
                  };
            var stickyHeaderIndices = this.props.stickyHeaderIndices;
            var children = this.props.children;

            if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
              var childArray = React.Children.toArray(this.props.children);
              children = childArray.map(function (child, index) {
                var indexOfIndex = child
                  ? stickyHeaderIndices.indexOf(index)
                  : -1;

                if (indexOfIndex > -1) {
                  var key = child.key;
                  var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
                  var StickyHeaderComponent =
                    _this2.props.StickyHeaderComponent ||
                    _ScrollViewStickyHeader.default;
                  return (0, _jsxRuntime.jsx)(
                    StickyHeaderComponent,
                    {
                      nativeID: "StickyHeader-" + key,
                      ref: function ref(_ref4) {
                        return _this2._setStickyHeaderRef(key, _ref4);
                      },
                      nextHeaderLayoutY: _this2._headerLayoutYs.get(
                        _this2._getKeyForIndex(nextIndex, childArray)
                      ),
                      onLayout: function onLayout(event) {
                        return _this2._onStickyHeaderLayout(index, event, key);
                      },
                      scrollAnimatedValue: _this2._scrollAnimatedValue,
                      inverted: _this2.props.invertStickyHeaders,
                      hiddenOnScroll: _this2.props.stickyHeaderHiddenOnScroll,
                      scrollViewHeight: _this2.state.layoutHeight,
                      children: child,
                    },
                    key
                  );
                } else {
                  return child;
                }
              });
            }

            children = (0, _jsxRuntime.jsx)(
              _ScrollViewContext.default.Provider,
              {
                value:
                  this.props.horizontal === true
                    ? _ScrollViewContext.HORIZONTAL
                    : _ScrollViewContext.VERTICAL,
                children: children,
              }
            );
            var hasStickyHeaders =
              Array.isArray(stickyHeaderIndices) &&
              stickyHeaderIndices.length > 0;
            var contentContainer = (0, _jsxRuntime.jsx)(
              NativeDirectionalScrollContentView,
              Object.assign({}, contentSizeChangeProps, {
                ref: this._setInnerViewRef,
                style: contentContainerStyle,
                removeClippedSubviews:
                  _Platform.default.OS === "android" && hasStickyHeaders
                    ? false
                    : this.props.removeClippedSubviews,
                collapsable: false,
                children: children,
              })
            );
            var alwaysBounceHorizontal =
              this.props.alwaysBounceHorizontal !== undefined
                ? this.props.alwaysBounceHorizontal
                : this.props.horizontal;
            var alwaysBounceVertical =
              this.props.alwaysBounceVertical !== undefined
                ? this.props.alwaysBounceVertical
                : !this.props.horizontal;
            var baseStyle =
              this.props.horizontal === true
                ? styles.baseHorizontal
                : styles.baseVertical;
            var props = Object.assign({}, this.props, {
              alwaysBounceHorizontal: alwaysBounceHorizontal,
              alwaysBounceVertical: alwaysBounceVertical,
              style: _StyleSheet.default.compose(baseStyle, this.props.style),
              onContentSizeChange: null,
              onLayout: this._handleLayout,
              onMomentumScrollBegin: this._handleMomentumScrollBegin,
              onMomentumScrollEnd: this._handleMomentumScrollEnd,
              onResponderGrant: this._handleResponderGrant,
              onResponderReject: this._handleResponderReject,
              onResponderRelease: this._handleResponderRelease,
              onResponderTerminationRequest:
                this._handleResponderTerminationRequest,
              onScrollBeginDrag: this._handleScrollBeginDrag,
              onScrollEndDrag: this._handleScrollEndDrag,
              onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
              onStartShouldSetResponder: this._handleStartShouldSetResponder,
              onStartShouldSetResponderCapture:
                this._handleStartShouldSetResponderCapture,
              onTouchEnd: this._handleTouchEnd,
              onTouchMove: this._handleTouchMove,
              onTouchStart: this._handleTouchStart,
              onTouchCancel: this._handleTouchCancel,
              onScroll: this._handleScroll,
              scrollEventThrottle: hasStickyHeaders
                ? 1
                : this.props.scrollEventThrottle,
              sendMomentumEvents:
                this.props.onMomentumScrollBegin ||
                this.props.onMomentumScrollEnd
                  ? true
                  : false,
              snapToStart: this.props.snapToStart !== false,
              snapToEnd: this.props.snapToEnd !== false,
              pagingEnabled: _Platform.default.select({
                ios:
                  this.props.pagingEnabled === true &&
                  this.props.snapToInterval == null &&
                  this.props.snapToOffsets == null,
                android:
                  this.props.pagingEnabled === true ||
                  this.props.snapToInterval != null ||
                  this.props.snapToOffsets != null,
              }),
            });
            var decelerationRate = this.props.decelerationRate;

            if (decelerationRate != null) {
              props.decelerationRate = (0, _processDecelerationRate.default)(
                decelerationRate
              );
            }

            var refreshControl = this.props.refreshControl;

            if (refreshControl) {
              if (_Platform.default.OS === "ios") {
                return (0, _jsxRuntime.jsxs)(
                  NativeDirectionalScrollView,
                  Object.assign({}, props, {
                    ref: this._setNativeRef,
                    children: [refreshControl, contentContainer],
                  })
                );
              } else if (_Platform.default.OS === "android") {
                var _splitLayoutProps = (0, _splitLayoutProps2.default)(
                    (0, _flattenStyle.default)(props.style)
                  ),
                  outer = _splitLayoutProps.outer,
                  inner = _splitLayoutProps.inner;

                return React.cloneElement(
                  refreshControl,
                  {
                    style: _StyleSheet.default.compose(baseStyle, outer),
                  },
                  (0, _jsxRuntime.jsx)(
                    NativeDirectionalScrollView,
                    Object.assign({}, props, {
                      style: _StyleSheet.default.compose(baseStyle, inner),
                      ref: this._setNativeRef,
                      children: contentContainer,
                    })
                  )
                );
              }
            }

            return (0, _jsxRuntime.jsx)(
              NativeDirectionalScrollView,
              Object.assign({}, props, {
                ref: this._setNativeRef,
                children: contentContainer,
              })
            );
          },
        },
      ]);
      return ScrollView;
    })(React.Component);

    ScrollView.Context = _ScrollViewContext.default;

    var styles = _StyleSheet.default.create({
      baseVertical: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: "column",
        overflow: "scroll",
      },
      baseHorizontal: {
        flexGrow: 1,
        flexShrink: 1,
        flexDirection: "row",
        overflow: "scroll",
      },
      contentContainerHorizontal: {
        flexDirection: "row",
      },
    });

    function Wrapper(props, ref) {
      return (0, _jsxRuntime.jsx)(
        ScrollView,
        Object.assign({}, props, {
          scrollViewRef: ref,
        })
      );
    }

    Wrapper.displayName = "ScrollView";
    var ForwardedScrollView = React.forwardRef(Wrapper);
    ForwardedScrollView.Context = _ScrollViewContext.default;
    ForwardedScrollView.displayName = "ScrollView";
    module.exports = ForwardedScrollView;
  },
  247,
  [
    7, 44, 16, 17, 32, 28, 30, 33, 216, 153, 54, 1, 18, 248, 175, 176, 142, 249,
    253, 121, 251, 166, 4, 255, 256, 236, 257, 258, 259, 260, 261, 262, 179,
  ]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _AnimatedImplementation = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _AnimatedAddition = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _AnimatedDiffClamp = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[14]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AnimatedView = _AnimatedImplementation.default.createAnimatedComponent(
      _View.default
    );

    var ScrollViewStickyHeader = (function (_React$Component) {
      (0, _inherits2.default)(ScrollViewStickyHeader, _React$Component);

      var _super = _createSuper(ScrollViewStickyHeader);

      function ScrollViewStickyHeader() {
        var _this;

        (0, _classCallCheck2.default)(this, ScrollViewStickyHeader);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          measured: false,
          layoutY: 0,
          layoutHeight: 0,
          nextHeaderLayoutY: _this.props.nextHeaderLayoutY,
          translateY: null,
        };
        _this._translateY = null;
        _this._shouldRecreateTranslateY = true;
        _this._haveReceivedInitialZeroTranslateY = true;
        _this._debounceTimeout = _Platform.default.OS === "android" ? 15 : 64;

        _this.setNextHeaderY = function (y) {
          _this._shouldRecreateTranslateY = true;

          _this.setState({
            nextHeaderLayoutY: y,
          });
        };

        _this._onLayout = function (event) {
          var layoutY = event.nativeEvent.layout.y;
          var layoutHeight = event.nativeEvent.layout.height;
          var measured = true;

          if (
            layoutY !== _this.state.layoutY ||
            layoutHeight !== _this.state.layoutHeight ||
            measured !== _this.state.measured
          ) {
            _this._shouldRecreateTranslateY = true;
          }

          _this.setState({
            measured: measured,
            layoutY: layoutY,
            layoutHeight: layoutHeight,
          });

          _this.props.onLayout(event);

          var child = React.Children.only(_this.props.children);

          if (child.props.onCellLayout) {
            child.props.onCellLayout(
              event,
              child.props.cellKey,
              child.props.index
            );
          } else if (child.props.onLayout) {
            child.props.onLayout(event);
          }
        };

        _this._setComponentRef = function (ref) {
          _this._ref = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(ScrollViewStickyHeader, [
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (
              this._translateY != null &&
              this._animatedValueListenerId != null
            ) {
              this._translateY.removeListener(this._animatedValueListenerId);
            }

            if (this._timer) {
              clearTimeout(this._timer);
            }
          },
        },
        {
          key: "UNSAFE_componentWillReceiveProps",
          value: function UNSAFE_componentWillReceiveProps(nextProps) {
            if (
              nextProps.scrollViewHeight !== this.props.scrollViewHeight ||
              nextProps.scrollAnimatedValue !==
                this.props.scrollAnimatedValue ||
              nextProps.inverted !== this.props.inverted
            ) {
              this._shouldRecreateTranslateY = true;
            }
          },
        },
        {
          key: "updateTranslateListener",
          value: function updateTranslateListener(
            translateY,
            isFabric,
            offset
          ) {
            var _this2 = this;

            if (
              this._translateY != null &&
              this._animatedValueListenerId != null
            ) {
              this._translateY.removeListener(this._animatedValueListenerId);
            }

            offset
              ? (this._translateY = new _AnimatedAddition.default(
                  translateY,
                  offset
                ))
              : (this._translateY = translateY);
            this._shouldRecreateTranslateY = false;

            if (!isFabric) {
              return;
            }

            if (!this._animatedValueListener) {
              this._animatedValueListener = function (_ref) {
                var value = _ref.value;

                if (value === 0 && !_this2._haveReceivedInitialZeroTranslateY) {
                  _this2._haveReceivedInitialZeroTranslateY = true;
                  return;
                }

                if (_this2._timer) {
                  clearTimeout(_this2._timer);
                }

                _this2._timer = setTimeout(function () {
                  if (value !== _this2.state.translateY) {
                    _this2.setState({
                      translateY: value,
                    });
                  }
                }, _this2._debounceTimeout);
              };
            }

            if (this.state.translateY !== 0 && this.state.translateY != null) {
              this._haveReceivedInitialZeroTranslateY = false;
            }

            this._animatedValueListenerId = translateY.addListener(
              this._animatedValueListener
            );
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$_ref$_internalI, _this$_ref$_internalI2;

            var isFabric = !!(
              this._ref &&
              (_this$_ref$_internalI = this._ref["_internalInstanceHandle"]) !=
                null &&
              (_this$_ref$_internalI2 = _this$_ref$_internalI.stateNode) !=
                null &&
              _this$_ref$_internalI2.canonical
            );

            if (this._shouldRecreateTranslateY) {
              var _this$props = this.props,
                inverted = _this$props.inverted,
                scrollViewHeight = _this$props.scrollViewHeight;
              var _this$state = this.state,
                measured = _this$state.measured,
                layoutHeight = _this$state.layoutHeight,
                layoutY = _this$state.layoutY,
                nextHeaderLayoutY = _this$state.nextHeaderLayoutY;
              var inputRange = [-1, 0];
              var outputRange = [0, 0];

              if (measured) {
                if (inverted) {
                  if (scrollViewHeight != null) {
                    var stickStartPoint =
                      layoutY + layoutHeight - scrollViewHeight;

                    if (stickStartPoint > 0) {
                      inputRange.push(stickStartPoint);
                      outputRange.push(0);
                      inputRange.push(stickStartPoint + 1);
                      outputRange.push(1);
                      var collisionPoint =
                        (nextHeaderLayoutY || 0) -
                        layoutHeight -
                        scrollViewHeight;

                      if (collisionPoint > stickStartPoint) {
                        inputRange.push(collisionPoint, collisionPoint + 1);
                        outputRange.push(
                          collisionPoint - stickStartPoint,
                          collisionPoint - stickStartPoint
                        );
                      }
                    }
                  }
                } else {
                  inputRange.push(layoutY);
                  outputRange.push(0);

                  var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

                  if (_collisionPoint >= layoutY) {
                    inputRange.push(_collisionPoint, _collisionPoint + 1);
                    outputRange.push(
                      _collisionPoint - layoutY,
                      _collisionPoint - layoutY
                    );
                  } else {
                    inputRange.push(layoutY + 1);
                    outputRange.push(1);
                  }
                }
              }

              this.updateTranslateListener(
                this.props.scrollAnimatedValue.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange,
                }),
                isFabric,
                this.props.hiddenOnScroll
                  ? new _AnimatedDiffClamp.default(
                      this.props.scrollAnimatedValue
                        .interpolate({
                          extrapolateLeft: "clamp",
                          inputRange: [layoutY, layoutY + 1],
                          outputRange: [0, 1],
                        })
                        .interpolate({
                          inputRange: [0, 1],
                          outputRange: [0, -1],
                        }),
                      -this.state.layoutHeight,
                      0
                    )
                  : null
              );
            }

            var child = React.Children.only(this.props.children);
            var passthroughAnimatedPropExplicitValues =
              isFabric && this.state.translateY != null
                ? {
                    style: {
                      transform: [
                        {
                          translateY: this.state.translateY,
                        },
                      ],
                    },
                  }
                : null;
            return (0, _jsxRuntime.jsx)(AnimatedView, {
              collapsable: false,
              nativeID: this.props.nativeID,
              onLayout: this._onLayout,
              ref: this._setComponentRef,
              style: [
                child.props.style,
                styles.header,
                {
                  transform: [
                    {
                      translateY: this._translateY,
                    },
                  ],
                },
              ],
              passthroughAnimatedPropExplicitValues:
                passthroughAnimatedPropExplicitValues,
              children: React.cloneElement(child, {
                style: styles.fill,
                onLayout: undefined,
              }),
            });
          },
        },
      ]);
      return ScrollViewStickyHeader;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      header: {
        zIndex: 10,
        position: "relative",
      },
      fill: {
        flex: 1,
      },
    });

    module.exports = ScrollViewStickyHeader;
  },
  248,
  [7, 16, 17, 28, 30, 33, 216, 217, 218, 207, 1, 175, 176, 54, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _LayoutAnimation = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _dismissKeyboard = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _NativeKeyboardObserver = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var Keyboard = (function () {
      function Keyboard() {
        (0, _classCallCheck2.default)(this, Keyboard);
        this._emitter = new _NativeEventEmitter.default(
          _Platform.default.OS !== "ios"
            ? null
            : _NativeKeyboardObserver.default
        );
      }

      (0, _createClass2.default)(Keyboard, [
        {
          key: "addListener",
          value: function addListener(eventType, listener, context) {
            return this._emitter.addListener(eventType, listener);
          },
        },
        {
          key: "removeAllListeners",
          value: function removeAllListeners(eventType) {
            this._emitter.removeAllListeners(eventType);
          },
        },
        {
          key: "dismiss",
          value: function dismiss() {
            (0, _dismissKeyboard.default)();
          },
        },
        {
          key: "scheduleLayoutAnimation",
          value: function scheduleLayoutAnimation(event) {
            var duration = event.duration,
              easing = event.easing;

            if (duration != null && duration !== 0) {
              _LayoutAnimation.default.configureNext({
                duration: duration,
                update: {
                  duration: duration,
                  type:
                    (easing != null &&
                      _LayoutAnimation.default.Types[easing]) ||
                    "keyboard",
                },
              });
            }
          },
        },
      ]);
      return Keyboard;
    })();

    module.exports = new Keyboard();
  },
  249,
  [7, 16, 17, 82, 250, 251, 54, 252]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _ReactNativeFeatureFlags = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var UIManager = _$$_REQUIRE(_dependencyMap[3]);

    var isLayoutAnimationEnabled =
      _ReactNativeFeatureFlags.default.isLayoutAnimationEnabled();

    function setEnabled(value) {
      isLayoutAnimationEnabled = isLayoutAnimationEnabled;
    }

    function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
      var _config$duration, _global;

      if (_Platform.default.isTesting) {
        return;
      }

      if (!isLayoutAnimationEnabled) {
        return;
      }

      var animationCompletionHasRun = false;

      var onAnimationComplete = function onAnimationComplete() {
        if (animationCompletionHasRun) {
          return;
        }

        animationCompletionHasRun = true;
        clearTimeout(raceWithAnimationId);
        onAnimationDidEnd == null ? undefined : onAnimationDidEnd();
      };

      var raceWithAnimationId = setTimeout(
        onAnimationComplete,
        ((_config$duration = config.duration) != null ? _config$duration : 0) +
          17
      );
      var FabricUIManager =
        (_global = global) == null ? undefined : _global.nativeFabricUIManager;

      if (
        FabricUIManager != null &&
        FabricUIManager.configureNextLayoutAnimation
      ) {
        var _global2, _global2$nativeFabric;

        (_global2 = global) == null
          ? undefined
          : (_global2$nativeFabric = _global2.nativeFabricUIManager) == null
          ? undefined
          : _global2$nativeFabric.configureNextLayoutAnimation(
              config,
              onAnimationComplete,
              onAnimationDidFail != null ? onAnimationDidFail : function () {}
            );
        return;
      }

      if (UIManager != null && UIManager.configureNextLayoutAnimation) {
        UIManager.configureNextLayoutAnimation(
          config,
          onAnimationComplete != null ? onAnimationComplete : function () {},
          onAnimationDidFail != null ? onAnimationDidFail : function () {}
        );
      }
    }

    function create(duration, type, property) {
      return {
        duration: duration,
        create: {
          type: type,
          property: property,
        },
        update: {
          type: type,
        },
        delete: {
          type: type,
          property: property,
        },
      };
    }

    var Presets = {
      easeInEaseOut: create(300, "easeInEaseOut", "opacity"),
      linear: create(500, "linear", "opacity"),
      spring: {
        duration: 700,
        create: {
          type: "linear",
          property: "opacity",
        },
        update: {
          type: "spring",
          springDamping: 0.4,
        },
        delete: {
          type: "linear",
          property: "opacity",
        },
      },
    };
    var LayoutAnimation = {
      configureNext: configureNext,
      create: create,
      Types: Object.freeze({
        spring: "spring",
        linear: "linear",
        easeInEaseOut: "easeInEaseOut",
        easeIn: "easeIn",
        easeOut: "easeOut",
        keyboard: "keyboard",
      }),
      Properties: Object.freeze({
        opacity: "opacity",
        scaleX: "scaleX",
        scaleY: "scaleY",
        scaleXY: "scaleXY",
      }),
      checkConfig: function checkConfig() {
        console.error("LayoutAnimation.checkConfig(...) has been disabled.");
      },
      Presets: Presets,
      easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
      linear: configureNext.bind(null, Presets.linear),
      spring: configureNext.bind(null, Presets.spring),
      setEnabled: setEnabled,
    };
    module.exports = LayoutAnimation;
  },
  250,
  [7, 54, 197, 142]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var TextInputState = _$$_REQUIRE(_dependencyMap[0]);

    function dismissKeyboard() {
      TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
    }

    module.exports = dismissKeyboard;
  },
  251,
  [121]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("KeyboardObserver");

    exports.default = _default;
  },
  252,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeFrameRateLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var invariant = _$$_REQUIRE(_dependencyMap[2]);

    var FrameRateLogger = {
      setGlobalOptions: function setGlobalOptions(options) {
        if (options.debug !== undefined) {
          invariant(
            _NativeFrameRateLogger.default,
            "Trying to debug FrameRateLogger without the native module!"
          );
        }

        if (_NativeFrameRateLogger.default) {
          var optionsClone = {
            debug: !!options.debug,
            reportStackTraces: !!options.reportStackTraces,
          };

          _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
        }
      },
      setContext: function setContext(context) {
        _NativeFrameRateLogger.default &&
          _NativeFrameRateLogger.default.setContext(context);
      },
      beginScroll: function beginScroll() {
        _NativeFrameRateLogger.default &&
          _NativeFrameRateLogger.default.beginScroll();
      },
      endScroll: function endScroll() {
        _NativeFrameRateLogger.default &&
          _NativeFrameRateLogger.default.endScroll();
      },
    };
    module.exports = FrameRateLogger;
  },
  253,
  [7, 254, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("FrameRateLogger");

    exports.default = _default;
  },
  254,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    function processDecelerationRate(decelerationRate) {
      if (decelerationRate === "normal") {
        return _Platform.default.select({
          ios: 0.998,
          android: 0.985,
        });
      } else if (decelerationRate === "fast") {
        return _Platform.default.select({
          ios: 0.99,
          android: 0.9,
        });
      }

      return decelerationRate;
    }

    module.exports = processDecelerationRate;
  },
  255,
  [7, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = splitLayoutProps;

    function splitLayoutProps(props) {
      var outer = null;
      var inner = null;

      if (props != null) {
        outer = {};
        inner = {};

        for (var prop of Object.keys(props)) {
          switch (prop) {
            case "margin":
            case "marginHorizontal":
            case "marginVertical":
            case "marginBottom":
            case "marginTop":
            case "marginLeft":
            case "marginRight":
            case "flex":
            case "flexGrow":
            case "flexShrink":
            case "flexBasis":
            case "alignSelf":
            case "height":
            case "minHeight":
            case "maxHeight":
            case "width":
            case "minWidth":
            case "maxWidth":
            case "position":
            case "left":
            case "right":
            case "bottom":
            case "top":
            case "transform":
              outer[prop] = props[prop];
              break;

            default:
              inner[prop] = props[prop];
              break;
          }
        }
      }

      return {
        outer: outer,
        inner: inner,
      };
    }
  },
  256,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.VERTICAL = exports.HORIZONTAL = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var ScrollViewContext = React.createContext(null);
    var _default = ScrollViewContext;
    exports.default = _default;
    var HORIZONTAL = Object.freeze({
      horizontal: true,
    });
    exports.HORIZONTAL = HORIZONTAL;
    var VERTICAL = Object.freeze({
      horizontal: false,
    });
    exports.VERTICAL = VERTICAL;
  },
  257,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = (0, _codegenNativeCommands.default)({
      supportedCommands: [
        "flashScrollIndicators",
        "scrollTo",
        "scrollToEnd",
        "zoomToRect",
      ],
    });

    exports.default = _default;
  },
  258,
  [7, 123, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)(
      "AndroidHorizontalScrollContentView"
    );

    exports.default = _default;
  },
  259,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG = {
      uiViewClassName: "AndroidHorizontalScrollView",
      bubblingEventTypes: {},
      directEventTypes: {},
      validAttributes: {
        decelerationRate: true,
        disableIntervalMomentum: true,
        endFillColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        fadingEdgeLength: true,
        nestedScrollEnabled: true,
        overScrollMode: true,
        pagingEnabled: true,
        persistentScrollbar: true,
        scrollEnabled: true,
        scrollPerfTag: true,
        sendMomentumEvents: true,
        showsHorizontalScrollIndicator: true,
        snapToAlignment: true,
        snapToEnd: true,
        snapToInterval: true,
        snapToStart: true,
        snapToOffsets: true,
        contentOffset: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true,
        borderRadius: true,
        borderStyle: true,
        borderRightColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        borderColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        borderBottomColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        borderTopLeftRadius: true,
        borderTopColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        removeClippedSubviews: true,
        borderTopRightRadius: true,
        borderLeftColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        pointerEvents: true,
      },
    };
    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var AndroidHorizontalScrollViewNativeComponent =
      NativeComponentRegistry.get("AndroidHorizontalScrollView", function () {
        return __INTERNAL_VIEW_CONFIG;
      });
    var _default = AndroidHorizontalScrollViewNativeComponent;
    exports.default = _default;
  },
  260,
  [128, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG = {
      uiViewClassName: "RCTScrollContentView",
      bubblingEventTypes: {},
      directEventTypes: {},
      validAttributes: {},
    };
    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var ScrollContentViewNativeComponent = NativeComponentRegistry.get(
      "RCTScrollContentView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = ScrollContentViewNativeComponent;
    exports.default = _default;
  },
  261,
  [128]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ViewConfigIgnore = _$$_REQUIRE(_dependencyMap[2]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG =
      _Platform.default.OS === "android"
        ? {
            uiViewClassName: "RCTScrollView",
            bubblingEventTypes: {},
            directEventTypes: {
              topMomentumScrollBegin: {
                registrationName: "onMomentumScrollBegin",
              },
              topMomentumScrollEnd: {
                registrationName: "onMomentumScrollEnd",
              },
              topScroll: {
                registrationName: "onScroll",
              },
              topScrollBeginDrag: {
                registrationName: "onScrollBeginDrag",
              },
              topScrollEndDrag: {
                registrationName: "onScrollEndDrag",
              },
            },
            validAttributes: {
              contentOffset: {
                diff: _$$_REQUIRE(_dependencyMap[4]),
              },
              decelerationRate: true,
              disableIntervalMomentum: true,
              pagingEnabled: true,
              scrollEnabled: true,
              showsVerticalScrollIndicator: true,
              snapToAlignment: true,
              snapToEnd: true,
              snapToInterval: true,
              snapToOffsets: true,
              snapToStart: true,
              borderBottomLeftRadius: true,
              borderBottomRightRadius: true,
              sendMomentumEvents: true,
              borderRadius: true,
              nestedScrollEnabled: true,
              borderStyle: true,
              borderRightColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              borderBottomColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              persistentScrollbar: true,
              endFillColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              fadingEdgeLength: true,
              overScrollMode: true,
              borderTopLeftRadius: true,
              scrollPerfTag: true,
              borderTopColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              removeClippedSubviews: true,
              borderTopRightRadius: true,
              borderLeftColor: {
                process: _$$_REQUIRE(_dependencyMap[5]),
              },
              pointerEvents: true,
            },
          }
        : {
            uiViewClassName: "RCTScrollView",
            bubblingEventTypes: {},
            directEventTypes: {
              topMomentumScrollBegin: {
                registrationName: "onMomentumScrollBegin",
              },
              topMomentumScrollEnd: {
                registrationName: "onMomentumScrollEnd",
              },
              topScroll: {
                registrationName: "onScroll",
              },
              topScrollBeginDrag: {
                registrationName: "onScrollBeginDrag",
              },
              topScrollEndDrag: {
                registrationName: "onScrollEndDrag",
              },
              topScrollToTop: {
                registrationName: "onScrollToTop",
              },
            },
            validAttributes: Object.assign(
              {
                alwaysBounceHorizontal: true,
                alwaysBounceVertical: true,
                automaticallyAdjustContentInsets: true,
                automaticallyAdjustKeyboardInsets: true,
                automaticallyAdjustsScrollIndicatorInsets: true,
                bounces: true,
                bouncesZoom: true,
                canCancelContentTouches: true,
                centerContent: true,
                contentInset: {
                  diff: _$$_REQUIRE(_dependencyMap[6]),
                },
                contentOffset: {
                  diff: _$$_REQUIRE(_dependencyMap[4]),
                },
                contentInsetAdjustmentBehavior: true,
                decelerationRate: true,
                directionalLockEnabled: true,
                disableIntervalMomentum: true,
                indicatorStyle: true,
                inverted: true,
                keyboardDismissMode: true,
                maintainVisibleContentPosition: true,
                maximumZoomScale: true,
                minimumZoomScale: true,
                pagingEnabled: true,
                pinchGestureEnabled: true,
                scrollEnabled: true,
                scrollEventThrottle: true,
                scrollIndicatorInsets: {
                  diff: _$$_REQUIRE(_dependencyMap[6]),
                },
                scrollToOverflowEnabled: true,
                scrollsToTop: true,
                showsHorizontalScrollIndicator: true,
                showsVerticalScrollIndicator: true,
                snapToAlignment: true,
                snapToEnd: true,
                snapToInterval: true,
                snapToOffsets: true,
                snapToStart: true,
                zoomScale: true,
              },
              (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
                onScrollBeginDrag: true,
                onMomentumScrollEnd: true,
                onScrollEndDrag: true,
                onMomentumScrollBegin: true,
                onScrollToTop: true,
                onScroll: true,
              })
            ),
          };

    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var ScrollViewNativeComponent = NativeComponentRegistry.get(
      "RCTScrollView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = ScrollViewNativeComponent;
    exports.default = _default;
  },
  262,
  [7, 128, 130, 54, 161, 135, 159]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var InteractionManager = _$$_REQUIRE(_dependencyMap[2]);

    var Batchinator = (function () {
      function Batchinator(callback, delayMS) {
        _classCallCheck(this, Batchinator);

        this._delay = delayMS;
        this._callback = callback;
      }

      _createClass(Batchinator, [
        {
          key: "dispose",
          value: function dispose() {
            var options =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {
                    abort: false,
                  };

            if (this._taskHandle) {
              this._taskHandle.cancel();

              if (!options.abort) {
                this._callback();
              }

              this._taskHandle = null;
            }
          },
        },
        {
          key: "schedule",
          value: function schedule() {
            var _this = this;

            if (this._taskHandle) {
              return;
            }

            var timeoutHandle = setTimeout(function () {
              _this._taskHandle = InteractionManager.runAfterInteractions(
                function () {
                  _this._taskHandle = null;

                  _this._callback();
                }
              );
            }, this._delay);
            this._taskHandle = {
              cancel: function cancel() {
                return clearTimeout(timeoutHandle);
              },
            };
          },
        },
      ]);

      return Batchinator;
    })();

    module.exports = Batchinator;
  },
  263,
  [16, 17, 212]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _createClass = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var Info = _createClass(function Info() {
      _classCallCheck(this, Info);

      this.any_blank_count = 0;
      this.any_blank_ms = 0;
      this.any_blank_speed_sum = 0;
      this.mostly_blank_count = 0;
      this.mostly_blank_ms = 0;
      this.pixels_blank = 0;
      this.pixels_sampled = 0;
      this.pixels_scrolled = 0;
      this.total_time_spent = 0;
      this.sample_count = 0;
    });

    var DEBUG = false;
    var _listeners = [];
    var _minSampleCount = 10;
    var _sampleRate = null;

    var FillRateHelper = (function () {
      function FillRateHelper(getFrameMetrics) {
        _classCallCheck(this, FillRateHelper);

        this._anyBlankStartTime = null;
        this._enabled = false;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
        this._getFrameMetrics = getFrameMetrics;
        this._enabled = (_sampleRate || 0) > Math.random();

        this._resetData();
      }

      _createClass(
        FillRateHelper,
        [
          {
            key: "activate",
            value: function activate() {
              if (this._enabled && this._samplesStartTime == null) {
                DEBUG;
                this._samplesStartTime = global.performance.now();
              }
            },
          },
          {
            key: "deactivateAndFlush",
            value: function deactivateAndFlush() {
              if (!this._enabled) {
                return;
              }

              var start = this._samplesStartTime;

              if (start == null) {
                DEBUG;
                return;
              }

              if (this._info.sample_count < _minSampleCount) {
                this._resetData();

                return;
              }

              var total_time_spent = global.performance.now() - start;
              var info = Object.assign({}, this._info, {
                total_time_spent: total_time_spent,
              });

              _listeners.forEach(function (listener) {
                return listener(info);
              });

              this._resetData();
            },
          },
          {
            key: "computeBlankness",
            value: function computeBlankness(props, state, scrollMetrics) {
              if (
                !this._enabled ||
                props.getItemCount(props.data) === 0 ||
                this._samplesStartTime == null
              ) {
                return 0;
              }

              var dOffset = scrollMetrics.dOffset,
                offset = scrollMetrics.offset,
                velocity = scrollMetrics.velocity,
                visibleLength = scrollMetrics.visibleLength;
              this._info.sample_count++;
              this._info.pixels_sampled += Math.round(visibleLength);
              this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
              var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
              var now = global.performance.now();

              if (this._anyBlankStartTime != null) {
                this._info.any_blank_ms += now - this._anyBlankStartTime;
              }

              this._anyBlankStartTime = null;

              if (this._mostlyBlankStartTime != null) {
                this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
              }

              this._mostlyBlankStartTime = null;
              var blankTop = 0;
              var first = state.first;

              var firstFrame = this._getFrameMetrics(first);

              while (
                first <= state.last &&
                (!firstFrame || !firstFrame.inLayout)
              ) {
                firstFrame = this._getFrameMetrics(first);
                first++;
              }

              if (firstFrame && first > 0) {
                blankTop = Math.min(
                  visibleLength,
                  Math.max(0, firstFrame.offset - offset)
                );
              }

              var blankBottom = 0;
              var last = state.last;

              var lastFrame = this._getFrameMetrics(last);

              while (
                last >= state.first &&
                (!lastFrame || !lastFrame.inLayout)
              ) {
                lastFrame = this._getFrameMetrics(last);
                last--;
              }

              if (lastFrame && last < props.getItemCount(props.data) - 1) {
                var bottomEdge = lastFrame.offset + lastFrame.length;
                blankBottom = Math.min(
                  visibleLength,
                  Math.max(0, offset + visibleLength - bottomEdge)
                );
              }

              var pixels_blank = Math.round(blankTop + blankBottom);
              var blankness = pixels_blank / visibleLength;

              if (blankness > 0) {
                this._anyBlankStartTime = now;
                this._info.any_blank_speed_sum += scrollSpeed;
                this._info.any_blank_count++;
                this._info.pixels_blank += pixels_blank;

                if (blankness > 0.5) {
                  this._mostlyBlankStartTime = now;
                  this._info.mostly_blank_count++;
                }
              } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
                this.deactivateAndFlush();
              }

              return blankness;
            },
          },
          {
            key: "enabled",
            value: function enabled() {
              return this._enabled;
            },
          },
          {
            key: "_resetData",
            value: function _resetData() {
              this._anyBlankStartTime = null;
              this._info = new Info();
              this._mostlyBlankStartTime = null;
              this._samplesStartTime = null;
            },
          },
        ],
        [
          {
            key: "addListener",
            value: function addListener(callback) {
              if (_sampleRate === null) {
                console.warn(
                  "Call `FillRateHelper.setSampleRate` before `addListener`."
                );
              }

              _listeners.push(callback);

              return {
                remove: function remove() {
                  _listeners = _listeners.filter(function (listener) {
                    return callback !== listener;
                  });
                },
              };
            },
          },
          {
            key: "setSampleRate",
            value: function setSampleRate(sampleRate) {
              _sampleRate = sampleRate;
            },
          },
          {
            key: "setMinSampleCount",
            value: function setMinSampleCount(minSampleCount) {
              _minSampleCount = minSampleCount;
            },
          },
        ]
      );

      return FillRateHelper;
    })();

    module.exports = FillRateHelper;
  },
  264,
  [17, 16]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

    var _createClass = _$$_REQUIRE(_dependencyMap[2]);

    var invariant = _$$_REQUIRE(_dependencyMap[3]);

    var ViewabilityHelper = (function () {
      function ViewabilityHelper() {
        var config =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {
                viewAreaCoveragePercentThreshold: 0,
              };

        _classCallCheck(this, ViewabilityHelper);

        this._hasInteracted = false;
        this._timers = new Set();
        this._viewableIndices = [];
        this._viewableItems = new Map();
        this._config = config;
      }

      _createClass(ViewabilityHelper, [
        {
          key: "dispose",
          value: function dispose() {
            this._timers.forEach(clearTimeout);
          },
        },
        {
          key: "computeViewableItems",
          value: function computeViewableItems(
            itemCount,
            scrollOffset,
            viewportHeight,
            getFrameMetrics,
            renderRange
          ) {
            var _this$_config = this._config,
              itemVisiblePercentThreshold =
                _this$_config.itemVisiblePercentThreshold,
              viewAreaCoveragePercentThreshold =
                _this$_config.viewAreaCoveragePercentThreshold;
            var viewAreaMode = viewAreaCoveragePercentThreshold != null;
            var viewablePercentThreshold = viewAreaMode
              ? viewAreaCoveragePercentThreshold
              : itemVisiblePercentThreshold;
            invariant(
              viewablePercentThreshold != null &&
                (itemVisiblePercentThreshold != null) !==
                  (viewAreaCoveragePercentThreshold != null),
              "Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold"
            );
            var viewableIndices = [];

            if (itemCount === 0) {
              return viewableIndices;
            }

            var firstVisible = -1;

            var _ref = renderRange || {
                first: 0,
                last: itemCount - 1,
              },
              first = _ref.first,
              last = _ref.last;

            if (last >= itemCount) {
              console.warn(
                "Invalid render range computing viewability " +
                  JSON.stringify({
                    renderRange: renderRange,
                    itemCount: itemCount,
                  })
              );
              return [];
            }

            for (var idx = first; idx <= last; idx++) {
              var metrics = getFrameMetrics(idx);

              if (!metrics) {
                continue;
              }

              var top = metrics.offset - scrollOffset;
              var bottom = top + metrics.length;

              if (top < viewportHeight && bottom > 0) {
                firstVisible = idx;

                if (
                  _isViewable(
                    viewAreaMode,
                    viewablePercentThreshold,
                    top,
                    bottom,
                    viewportHeight,
                    metrics.length
                  )
                ) {
                  viewableIndices.push(idx);
                }
              } else if (firstVisible >= 0) {
                break;
              }
            }

            return viewableIndices;
          },
        },
        {
          key: "onUpdate",
          value: function onUpdate(
            itemCount,
            scrollOffset,
            viewportHeight,
            getFrameMetrics,
            createViewToken,
            onViewableItemsChanged,
            renderRange
          ) {
            var _this = this;

            if (
              (this._config.waitForInteraction && !this._hasInteracted) ||
              itemCount === 0 ||
              !getFrameMetrics(0)
            ) {
              return;
            }

            var viewableIndices = [];

            if (itemCount) {
              viewableIndices = this.computeViewableItems(
                itemCount,
                scrollOffset,
                viewportHeight,
                getFrameMetrics,
                renderRange
              );
            }

            if (
              this._viewableIndices.length === viewableIndices.length &&
              this._viewableIndices.every(function (v, ii) {
                return v === viewableIndices[ii];
              })
            ) {
              return;
            }

            this._viewableIndices = viewableIndices;

            if (this._config.minimumViewTime) {
              var handle = setTimeout(function () {
                _this._timers.delete(handle);

                _this._onUpdateSync(
                  viewableIndices,
                  onViewableItemsChanged,
                  createViewToken
                );
              }, this._config.minimumViewTime);

              this._timers.add(handle);
            } else {
              this._onUpdateSync(
                viewableIndices,
                onViewableItemsChanged,
                createViewToken
              );
            }
          },
        },
        {
          key: "resetViewableIndices",
          value: function resetViewableIndices() {
            this._viewableIndices = [];
          },
        },
        {
          key: "recordInteraction",
          value: function recordInteraction() {
            this._hasInteracted = true;
          },
        },
        {
          key: "_onUpdateSync",
          value: function _onUpdateSync(
            viewableIndicesToCheck,
            onViewableItemsChanged,
            createViewToken
          ) {
            var _this2 = this;

            viewableIndicesToCheck = viewableIndicesToCheck.filter(function (
              ii
            ) {
              return _this2._viewableIndices.includes(ii);
            });
            var prevItems = this._viewableItems;
            var nextItems = new Map(
              viewableIndicesToCheck.map(function (ii) {
                var viewable = createViewToken(ii, true);
                return [viewable.key, viewable];
              })
            );
            var changed = [];

            for (var _ref2 of nextItems) {
              var _ref3 = _slicedToArray(_ref2, 2);

              var key = _ref3[0];
              var viewable = _ref3[1];

              if (!prevItems.has(key)) {
                changed.push(viewable);
              }
            }

            for (var _ref4 of prevItems) {
              var _ref5 = _slicedToArray(_ref4, 2);

              var _key = _ref5[0];
              var _viewable = _ref5[1];

              if (!nextItems.has(_key)) {
                changed.push(
                  Object.assign({}, _viewable, {
                    isViewable: false,
                  })
                );
              }
            }

            if (changed.length > 0) {
              this._viewableItems = nextItems;
              onViewableItemsChanged({
                viewableItems: Array.from(nextItems.values()),
                changed: changed,
                viewabilityConfig: this._config,
              });
            }
          },
        },
      ]);

      return ViewabilityHelper;
    })();

    function _isViewable(
      viewAreaMode,
      viewablePercentThreshold,
      top,
      bottom,
      viewportHeight,
      itemLength
    ) {
      if (_isEntirelyVisible(top, bottom, viewportHeight)) {
        return true;
      } else {
        var pixels = _getPixelsVisible(top, bottom, viewportHeight);

        var percent =
          100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
        return percent >= viewablePercentThreshold;
      }
    }

    function _getPixelsVisible(top, bottom, viewportHeight) {
      var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
      return Math.max(0, visibleHeight);
    }

    function _isEntirelyVisible(top, bottom, viewportHeight) {
      return top >= 0 && bottom <= viewportHeight && bottom > top;
    }

    module.exports = ViewabilityHelper;
  },
  265,
  [44, 16, 17, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Image = _$$_REQUIRE(_dependencyMap[1]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[2]);

    module.exports = createAnimatedComponent(Image);
  },
  266,
  [1, 267, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ImageViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _ImageInjection = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _ImageAnalyticsTagContext = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _resolveAssetSource = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _NativeImageLoaderAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[10])
    );

    var _TextInlineImageNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _requestId = 1;

    function generateRequestId() {
      return _requestId++;
    }

    function getSize(url, success, failure) {
      return _NativeImageLoaderAndroid.default
        .getSize(url)
        .then(function (sizes) {
          success(sizes.width, sizes.height);
        })
        .catch(
          failure ||
            function () {
              console.warn("Failed to get size for image: " + url);
            }
        );
    }

    function getSizeWithHeaders(url, headers, success, failure) {
      return _NativeImageLoaderAndroid.default
        .getSizeWithHeaders(url, headers)
        .then(function (sizes) {
          success(sizes.width, sizes.height);
        })
        .catch(
          failure ||
            function () {
              console.warn("Failed to get size for image: " + url);
            }
        );
    }

    function prefetchWithMetadata(url, queryRootName, rootTag, callback) {
      prefetch(url, callback);
    }

    function prefetch(url, callback) {
      var requestId = generateRequestId();
      callback && callback(requestId);
      return _NativeImageLoaderAndroid.default.prefetchImage(url, requestId);
    }

    function abortPrefetch(requestId) {
      _NativeImageLoaderAndroid.default.abortRequest(requestId);
    }

    function queryCache(_x) {
      return _queryCache.apply(this, arguments);
    }

    function _queryCache() {
      _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
        return yield _NativeImageLoaderAndroid.default.queryCache(urls);
      });
      return _queryCache.apply(this, arguments);
    }

    var BaseImage = function BaseImage(props, forwardedRef) {
      var _source, _source3;

      var source = (0, _resolveAssetSource.default)(props.source);
      var defaultSource = (0, _resolveAssetSource.default)(props.defaultSource);
      var loadingIndicatorSource = (0, _resolveAssetSource.default)(
        props.loadingIndicatorSource
      );

      if (source) {
        var uri = source.uri;

        if (uri === "") {
          console.warn("source.uri should not be an empty string");
        }
      }

      if (props.src) {
        console.warn(
          "The <Image> component requires a `source` property rather than `src`."
        );
      }

      if (props.children) {
        throw new Error(
          "The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning."
        );
      }

      if (props.defaultSource && props.loadingIndicatorSource) {
        throw new Error(
          "The <Image> component cannot have defaultSource and loadingIndicatorSource at the same time. Please use either defaultSource or loadingIndicatorSource."
        );
      }

      if (source && !source.uri && !Array.isArray(source)) {
        source = null;
      }

      var style;
      var sources;

      if (((_source = source) == null ? undefined : _source.uri) != null) {
        var _source2 = source,
          _width = _source2.width,
          _height = _source2.height;
        style = (0, _flattenStyle.default)([
          {
            width: _width,
            height: _height,
          },
          styles.base,
          props.style,
        ]);
        sources = [
          {
            uri: source.uri,
          },
        ];
      } else {
        style = (0, _flattenStyle.default)([styles.base, props.style]);
        sources = source;
      }

      var onLoadStart = props.onLoadStart,
        onLoad = props.onLoad,
        onLoadEnd = props.onLoadEnd,
        onError = props.onError;
      var nativeProps = Object.assign({}, props, {
        style: style,
        shouldNotifyLoadEvents: !!(
          onLoadStart ||
          onLoad ||
          onLoadEnd ||
          onError
        ),
        src: sources,
        headers: (_source3 = source) == null ? undefined : _source3.headers,
        defaultSrc: defaultSource ? defaultSource.uri : null,
        loadingIndicatorSrc: loadingIndicatorSource
          ? loadingIndicatorSource.uri
          : null,
        ref: forwardedRef,
      });
      return (0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
        children: function children(analyticTag) {
          var nativePropsWithAnalytics =
            analyticTag !== null
              ? Object.assign({}, nativeProps, {
                  internal_analyticTag: analyticTag,
                })
              : nativeProps;
          return (0, _jsxRuntime.jsx)(_TextAncestor.default.Consumer, {
            children: function children(hasTextAncestor) {
              if (hasTextAncestor) {
                var src = Array.isArray(sources) ? sources : [sources];
                return (0, _jsxRuntime.jsx)(
                  _TextInlineImageNativeComponent.default,
                  {
                    style: style,
                    resizeMode: props.resizeMode,
                    headers: nativeProps.headers,
                    src: src,
                    ref: forwardedRef,
                  }
                );
              }

              return (0, _jsxRuntime.jsx)(
                _ImageViewNativeComponent.default,
                Object.assign({}, nativePropsWithAnalytics)
              );
            },
          });
        },
      });
    };

    var Image = React.forwardRef(BaseImage);

    if (_ImageInjection.default.unstable_createImageComponent != null) {
      Image = _ImageInjection.default.unstable_createImageComponent(Image);
    }

    Image.displayName = "Image";
    Image.getSize = getSize;
    Image.getSizeWithHeaders = getSizeWithHeaders;
    Image.prefetch = prefetch;
    Image.prefetchWithMetadata = prefetchWithMetadata;
    Image.abortPrefetch = abortPrefetch;
    Image.queryCache = queryCache;
    Image.resolveAssetSource = _resolveAssetSource.default;

    var styles = _StyleSheet.default.create({
      base: {
        overflow: "hidden",
      },
    });

    module.exports = Image;
  },
  267,
  [7, 268, 269, 1, 175, 178, 270, 272, 166, 149, 273, 271, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
          args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(
              gen,
              resolve,
              reject,
              _next,
              _throw,
              "next",
              value
            );
          }

          function _throw(err) {
            asyncGeneratorStep(
              gen,
              resolve,
              reject,
              _next,
              _throw,
              "throw",
              err
            );
          }

          _next(undefined);
        });
      };
    }

    (module.exports = _asyncToGenerator),
      (module.exports.__esModule = true),
      (module.exports["default"] = module.exports);
  },
  268,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _ViewConfigIgnore = _$$_REQUIRE(_dependencyMap[2]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG =
      _Platform.default.OS === "android"
        ? {
            uiViewClassName: "RCTImageView",
            bubblingEventTypes: {},
            directEventTypes: {
              topLoadStart: {
                registrationName: "onLoadStart",
              },
              topProgress: {
                registrationName: "onProgress",
              },
              topError: {
                registrationName: "onError",
              },
              topLoad: {
                registrationName: "onLoad",
              },
              topLoadEnd: {
                registrationName: "onLoadEnd",
              },
            },
            validAttributes: {
              blurRadius: true,
              internal_analyticTag: true,
              resizeMode: true,
              tintColor: {
                process: _$$_REQUIRE(_dependencyMap[4]),
              },
              borderBottomLeftRadius: true,
              borderTopLeftRadius: true,
              resizeMethod: true,
              src: true,
              borderRadius: true,
              headers: true,
              shouldNotifyLoadEvents: true,
              defaultSrc: true,
              overlayColor: {
                process: _$$_REQUIRE(_dependencyMap[4]),
              },
              borderColor: {
                process: _$$_REQUIRE(_dependencyMap[4]),
              },
              accessible: true,
              progressiveRenderingEnabled: true,
              fadeDuration: true,
              borderBottomRightRadius: true,
              borderTopRightRadius: true,
              loadingIndicatorSrc: true,
            },
          }
        : {
            uiViewClassName: "RCTImageView",
            bubblingEventTypes: {},
            directEventTypes: {
              topLoadStart: {
                registrationName: "onLoadStart",
              },
              topProgress: {
                registrationName: "onProgress",
              },
              topError: {
                registrationName: "onError",
              },
              topPartialLoad: {
                registrationName: "onPartialLoad",
              },
              topLoad: {
                registrationName: "onLoad",
              },
              topLoadEnd: {
                registrationName: "onLoadEnd",
              },
            },
            validAttributes: Object.assign(
              {
                blurRadius: true,
                capInsets: {
                  diff: _$$_REQUIRE(_dependencyMap[5]),
                },
                defaultSource: {
                  process: _$$_REQUIRE(_dependencyMap[6]),
                },
                internal_analyticTag: true,
                resizeMode: true,
                source: true,
                tintColor: {
                  process: _$$_REQUIRE(_dependencyMap[4]),
                },
              },
              (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
                onLoadStart: true,
                onLoad: true,
                onLoadEnd: true,
                onProgress: true,
                onError: true,
                onPartialLoad: true,
              })
            ),
          };

    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var ImageViewNativeComponent = NativeComponentRegistry.get(
      "RCTImageView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = ImageViewNativeComponent;
    exports.default = _default;
  },
  269,
  [7, 128, 130, 54, 135, 159, 149]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _ImageViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _TextInlineImageNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = {
      unstable_createImageComponent: null,
    };
    exports.default = _default;
  },
  270,
  [7, 1, 269, 271]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var __INTERNAL_VIEW_CONFIG = {
      uiViewClassName: "RCTTextInlineImage",
      bubblingEventTypes: {},
      directEventTypes: {},
      validAttributes: {
        resizeMode: true,
        src: true,
        tintColor: {
          process: _$$_REQUIRE(_dependencyMap[1]),
        },
        headers: true,
      },
    };
    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var TextInlineImage = NativeComponentRegistry.get(
      "RCTTextInlineImage",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = TextInlineImage;
    exports.default = _default;
  },
  271,
  [128, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Context = React.createContext(null);
    var _default = Context;
    exports.default = _default;
  },
  272,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("ImageLoader");

    exports.default = _default;
  },
  273,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[1]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var ScrollView = _$$_REQUIRE(_dependencyMap[2]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[3]);

    var ScrollViewWithEventThrottle = React.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(
        ScrollView,
        Object.assign(
          {
            scrollEventThrottle: 0.0001,
          },
          props,
          {
            ref: ref,
          }
        )
      );
    });
    module.exports = createAnimatedComponent(ScrollViewWithEventThrottle);
  },
  274,
  [1, 179, 247, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _SectionList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[3]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[4]);

    var SectionListWithEventThrottle = React.forwardRef(function (props, ref) {
      return (0, _jsxRuntime.jsx)(
        _SectionList.default,
        Object.assign(
          {
            scrollEventThrottle: 0.0001,
          },
          props,
          {
            ref: ref,
          }
        )
      );
    });
    module.exports = createAnimatedComponent(SectionListWithEventThrottle);
  },
  275,
  [7, 1, 276, 179, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

    var _VirtualizedSectionList = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

    var _excluded = ["stickySectionHeadersEnabled"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var SectionList = (function (_React$PureComponent) {
      (0, _inherits2.default)(SectionList, _React$PureComponent);

      var _super = _createSuper(SectionList);

      function SectionList() {
        var _this;

        (0, _classCallCheck2.default)(this, SectionList);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _this._captureRef = function (ref) {
          _this._wrapperListRef = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(SectionList, [
        {
          key: "scrollToLocation",
          value: function scrollToLocation(params) {
            if (this._wrapperListRef != null) {
              this._wrapperListRef.scrollToLocation(params);
            }
          },
        },
        {
          key: "recordInteraction",
          value: function recordInteraction() {
            var listRef =
              this._wrapperListRef && this._wrapperListRef.getListRef();

            listRef && listRef.recordInteraction();
          },
        },
        {
          key: "flashScrollIndicators",
          value: function flashScrollIndicators() {
            var listRef =
              this._wrapperListRef && this._wrapperListRef.getListRef();

            listRef && listRef.flashScrollIndicators();
          },
        },
        {
          key: "getScrollResponder",
          value: function getScrollResponder() {
            var listRef =
              this._wrapperListRef && this._wrapperListRef.getListRef();

            if (listRef) {
              return listRef.getScrollResponder();
            }
          },
        },
        {
          key: "getScrollableNode",
          value: function getScrollableNode() {
            var listRef =
              this._wrapperListRef && this._wrapperListRef.getListRef();

            if (listRef) {
              return listRef.getScrollableNode();
            }
          },
        },
        {
          key: "setNativeProps",
          value: function setNativeProps(props) {
            var listRef =
              this._wrapperListRef && this._wrapperListRef.getListRef();

            if (listRef) {
              listRef.setNativeProps(props);
            }
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$props = this.props,
              _stickySectionHeadersEnabled =
                _this$props.stickySectionHeadersEnabled,
              restProps = (0, _objectWithoutProperties2.default)(
                _this$props,
                _excluded
              );
            var stickySectionHeadersEnabled =
              _stickySectionHeadersEnabled != null
                ? _stickySectionHeadersEnabled
                : _Platform.default.OS === "ios";
            return (0, _jsxRuntime.jsx)(
              _VirtualizedSectionList.default,
              Object.assign({}, restProps, {
                stickySectionHeadersEnabled: stickySectionHeadersEnabled,
                ref: this._captureRef,
                getItemCount: function getItemCount(items) {
                  return items.length;
                },
                getItem: function getItem(items, index) {
                  return items[index];
                },
              })
            );
          },
        },
      ]);
      return SectionList;
    })(React.PureComponent);

    exports.default = SectionList;
  },
  276,
  [7, 92, 16, 17, 28, 30, 33, 54, 1, 277, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _assertThisInitialized2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _VirtualizeUtils = _$$_REQUIRE(_dependencyMap[9]);

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

    var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);

    var _excluded = [
      "ItemSeparatorComponent",
      "SectionSeparatorComponent",
      "renderItem",
      "renderSectionFooter",
      "renderSectionHeader",
      "sections",
      "stickySectionHeadersEnabled",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var VirtualizedSectionList = (function (_React$PureComponent) {
      (0, _inherits2.default)(VirtualizedSectionList, _React$PureComponent);

      var _super = _createSuper(VirtualizedSectionList);

      function VirtualizedSectionList() {
        var _this;

        (0, _classCallCheck2.default)(this, VirtualizedSectionList);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _this._keyExtractor = function (item, index) {
          var info = _this._subExtractor(index);

          return (info && info.key) || String(index);
        };

        _this._convertViewable = function (viewable) {
          var _info$index;

          (0, _invariant.default)(
            viewable.index != null,
            "Received a broken ViewToken"
          );

          var info = _this._subExtractor(viewable.index);

          if (!info) {
            return null;
          }

          var keyExtractorWithNullableIndex = info.section.keyExtractor;
          var keyExtractorWithNonNullableIndex =
            _this.props.keyExtractor || _VirtualizeUtils.keyExtractor;
          var key =
            keyExtractorWithNullableIndex != null
              ? keyExtractorWithNullableIndex(viewable.item, info.index)
              : keyExtractorWithNonNullableIndex(
                  viewable.item,
                  (_info$index = info.index) != null ? _info$index : 0
                );
          return Object.assign({}, viewable, {
            index: info.index,
            key: key,
            section: info.section,
          });
        };

        _this._onViewableItemsChanged = function (_ref) {
          var viewableItems = _ref.viewableItems,
            changed = _ref.changed;
          var onViewableItemsChanged = _this.props.onViewableItemsChanged;

          if (onViewableItemsChanged != null) {
            onViewableItemsChanged({
              viewableItems: viewableItems
                .map(
                  _this._convertViewable,
                  (0, _assertThisInitialized2.default)(_this)
                )
                .filter(Boolean),
              changed: changed
                .map(
                  _this._convertViewable,
                  (0, _assertThisInitialized2.default)(_this)
                )
                .filter(Boolean),
            });
          }
        };

        _this._renderItem = function (listItemCount) {
          return function (_ref2) {
            var item = _ref2.item,
              index = _ref2.index;

            var info = _this._subExtractor(index);

            if (!info) {
              return null;
            }

            var infoIndex = info.index;

            if (infoIndex == null) {
              var section = info.section;

              if (info.header === true) {
                var renderSectionHeader = _this.props.renderSectionHeader;
                return renderSectionHeader
                  ? renderSectionHeader({
                      section: section,
                    })
                  : null;
              } else {
                var renderSectionFooter = _this.props.renderSectionFooter;
                return renderSectionFooter
                  ? renderSectionFooter({
                      section: section,
                    })
                  : null;
              }
            } else {
              var renderItem =
                info.section.renderItem || _this.props.renderItem;

              var SeparatorComponent = _this._getSeparatorComponent(
                index,
                info,
                listItemCount
              );

              (0, _invariant.default)(renderItem, "no renderItem!");
              return (0, _jsxRuntime.jsx)(ItemWithSeparator, {
                SeparatorComponent: SeparatorComponent,
                LeadingSeparatorComponent:
                  infoIndex === 0
                    ? _this.props.SectionSeparatorComponent
                    : undefined,
                cellKey: info.key,
                index: infoIndex,
                item: item,
                leadingItem: info.leadingItem,
                leadingSection: info.leadingSection,
                prevCellKey: (_this._subExtractor(index - 1) || {}).key,
                setSelfHighlightCallback: _this._setUpdateHighlightFor,
                setSelfUpdatePropsCallback: _this._setUpdatePropsFor,
                updateHighlightFor: _this._updateHighlightFor,
                updatePropsFor: _this._updatePropsFor,
                renderItem: renderItem,
                section: info.section,
                trailingItem: info.trailingItem,
                trailingSection: info.trailingSection,
                inverted: !!_this.props.inverted,
              });
            }
          };
        };

        _this._updatePropsFor = function (cellKey, value) {
          var updateProps = _this._updatePropsMap[cellKey];

          if (updateProps != null) {
            updateProps(value);
          }
        };

        _this._updateHighlightFor = function (cellKey, value) {
          var updateHighlight = _this._updateHighlightMap[cellKey];

          if (updateHighlight != null) {
            updateHighlight(value);
          }
        };

        _this._setUpdateHighlightFor = function (cellKey, updateHighlightFn) {
          if (updateHighlightFn != null) {
            _this._updateHighlightMap[cellKey] = updateHighlightFn;
          } else {
            delete _this._updateHighlightFor[cellKey];
          }
        };

        _this._setUpdatePropsFor = function (cellKey, updatePropsFn) {
          if (updatePropsFn != null) {
            _this._updatePropsMap[cellKey] = updatePropsFn;
          } else {
            delete _this._updatePropsMap[cellKey];
          }
        };

        _this._updateHighlightMap = {};
        _this._updatePropsMap = {};

        _this._captureRef = function (ref) {
          _this._listRef = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(VirtualizedSectionList, [
        {
          key: "scrollToLocation",
          value: function scrollToLocation(params) {
            var index = params.itemIndex;

            for (var i = 0; i < params.sectionIndex; i++) {
              index += this.props.getItemCount(this.props.sections[i].data) + 2;
            }

            var viewOffset = params.viewOffset || 0;

            if (this._listRef == null) {
              return;
            }

            if (
              params.itemIndex > 0 &&
              this.props.stickySectionHeadersEnabled
            ) {
              var frame = this._listRef.__getFrameMetricsApprox(
                index - params.itemIndex
              );

              viewOffset += frame.length;
            }

            var toIndexParams = Object.assign({}, params, {
              viewOffset: viewOffset,
              index: index,
            });

            this._listRef.scrollToIndex(toIndexParams);
          },
        },
        {
          key: "getListRef",
          value: function getListRef() {
            return this._listRef;
          },
        },
        {
          key: "render",
          value: function render() {
            var _this2 = this;

            var _this$props = this.props,
              ItemSeparatorComponent = _this$props.ItemSeparatorComponent,
              SectionSeparatorComponent = _this$props.SectionSeparatorComponent,
              _renderItem = _this$props.renderItem,
              renderSectionFooter = _this$props.renderSectionFooter,
              renderSectionHeader = _this$props.renderSectionHeader,
              _sections = _this$props.sections,
              stickySectionHeadersEnabled =
                _this$props.stickySectionHeadersEnabled,
              passThroughProps = (0, _objectWithoutProperties2.default)(
                _this$props,
                _excluded
              );
            var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
            var stickyHeaderIndices = this.props.stickySectionHeadersEnabled
              ? []
              : undefined;
            var itemCount = 0;

            for (var section of this.props.sections) {
              if (stickyHeaderIndices != null) {
                stickyHeaderIndices.push(itemCount + listHeaderOffset);
              }

              itemCount += 2;
              itemCount += this.props.getItemCount(section.data);
            }

            var renderItem = this._renderItem(itemCount);

            return (0, _jsxRuntime.jsx)(
              _reactNative.VirtualizedList,
              Object.assign({}, passThroughProps, {
                keyExtractor: this._keyExtractor,
                stickyHeaderIndices: stickyHeaderIndices,
                renderItem: renderItem,
                data: this.props.sections,
                getItem: function getItem(sections, index) {
                  return _this2._getItem(_this2.props, sections, index);
                },
                getItemCount: function getItemCount() {
                  return itemCount;
                },
                onViewableItemsChanged: this.props.onViewableItemsChanged
                  ? this._onViewableItemsChanged
                  : undefined,
                ref: this._captureRef,
              })
            );
          },
        },
        {
          key: "_getItem",
          value: function _getItem(props, sections, index) {
            if (!sections) {
              return null;
            }

            var itemIdx = index - 1;

            for (var i = 0; i < sections.length; i++) {
              var section = sections[i];
              var sectionData = section.data;
              var itemCount = props.getItemCount(sectionData);

              if (itemIdx === -1 || itemIdx === itemCount) {
                return section;
              } else if (itemIdx < itemCount) {
                return props.getItem(sectionData, itemIdx);
              } else {
                itemIdx -= itemCount + 2;
              }
            }

            return null;
          },
        },
        {
          key: "_subExtractor",
          value: function _subExtractor(index) {
            var itemIndex = index;
            var _this$props2 = this.props,
              getItem = _this$props2.getItem,
              getItemCount = _this$props2.getItemCount,
              keyExtractor = _this$props2.keyExtractor,
              sections = _this$props2.sections;

            for (var i = 0; i < sections.length; i++) {
              var section = sections[i];
              var sectionData = section.data;
              var key = section.key || String(i);
              itemIndex -= 1;

              if (itemIndex >= getItemCount(sectionData) + 1) {
                itemIndex -= getItemCount(sectionData) + 1;
              } else if (itemIndex === -1) {
                return {
                  section: section,
                  key: key + ":header",
                  index: null,
                  header: true,
                  trailingSection: sections[i + 1],
                };
              } else if (itemIndex === getItemCount(sectionData)) {
                return {
                  section: section,
                  key: key + ":footer",
                  index: null,
                  header: false,
                  trailingSection: sections[i + 1],
                };
              } else {
                var extractor =
                  section.keyExtractor ||
                  keyExtractor ||
                  _VirtualizeUtils.keyExtractor;
                return {
                  section: section,
                  key:
                    key +
                    ":" +
                    extractor(getItem(sectionData, itemIndex), itemIndex),
                  index: itemIndex,
                  leadingItem: getItem(sectionData, itemIndex - 1),
                  leadingSection: sections[i - 1],
                  trailingItem: getItem(sectionData, itemIndex + 1),
                  trailingSection: sections[i + 1],
                };
              }
            }
          },
        },
        {
          key: "_getSeparatorComponent",
          value: function _getSeparatorComponent(index, info, listItemCount) {
            info = info || this._subExtractor(index);

            if (!info) {
              return null;
            }

            var ItemSeparatorComponent =
              info.section.ItemSeparatorComponent ||
              this.props.ItemSeparatorComponent;
            var SectionSeparatorComponent =
              this.props.SectionSeparatorComponent;
            var isLastItemInList = index === listItemCount - 1;
            var isLastItemInSection =
              info.index === this.props.getItemCount(info.section.data) - 1;

            if (SectionSeparatorComponent && isLastItemInSection) {
              return SectionSeparatorComponent;
            }

            if (
              ItemSeparatorComponent &&
              !isLastItemInSection &&
              !isLastItemInList
            ) {
              return ItemSeparatorComponent;
            }

            return null;
          },
        },
      ]);
      return VirtualizedSectionList;
    })(React.PureComponent);

    function ItemWithSeparator(props) {
      var LeadingSeparatorComponent = props.LeadingSeparatorComponent,
        SeparatorComponent = props.SeparatorComponent,
        cellKey = props.cellKey,
        prevCellKey = props.prevCellKey,
        setSelfHighlightCallback = props.setSelfHighlightCallback,
        updateHighlightFor = props.updateHighlightFor,
        setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback,
        updatePropsFor = props.updatePropsFor,
        item = props.item,
        index = props.index,
        section = props.section,
        inverted = props.inverted;

      var _React$useState = React.useState(false),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        leadingSeparatorHiglighted = _React$useState2[0],
        setLeadingSeparatorHighlighted = _React$useState2[1];

      var _React$useState3 = React.useState(false),
        _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
        separatorHighlighted = _React$useState4[0],
        setSeparatorHighlighted = _React$useState4[1];

      var _React$useState5 = React.useState({
          leadingItem: props.leadingItem,
          leadingSection: props.leadingSection,
          section: props.section,
          trailingItem: props.item,
          trailingSection: props.trailingSection,
        }),
        _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
        leadingSeparatorProps = _React$useState6[0],
        setLeadingSeparatorProps = _React$useState6[1];

      var _React$useState7 = React.useState({
          leadingItem: props.item,
          leadingSection: props.leadingSection,
          section: props.section,
          trailingItem: props.trailingItem,
          trailingSection: props.trailingSection,
        }),
        _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
        separatorProps = _React$useState8[0],
        setSeparatorProps = _React$useState8[1];

      React.useEffect(
        function () {
          setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
          setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
          return function () {
            setSelfUpdatePropsCallback(cellKey, null);
            setSelfHighlightCallback(cellKey, null);
          };
        },
        [
          cellKey,
          setSelfHighlightCallback,
          setSeparatorProps,
          setSelfUpdatePropsCallback,
        ]
      );
      var separators = {
        highlight: function highlight() {
          setLeadingSeparatorHighlighted(true);
          setSeparatorHighlighted(true);

          if (prevCellKey != null) {
            updateHighlightFor(prevCellKey, true);
          }
        },
        unhighlight: function unhighlight() {
          setLeadingSeparatorHighlighted(false);
          setSeparatorHighlighted(false);

          if (prevCellKey != null) {
            updateHighlightFor(prevCellKey, false);
          }
        },
        updateProps: function updateProps(select, newProps) {
          if (select === "leading") {
            if (LeadingSeparatorComponent != null) {
              setLeadingSeparatorProps(
                Object.assign({}, leadingSeparatorProps, newProps)
              );
            } else if (prevCellKey != null) {
              updatePropsFor(
                prevCellKey,
                Object.assign({}, leadingSeparatorProps, newProps)
              );
            }
          } else if (select === "trailing" && SeparatorComponent != null) {
            setSeparatorProps(Object.assign({}, separatorProps, newProps));
          }
        },
      };
      var element = props.renderItem({
        item: item,
        index: index,
        section: section,
        separators: separators,
      });
      var leadingSeparator =
        LeadingSeparatorComponent != null &&
        (0, _jsxRuntime.jsx)(
          LeadingSeparatorComponent,
          Object.assign(
            {
              highlighted: leadingSeparatorHiglighted,
            },
            leadingSeparatorProps
          )
        );
      var separator =
        SeparatorComponent != null &&
        (0, _jsxRuntime.jsx)(
          SeparatorComponent,
          Object.assign(
            {
              highlighted: separatorHighlighted,
            },
            separatorProps
          )
        );
      return leadingSeparator || separator
        ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
            children: [
              inverted === false ? leadingSeparator : separator,
              element,
              inverted === false ? separator : leadingSeparator,
            ],
          })
        : element;
    }

    module.exports = VirtualizedSectionList;
  },
  277,
  [7, 44, 92, 16, 17, 32, 28, 30, 33, 240, 4, 1, 3, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Text = _$$_REQUIRE(_dependencyMap[1]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[2]);

    module.exports = createAnimatedComponent(Text);
  },
  278,
  [1, 188, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var View = _$$_REQUIRE(_dependencyMap[1]);

    var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[2]);

    module.exports = createAnimatedComponent(View);
  },
  279,
  [1, 176, 231]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var DummyDatePickerIOS = (function (_React$Component) {
      (0, _inherits2.default)(DummyDatePickerIOS, _React$Component);

      var _super = _createSuper(DummyDatePickerIOS);

      function DummyDatePickerIOS() {
        (0, _classCallCheck2.default)(this, DummyDatePickerIOS);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(DummyDatePickerIOS, [
        {
          key: "render",
          value: function render() {
            return (0, _jsxRuntime.jsx)(_View.default, {
              style: [styles.dummyDatePickerIOS, this.props.style],
              children: (0, _jsxRuntime.jsx)(_Text.default, {
                style: styles.datePickerText,
                children: "DatePickerIOS is not supported on this platform!",
              }),
            });
          },
        },
      ]);
      return DummyDatePickerIOS;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      dummyDatePickerIOS: {
        height: 100,
        width: 300,
        backgroundColor: "#ffbcbc",
        borderWidth: 1,
        borderColor: "red",
        alignItems: "center",
        justifyContent: "center",
        margin: 10,
      },
      datePickerText: {
        color: "#333333",
        margin: 20,
      },
    });

    module.exports = DummyDatePickerIOS;
  },
  280,
  [7, 16, 17, 28, 30, 33, 1, 175, 188, 176, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

    var _StatusBar = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _dismissKeyboard = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[12])
    );

    var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

    var _AndroidDrawerLayoutNativeComponent = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[14])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[15]);

    var _excluded = [
      "drawerBackgroundColor",
      "onDrawerStateChanged",
      "renderNavigationView",
      "onDrawerOpen",
      "onDrawerClose",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var DRAWER_STATES = ["Idle", "Dragging", "Settling"];

    var DrawerLayoutAndroid = (function (_React$Component) {
      (0, _inherits2.default)(DrawerLayoutAndroid, _React$Component);

      var _super = _createSuper(DrawerLayoutAndroid);

      function DrawerLayoutAndroid() {
        var _this;

        (0, _classCallCheck2.default)(this, DrawerLayoutAndroid);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._nativeRef = React.createRef();
        _this.state = {
          statusBarBackgroundColor: null,
        };

        _this._onDrawerSlide = function (event) {
          if (_this.props.onDrawerSlide) {
            _this.props.onDrawerSlide(event);
          }

          if (_this.props.keyboardDismissMode === "on-drag") {
            (0, _dismissKeyboard.default)();
          }
        };

        _this._onDrawerOpen = function () {
          if (_this.props.onDrawerOpen) {
            _this.props.onDrawerOpen();
          }
        };

        _this._onDrawerClose = function () {
          if (_this.props.onDrawerClose) {
            _this.props.onDrawerClose();
          }
        };

        _this._onDrawerStateChanged = function (event) {
          if (_this.props.onDrawerStateChanged) {
            _this.props.onDrawerStateChanged(
              DRAWER_STATES[event.nativeEvent.drawerState]
            );
          }
        };

        return _this;
      }

      (0, _createClass2.default)(
        DrawerLayoutAndroid,
        [
          {
            key: "render",
            value: function render() {
              var _this$props = this.props,
                _this$props$drawerBac = _this$props.drawerBackgroundColor,
                drawerBackgroundColor =
                  _this$props$drawerBac === undefined
                    ? "white"
                    : _this$props$drawerBac,
                onDrawerStateChanged = _this$props.onDrawerStateChanged,
                renderNavigationView = _this$props.renderNavigationView,
                onDrawerOpen = _this$props.onDrawerOpen,
                onDrawerClose = _this$props.onDrawerClose,
                props = (0, _objectWithoutProperties2.default)(
                  _this$props,
                  _excluded
                );
              var drawStatusBar =
                _Platform.default.Version >= 21 &&
                this.props.statusBarBackgroundColor != null;
              var drawerViewWrapper = (0, _jsxRuntime.jsxs)(_View.default, {
                style: [
                  styles.drawerSubview,
                  {
                    width: this.props.drawerWidth,
                    backgroundColor: drawerBackgroundColor,
                  },
                ],
                collapsable: false,
                children: [
                  renderNavigationView(),
                  drawStatusBar &&
                    (0, _jsxRuntime.jsx)(_View.default, {
                      style: styles.drawerStatusBar,
                    }),
                ],
              });
              var childrenWrapper = (0, _jsxRuntime.jsxs)(_View.default, {
                style: styles.mainSubview,
                collapsable: false,
                children: [
                  drawStatusBar &&
                    (0, _jsxRuntime.jsx)(_StatusBar.default, {
                      translucent: true,
                      backgroundColor: this.props.statusBarBackgroundColor,
                    }),
                  drawStatusBar &&
                    (0, _jsxRuntime.jsx)(_View.default, {
                      style: [
                        styles.statusBar,
                        {
                          backgroundColor: this.props.statusBarBackgroundColor,
                        },
                      ],
                    }),
                  this.props.children,
                ],
              });
              return (0, _jsxRuntime.jsxs)(
                _AndroidDrawerLayoutNativeComponent.default,
                Object.assign({}, props, {
                  ref: this._nativeRef,
                  drawerBackgroundColor: drawerBackgroundColor,
                  drawerWidth: this.props.drawerWidth,
                  drawerPosition: this.props.drawerPosition,
                  drawerLockMode: this.props.drawerLockMode,
                  style: [styles.base, this.props.style],
                  onDrawerSlide: this._onDrawerSlide,
                  onDrawerOpen: this._onDrawerOpen,
                  onDrawerClose: this._onDrawerClose,
                  onDrawerStateChanged: this._onDrawerStateChanged,
                  children: [childrenWrapper, drawerViewWrapper],
                })
              );
            },
          },
          {
            key: "openDrawer",
            value: function openDrawer() {
              _AndroidDrawerLayoutNativeComponent.Commands.openDrawer(
                (0, _nullthrows.default)(this._nativeRef.current)
              );
            },
          },
          {
            key: "closeDrawer",
            value: function closeDrawer() {
              _AndroidDrawerLayoutNativeComponent.Commands.closeDrawer(
                (0, _nullthrows.default)(this._nativeRef.current)
              );
            },
          },
          {
            key: "blur",
            value: function blur() {
              (0, _nullthrows.default)(this._nativeRef.current).blur();
            },
          },
          {
            key: "focus",
            value: function focus() {
              (0, _nullthrows.default)(this._nativeRef.current).focus();
            },
          },
          {
            key: "measure",
            value: function measure(callback) {
              (0, _nullthrows.default)(this._nativeRef.current).measure(
                callback
              );
            },
          },
          {
            key: "measureInWindow",
            value: function measureInWindow(callback) {
              (0, _nullthrows.default)(this._nativeRef.current).measureInWindow(
                callback
              );
            },
          },
          {
            key: "measureLayout",
            value: function measureLayout(
              relativeToNativeNode,
              onSuccess,
              onFail
            ) {
              (0, _nullthrows.default)(this._nativeRef.current).measureLayout(
                relativeToNativeNode,
                onSuccess,
                onFail
              );
            },
          },
          {
            key: "setNativeProps",
            value: function setNativeProps(nativeProps) {
              (0, _nullthrows.default)(this._nativeRef.current).setNativeProps(
                nativeProps
              );
            },
          },
        ],
        [
          {
            key: "positions",
            get: function get() {
              console.warn(
                'Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value "left" or "right"'
              );
              return {
                Left: "left",
                Right: "right",
              };
            },
          },
        ]
      );
      return DrawerLayoutAndroid;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      base: {
        flex: 1,
        elevation: 16,
      },
      mainSubview: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
      },
      drawerSubview: {
        position: "absolute",
        top: 0,
        bottom: 0,
      },
      statusBar: {
        height: _StatusBar.default.currentHeight,
      },
      drawerStatusBar: {
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        height: _StatusBar.default.currentHeight,
        backgroundColor: "rgba(0, 0, 0, 0.251)",
      },
    });

    module.exports = DrawerLayoutAndroid;
  },
  281,
  [7, 92, 16, 17, 28, 30, 33, 54, 1, 282, 175, 176, 251, 285, 286, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _NativeStatusBarManagerAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[10])
    );

    var _NativeStatusBarManagerIOS = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _NativeStatusBarManag;

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    function mergePropsStack(propsStack, defaultValues) {
      return propsStack.reduce(function (prev, cur) {
        for (var prop in cur) {
          if (cur[prop] != null) {
            prev[prop] = cur[prop];
          }
        }

        return prev;
      }, Object.assign({}, defaultValues));
    }

    function createStackEntry(props) {
      var _props$animated, _props$showHideTransi;

      var animated =
        (_props$animated = props.animated) != null ? _props$animated : false;
      var showHideTransition =
        (_props$showHideTransi = props.showHideTransition) != null
          ? _props$showHideTransi
          : "fade";
      return {
        backgroundColor:
          props.backgroundColor != null
            ? {
                value: props.backgroundColor,
                animated: animated,
              }
            : null,
        barStyle:
          props.barStyle != null
            ? {
                value: props.barStyle,
                animated: animated,
              }
            : null,
        translucent: props.translucent,
        hidden:
          props.hidden != null
            ? {
                value: props.hidden,
                animated: animated,
                transition: showHideTransition,
              }
            : null,
        networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,
      };
    }

    var StatusBar = (function (_React$Component) {
      (0, _inherits2.default)(StatusBar, _React$Component);

      var _super = _createSuper(StatusBar);

      function StatusBar() {
        var _this;

        (0, _classCallCheck2.default)(this, StatusBar);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._stackEntry = null;
        return _this;
      }

      (0, _createClass2.default)(
        StatusBar,
        [
          {
            key: "componentDidMount",
            value: function componentDidMount() {
              this._stackEntry = StatusBar.pushStackEntry(this.props);
            },
          },
          {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              StatusBar.popStackEntry(this._stackEntry);
            },
          },
          {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              this._stackEntry = StatusBar.replaceStackEntry(
                this._stackEntry,
                this.props
              );
            },
          },
          {
            key: "render",
            value: function render() {
              return null;
            },
          },
        ],
        [
          {
            key: "setHidden",
            value: function setHidden(hidden, animation) {
              animation = animation || "none";
              StatusBar._defaultProps.hidden.value = hidden;

              if (_Platform.default.OS === "ios") {
                _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
              } else if (_Platform.default.OS === "android") {
                _NativeStatusBarManagerAndroid.default.setHidden(hidden);
              }
            },
          },
          {
            key: "setBarStyle",
            value: function setBarStyle(style, animated) {
              animated = animated || false;
              StatusBar._defaultProps.barStyle.value = style;

              if (_Platform.default.OS === "ios") {
                _NativeStatusBarManagerIOS.default.setStyle(style, animated);
              } else if (_Platform.default.OS === "android") {
                _NativeStatusBarManagerAndroid.default.setStyle(style);
              }
            },
          },
          {
            key: "setNetworkActivityIndicatorVisible",
            value: function setNetworkActivityIndicatorVisible(visible) {
              if (_Platform.default.OS !== "ios") {
                console.warn(
                  "`setNetworkActivityIndicatorVisible` is only available on iOS"
                );
                return;
              }

              StatusBar._defaultProps.networkActivityIndicatorVisible = visible;

              _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(
                visible
              );
            },
          },
          {
            key: "setBackgroundColor",
            value: function setBackgroundColor(color, animated) {
              if (_Platform.default.OS !== "android") {
                console.warn(
                  "`setBackgroundColor` is only available on Android"
                );
                return;
              }

              animated = animated || false;
              StatusBar._defaultProps.backgroundColor.value = color;
              var processedColor = (0, _processColor.default)(color);

              if (processedColor == null) {
                console.warn(
                  "`StatusBar.setBackgroundColor`: Color " +
                    color +
                    " parsed to null or undefined"
                );
                return;
              }

              (0, _invariant.default)(
                typeof processedColor === "number",
                "Unexpected color given for StatusBar.setBackgroundColor"
              );

              _NativeStatusBarManagerAndroid.default.setColor(
                processedColor,
                animated
              );
            },
          },
          {
            key: "setTranslucent",
            value: function setTranslucent(translucent) {
              if (_Platform.default.OS !== "android") {
                console.warn("`setTranslucent` is only available on Android");
                return;
              }

              StatusBar._defaultProps.translucent = translucent;

              _NativeStatusBarManagerAndroid.default.setTranslucent(
                translucent
              );
            },
          },
          {
            key: "pushStackEntry",
            value: function pushStackEntry(props) {
              var entry = createStackEntry(props);

              StatusBar._propsStack.push(entry);

              StatusBar._updatePropsStack();

              return entry;
            },
          },
          {
            key: "popStackEntry",
            value: function popStackEntry(entry) {
              var index = StatusBar._propsStack.indexOf(entry);

              if (index !== -1) {
                StatusBar._propsStack.splice(index, 1);
              }

              StatusBar._updatePropsStack();
            },
          },
          {
            key: "replaceStackEntry",
            value: function replaceStackEntry(entry, props) {
              var newEntry = createStackEntry(props);

              var index = StatusBar._propsStack.indexOf(entry);

              if (index !== -1) {
                StatusBar._propsStack[index] = newEntry;
              }

              StatusBar._updatePropsStack();

              return newEntry;
            },
          },
        ]
      );
      return StatusBar;
    })(React.Component);

    StatusBar._propsStack = [];
    StatusBar._defaultProps = createStackEntry({
      backgroundColor:
        _Platform.default.OS === "android"
          ? (_NativeStatusBarManag =
              _NativeStatusBarManagerAndroid.default.getConstants()
                .DEFAULT_BACKGROUND_COLOR) != null
            ? _NativeStatusBarManag
            : "black"
          : "black",
      barStyle: "default",
      translucent: false,
      hidden: false,
      networkActivityIndicatorVisible: false,
    });
    StatusBar._updateImmediate = null;
    StatusBar._currentValues = null;
    StatusBar.currentHeight =
      _Platform.default.OS === "android"
        ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT
        : null;

    StatusBar._updatePropsStack = function () {
      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(
          StatusBar._propsStack,
          StatusBar._defaultProps
        );

        if (_Platform.default.OS === "ios") {
          if (
            !oldProps ||
            oldProps.barStyle.value !== mergedProps.barStyle.value
          ) {
            _NativeStatusBarManagerIOS.default.setStyle(
              mergedProps.barStyle.value,
              mergedProps.barStyle.animated || false
            );
          }

          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            _NativeStatusBarManagerIOS.default.setHidden(
              mergedProps.hidden.value,
              mergedProps.hidden.animated
                ? mergedProps.hidden.transition
                : "none"
            );
          }

          if (
            !oldProps ||
            oldProps.networkActivityIndicatorVisible !==
              mergedProps.networkActivityIndicatorVisible
          ) {
            _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(
              mergedProps.networkActivityIndicatorVisible
            );
          }
        } else if (_Platform.default.OS === "android") {
          _NativeStatusBarManagerAndroid.default.setStyle(
            mergedProps.barStyle.value
          );

          var processedColor = (0, _processColor.default)(
            mergedProps.backgroundColor.value
          );

          if (processedColor == null) {
            console.warn(
              "`StatusBar._updatePropsStack`: Color " +
                mergedProps.backgroundColor.value +
                " parsed to null or undefined"
            );
          } else {
            (0, _invariant.default)(
              typeof processedColor === "number",
              "Unexpected color given in StatusBar._updatePropsStack"
            );

            _NativeStatusBarManagerAndroid.default.setColor(
              processedColor,
              mergedProps.backgroundColor.animated
            );
          }

          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            _NativeStatusBarManagerAndroid.default.setHidden(
              mergedProps.hidden.value
            );
          }

          if (
            !oldProps ||
            oldProps.translucent !== mergedProps.translucent ||
            mergedProps.translucent
          ) {
            _NativeStatusBarManagerAndroid.default.setTranslucent(
              mergedProps.translucent
            );
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    };

    module.exports = StatusBar;
  },
  282,
  [7, 16, 17, 28, 30, 33, 1, 54, 4, 135, 283, 284]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var NativeModule = TurboModuleRegistry.getEnforcing("StatusBarManager");
    var constants = null;
    var NativeStatusBarManager = {
      getConstants: function getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }

        return constants;
      },
      setColor: function setColor(color, animated) {
        NativeModule.setColor(color, animated);
      },
      setTranslucent: function setTranslucent(translucent) {
        NativeModule.setTranslucent(translucent);
      },
      setStyle: function setStyle(statusBarStyle) {
        NativeModule.setStyle(statusBarStyle);
      },
      setHidden: function setHidden(hidden) {
        NativeModule.setHidden(hidden);
      },
    };
    var _default = NativeStatusBarManager;
    exports.default = _default;
  },
  283,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var NativeModule = TurboModuleRegistry.getEnforcing("StatusBarManager");
    var constants = null;
    var NativeStatusBarManager = {
      getConstants: function getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }

        return constants;
      },
      getHeight: function getHeight(callback) {
        NativeModule.getHeight(callback);
      },
      setNetworkActivityIndicatorVisible:
        function setNetworkActivityIndicatorVisible(visible) {
          NativeModule.setNetworkActivityIndicatorVisible(visible);
        },
      addListener: function addListener(eventType) {
        NativeModule.addListener(eventType);
      },
      removeListeners: function removeListeners(count) {
        NativeModule.removeListeners(count);
      },
      setStyle: function setStyle(statusBarStyle, animated) {
        NativeModule.setStyle(statusBarStyle, animated);
      },
      setHidden: function setHidden(hidden, withAnimation) {
        NativeModule.setHidden(hidden, withAnimation);
      },
    };
    var _default = NativeStatusBarManager;
    exports.default = _default;
  },
  284,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function nullthrows(x, message) {
      if (x != null) {
        return x;
      }

      var error = new Error(
        message !== undefined ? message : "Got unexpected " + x
      );
      error.framesToPop = 1;
      throw error;
    }

    module.exports = nullthrows;
    module.exports.default = nullthrows;
    Object.defineProperty(module.exports, "__esModule", {
      value: true,
    });
  },
  285,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.Commands = undefined;

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["openDrawer", "closeDrawer"],
    });
    exports.Commands = Commands;

    var _default = (0, _codegenNativeComponent.default)("AndroidDrawerLayout");

    exports.default = _default;
  },
  286,
  [7, 123, 183, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Image = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);

    var _excluded = ["children", "style", "imageStyle", "imageRef"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var ImageBackground = (function (_React$Component) {
      (0, _inherits2.default)(ImageBackground, _React$Component);

      var _super = _createSuper(ImageBackground);

      function ImageBackground() {
        var _this;

        (0, _classCallCheck2.default)(this, ImageBackground);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._viewRef = null;

        _this._captureRef = function (ref) {
          _this._viewRef = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(ImageBackground, [
        {
          key: "setNativeProps",
          value: function setNativeProps(props) {
            var viewRef = this._viewRef;

            if (viewRef) {
              viewRef.setNativeProps(props);
            }
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$props = this.props,
              children = _this$props.children,
              style = _this$props.style,
              imageStyle = _this$props.imageStyle,
              imageRef = _this$props.imageRef,
              props = (0, _objectWithoutProperties2.default)(
                _this$props,
                _excluded
              );
            var flattenedStyle = (0, _flattenStyle.default)(style);
            return (0, _jsxRuntime.jsxs)(_View.default, {
              accessibilityIgnoresInvertColors: true,
              style: style,
              ref: this._captureRef,
              children: [
                (0, _jsxRuntime.jsx)(
                  _Image.default,
                  Object.assign({}, props, {
                    style: [
                      _StyleSheet.default.absoluteFill,
                      {
                        width:
                          flattenedStyle == null
                            ? undefined
                            : flattenedStyle.width,
                        height:
                          flattenedStyle == null
                            ? undefined
                            : flattenedStyle.height,
                      },
                      imageStyle,
                    ],
                    ref: imageRef,
                  })
                ),
                children,
              ],
            });
          },
        },
      ]);
      return ImageBackground;
    })(React.Component);

    module.exports = ImageBackground;
  },
  287,
  [7, 92, 16, 17, 28, 30, 33, 267, 1, 175, 166, 176, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var InputAccessoryView = (function (_React$Component) {
      (0, _inherits2.default)(InputAccessoryView, _React$Component);

      var _super = _createSuper(InputAccessoryView);

      function InputAccessoryView() {
        (0, _classCallCheck2.default)(this, InputAccessoryView);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(InputAccessoryView, [
        {
          key: "render",
          value: function render() {
            if (_Platform.default.OS === "ios") {
              if (React.Children.count(this.props.children) === 0) {
                return null;
              }

              return (0, _jsxRuntime.jsx)(
                _RCTInputAccessoryViewNativeComponent.default,
                {
                  style: [this.props.style, styles.container],
                  nativeID: this.props.nativeID,
                  backgroundColor: this.props.backgroundColor,
                  children: this.props.children,
                }
              );
            } else {
              console.warn("<InputAccessoryView> is only supported on iOS.");
              return null;
            }
          },
        },
      ]);
      return InputAccessoryView;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      container: {
        position: "absolute",
      },
    });

    module.exports = InputAccessoryView;
  },
  288,
  [7, 16, 17, 28, 30, 33, 1, 54, 175, 289, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)("InputAccessory", {
      interfaceOnly: true,
      paperComponentName: "RCTInputAccessoryView",
      excludedPlatforms: ["android"],
    });

    exports.default = _default;
  },
  289,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _Keyboard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _LayoutAnimation = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

    var _AccessibilityInfo = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[14])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[15]);

    var _excluded = [
      "behavior",
      "children",
      "contentContainerStyle",
      "enabled",
      "keyboardVerticalOffset",
      "style",
      "onLayout",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var KeyboardAvoidingView = (function (_React$Component) {
      (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);

      var _super = _createSuper(KeyboardAvoidingView);

      function KeyboardAvoidingView(props) {
        var _this;

        (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
        _this = _super.call(this, props);
        _this._frame = null;
        _this._keyboardEvent = null;
        _this._subscriptions = [];
        _this._initialFrameHeight = 0;

        _this._onKeyboardChange = function (event) {
          _this._keyboardEvent = event;

          _this._updateBottomIfNecessary();
        };

        _this._onLayout = (function () {
          var _ref = (0, _asyncToGenerator2.default)(function* (event) {
            var wasFrameNull = _this._frame == null;
            _this._frame = event.nativeEvent.layout;

            if (!_this._initialFrameHeight) {
              _this._initialFrameHeight = _this._frame.height;
            }

            if (wasFrameNull) {
              yield _this._updateBottomIfNecessary();
            }

            if (_this.props.onLayout) {
              _this.props.onLayout(event);
            }
          });

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        })();

        _this._updateBottomIfNecessary = (0, _asyncToGenerator2.default)(
          function* () {
            if (_this._keyboardEvent == null) {
              _this.setState({
                bottom: 0,
              });

              return;
            }

            var _this$_keyboardEvent = _this._keyboardEvent,
              duration = _this$_keyboardEvent.duration,
              easing = _this$_keyboardEvent.easing,
              endCoordinates = _this$_keyboardEvent.endCoordinates;
            var height = yield _this._relativeKeyboardHeight(endCoordinates);

            if (_this.state.bottom === height) {
              return;
            }

            if (duration && easing) {
              _LayoutAnimation.default.configureNext({
                duration: duration > 10 ? duration : 10,
                update: {
                  duration: duration > 10 ? duration : 10,
                  type: _LayoutAnimation.default.Types[easing] || "keyboard",
                },
              });
            }

            _this.setState({
              bottom: height,
            });
          }
        );
        _this.state = {
          bottom: 0,
        };
        _this.viewRef = React.createRef();
        return _this;
      }

      (0, _createClass2.default)(KeyboardAvoidingView, [
        {
          key: "_relativeKeyboardHeight",
          value: (function () {
            var _relativeKeyboardHeight2 = (0, _asyncToGenerator2.default)(
              function* (keyboardFrame) {
                var _this$props$keyboardV;

                var frame = this._frame;

                if (!frame || !keyboardFrame) {
                  return 0;
                }

                if (
                  _Platform.default.OS === "ios" &&
                  keyboardFrame.screenY === 0 &&
                  (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())
                ) {
                  return 0;
                }

                var keyboardY =
                  keyboardFrame.screenY -
                  ((_this$props$keyboardV =
                    this.props.keyboardVerticalOffset) != null
                    ? _this$props$keyboardV
                    : 0);
                return Math.max(frame.y + frame.height - keyboardY, 0);
              }
            );

            function _relativeKeyboardHeight(_x2) {
              return _relativeKeyboardHeight2.apply(this, arguments);
            }

            return _relativeKeyboardHeight;
          })(),
        },
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            if (_Platform.default.OS === "ios") {
              this._subscriptions = [
                _Keyboard.default.addListener(
                  "keyboardWillChangeFrame",
                  this._onKeyboardChange
                ),
              ];
            } else {
              this._subscriptions = [
                _Keyboard.default.addListener(
                  "keyboardDidHide",
                  this._onKeyboardChange
                ),
                _Keyboard.default.addListener(
                  "keyboardDidShow",
                  this._onKeyboardChange
                ),
              ];
            }
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this._subscriptions.forEach(function (subscription) {
              subscription.remove();
            });
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$props = this.props,
              behavior = _this$props.behavior,
              children = _this$props.children,
              contentContainerStyle = _this$props.contentContainerStyle,
              _this$props$enabled = _this$props.enabled,
              enabled =
                _this$props$enabled === undefined ? true : _this$props$enabled,
              _this$props$keyboardV2 = _this$props.keyboardVerticalOffset,
              keyboardVerticalOffset =
                _this$props$keyboardV2 === undefined
                  ? 0
                  : _this$props$keyboardV2,
              style = _this$props.style,
              onLayout = _this$props.onLayout,
              props = (0, _objectWithoutProperties2.default)(
                _this$props,
                _excluded
              );
            var bottomHeight = enabled === true ? this.state.bottom : 0;

            switch (behavior) {
              case "height":
                var heightStyle;

                if (this._frame != null && this.state.bottom > 0) {
                  heightStyle = {
                    height: this._initialFrameHeight - bottomHeight,
                    flex: 0,
                  };
                }

                return (0, _jsxRuntime.jsx)(
                  _View.default,
                  Object.assign(
                    {
                      ref: this.viewRef,
                      style: _StyleSheet.default.compose(style, heightStyle),
                      onLayout: this._onLayout,
                    },
                    props,
                    {
                      children: children,
                    }
                  )
                );

              case "position":
                return (0, _jsxRuntime.jsx)(
                  _View.default,
                  Object.assign(
                    {
                      ref: this.viewRef,
                      style: style,
                      onLayout: this._onLayout,
                    },
                    props,
                    {
                      children: (0, _jsxRuntime.jsx)(_View.default, {
                        style: _StyleSheet.default.compose(
                          contentContainerStyle,
                          {
                            bottom: bottomHeight,
                          }
                        ),
                        children: children,
                      }),
                    }
                  )
                );

              case "padding":
                return (0, _jsxRuntime.jsx)(
                  _View.default,
                  Object.assign(
                    {
                      ref: this.viewRef,
                      style: _StyleSheet.default.compose(style, {
                        paddingBottom: bottomHeight,
                      }),
                      onLayout: this._onLayout,
                    },
                    props,
                    {
                      children: children,
                    }
                  )
                );

              default:
                return (0, _jsxRuntime.jsx)(
                  _View.default,
                  Object.assign(
                    {
                      ref: this.viewRef,
                      onLayout: this._onLayout,
                      style: style,
                    },
                    props,
                    {
                      children: children,
                    }
                  )
                );
            }
          },
        },
      ]);
      return KeyboardAvoidingView;
    })(React.Component);

    var _default = KeyboardAvoidingView;
    exports.default = _default;
  },
  290,
  [7, 92, 268, 16, 17, 28, 30, 33, 249, 250, 54, 1, 175, 176, 6, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  },
  291,
  [292]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var UnimplementedView = (function (_React$Component) {
      (0, _inherits2.default)(UnimplementedView, _React$Component);

      var _super = _createSuper(UnimplementedView);

      function UnimplementedView() {
        (0, _classCallCheck2.default)(this, UnimplementedView);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(UnimplementedView, [
        {
          key: "render",
          value: function render() {
            var View = _$$_REQUIRE(_dependencyMap[9]);

            return (0, _jsxRuntime.jsx)(View, {
              style: [styles.unimplementedView, this.props.style],
              children: this.props.children,
            });
          },
        },
      ]);
      return UnimplementedView;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      unimplementedView: {},
    });

    module.exports = UnimplementedView;
  },
  292,
  [7, 16, 17, 28, 30, 33, 1, 175, 179, 176]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _defineProperty2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _ModalInjection = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _NativeModalManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _VirtualizedListContext = _$$_REQUIRE(_dependencyMap[10]);

    var _RCTModalHostViewNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[12]);

    var _container, _ModalInjection$unsta;

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AppContainer = _$$_REQUIRE(_dependencyMap[13]);

    var I18nManager = _$$_REQUIRE(_dependencyMap[14]);

    var Platform = _$$_REQUIRE(_dependencyMap[15]);

    var React = _$$_REQUIRE(_dependencyMap[16]);

    var ScrollView = _$$_REQUIRE(_dependencyMap[17]);

    var StyleSheet = _$$_REQUIRE(_dependencyMap[18]);

    var View = _$$_REQUIRE(_dependencyMap[19]);

    var _require = _$$_REQUIRE(_dependencyMap[20]),
      RootTagContext = _require.RootTagContext;

    var ModalEventEmitter = null;
    var uniqueModalIdentifier = 0;

    var Modal = (function (_React$Component) {
      (0, _inherits2.default)(Modal, _React$Component);

      var _super = _createSuper(Modal);

      function Modal(props) {
        var _this;

        (0, _classCallCheck2.default)(this, Modal);
        _this = _super.call(this, props);
        _this._identifier = uniqueModalIdentifier++;
        return _this;
      }

      (0, _createClass2.default)(Modal, [
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this2 = this;
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this._eventSubscription) {
              this._eventSubscription.remove();
            }
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate() {},
        },
        {
          key: "render",
          value: function render() {
            var _this3 = this;

            if (this.props.visible !== true) {
              return null;
            }

            var containerStyles = {
              backgroundColor:
                this.props.transparent === true ? "transparent" : "white",
            };
            var animationType = this.props.animationType || "none";
            var presentationStyle = this.props.presentationStyle;

            if (!presentationStyle) {
              presentationStyle = "fullScreen";

              if (this.props.transparent === true) {
                presentationStyle = "overFullScreen";
              }
            }

            var innerChildren = this.props.children;
            return (0, _jsxRuntime.jsx)(
              _RCTModalHostViewNativeComponent.default,
              {
                animationType: animationType,
                presentationStyle: presentationStyle,
                transparent: this.props.transparent,
                hardwareAccelerated: this.props.hardwareAccelerated,
                onRequestClose: this.props.onRequestClose,
                onShow: this.props.onShow,
                onDismiss: function onDismiss() {
                  if (_this3.props.onDismiss) {
                    _this3.props.onDismiss();
                  }
                },
                visible: this.props.visible,
                statusBarTranslucent: this.props.statusBarTranslucent,
                identifier: this._identifier,
                style: styles.modal,
                onStartShouldSetResponder: this._shouldSetResponder,
                supportedOrientations: this.props.supportedOrientations,
                onOrientationChange: this.props.onOrientationChange,
                testID: this.props.testID,
                children: (0, _jsxRuntime.jsx)(
                  _VirtualizedListContext.VirtualizedListContextResetter,
                  {
                    children: (0, _jsxRuntime.jsx)(
                      ScrollView.Context.Provider,
                      {
                        value: null,
                        children: (0, _jsxRuntime.jsx)(View, {
                          style: [styles.container, containerStyles],
                          collapsable: false,
                          children: innerChildren,
                        }),
                      }
                    ),
                  }
                ),
              }
            );
          },
        },
        {
          key: "_shouldSetResponder",
          value: function _shouldSetResponder() {
            return true;
          },
        },
      ]);
      return Modal;
    })(React.Component);

    Modal.defaultProps = {
      visible: true,
      hardwareAccelerated: false,
    };
    Modal.contextType = RootTagContext;
    var side = I18nManager.getConstants().isRTL ? "right" : "left";
    var styles = StyleSheet.create({
      modal: {
        position: "absolute",
      },
      container:
        ((_container = {}),
        (0, _defineProperty2.default)(_container, side, 0),
        (0, _defineProperty2.default)(_container, "top", 0),
        (0, _defineProperty2.default)(_container, "flex", 1),
        _container),
    });
    var ExportedModal =
      (_ModalInjection$unsta = _ModalInjection.default.unstable_Modal) != null
        ? _ModalInjection$unsta
        : Modal;
    module.exports = ExportedModal;
  },
  293,
  [
    7, 239, 16, 17, 28, 30, 33, 294, 82, 295, 243, 296, 179, 297, 299, 54, 1,
    247, 175, 176, 298,
  ]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;
    var _default = {
      unstable_Modal: null,
    };
    exports.default = _default;
  },
  294,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("ModalManager");

    exports.default = _default;
  },
  295,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)("ModalHostView", {
      interfaceOnly: true,
      paperComponentName: "RCTModalHostView",
    });

    exports.default = _default;
  },
  296,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _RootTag = _$$_REQUIRE(_dependencyMap[9]);

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var AppContainer = (function (_React$Component) {
      (0, _inherits2.default)(AppContainer, _React$Component);

      var _super = _createSuper(AppContainer);

      function AppContainer() {
        var _this;

        (0, _classCallCheck2.default)(this, AppContainer);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          inspector: null,
          mainKey: 1,
          hasError: false,
        };
        _this._subscription = null;
        return _this;
      }

      (0, _createClass2.default)(AppContainer, [
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this2 = this;
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this._subscription != null) {
              this._subscription.remove();
            }
          },
        },
        {
          key: "render",
          value: function render() {
            var _this3 = this;

            var logBox = null;
            var innerView = (0, _jsxRuntime.jsx)(
              _View.default,
              {
                collapsable: !this.state.inspector,
                pointerEvents: "box-none",
                style: styles.appContainer,
                ref: function ref(_ref) {
                  _this3._mainRef = _ref;
                },
                children: this.props.children,
              },
              this.state.mainKey
            );
            var Wrapper = this.props.WrapperComponent;

            if (Wrapper != null) {
              innerView = (0, _jsxRuntime.jsx)(Wrapper, {
                initialProps: this.props.initialProps,
                fabric: this.props.fabric === true,
                showArchitectureIndicator:
                  this.props.showArchitectureIndicator === true,
                children: innerView,
              });
            }

            return (0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
              value: (0, _RootTag.createRootTag)(this.props.rootTag),
              children: (0, _jsxRuntime.jsxs)(_View.default, {
                style: styles.appContainer,
                pointerEvents: "box-none",
                children: [
                  !this.state.hasError && innerView,
                  this.state.inspector,
                  logBox,
                ],
              }),
            });
          },
        },
      ]);
      return AppContainer;
    })(React.Component);

    AppContainer.getDerivedStateFromError = undefined;

    var styles = _StyleSheet.default.create({
      appContainer: {
        flex: 1,
      },
    });

    module.exports = AppContainer;
  },
  297,
  [7, 16, 17, 28, 30, 33, 176, 8, 175, 298, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.RootTagContext = undefined;
    exports.createRootTag = createRootTag;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var RootTagContext = React.createContext(0);
    exports.RootTagContext = RootTagContext;

    function createRootTag(rootTag) {
      return rootTag;
    }
  },
  298,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeI18nManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var i18nConstants = getI18nManagerConstants();

    function getI18nManagerConstants() {
      if (_NativeI18nManager.default) {
        var _NativeI18nManager$ge = _NativeI18nManager.default.getConstants(),
          isRTL = _NativeI18nManager$ge.isRTL,
          doLeftAndRightSwapInRTL =
            _NativeI18nManager$ge.doLeftAndRightSwapInRTL,
          localeIdentifier = _NativeI18nManager$ge.localeIdentifier;

        return {
          isRTL: isRTL,
          doLeftAndRightSwapInRTL: doLeftAndRightSwapInRTL,
          localeIdentifier: localeIdentifier,
        };
      }

      return {
        isRTL: false,
        doLeftAndRightSwapInRTL: true,
      };
    }

    module.exports = {
      getConstants: function getConstants() {
        return i18nConstants;
      },
      allowRTL: function allowRTL(shouldAllow) {
        if (!_NativeI18nManager.default) {
          return;
        }

        _NativeI18nManager.default.allowRTL(shouldAllow);
      },
      forceRTL: function forceRTL(shouldForce) {
        if (!_NativeI18nManager.default) {
          return;
        }

        _NativeI18nManager.default.forceRTL(shouldForce);
      },
      swapLeftAndRightInRTL: function swapLeftAndRightInRTL(flipStyles) {
        if (!_NativeI18nManager.default) {
          return;
        }

        _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
      },
      isRTL: i18nConstants.isRTL,
      doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL,
    };
  },
  299,
  [7, 300]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("I18nManager");

    exports.default = _default;
  },
  300,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

    var _useAndroidRippleForView = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[5]);

    var _usePressability = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[8]);

    var _excluded = [
      "accessible",
      "android_disableSound",
      "android_ripple",
      "cancelable",
      "children",
      "delayHoverIn",
      "delayHoverOut",
      "delayLongPress",
      "disabled",
      "focusable",
      "hitSlop",
      "onHoverIn",
      "onHoverOut",
      "onLongPress",
      "onPress",
      "onPressIn",
      "onPressOut",
      "pressRetentionOffset",
      "style",
      "testOnly_pressed",
      "unstable_pressDelay",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function Pressable(props, forwardedRef) {
      var accessible = props.accessible,
        android_disableSound = props.android_disableSound,
        android_ripple = props.android_ripple,
        cancelable = props.cancelable,
        children = props.children,
        delayHoverIn = props.delayHoverIn,
        delayHoverOut = props.delayHoverOut,
        delayLongPress = props.delayLongPress,
        disabled = props.disabled,
        focusable = props.focusable,
        hitSlop = props.hitSlop,
        onHoverIn = props.onHoverIn,
        onHoverOut = props.onHoverOut,
        onLongPress = props.onLongPress,
        onPress = props.onPress,
        _onPressIn = props.onPressIn,
        _onPressOut = props.onPressOut,
        pressRetentionOffset = props.pressRetentionOffset,
        style = props.style,
        testOnly_pressed = props.testOnly_pressed,
        unstable_pressDelay = props.unstable_pressDelay,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      var viewRef = (0, React.useRef)(null);
      (0, React.useImperativeHandle)(forwardedRef, function () {
        return viewRef.current;
      });
      var android_rippleConfig = (0, _useAndroidRippleForView.default)(
        android_ripple,
        viewRef
      );

      var _usePressState = usePressState(testOnly_pressed === true),
        _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
        pressed = _usePressState2[0],
        setPressed = _usePressState2[1];

      var accessibilityState =
        disabled != null
          ? Object.assign({}, props.accessibilityState, {
              disabled: disabled,
            })
          : props.accessibilityState;
      var restPropsWithDefaults = Object.assign(
        {},
        restProps,
        android_rippleConfig == null
          ? undefined
          : android_rippleConfig.viewProps,
        {
          accessible: accessible !== false,
          accessibilityState: accessibilityState,
          focusable: focusable !== false,
          hitSlop: hitSlop,
        }
      );
      var config = (0, React.useMemo)(
        function () {
          return {
            cancelable: cancelable,
            disabled: disabled,
            hitSlop: hitSlop,
            pressRectOffset: pressRetentionOffset,
            android_disableSound: android_disableSound,
            delayHoverIn: delayHoverIn,
            delayHoverOut: delayHoverOut,
            delayLongPress: delayLongPress,
            delayPressIn: unstable_pressDelay,
            onHoverIn: onHoverIn,
            onHoverOut: onHoverOut,
            onLongPress: onLongPress,
            onPress: onPress,
            onPressIn: function onPressIn(event) {
              if (android_rippleConfig != null) {
                android_rippleConfig.onPressIn(event);
              }

              setPressed(true);

              if (_onPressIn != null) {
                _onPressIn(event);
              }
            },
            onPressMove:
              android_rippleConfig == null
                ? undefined
                : android_rippleConfig.onPressMove,
            onPressOut: function onPressOut(event) {
              if (android_rippleConfig != null) {
                android_rippleConfig.onPressOut(event);
              }

              setPressed(false);

              if (_onPressOut != null) {
                _onPressOut(event);
              }
            },
          };
        },
        [
          android_disableSound,
          android_rippleConfig,
          cancelable,
          delayHoverIn,
          delayHoverOut,
          delayLongPress,
          disabled,
          hitSlop,
          onHoverIn,
          onHoverOut,
          onLongPress,
          onPress,
          _onPressIn,
          _onPressOut,
          pressRetentionOffset,
          setPressed,
          unstable_pressDelay,
        ]
      );
      var eventHandlers = (0, _usePressability.default)(config);
      return (0, _jsxRuntime.jsxs)(
        _View.default,
        Object.assign({}, restPropsWithDefaults, eventHandlers, {
          ref: viewRef,
          style:
            typeof style === "function"
              ? style({
                  pressed: pressed,
                })
              : style,
          collapsable: false,
          children: [
            typeof children === "function"
              ? children({
                  pressed: pressed,
                })
              : children,
            null,
          ],
        })
      );
    }

    function usePressState(forcePressed) {
      var _useState = (0, React.useState)(false),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        pressed = _useState2[0],
        setPressed = _useState2[1];

      return [pressed || forcePressed, setPressed];
    }

    var MemoedPressable = React.memo(React.forwardRef(Pressable));
    MemoedPressable.displayName = "Pressable";
    var _default = MemoedPressable;
    exports.default = _default;
  },
  301,
  [7, 44, 92, 1, 302, 189, 191, 176, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = useAndroidRippleForView;

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _ViewNativeComponent = _$$_REQUIRE(_dependencyMap[2]);

    var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function useAndroidRippleForView(rippleConfig, viewRef) {
      var _ref = rippleConfig != null ? rippleConfig : {},
        color = _ref.color,
        borderless = _ref.borderless,
        radius = _ref.radius,
        foreground = _ref.foreground;

      return (0, React.useMemo)(
        function () {
          if (
            _reactNative.Platform.OS === "android" &&
            _reactNative.Platform.Version >= 21 &&
            (color != null || borderless != null || radius != null)
          ) {
            var processedColor = (0, _reactNative.processColor)(color);
            (0, _invariant.default)(
              processedColor == null || typeof processedColor === "number",
              "Unexpected color given for Ripple color"
            );
            var nativeRippleValue = {
              type: "RippleAndroid",
              color: processedColor,
              borderless: borderless === true,
              rippleRadius: radius,
            };
            return {
              viewProps:
                foreground === true
                  ? {
                      nativeForegroundAndroid: nativeRippleValue,
                    }
                  : {
                      nativeBackgroundAndroid: nativeRippleValue,
                    },
              onPressIn: function onPressIn(event) {
                var view = viewRef.current;

                if (view != null) {
                  var _event$nativeEvent$lo, _event$nativeEvent$lo2;

                  _ViewNativeComponent.Commands.hotspotUpdate(
                    view,
                    (_event$nativeEvent$lo = event.nativeEvent.locationX) !=
                      null
                      ? _event$nativeEvent$lo
                      : 0,
                    (_event$nativeEvent$lo2 = event.nativeEvent.locationY) !=
                      null
                      ? _event$nativeEvent$lo2
                      : 0
                  );

                  _ViewNativeComponent.Commands.setPressed(view, true);
                }
              },
              onPressMove: function onPressMove(event) {
                var view = viewRef.current;

                if (view != null) {
                  var _event$nativeEvent$lo3, _event$nativeEvent$lo4;

                  _ViewNativeComponent.Commands.hotspotUpdate(
                    view,
                    (_event$nativeEvent$lo3 = event.nativeEvent.locationX) !=
                      null
                      ? _event$nativeEvent$lo3
                      : 0,
                    (_event$nativeEvent$lo4 = event.nativeEvent.locationY) !=
                      null
                      ? _event$nativeEvent$lo4
                      : 0
                  );
                }
              },
              onPressOut: function onPressOut(event) {
                var view = viewRef.current;

                if (view != null) {
                  _ViewNativeComponent.Commands.setPressed(view, false);
                }
              },
            };
          }

          return null;
        },
        [borderless, color, foreground, radius, viewRef]
      );
    }
  },
  302,
  [7, 4, 177, 3, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[10]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var DummyProgressViewIOS = (function (_React$Component) {
      (0, _inherits2.default)(DummyProgressViewIOS, _React$Component);

      var _super = _createSuper(DummyProgressViewIOS);

      function DummyProgressViewIOS() {
        (0, _classCallCheck2.default)(this, DummyProgressViewIOS);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(DummyProgressViewIOS, [
        {
          key: "render",
          value: function render() {
            return (0, _jsxRuntime.jsx)(_View.default, {
              style: [styles.dummy, this.props.style],
              children: (0, _jsxRuntime.jsx)(_Text.default, {
                style: styles.text,
                children: "ProgressViewIOS is not supported on this platform!",
              }),
            });
          },
        },
      ]);
      return DummyProgressViewIOS;
    })(React.Component);

    var styles = _StyleSheet.default.create({
      dummy: {
        width: 120,
        height: 20,
        backgroundColor: "#ffbcbc",
        borderWidth: 1,
        borderColor: "red",
        alignItems: "center",
        justifyContent: "center",
      },
      text: {
        color: "#333333",
        margin: 5,
        fontSize: 10,
      },
    });

    module.exports = DummyProgressViewIOS;
  },
  303,
  [7, 16, 17, 28, 30, 33, 1, 175, 188, 176, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var exported;

    if (_Platform.default.OS === "android") {
      exported = _View.default;
    } else {
      exported = _$$_REQUIRE(_dependencyMap[4]).default;
    }

    var _default = exported;
    exports.default = _default;
  },
  304,
  [7, 54, 1, 176, 305]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)("SafeAreaView", {
      paperComponentName: "RCTSafeAreaView",
      interfaceOnly: true,
    });

    exports.default = _default;
  },
  305,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _SliderNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[6]);

    var _excluded = [
      "value",
      "minimumValue",
      "maximumValue",
      "step",
      "onValueChange",
      "onSlidingComplete",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Slider = function Slider(props, forwardedRef) {
      var _props$accessibilityS;

      var style = _StyleSheet.default.compose(styles.slider, props.style);

      var _props$value = props.value,
        value = _props$value === undefined ? 0.5 : _props$value,
        _props$minimumValue = props.minimumValue,
        minimumValue =
          _props$minimumValue === undefined ? 0 : _props$minimumValue,
        _props$maximumValue = props.maximumValue,
        maximumValue =
          _props$maximumValue === undefined ? 1 : _props$maximumValue,
        _props$step = props.step,
        step = _props$step === undefined ? 0 : _props$step,
        onValueChange = props.onValueChange,
        onSlidingComplete = props.onSlidingComplete,
        localProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      var onValueChangeEvent = onValueChange
        ? function (event) {
            var userEvent = true;

            if (_Platform.default.OS === "android") {
              userEvent =
                event.nativeEvent.fromUser != null &&
                event.nativeEvent.fromUser;
            }

            userEvent && onValueChange(event.nativeEvent.value);
          }
        : null;
      var onSlidingCompleteEvent = onSlidingComplete
        ? function (event) {
            onSlidingComplete(event.nativeEvent.value);
          }
        : null;
      var disabled =
        props.disabled === true ||
        ((_props$accessibilityS = props.accessibilityState) == null
          ? undefined
          : _props$accessibilityS.disabled) === true;
      var accessibilityState = disabled
        ? Object.assign({}, props.accessibilityState, {
            disabled: true,
          })
        : props.accessibilityState;
      return (0, _jsxRuntime.jsx)(
        _SliderNativeComponent.default,
        Object.assign({}, localProps, {
          accessibilityState: accessibilityState,
          enabled: !disabled,
          disabled: disabled,
          maximumValue: maximumValue,
          minimumValue: minimumValue,
          onResponderTerminationRequest:
            function onResponderTerminationRequest() {
              return false;
            },
          onSlidingComplete: onSlidingCompleteEvent,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onValueChange: onValueChangeEvent,
          ref: forwardedRef,
          step: step,
          style: style,
          value: value,
        })
      );
    };

    var SliderWithRef = React.forwardRef(Slider);
    var styles;

    if (_Platform.default.OS === "ios") {
      styles = _StyleSheet.default.create({
        slider: {
          height: 40,
        },
      });
    } else {
      styles = _StyleSheet.default.create({
        slider: {},
      });
    }

    module.exports = SliderWithRef;
  },
  306,
  [7, 92, 1, 54, 307, 175, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _default = (0, _codegenNativeComponent.default)("Slider", {
      interfaceOnly: true,
      paperComponentName: "RCTSlider",
    });

    exports.default = _default;
  },
  307,
  [7, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _useMergeRefs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _AndroidSwitchNativeComponent = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _SwitchNativeComponent = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);

    var _excluded = [
      "disabled",
      "ios_backgroundColor",
      "onChange",
      "onValueChange",
      "style",
      "thumbColor",
      "trackColor",
      "value",
    ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var returnsFalse = function returnsFalse() {
      return false;
    };

    var returnsTrue = function returnsTrue() {
      return true;
    };

    var SwitchWithForwardedRef = React.forwardRef(function Switch(
      props,
      forwardedRef
    ) {
      var disabled = props.disabled,
        ios_backgroundColor = props.ios_backgroundColor,
        onChange = props.onChange,
        onValueChange = props.onValueChange,
        style = props.style,
        thumbColor = props.thumbColor,
        trackColor = props.trackColor,
        value = props.value,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      var trackColorForFalse =
        trackColor == null ? undefined : trackColor.false;
      var trackColorForTrue = trackColor == null ? undefined : trackColor.true;
      var nativeSwitchRef = React.useRef(null);
      var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);

      var _React$useState = React.useState({
          value: null,
        }),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        native = _React$useState2[0],
        setNative = _React$useState2[1];

      var handleChange = function handleChange(event) {
        onChange == null ? undefined : onChange(event);
        onValueChange == null
          ? undefined
          : onValueChange(event.nativeEvent.value);
        setNative({
          value: event.nativeEvent.value,
        });
      };

      React.useLayoutEffect(
        function () {
          var _nativeSwitchRef$curr;

          var jsValue = value === true;
          var shouldUpdateNativeSwitch =
            native.value != null && native.value !== jsValue;

          if (
            shouldUpdateNativeSwitch &&
            ((_nativeSwitchRef$curr = nativeSwitchRef.current) == null
              ? undefined
              : _nativeSwitchRef$curr.setNativeProps) != null
          ) {
            if (_Platform.default.OS === "android") {
              _AndroidSwitchNativeComponent.Commands.setNativeValue(
                nativeSwitchRef.current,
                jsValue
              );
            } else {
              _SwitchNativeComponent.Commands.setValue(
                nativeSwitchRef.current,
                jsValue
              );
            }
          }
        },
        [value, native]
      );

      if (_Platform.default.OS === "android") {
        var _props$accessibilityR;

        var accessibilityState = restProps.accessibilityState;

        var _disabled =
          disabled != null
            ? disabled
            : accessibilityState == null
            ? undefined
            : accessibilityState.disabled;

        var _accessibilityState =
          _disabled !==
          (accessibilityState == null ? undefined : accessibilityState.disabled)
            ? Object.assign({}, accessibilityState, {
                disabled: _disabled,
              })
            : accessibilityState;

        var platformProps = {
          accessibilityState: _accessibilityState,
          enabled: _disabled !== true,
          on: value === true,
          style: style,
          thumbTintColor: thumbColor,
          trackColorForFalse: trackColorForFalse,
          trackColorForTrue: trackColorForTrue,
          trackTintColor:
            value === true ? trackColorForTrue : trackColorForFalse,
        };
        return (0, _jsxRuntime.jsx)(
          _AndroidSwitchNativeComponent.default,
          Object.assign({}, restProps, platformProps, {
            accessibilityRole:
              (_props$accessibilityR = props.accessibilityRole) != null
                ? _props$accessibilityR
                : "switch",
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref,
          })
        );
      } else {
        var _props$accessibilityR2;

        var _platformProps = {
          disabled: disabled,
          onTintColor: trackColorForTrue,
          style: _StyleSheet.default.compose(
            {
              height: 31,
              width: 51,
            },
            _StyleSheet.default.compose(
              style,
              ios_backgroundColor == null
                ? null
                : {
                    backgroundColor: ios_backgroundColor,
                    borderRadius: 16,
                  }
            )
          ),
          thumbTintColor: thumbColor,
          tintColor: trackColorForFalse,
          value: value === true,
        };
        return (0, _jsxRuntime.jsx)(
          _SwitchNativeComponent.default,
          Object.assign({}, restProps, _platformProps, {
            accessibilityRole:
              (_props$accessibilityR2 = props.accessibilityRole) != null
                ? _props$accessibilityR2
                : "switch",
            onChange: handleChange,
            onResponderTerminationRequest: returnsFalse,
            onStartShouldSetResponder: returnsTrue,
            ref: ref,
          })
        );
      }
    });
    var _default = SwitchWithForwardedRef;
    exports.default = _default;
  },
  308,
  [7, 44, 92, 54, 1, 175, 309, 310, 311, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = useMergeRefs;

    var _react = _$$_REQUIRE(_dependencyMap[0]);

    function useMergeRefs() {
      for (
        var _len = arguments.length, refs = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        refs[_key] = arguments[_key];
      }

      return (0, _react.useCallback)(function (current) {
        for (var ref of refs) {
          if (ref != null) {
            if (typeof ref === "function") {
              ref(current);
            } else {
              ref.current = current;
            }
          }
        }
      }, [].concat(refs));
    }
  },
  309,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.Commands = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["setNativeValue"],
    });
    exports.Commands = Commands;

    var _default = (0, _codegenNativeComponent.default)("AndroidSwitch", {
      interfaceOnly: true,
    });

    exports.default = _default;
  },
  310,
  [7, 1, 123, 183]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = exports.Commands = undefined;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _codegenNativeComponent = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["setValue"],
    });
    exports.Commands = Commands;

    var _default = (0, _codegenNativeComponent.default)("Switch", {
      paperComponentName: "RCTSwitch",
      excludedPlatforms: ["android"],
    });

    exports.default = _default;
  },
  311,
  [7, 1, 183, 123]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _TextAncestor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _TextInputState = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _setAndForwardRef = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[11])
    );

    var _usePressability = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[12])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);

    var _excluded = ["onBlur", "onFocus"],
      _excluded2 = [
        "allowFontScaling",
        "rejectResponderTermination",
        "underlineColorAndroid",
      ];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var useLayoutEffect = React.useLayoutEffect,
      useRef = React.useRef,
      useState = React.useState;
    var AndroidTextInput;
    var AndroidTextInputCommands;
    var RCTSinglelineTextInputView;
    var RCTSinglelineTextInputNativeCommands;
    var RCTMultilineTextInputView;
    var RCTMultilineTextInputNativeCommands;

    if (_Platform.default.OS === "android") {
      AndroidTextInput = _$$_REQUIRE(_dependencyMap[14]).default;
      AndroidTextInputCommands = _$$_REQUIRE(_dependencyMap[14]).Commands;
    } else if (_Platform.default.OS === "ios") {
      RCTSinglelineTextInputView = _$$_REQUIRE(_dependencyMap[15]).default;
      RCTSinglelineTextInputNativeCommands = _$$_REQUIRE(
        _dependencyMap[15]
      ).Commands;
      RCTMultilineTextInputView = _$$_REQUIRE(_dependencyMap[16]).default;
      RCTMultilineTextInputNativeCommands = _$$_REQUIRE(
        _dependencyMap[16]
      ).Commands;
    }

    var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
      return true;
    };

    function InternalTextInput(props) {
      var _props$selection$end, _props$blurOnSubmit;

      var inputRef = useRef(null);
      var selection =
        props.selection == null
          ? null
          : {
              start: props.selection.start,
              end:
                (_props$selection$end = props.selection.end) != null
                  ? _props$selection$end
                  : props.selection.start,
            };

      var _useState = useState(0),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        mostRecentEventCount = _useState2[0],
        setMostRecentEventCount = _useState2[1];

      var _useState3 = useState(props.value),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        lastNativeText = _useState4[0],
        setLastNativeText = _useState4[1];

      var _useState5 = useState({
          selection: selection,
          mostRecentEventCount: mostRecentEventCount,
        }),
        _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
        lastNativeSelectionState = _useState6[0],
        setLastNativeSelection = _useState6[1];

      var lastNativeSelection = lastNativeSelectionState.selection;
      var lastNativeSelectionEventCount =
        lastNativeSelectionState.mostRecentEventCount;

      if (lastNativeSelectionEventCount < mostRecentEventCount) {
        selection = null;
      }

      var viewCommands;

      if (AndroidTextInputCommands) {
        viewCommands = AndroidTextInputCommands;
      } else {
        viewCommands =
          props.multiline === true
            ? RCTMultilineTextInputNativeCommands
            : RCTSinglelineTextInputNativeCommands;
      }

      var text =
        typeof props.value === "string"
          ? props.value
          : typeof lastNativeText === "string"
          ? lastNativeText
          : typeof props.defaultValue === "string"
          ? props.defaultValue
          : "";
      useLayoutEffect(
        function () {
          var nativeUpdate = {};

          if (
            lastNativeText !== props.value &&
            typeof props.value === "string"
          ) {
            nativeUpdate.text = props.value;
            setLastNativeText(props.value);
          }

          if (
            selection &&
            lastNativeSelection &&
            (lastNativeSelection.start !== selection.start ||
              lastNativeSelection.end !== selection.end)
          ) {
            nativeUpdate.selection = selection;
            setLastNativeSelection({
              selection: selection,
              mostRecentEventCount: mostRecentEventCount,
            });
          }

          if (Object.keys(nativeUpdate).length === 0) {
            return;
          }

          if (inputRef.current != null) {
            var _selection$start, _selection, _selection$end, _selection2;

            viewCommands.setTextAndSelection(
              inputRef.current,
              mostRecentEventCount,
              text,
              (_selection$start =
                (_selection = selection) == null
                  ? undefined
                  : _selection.start) != null
                ? _selection$start
                : -1,
              (_selection$end =
                (_selection2 = selection) == null
                  ? undefined
                  : _selection2.end) != null
                ? _selection$end
                : -1
            );
          }
        },
        [
          mostRecentEventCount,
          inputRef,
          props.value,
          props.defaultValue,
          lastNativeText,
          selection,
          lastNativeSelection,
          text,
          viewCommands,
        ]
      );
      useLayoutEffect(
        function () {
          var inputRefValue = inputRef.current;

          if (inputRefValue != null) {
            _TextInputState.default.registerInput(inputRefValue);

            return function () {
              _TextInputState.default.unregisterInput(inputRefValue);

              if (
                _TextInputState.default.currentlyFocusedInput() ===
                inputRefValue
              ) {
                (0, _nullthrows.default)(inputRefValue).blur();
              }
            };
          }
        },
        [inputRef]
      );

      function clear() {
        if (inputRef.current != null) {
          viewCommands.setTextAndSelection(
            inputRef.current,
            mostRecentEventCount,
            "",
            0,
            0
          );
        }
      }

      function setSelection(start, end) {
        if (inputRef.current != null) {
          viewCommands.setTextAndSelection(
            inputRef.current,
            mostRecentEventCount,
            null,
            start,
            end
          );
        }
      }

      function isFocused() {
        return (
          _TextInputState.default.currentlyFocusedInput() === inputRef.current
        );
      }

      function getNativeRef() {
        return inputRef.current;
      }

      var _setNativeRef = (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          inputRef.current = ref;

          if (ref) {
            ref.clear = clear;
            ref.isFocused = isFocused;
            ref.getNativeRef = getNativeRef;
            ref.setSelection = setSelection;
          }
        },
      });

      var _onChange = function _onChange(event) {
        var currentText = event.nativeEvent.text;
        props.onChange && props.onChange(event);
        props.onChangeText && props.onChangeText(currentText);

        if (inputRef.current == null) {
          return;
        }

        setLastNativeText(currentText);
        setMostRecentEventCount(event.nativeEvent.eventCount);
      };

      var _onChangeSync = function _onChangeSync(event) {
        var currentText = event.nativeEvent.text;
        props.unstable_onChangeSync && props.unstable_onChangeSync(event);
        props.unstable_onChangeTextSync &&
          props.unstable_onChangeTextSync(currentText);

        if (inputRef.current == null) {
          return;
        }

        setLastNativeText(currentText);
        setMostRecentEventCount(event.nativeEvent.eventCount);
      };

      var _onSelectionChange = function _onSelectionChange(event) {
        props.onSelectionChange && props.onSelectionChange(event);

        if (inputRef.current == null) {
          return;
        }

        setLastNativeSelection({
          selection: event.nativeEvent.selection,
          mostRecentEventCount: mostRecentEventCount,
        });
      };

      var _onFocus = function _onFocus(event) {
        _TextInputState.default.focusInput(inputRef.current);

        if (props.onFocus) {
          props.onFocus(event);
        }
      };

      var _onBlur = function _onBlur(event) {
        _TextInputState.default.blurInput(inputRef.current);

        if (props.onBlur) {
          props.onBlur(event);
        }
      };

      var _onScroll = function _onScroll(event) {
        props.onScroll && props.onScroll(event);
      };

      var textInput = null;
      var blurOnSubmit =
        (_props$blurOnSubmit = props.blurOnSubmit) != null
          ? _props$blurOnSubmit
          : !props.multiline;
      var accessible = props.accessible !== false;
      var focusable = props.focusable !== false;
      var config = React.useMemo(
        function () {
          return {
            onPress: function onPress(event) {
              if (props.editable !== false) {
                if (inputRef.current != null) {
                  inputRef.current.focus();
                }
              }
            },
            onPressIn: props.onPressIn,
            onPressOut: props.onPressOut,
            cancelable:
              _Platform.default.OS === "ios"
                ? !props.rejectResponderTermination
                : null,
          };
        },
        [
          props.editable,
          props.onPressIn,
          props.onPressOut,
          props.rejectResponderTermination,
        ]
      );
      var caretHidden = props.caretHidden;

      if (_Platform.default.isTesting) {
        caretHidden = true;
      }

      var _ref = (0, _usePressability.default)(config) || {},
        onBlur = _ref.onBlur,
        onFocus = _ref.onFocus,
        eventHandlers = (0, _objectWithoutProperties2.default)(_ref, _excluded);

      if (_Platform.default.OS === "ios") {
        var RCTTextInputView =
          props.multiline === true
            ? RCTMultilineTextInputView
            : RCTSinglelineTextInputView;
        var style =
          props.multiline === true
            ? _StyleSheet.default.flatten([styles.multilineInput, props.style])
            : props.style;
        var useOnChangeSync =
          (props.unstable_onChangeSync || props.unstable_onChangeTextSync) &&
          !(props.onChange || props.onChangeText);
        textInput = (0, _jsxRuntime.jsx)(
          RCTTextInputView,
          Object.assign(
            {
              ref: _setNativeRef,
            },
            props,
            eventHandlers,
            {
              accessible: accessible,
              blurOnSubmit: blurOnSubmit,
              caretHidden: caretHidden,
              dataDetectorTypes: props.dataDetectorTypes,
              focusable: focusable,
              mostRecentEventCount: mostRecentEventCount,
              onBlur: _onBlur,
              onKeyPressSync: props.unstable_onKeyPressSync,
              onChange: _onChange,
              onChangeSync: useOnChangeSync === true ? _onChangeSync : null,
              onContentSizeChange: props.onContentSizeChange,
              onFocus: _onFocus,
              onScroll: _onScroll,
              onSelectionChange: _onSelectionChange,
              onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
              selection: selection,
              style: style,
              text: text,
            }
          )
        );
      } else if (_Platform.default.OS === "android") {
        var _props$placeholder;

        var _style = [props.style];
        var autoCapitalize = props.autoCapitalize || "sentences";
        var placeholder =
          (_props$placeholder = props.placeholder) != null
            ? _props$placeholder
            : "";
        var children = props.children;
        var childCount = React.Children.count(children);
        (0, _invariant.default)(
          !(props.value != null && childCount),
          "Cannot specify both value and children."
        );

        if (childCount > 1) {
          children = (0, _jsxRuntime.jsx)(_Text.default, {
            children: children,
          });
        }

        textInput = (0, _jsxRuntime.jsx)(
          AndroidTextInput,
          Object.assign(
            {
              ref: _setNativeRef,
            },
            props,
            eventHandlers,
            {
              accessible: accessible,
              autoCapitalize: autoCapitalize,
              blurOnSubmit: blurOnSubmit,
              caretHidden: caretHidden,
              children: children,
              disableFullscreenUI: props.disableFullscreenUI,
              focusable: focusable,
              mostRecentEventCount: mostRecentEventCount,
              onBlur: _onBlur,
              onChange: _onChange,
              onFocus: _onFocus,
              onScroll: _onScroll,
              onSelectionChange: _onSelectionChange,
              placeholder: placeholder,
              selection: selection,
              style: _style,
              text: text,
              textBreakStrategy: props.textBreakStrategy,
            }
          )
        );
      }

      return (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
        value: true,
        children: textInput,
      });
    }

    var ExportedForwardRef = React.forwardRef(function TextInput(
      _ref2,
      forwardedRef
    ) {
      var _ref2$allowFontScalin = _ref2.allowFontScaling,
        allowFontScaling =
          _ref2$allowFontScalin === undefined ? true : _ref2$allowFontScalin,
        _ref2$rejectResponder = _ref2.rejectResponderTermination,
        rejectResponderTermination =
          _ref2$rejectResponder === undefined ? true : _ref2$rejectResponder,
        _ref2$underlineColorA = _ref2.underlineColorAndroid,
        underlineColorAndroid =
          _ref2$underlineColorA === undefined
            ? "transparent"
            : _ref2$underlineColorA,
        restProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(
        InternalTextInput,
        Object.assign(
          {
            allowFontScaling: allowFontScaling,
            rejectResponderTermination: rejectResponderTermination,
            underlineColorAndroid: underlineColorAndroid,
          },
          restProps,
          {
            forwardedRef: forwardedRef,
          }
        )
      );
    });
    ExportedForwardRef.State = {
      currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
      currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
      focusTextInput: _TextInputState.default.focusTextInput,
      blurTextInput: _TextInputState.default.blurTextInput,
    };

    var styles = _StyleSheet.default.create({
      multilineInput: {
        paddingTop: 5,
      },
    });

    module.exports = ExportedForwardRef;
  },
  312,
  [7, 92, 44, 1, 54, 175, 188, 178, 121, 4, 285, 236, 191, 179, 122, 163, 313]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default =
      exports.__INTERNAL_VIEW_CONFIG =
      exports.Commands =
        undefined;

    var _codegenNativeCommands = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _RCTTextInputViewConfig = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var NativeComponentRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[3])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var Commands = (0, _codegenNativeCommands.default)({
      supportedCommands: ["focus", "blur", "setTextAndSelection"],
    });
    exports.Commands = Commands;

    var __INTERNAL_VIEW_CONFIG = Object.assign(
      {
        uiViewClassName: "RCTMultilineTextInputView",
      },
      _RCTTextInputViewConfig.default,
      {
        validAttributes: Object.assign(
          {},
          _RCTTextInputViewConfig.default.validAttributes,
          {
            dataDetectorTypes: true,
          }
        ),
      }
    );

    exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
    var MultilineTextInputNativeComponent = NativeComponentRegistry.get(
      "RCTMultilineTextInputView",
      function () {
        return __INTERNAL_VIEW_CONFIG;
      }
    );
    var _default = MultilineTextInputNativeComponent;
    exports.default = _default;
  },
  313,
  [7, 123, 164, 128]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

    var _BoundingDimensions = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _Position = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _UIManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var _SoundManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[8]);

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9]);

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var extractSingleTouch = function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches
        ? changedTouches[0]
        : hasTouches
        ? touches[0]
        : nativeEvent;
    };

    var States = {
      NOT_RESPONDER: "NOT_RESPONDER",
      RESPONDER_INACTIVE_PRESS_IN: "RESPONDER_INACTIVE_PRESS_IN",
      RESPONDER_INACTIVE_PRESS_OUT: "RESPONDER_INACTIVE_PRESS_OUT",
      RESPONDER_ACTIVE_PRESS_IN: "RESPONDER_ACTIVE_PRESS_IN",
      RESPONDER_ACTIVE_PRESS_OUT: "RESPONDER_ACTIVE_PRESS_OUT",
      RESPONDER_ACTIVE_LONG_PRESS_IN: "RESPONDER_ACTIVE_LONG_PRESS_IN",
      RESPONDER_ACTIVE_LONG_PRESS_OUT: "RESPONDER_ACTIVE_LONG_PRESS_OUT",
      ERROR: "ERROR",
    };
    var baseStatesConditions = {
      NOT_RESPONDER: false,
      RESPONDER_INACTIVE_PRESS_IN: false,
      RESPONDER_INACTIVE_PRESS_OUT: false,
      RESPONDER_ACTIVE_PRESS_IN: false,
      RESPONDER_ACTIVE_PRESS_OUT: false,
      RESPONDER_ACTIVE_LONG_PRESS_IN: false,
      RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
      ERROR: false,
    };
    var IsActive = Object.assign({}, baseStatesConditions, {
      RESPONDER_ACTIVE_PRESS_OUT: true,
      RESPONDER_ACTIVE_PRESS_IN: true,
    });
    var IsPressingIn = Object.assign({}, baseStatesConditions, {
      RESPONDER_INACTIVE_PRESS_IN: true,
      RESPONDER_ACTIVE_PRESS_IN: true,
      RESPONDER_ACTIVE_LONG_PRESS_IN: true,
    });
    var IsLongPressingIn = Object.assign({}, baseStatesConditions, {
      RESPONDER_ACTIVE_LONG_PRESS_IN: true,
    });
    var Signals = {
      DELAY: "DELAY",
      RESPONDER_GRANT: "RESPONDER_GRANT",
      RESPONDER_RELEASE: "RESPONDER_RELEASE",
      RESPONDER_TERMINATED: "RESPONDER_TERMINATED",
      ENTER_PRESS_RECT: "ENTER_PRESS_RECT",
      LEAVE_PRESS_RECT: "LEAVE_PRESS_RECT",
      LONG_PRESS_DETECTED: "LONG_PRESS_DETECTED",
    };
    var Transitions = {
      NOT_RESPONDER: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.ERROR,
        RESPONDER_TERMINATED: States.ERROR,
        ENTER_PRESS_RECT: States.ERROR,
        LEAVE_PRESS_RECT: States.ERROR,
        LONG_PRESS_DETECTED: States.ERROR,
      },
      RESPONDER_INACTIVE_PRESS_IN: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR,
      },
      RESPONDER_INACTIVE_PRESS_OUT: {
        DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR,
      },
      RESPONDER_ACTIVE_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      },
      RESPONDER_ACTIVE_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR,
      },
      RESPONDER_ACTIVE_LONG_PRESS_IN: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      },
      RESPONDER_ACTIVE_LONG_PRESS_OUT: {
        DELAY: States.ERROR,
        RESPONDER_GRANT: States.ERROR,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
        LONG_PRESS_DETECTED: States.ERROR,
      },
      error: {
        DELAY: States.NOT_RESPONDER,
        RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
        RESPONDER_RELEASE: States.NOT_RESPONDER,
        RESPONDER_TERMINATED: States.NOT_RESPONDER,
        ENTER_PRESS_RECT: States.NOT_RESPONDER,
        LEAVE_PRESS_RECT: States.NOT_RESPONDER,
        LONG_PRESS_DETECTED: States.NOT_RESPONDER,
      },
    };
    var HIGHLIGHT_DELAY_MS = 130;
    var PRESS_EXPAND_PX = 20;
    var LONG_PRESS_THRESHOLD = 500;
    var LONG_PRESS_DELAY_MS = 370;
    var LONG_PRESS_ALLOWED_MOVEMENT = 10;
    var TouchableMixin = {
      componentDidMount: function componentDidMount() {
        if (!_Platform.default.isTV) {
          return;
        }
      },
      componentWillUnmount: function componentWillUnmount() {
        this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      },
      touchableGetInitialState: function touchableGetInitialState() {
        return {
          touchable: {
            touchState: undefined,
            responderID: null,
          },
        };
      },
      touchableHandleResponderTerminationRequest:
        function touchableHandleResponderTerminationRequest() {
          return !this.props.rejectResponderTermination;
        },
      touchableHandleStartShouldSetResponder:
        function touchableHandleStartShouldSetResponder() {
          return !this.props.disabled;
        },
      touchableLongPressCancelsPress:
        function touchableLongPressCancelsPress() {
          return true;
        },
      touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
        var dispatchID = e.currentTarget;
        e.persist();
        this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
        this.pressOutDelayTimeout = null;
        this.state.touchable.touchState = States.NOT_RESPONDER;
        this.state.touchable.responderID = dispatchID;

        this._receiveSignal(Signals.RESPONDER_GRANT, e);

        var delayMS =
          this.touchableGetHighlightDelayMS !== undefined
            ? Math.max(this.touchableGetHighlightDelayMS(), 0)
            : HIGHLIGHT_DELAY_MS;
        delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

        if (delayMS !== 0) {
          this.touchableDelayTimeout = setTimeout(
            this._handleDelay.bind(this, e),
            delayMS
          );
        } else {
          this._handleDelay(e);
        }

        var longDelayMS =
          this.touchableGetLongPressDelayMS !== undefined
            ? Math.max(this.touchableGetLongPressDelayMS(), 10)
            : LONG_PRESS_DELAY_MS;
        longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
        this.longPressDelayTimeout = setTimeout(
          this._handleLongDelay.bind(this, e),
          longDelayMS + delayMS
        );
      },
      touchableHandleResponderRelease: function touchableHandleResponderRelease(
        e
      ) {
        this.pressInLocation = null;

        this._receiveSignal(Signals.RESPONDER_RELEASE, e);
      },
      touchableHandleResponderTerminate:
        function touchableHandleResponderTerminate(e) {
          this.pressInLocation = null;

          this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
        },
      touchableHandleResponderMove: function touchableHandleResponderMove(e) {
        if (!this.state.touchable.positionOnActivate) {
          return;
        }

        var positionOnActivate = this.state.touchable.positionOnActivate;
        var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
        var pressRectOffset = this.touchableGetPressRectOffset
          ? this.touchableGetPressRectOffset()
          : {
              left: PRESS_EXPAND_PX,
              right: PRESS_EXPAND_PX,
              top: PRESS_EXPAND_PX,
              bottom: PRESS_EXPAND_PX,
            };
        var pressExpandLeft = pressRectOffset.left;
        var pressExpandTop = pressRectOffset.top;
        var pressExpandRight = pressRectOffset.right;
        var pressExpandBottom = pressRectOffset.bottom;
        var hitSlop = this.touchableGetHitSlop
          ? this.touchableGetHitSlop()
          : null;

        if (hitSlop) {
          pressExpandLeft += hitSlop.left || 0;
          pressExpandTop += hitSlop.top || 0;
          pressExpandRight += hitSlop.right || 0;
          pressExpandBottom += hitSlop.bottom || 0;
        }

        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;

        if (this.pressInLocation) {
          var movedDistance = this._getDistanceBetweenPoints(
            pageX,
            pageY,
            this.pressInLocation.pageX,
            this.pressInLocation.pageY
          );

          if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
            this._cancelLongPressDelayTimeout();
          }
        }

        var isTouchWithinActive =
          pageX > positionOnActivate.left - pressExpandLeft &&
          pageY > positionOnActivate.top - pressExpandTop &&
          pageX <
            positionOnActivate.left +
              dimensionsOnActivate.width +
              pressExpandRight &&
          pageY <
            positionOnActivate.top +
              dimensionsOnActivate.height +
              pressExpandBottom;

        if (isTouchWithinActive) {
          var prevState = this.state.touchable.touchState;

          this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

          var curState = this.state.touchable.touchState;

          if (
            curState === States.RESPONDER_INACTIVE_PRESS_IN &&
            prevState !== States.RESPONDER_INACTIVE_PRESS_IN
          ) {
            this._cancelLongPressDelayTimeout();
          }
        } else {
          this._cancelLongPressDelayTimeout();

          this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
        }
      },
      touchableHandleFocus: function touchableHandleFocus(e) {
        this.props.onFocus && this.props.onFocus(e);
      },
      touchableHandleBlur: function touchableHandleBlur(e) {
        this.props.onBlur && this.props.onBlur(e);
      },
      _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
        var responderID = this.state.touchable.responderID;

        if (responderID == null) {
          return;
        }

        if (typeof responderID === "number") {
          _UIManager.default.measure(responderID, this._handleQueryLayout);
        } else {
          responderID.measure(this._handleQueryLayout);
        }
      },
      _handleQueryLayout: function _handleQueryLayout(
        l,
        t,
        w,
        h,
        globalX,
        globalY
      ) {
        if (!l && !t && !w && !h && !globalX && !globalY) {
          return;
        }

        this.state.touchable.positionOnActivate &&
          _Position.default.release(this.state.touchable.positionOnActivate);
        this.state.touchable.dimensionsOnActivate &&
          _BoundingDimensions.default.release(
            this.state.touchable.dimensionsOnActivate
          );
        this.state.touchable.positionOnActivate = _Position.default.getPooled(
          globalX,
          globalY
        );
        this.state.touchable.dimensionsOnActivate =
          _BoundingDimensions.default.getPooled(w, h);
      },
      _handleDelay: function _handleDelay(e) {
        this.touchableDelayTimeout = null;

        this._receiveSignal(Signals.DELAY, e);
      },
      _handleLongDelay: function _handleLongDelay(e) {
        this.longPressDelayTimeout = null;
        var curState = this.state.touchable.touchState;

        if (
          curState === States.RESPONDER_ACTIVE_PRESS_IN ||
          curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN
        ) {
          this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
        }
      },
      _receiveSignal: function _receiveSignal(signal, e) {
        var responderID = this.state.touchable.responderID;
        var curState = this.state.touchable.touchState;
        var nextState = Transitions[curState] && Transitions[curState][signal];

        if (!responderID && signal === Signals.RESPONDER_RELEASE) {
          return;
        }

        if (!nextState) {
          throw new Error(
            "Unrecognized signal `" +
              signal +
              "` or state `" +
              curState +
              "` for Touchable responder `" +
              typeof this.state.touchable.responderID ===
            "number"
              ? this.state.touchable.responderID
              : "host component`"
          );
        }

        if (nextState === States.ERROR) {
          throw new Error(
            "Touchable cannot transition from `" +
              curState +
              "` to `" +
              signal +
              "` for responder `" +
              typeof this.state.touchable.responderID ===
            "number"
              ? this.state.touchable.responderID
              : "<<host component>>`"
          );
        }

        if (curState !== nextState) {
          this._performSideEffectsForTransition(curState, nextState, signal, e);

          this.state.touchable.touchState = nextState;
        }
      },
      _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
        this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
        this.longPressDelayTimeout = null;
      },
      _isHighlight: function _isHighlight(state) {
        return (
          state === States.RESPONDER_ACTIVE_PRESS_IN ||
          state === States.RESPONDER_ACTIVE_LONG_PRESS_IN
        );
      },
      _savePressInLocation: function _savePressInLocation(e) {
        var touch = extractSingleTouch(e.nativeEvent);
        var pageX = touch && touch.pageX;
        var pageY = touch && touch.pageY;
        var locationX = touch && touch.locationX;
        var locationY = touch && touch.locationY;
        this.pressInLocation = {
          pageX: pageX,
          pageY: pageY,
          locationX: locationX,
          locationY: locationY,
        };
      },
      _getDistanceBetweenPoints: function _getDistanceBetweenPoints(
        aX,
        aY,
        bX,
        bY
      ) {
        var deltaX = aX - bX;
        var deltaY = aY - bY;
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      },
      _performSideEffectsForTransition:
        function _performSideEffectsForTransition(
          curState,
          nextState,
          signal,
          e
        ) {
          var curIsHighlight = this._isHighlight(curState);

          var newIsHighlight = this._isHighlight(nextState);

          var isFinalSignal =
            signal === Signals.RESPONDER_TERMINATED ||
            signal === Signals.RESPONDER_RELEASE;

          if (isFinalSignal) {
            this._cancelLongPressDelayTimeout();
          }

          var isInitialTransition =
            curState === States.NOT_RESPONDER &&
            nextState === States.RESPONDER_INACTIVE_PRESS_IN;
          var isActiveTransition = !IsActive[curState] && IsActive[nextState];

          if (isInitialTransition || isActiveTransition) {
            this._remeasureMetricsOnActivation();
          }

          if (
            IsPressingIn[curState] &&
            signal === Signals.LONG_PRESS_DETECTED
          ) {
            this.touchableHandleLongPress && this.touchableHandleLongPress(e);
          }

          if (newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
          } else if (!newIsHighlight && curIsHighlight) {
            this._endHighlight(e);
          }

          if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
            var hasLongPressHandler = !!this.props.onLongPress;
            var pressIsLongButStillCallOnPress =
              IsLongPressingIn[curState] &&
              (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
            var shouldInvokePress =
              !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

            if (shouldInvokePress && this.touchableHandlePress) {
              if (!newIsHighlight && !curIsHighlight) {
                this._startHighlight(e);

                this._endHighlight(e);
              }

              if (
                _Platform.default.OS === "android" &&
                !this.props.touchSoundDisabled
              ) {
                _SoundManager.default.playTouchSound();
              }

              this.touchableHandlePress(e);
            }
          }

          this.touchableDelayTimeout &&
            clearTimeout(this.touchableDelayTimeout);
          this.touchableDelayTimeout = null;
        },
      _startHighlight: function _startHighlight(e) {
        this._savePressInLocation(e);

        this.touchableHandleActivePressIn &&
          this.touchableHandleActivePressIn(e);
      },
      _endHighlight: function _endHighlight(e) {
        var _this = this;

        if (this.touchableHandleActivePressOut) {
          if (
            this.touchableGetPressOutDelayMS &&
            this.touchableGetPressOutDelayMS()
          ) {
            this.pressOutDelayTimeout = setTimeout(function () {
              _this.touchableHandleActivePressOut(e);
            }, this.touchableGetPressOutDelayMS());
          } else {
            this.touchableHandleActivePressOut(e);
          }
        }
      },
      withoutDefaultFocusAndBlur: {},
    };
    var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
      touchableHandleBlur = TouchableMixin.touchableHandleBlur,
      TouchableMixinWithoutDefaultFocusAndBlur = (0,
      _objectWithoutProperties2.default)(TouchableMixin, [
        "touchableHandleFocus",
        "touchableHandleBlur",
      ]);
    TouchableMixin.withoutDefaultFocusAndBlur =
      TouchableMixinWithoutDefaultFocusAndBlur;
    var Touchable = {
      Mixin: TouchableMixin,
      renderDebugView: function renderDebugView(_ref) {
        var color = _ref.color,
          hitSlop = _ref.hitSlop;
        return null;
      },
    };
    module.exports = Touchable;
  },
  314,
  [7, 92, 1, 315, 54, 317, 142, 194, 189, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _PooledClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

    function BoundingDimensions(width, height) {
      this.width = width;
      this.height = height;
    }

    BoundingDimensions.prototype.destructor = function () {
      this.width = null;
      this.height = null;
    };

    BoundingDimensions.getPooledFromElement = function (element) {
      return BoundingDimensions.getPooled(
        element.offsetWidth,
        element.offsetHeight
      );
    };

    _PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);

    module.exports = BoundingDimensions;
  },
  315,
  [7, 316]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
      var Klass = this;

      if (Klass.instancePool.length) {
        var _instance = Klass.instancePool.pop();

        Klass.call(_instance, copyFieldsFrom);
        return _instance;
      } else {
        return new Klass(copyFieldsFrom);
      }
    };

    var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
      var Klass = this;

      if (Klass.instancePool.length) {
        var _instance2 = Klass.instancePool.pop();

        Klass.call(_instance2, a1, a2);
        return _instance2;
      } else {
        return new Klass(a1, a2);
      }
    };

    var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
      var Klass = this;

      if (Klass.instancePool.length) {
        var _instance3 = Klass.instancePool.pop();

        Klass.call(_instance3, a1, a2, a3);
        return _instance3;
      } else {
        return new Klass(a1, a2, a3);
      }
    };

    var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
      var Klass = this;

      if (Klass.instancePool.length) {
        var _instance4 = Klass.instancePool.pop();

        Klass.call(_instance4, a1, a2, a3, a4);
        return _instance4;
      } else {
        return new Klass(a1, a2, a3, a4);
      }
    };

    var standardReleaser = function standardReleaser(instance) {
      var Klass = this;
      (0, _invariant.default)(
        instance instanceof Klass,
        "Trying to release an instance into a pool of a different type."
      );
      instance.destructor();

      if (Klass.instancePool.length < Klass.poolSize) {
        Klass.instancePool.push(instance);
      }
    };

    var DEFAULT_POOL_SIZE = 10;
    var DEFAULT_POOLER = oneArgumentPooler;

    var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
      var NewKlass = CopyConstructor;
      NewKlass.instancePool = [];
      NewKlass.getPooled = pooler || DEFAULT_POOLER;

      if (!NewKlass.poolSize) {
        NewKlass.poolSize = DEFAULT_POOL_SIZE;
      }

      NewKlass.release = standardReleaser;
      return NewKlass;
    };

    var PooledClass = {
      addPoolingTo: addPoolingTo,
      oneArgumentPooler: oneArgumentPooler,
      twoArgumentPooler: twoArgumentPooler,
      threeArgumentPooler: threeArgumentPooler,
      fourArgumentPooler: fourArgumentPooler,
    };
    module.exports = PooledClass;
  },
  316,
  [7, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _PooledClass = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;

    function Position(left, top) {
      this.left = left;
      this.top = top;
    }

    Position.prototype.destructor = function () {
      this.left = null;
      this.top = null;
    };

    _PooledClass.default.addPoolingTo(Position, twoArgumentPooler);

    module.exports = Position;
  },
  317,
  [7, 316]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[8]);

    var _StyleSheet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[13]);

    var _excluded = ["onBlur", "onFocus"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var TouchableHighlight = (function (_React$Component) {
      (0, _inherits2.default)(TouchableHighlight, _React$Component);

      var _super = _createSuper(TouchableHighlight);

      function TouchableHighlight() {
        var _this;

        (0, _classCallCheck2.default)(this, TouchableHighlight);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this._isMounted = false;
        _this.state = {
          pressability: new _Pressability.default(
            _this._createPressabilityConfig()
          ),
          extraStyles:
            _this.props.testOnly_pressed === true
              ? _this._createExtraStyles()
              : null,
        };
        return _this;
      }

      (0, _createClass2.default)(TouchableHighlight, [
        {
          key: "_createPressabilityConfig",
          value: function _createPressabilityConfig() {
            var _this$props$accessibi,
              _this2 = this;

            return {
              cancelable: !this.props.rejectResponderTermination,
              disabled:
                this.props.disabled != null
                  ? this.props.disabled
                  : (_this$props$accessibi = this.props.accessibilityState) ==
                    null
                  ? undefined
                  : _this$props$accessibi.disabled,
              hitSlop: this.props.hitSlop,
              delayLongPress: this.props.delayLongPress,
              delayPressIn: this.props.delayPressIn,
              delayPressOut: this.props.delayPressOut,
              minPressDuration: 0,
              pressRectOffset: this.props.pressRetentionOffset,
              android_disableSound: this.props.touchSoundDisabled,
              onBlur: function onBlur(event) {
                if (_Platform.default.isTV) {
                  _this2._hideUnderlay();
                }

                if (_this2.props.onBlur != null) {
                  _this2.props.onBlur(event);
                }
              },
              onFocus: function onFocus(event) {
                if (_Platform.default.isTV) {
                  _this2._showUnderlay();
                }

                if (_this2.props.onFocus != null) {
                  _this2.props.onFocus(event);
                }
              },
              onLongPress: this.props.onLongPress,
              onPress: function onPress(event) {
                if (_this2._hideTimeout != null) {
                  clearTimeout(_this2._hideTimeout);
                }

                if (!_Platform.default.isTV) {
                  var _this2$props$delayPre;

                  _this2._showUnderlay();

                  _this2._hideTimeout = setTimeout(
                    function () {
                      _this2._hideUnderlay();
                    },
                    (_this2$props$delayPre = _this2.props.delayPressOut) != null
                      ? _this2$props$delayPre
                      : 0
                  );
                }

                if (_this2.props.onPress != null) {
                  _this2.props.onPress(event);
                }
              },
              onPressIn: function onPressIn(event) {
                if (_this2._hideTimeout != null) {
                  clearTimeout(_this2._hideTimeout);
                  _this2._hideTimeout = null;
                }

                _this2._showUnderlay();

                if (_this2.props.onPressIn != null) {
                  _this2.props.onPressIn(event);
                }
              },
              onPressOut: function onPressOut(event) {
                if (_this2._hideTimeout == null) {
                  _this2._hideUnderlay();
                }

                if (_this2.props.onPressOut != null) {
                  _this2.props.onPressOut(event);
                }
              },
            };
          },
        },
        {
          key: "_createExtraStyles",
          value: function _createExtraStyles() {
            var _this$props$activeOpa;

            return {
              child: {
                opacity:
                  (_this$props$activeOpa = this.props.activeOpacity) != null
                    ? _this$props$activeOpa
                    : 0.85,
              },
              underlay: {
                backgroundColor:
                  this.props.underlayColor === undefined
                    ? "black"
                    : this.props.underlayColor,
              },
            };
          },
        },
        {
          key: "_showUnderlay",
          value: function _showUnderlay() {
            if (!this._isMounted || !this._hasPressHandler()) {
              return;
            }

            this.setState({
              extraStyles: this._createExtraStyles(),
            });

            if (this.props.onShowUnderlay != null) {
              this.props.onShowUnderlay();
            }
          },
        },
        {
          key: "_hideUnderlay",
          value: function _hideUnderlay() {
            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
              this._hideTimeout = null;
            }

            if (this.props.testOnly_pressed === true) {
              return;
            }

            if (this._hasPressHandler()) {
              this.setState({
                extraStyles: null,
              });

              if (this.props.onHideUnderlay != null) {
                this.props.onHideUnderlay();
              }
            }
          },
        },
        {
          key: "_hasPressHandler",
          value: function _hasPressHandler() {
            return (
              this.props.onPress != null ||
              this.props.onPressIn != null ||
              this.props.onPressOut != null ||
              this.props.onLongPress != null
            );
          },
        },
        {
          key: "render",
          value: function render() {
            var _this$state$extraStyl, _this$state$extraStyl2;

            var child = React.Children.only(this.props.children);

            var _this$state$pressabil =
                this.state.pressability.getEventHandlers(),
              onBlur = _this$state$pressabil.onBlur,
              onFocus = _this$state$pressabil.onFocus,
              eventHandlersWithoutBlurAndFocus = (0,
              _objectWithoutProperties2.default)(
                _this$state$pressabil,
                _excluded
              );

            var accessibilityState =
              this.props.disabled != null
                ? Object.assign({}, this.props.accessibilityState, {
                    disabled: this.props.disabled,
                  })
                : this.props.accessibilityState;
            return (0, _jsxRuntime.jsxs)(
              _View.default,
              Object.assign(
                {
                  accessible: this.props.accessible !== false,
                  accessibilityLabel: this.props.accessibilityLabel,
                  accessibilityHint: this.props.accessibilityHint,
                  accessibilityLanguage: this.props.accessibilityLanguage,
                  accessibilityRole: this.props.accessibilityRole,
                  accessibilityState: accessibilityState,
                  accessibilityValue: this.props.accessibilityValue,
                  accessibilityActions: this.props.accessibilityActions,
                  onAccessibilityAction: this.props.onAccessibilityAction,
                  importantForAccessibility:
                    this.props.importantForAccessibility,
                  accessibilityLiveRegion: this.props.accessibilityLiveRegion,
                  accessibilityViewIsModal: this.props.accessibilityViewIsModal,
                  accessibilityElementsHidden:
                    this.props.accessibilityElementsHidden,
                  style: _StyleSheet.default.compose(
                    this.props.style,
                    (_this$state$extraStyl = this.state.extraStyles) == null
                      ? undefined
                      : _this$state$extraStyl.underlay
                  ),
                  onLayout: this.props.onLayout,
                  hitSlop: this.props.hitSlop,
                  hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                  nextFocusDown: this.props.nextFocusDown,
                  nextFocusForward: this.props.nextFocusForward,
                  nextFocusLeft: this.props.nextFocusLeft,
                  nextFocusRight: this.props.nextFocusRight,
                  nextFocusUp: this.props.nextFocusUp,
                  focusable:
                    this.props.focusable !== false &&
                    this.props.onPress !== undefined,
                  nativeID: this.props.nativeID,
                  testID: this.props.testID,
                  ref: this.props.hostRef,
                },
                eventHandlersWithoutBlurAndFocus,
                {
                  children: [
                    React.cloneElement(child, {
                      style: _StyleSheet.default.compose(
                        child.props.style,
                        (_this$state$extraStyl2 = this.state.extraStyles) ==
                          null
                          ? undefined
                          : _this$state$extraStyl2.child
                      ),
                    }),
                    null,
                  ],
                }
              )
            );
          },
        },
        {
          key: "componentDidMount",
          value: function componentDidMount() {
            this._isMounted = true;
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            this.state.pressability.configure(this._createPressabilityConfig());
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this._isMounted = false;

            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
            }

            this.state.pressability.reset();
          },
        },
      ]);
      return TouchableHighlight;
    })(React.Component);

    var Touchable = React.forwardRef(function (props, hostRef) {
      return (0, _jsxRuntime.jsx)(
        TouchableHighlight,
        Object.assign({}, props, {
          hostRef: hostRef,
        })
      );
    });
    Touchable.displayName = "TouchableHighlight";
    module.exports = Touchable;
  },
  318,
  [7, 92, 16, 17, 28, 30, 33, 192, 189, 175, 54, 176, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _Pressability = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

    var _PressabilityDebug = _$$_REQUIRE(_dependencyMap[8]);

    var _View = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[11]);

    var _excluded = ["onBlur", "onFocus"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var PASSTHROUGH_PROPS = [
      "accessibilityActions",
      "accessibilityElementsHidden",
      "accessibilityHint",
      "accessibilityLanguage",
      "accessibilityIgnoresInvertColors",
      "accessibilityLabel",
      "accessibilityLiveRegion",
      "accessibilityRole",
      "accessibilityValue",
      "accessibilityViewIsModal",
      "hitSlop",
      "importantForAccessibility",
      "nativeID",
      "onAccessibilityAction",
      "onBlur",
      "onFocus",
      "onLayout",
      "testID",
    ];

    var TouchableWithoutFeedback = (function (_React$Component) {
      (0, _inherits2.default)(TouchableWithoutFeedback, _React$Component);

      var _super = _createSuper(TouchableWithoutFeedback);

      function TouchableWithoutFeedback() {
        var _this;

        (0, _classCallCheck2.default)(this, TouchableWithoutFeedback);

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          pressability: new _Pressability.default(
            createPressabilityConfig(_this.props)
          ),
        };
        return _this;
      }

      (0, _createClass2.default)(TouchableWithoutFeedback, [
        {
          key: "render",
          value: function render() {
            var element = React.Children.only(this.props.children);
            var children = [element.props.children];

            var _this$state$pressabil =
                this.state.pressability.getEventHandlers(),
              onBlur = _this$state$pressabil.onBlur,
              onFocus = _this$state$pressabil.onFocus,
              eventHandlersWithoutBlurAndFocus = (0,
              _objectWithoutProperties2.default)(
                _this$state$pressabil,
                _excluded
              );

            var elementProps = Object.assign(
              {},
              eventHandlersWithoutBlurAndFocus,
              {
                accessible: this.props.accessible !== false,
                accessibilityState:
                  this.props.disabled != null
                    ? Object.assign({}, this.props.accessibilityState, {
                        disabled: this.props.disabled,
                      })
                    : this.props.accessibilityState,
                focusable:
                  this.props.focusable !== false &&
                  this.props.onPress !== undefined,
              }
            );

            for (var prop of PASSTHROUGH_PROPS) {
              if (this.props[prop] !== undefined) {
                elementProps[prop] = this.props[prop];
              }
            }

            return React.cloneElement.apply(
              React,
              [element, elementProps].concat(children)
            );
          },
        },
        {
          key: "componentDidUpdate",
          value: function componentDidUpdate() {
            this.state.pressability.configure(
              createPressabilityConfig(this.props)
            );
          },
        },
        {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.state.pressability.reset();
          },
        },
      ]);
      return TouchableWithoutFeedback;
    })(React.Component);

    function createPressabilityConfig(props) {
      var _props$accessibilityS;

      return {
        cancelable: !props.rejectResponderTermination,
        disabled:
          props.disabled !== null
            ? props.disabled
            : (_props$accessibilityS = props.accessibilityState) == null
            ? undefined
            : _props$accessibilityS.disabled,
        hitSlop: props.hitSlop,
        delayLongPress: props.delayLongPress,
        delayPressIn: props.delayPressIn,
        delayPressOut: props.delayPressOut,
        minPressDuration: 0,
        pressRectOffset: props.pressRetentionOffset,
        android_disableSound: props.touchSoundDisabled,
        onBlur: props.onBlur,
        onFocus: props.onFocus,
        onLongPress: props.onLongPress,
        onPress: props.onPress,
        onPressIn: props.onPressIn,
        onPressOut: props.onPressOut,
      };
    }

    TouchableWithoutFeedback.displayName = "TouchableWithoutFeedback";
    module.exports = TouchableWithoutFeedback;
  },
  319,
  [7, 92, 16, 17, 28, 30, 33, 192, 189, 176, 1, 179]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _NativeActionSheetManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _excluded = [
      "tintColor",
      "cancelButtonTintColor",
      "destructiveButtonIndex",
    ];

    var invariant = _$$_REQUIRE(_dependencyMap[3]);

    var processColor = _$$_REQUIRE(_dependencyMap[4]);

    var ActionSheetIOS = {
      showActionSheetWithOptions: function showActionSheetWithOptions(
        options,
        callback
      ) {
        invariant(
          typeof options === "object" && options !== null,
          "Options must be a valid object"
        );
        invariant(
          typeof callback === "function",
          "Must provide a valid callback"
        );
        invariant(
          _NativeActionSheetManager.default,
          "ActionSheetManager doesn't exist"
        );
        var tintColor = options.tintColor,
          cancelButtonTintColor = options.cancelButtonTintColor,
          destructiveButtonIndex = options.destructiveButtonIndex,
          remainingOptions = (0, _objectWithoutProperties2.default)(
            options,
            _excluded
          );
        var destructiveButtonIndices = null;

        if (Array.isArray(destructiveButtonIndex)) {
          destructiveButtonIndices = destructiveButtonIndex;
        } else if (typeof destructiveButtonIndex === "number") {
          destructiveButtonIndices = [destructiveButtonIndex];
        }

        var processedTintColor = processColor(tintColor);
        var processedCancelButtonTintColor = processColor(
          cancelButtonTintColor
        );
        invariant(
          processedTintColor == null || typeof processedTintColor === "number",
          "Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor"
        );
        invariant(
          processedCancelButtonTintColor == null ||
            typeof processedCancelButtonTintColor === "number",
          "Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor"
        );

        _NativeActionSheetManager.default.showActionSheetWithOptions(
          Object.assign({}, remainingOptions, {
            tintColor: processedTintColor,
            cancelButtonTintColor: processedCancelButtonTintColor,
            destructiveButtonIndices: destructiveButtonIndices,
          }),
          callback
        );
      },
      showShareActionSheetWithOptions: function showShareActionSheetWithOptions(
        options,
        failureCallback,
        successCallback
      ) {
        invariant(
          typeof options === "object" && options !== null,
          "Options must be a valid object"
        );
        invariant(
          typeof failureCallback === "function",
          "Must provide a valid failureCallback"
        );
        invariant(
          typeof successCallback === "function",
          "Must provide a valid successCallback"
        );
        invariant(
          _NativeActionSheetManager.default,
          "ActionSheetManager doesn't exist"
        );

        _NativeActionSheetManager.default.showShareActionSheetWithOptions(
          Object.assign({}, options, {
            tintColor: processColor(options.tintColor),
          }),
          failureCallback,
          successCallback
        );
      },
      dismissActionSheet: function dismissActionSheet() {
        invariant(
          _NativeActionSheetManager.default,
          "ActionSheetManager doesn't exist"
        );

        if (
          typeof _NativeActionSheetManager.default.dismissActionSheet ===
          "function"
        ) {
          _NativeActionSheetManager.default.dismissActionSheet();
        }
      },
    };
    module.exports = ActionSheetIOS;
  },
  320,
  [7, 92, 321, 4, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("ActionSheetManager");

    exports.default = _default;
  },
  321,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _NativeAppearance = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _DebugEnvironment = _$$_REQUIRE(_dependencyMap[5]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var eventEmitter = new _EventEmitter.default();

    if (_NativeAppearance.default) {
      var nativeEventEmitter = new _NativeEventEmitter.default(
        _Platform.default.OS !== "ios" ? null : _NativeAppearance.default
      );
      nativeEventEmitter.addListener(
        "appearanceChanged",
        function (newAppearance) {
          var colorScheme = newAppearance.colorScheme;
          (0, _invariant.default)(
            colorScheme === "dark" ||
              colorScheme === "light" ||
              colorScheme == null,
            "Unrecognized color scheme. Did you mean 'dark' or 'light'?"
          );
          eventEmitter.emit("change", {
            colorScheme: colorScheme,
          });
        }
      );
    }

    module.exports = {
      getColorScheme: function getColorScheme() {
        var nativeColorScheme =
          _NativeAppearance.default == null
            ? null
            : _NativeAppearance.default.getColorScheme() || null;
        (0, _invariant.default)(
          nativeColorScheme === "dark" ||
            nativeColorScheme === "light" ||
            nativeColorScheme == null,
          "Unrecognized color scheme. Did you mean 'dark' or 'light'?"
        );
        return nativeColorScheme;
      },
      addChangeListener: function addChangeListener(listener) {
        return eventEmitter.addListener("change", listener);
      },
    };
  },
  322,
  [7, 9, 82, 323, 4, 324, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("Appearance");

    exports.default = _default;
  },
  323,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.isAsyncDebugging = undefined;
    var isAsyncDebugging = false;
    exports.isAsyncDebugging = isAsyncDebugging;
  },
  324,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _DisplayMode = _$$_REQUIRE(_dependencyMap[1]);

    var _createPerformanceLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _NativeHeadlessJsTaskSupport = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _HeadlessJsTaskError = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var BatchedBridge = _$$_REQUIRE(_dependencyMap[5]);

    var BugReporting = _$$_REQUIRE(_dependencyMap[6]);

    var ReactNative = _$$_REQUIRE(_dependencyMap[7]);

    var SceneTracker = _$$_REQUIRE(_dependencyMap[8]);

    var infoLog = _$$_REQUIRE(_dependencyMap[9]);

    var invariant = _$$_REQUIRE(_dependencyMap[10]);

    var renderApplication = _$$_REQUIRE(_dependencyMap[11]);

    var runnables = {};
    var runCount = 1;
    var sections = {};
    var taskProviders = new Map();
    var taskCancelProviders = new Map();

    var componentProviderInstrumentationHook =
      function componentProviderInstrumentationHook(component) {
        return component();
      };

    var wrapperComponentProvider;
    var showArchitectureIndicator = false;
    var AppRegistry = {
      setWrapperComponentProvider: function setWrapperComponentProvider(
        provider
      ) {
        wrapperComponentProvider = provider;
      },
      enableArchitectureIndicator: function enableArchitectureIndicator(
        enabled
      ) {
        showArchitectureIndicator = enabled;
      },
      registerConfig: function registerConfig(config) {
        config.forEach(function (appConfig) {
          if (appConfig.run) {
            AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
          } else {
            invariant(
              appConfig.component != null,
              "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.",
              appConfig.appKey
            );
            AppRegistry.registerComponent(
              appConfig.appKey,
              appConfig.component,
              appConfig.section
            );
          }
        });
      },
      registerComponent: function registerComponent(
        appKey,
        componentProvider,
        section
      ) {
        var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
        runnables[appKey] = {
          componentProvider: componentProvider,
          run: function run(appParameters, displayMode) {
            var _appParameters$initia;

            var concurrentRootEnabled =
              ((_appParameters$initia = appParameters.initialProps) == null
                ? undefined
                : _appParameters$initia.concurrentRoot) ||
              appParameters.concurrentRoot;
            renderApplication(
              componentProviderInstrumentationHook(
                componentProvider,
                scopedPerformanceLogger
              ),
              appParameters.initialProps,
              appParameters.rootTag,
              wrapperComponentProvider &&
                wrapperComponentProvider(appParameters),
              appParameters.fabric,
              showArchitectureIndicator,
              scopedPerformanceLogger,
              appKey === "LogBox",
              appKey,
              (0, _DisplayMode.coerceDisplayMode)(displayMode),
              concurrentRootEnabled
            );
          },
        };

        if (section) {
          sections[appKey] = runnables[appKey];
        }

        return appKey;
      },
      registerRunnable: function registerRunnable(appKey, run) {
        runnables[appKey] = {
          run: run,
        };
        return appKey;
      },
      registerSection: function registerSection(appKey, component) {
        AppRegistry.registerComponent(appKey, component, true);
      },
      getAppKeys: function getAppKeys() {
        return Object.keys(runnables);
      },
      getSectionKeys: function getSectionKeys() {
        return Object.keys(sections);
      },
      getSections: function getSections() {
        return Object.assign({}, sections);
      },
      getRunnable: function getRunnable(appKey) {
        return runnables[appKey];
      },
      getRegistry: function getRegistry() {
        return {
          sections: AppRegistry.getSectionKeys(),
          runnables: Object.assign({}, runnables),
        };
      },
      setComponentProviderInstrumentationHook:
        function setComponentProviderInstrumentationHook(hook) {
          componentProviderInstrumentationHook = hook;
        },
      runApplication: function runApplication(
        appKey,
        appParameters,
        displayMode
      ) {
        if (appKey !== "LogBox") {
          var logParams = "";
          var msg = 'Running "' + appKey + logParams;
          infoLog(msg);
          BugReporting.addSource(
            "AppRegistry.runApplication" + runCount++,
            function () {
              return msg;
            }
          );
        }

        invariant(
          runnables[appKey] && runnables[appKey].run,
          '"' +
            appKey +
            '" has not been registered. This can happen if:\n' +
            "* Metro (the local dev server) is run from the wrong folder. " +
            "Check if Metro is running, stop it and restart it in the current project.\n" +
            "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called."
        );
        SceneTracker.setActiveScene({
          name: appKey,
        });
        runnables[appKey].run(appParameters, displayMode);
      },
      setSurfaceProps: function setSurfaceProps(
        appKey,
        appParameters,
        displayMode
      ) {
        if (appKey !== "LogBox") {
          var msg =
            'Updating props for Surface "' +
            appKey +
            '" with ' +
            JSON.stringify(appParameters);
          infoLog(msg);
          BugReporting.addSource(
            "AppRegistry.setSurfaceProps" + runCount++,
            function () {
              return msg;
            }
          );
        }

        invariant(
          runnables[appKey] && runnables[appKey].run,
          '"' +
            appKey +
            '" has not been registered. This can happen if:\n' +
            "* Metro (the local dev server) is run from the wrong folder. " +
            "Check if Metro is running, stop it and restart it in the current project.\n" +
            "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called."
        );
        runnables[appKey].run(appParameters, displayMode);
      },
      unmountApplicationComponentAtRootTag:
        function unmountApplicationComponentAtRootTag(rootTag) {
          ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
        },
      registerHeadlessTask: function registerHeadlessTask(
        taskKey,
        taskProvider
      ) {
        this.registerCancellableHeadlessTask(
          taskKey,
          taskProvider,
          function () {
            return function () {};
          }
        );
      },
      registerCancellableHeadlessTask: function registerCancellableHeadlessTask(
        taskKey,
        taskProvider,
        taskCancelProvider
      ) {
        if (taskProviders.has(taskKey)) {
          console.warn(
            "registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '" +
              taskKey +
              "'"
          );
        }

        taskProviders.set(taskKey, taskProvider);
        taskCancelProviders.set(taskKey, taskCancelProvider);
      },
      startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
        var taskProvider = taskProviders.get(taskKey);

        if (!taskProvider) {
          console.warn("No task registered for key " + taskKey);

          if (_NativeHeadlessJsTaskSupport.default) {
            _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
          }

          return;
        }

        taskProvider()(data)
          .then(function () {
            if (_NativeHeadlessJsTaskSupport.default) {
              _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
          })
          .catch(function (reason) {
            console.error(reason);

            if (
              _NativeHeadlessJsTaskSupport.default &&
              reason instanceof _HeadlessJsTaskError.default
            ) {
              _NativeHeadlessJsTaskSupport.default
                .notifyTaskRetry(taskId)
                .then(function (retryPosted) {
                  if (!retryPosted) {
                    _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(
                      taskId
                    );
                  }
                });
            }
          });
      },
      cancelHeadlessTask: function cancelHeadlessTask(taskId, taskKey) {
        var taskCancelProvider = taskCancelProviders.get(taskKey);

        if (!taskCancelProvider) {
          throw new Error(
            "No task canceller registered for key '" + taskKey + "'"
          );
        }

        taskCancelProvider()();
      },
    };

    if (!(global.RN$Bridgeless === true)) {
      BatchedBridge.registerCallableModule("AppRegistry", AppRegistry);
      {
        AppRegistry.registerComponent("LogBox", function () {
          return function NoOp() {
            return null;
          };
        });
      }
    }

    module.exports = AppRegistry;
  },
  325,
  [7, 326, 79, 327, 328, 48, 329, 18, 333, 80, 4, 334]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.coerceDisplayMode = coerceDisplayMode;
    exports.default = undefined;
    var DisplayMode = Object.freeze({
      VISIBLE: 1,
      SUSPENDED: 2,
      HIDDEN: 3,
    });

    function coerceDisplayMode(value) {
      switch (value) {
        case DisplayMode.SUSPENDED:
          return DisplayMode.SUSPENDED;

        case DisplayMode.HIDDEN:
          return DisplayMode.HIDDEN;

        default:
          return DisplayMode.VISIBLE;
      }
    }

    var _default = DisplayMode;
    exports.default = _default;
  },
  326,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("HeadlessJsTaskSupport");

    exports.default = _default;
  },
  327,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _wrapNativeSuper2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var HeadlessJsTaskError = (function (_Error) {
      (0, _inherits2.default)(HeadlessJsTaskError, _Error);

      var _super = _createSuper(HeadlessJsTaskError);

      function HeadlessJsTaskError() {
        (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
        return _super.apply(this, arguments);
      }

      return (0, _createClass2.default)(HeadlessJsTaskError);
    })((0, _wrapNativeSuper2.default)(Error));

    exports.default = HeadlessJsTaskError;
  },
  328,
  [7, 17, 16, 28, 30, 33, 34]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _NativeRedBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _NativeBugReporting = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    function defaultExtras() {
      BugReporting.addFileSource("react_hierarchy.txt", function () {
        return _$$_REQUIRE(_dependencyMap[7])();
      });
    }

    var BugReporting = (function () {
      function BugReporting() {
        (0, _classCallCheck2.default)(this, BugReporting);
      }

      (0, _createClass2.default)(BugReporting, null, [
        {
          key: "_maybeInit",
          value: function _maybeInit() {
            if (!BugReporting._subscription) {
              BugReporting._subscription =
                _RCTDeviceEventEmitter.default.addListener(
                  "collectBugExtraData",
                  BugReporting.collectExtraData,
                  null
                );
              defaultExtras();
            }

            if (!BugReporting._redboxSubscription) {
              BugReporting._redboxSubscription =
                _RCTDeviceEventEmitter.default.addListener(
                  "collectRedBoxExtraData",
                  BugReporting.collectExtraData,
                  null
                );
            }
          },
        },
        {
          key: "addSource",
          value: function addSource(key, callback) {
            return this._addSource(key, callback, BugReporting._extraSources);
          },
        },
        {
          key: "addFileSource",
          value: function addFileSource(key, callback) {
            return this._addSource(key, callback, BugReporting._fileSources);
          },
        },
        {
          key: "_addSource",
          value: function _addSource(key, callback, source) {
            BugReporting._maybeInit();

            if (source.has(key)) {
              console.warn(
                "BugReporting.add* called multiple times for same key '" +
                  key +
                  "'"
              );
            }

            source.set(key, callback);
            return {
              remove: function remove() {
                source.delete(key);
              },
            };
          },
        },
        {
          key: "collectExtraData",
          value: function collectExtraData() {
            var extraData = {};

            for (var _ref of BugReporting._extraSources) {
              var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

              var _key = _ref2[0];
              var callback = _ref2[1];
              extraData[_key] = callback();
            }

            var fileData = {};

            for (var _ref3 of BugReporting._fileSources) {
              var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);

              var _key2 = _ref4[0];
              var _callback = _ref4[1];
              fileData[_key2] = _callback();
            }

            if (
              _NativeBugReporting.default != null &&
              _NativeBugReporting.default.setExtraData != null
            ) {
              _NativeBugReporting.default.setExtraData(extraData, fileData);
            }

            if (
              _NativeRedBox.default != null &&
              _NativeRedBox.default.setExtraData != null
            ) {
              _NativeRedBox.default.setExtraData(
                extraData,
                "From BugReporting.js"
              );
            }

            return {
              extras: extraData,
              files: fileData,
            };
          },
        },
      ]);
      return BugReporting;
    })();

    BugReporting._extraSources = new Map();
    BugReporting._fileSources = new Map();
    BugReporting._subscription = null;
    BugReporting._redboxSubscription = null;
    module.exports = BugReporting;
  },
  329,
  [7, 44, 16, 17, 8, 330, 331, 332]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("RedBox");

    exports.default = _default;
  },
  330,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("BugReporting");

    exports.default = _default;
  },
  331,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    function dumpReactTree() {
      try {
        return getReactTree();
      } catch (e) {
        return "Failed to dump react tree: " + e;
      }
    }

    function getReactTree() {
      return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
    }

    module.exports = dumpReactTree;
  },
  332,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _listeners = [];
    var _activeScene = {
      name: "default",
    };
    var SceneTracker = {
      setActiveScene: function setActiveScene(scene) {
        _activeScene = scene;

        _listeners.forEach(function (listener) {
          return listener(_activeScene);
        });
      },
      getActiveScene: function getActiveScene() {
        return _activeScene;
      },
      addActiveSceneChangedListener: function addActiveSceneChangedListener(
        callback
      ) {
        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          },
        };
      },
    };
    module.exports = SceneTracker;
  },
  333,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _GlobalPerformanceLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _PerformanceLoggerContext = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _getCachedComponentWithDebugName = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _jsxRuntime = _$$_REQUIRE(_dependencyMap[4]);

    var AppContainer = _$$_REQUIRE(_dependencyMap[5]);

    var React = _$$_REQUIRE(_dependencyMap[6]);

    var invariant = _$$_REQUIRE(_dependencyMap[7]);

    _$$_REQUIRE(_dependencyMap[8]);

    function renderApplication(
      RootComponent,
      initialProps,
      rootTag,
      WrapperComponent,
      fabric,
      showArchitectureIndicator,
      scopedPerformanceLogger,
      isLogBox,
      debugName,
      displayMode,
      useConcurrentRoot
    ) {
      invariant(
        rootTag,
        "Expect to have a valid rootTag, instead got ",
        rootTag
      );
      var performanceLogger =
        scopedPerformanceLogger != null
          ? scopedPerformanceLogger
          : _GlobalPerformanceLogger.default;
      var renderable = (0, _jsxRuntime.jsx)(
        _PerformanceLoggerContext.default.Provider,
        {
          value: performanceLogger,
          children: (0, _jsxRuntime.jsx)(AppContainer, {
            rootTag: rootTag,
            fabric: fabric,
            showArchitectureIndicator: showArchitectureIndicator,
            WrapperComponent: WrapperComponent,
            initialProps:
              initialProps != null ? initialProps : Object.freeze({}),
            internal_excludeLogBox: isLogBox,
            children: (0, _jsxRuntime.jsx)(
              RootComponent,
              Object.assign({}, initialProps, {
                rootTag: rootTag,
              })
            ),
          }),
        }
      );
      performanceLogger.startTimespan("renderApplication_React_render");
      performanceLogger.setExtra(
        "usedReactConcurrentRoot",
        useConcurrentRoot ? "1" : "0"
      );
      performanceLogger.setExtra("usedReactFabric", fabric ? "1" : "0");

      if (fabric) {
        _$$_REQUIRE(_dependencyMap[9]).render(
          renderable,
          rootTag,
          null,
          useConcurrentRoot
        );
      } else {
        _$$_REQUIRE(_dependencyMap[10]).render(renderable, rootTag);
      }

      performanceLogger.stopTimespan("renderApplication_React_render");
    }

    module.exports = renderApplication;
  },
  334,
  [7, 78, 335, 336, 179, 297, 1, 4, 337, 124, 18]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;
    exports.usePerformanceLogger = usePerformanceLogger;

    var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

    var _GlobalPerformanceLogger = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var PerformanceLoggerContext = React.createContext(
      _GlobalPerformanceLogger.default
    );

    function usePerformanceLogger() {
      return (0, React.useContext)(PerformanceLoggerContext);
    }

    var _default = PerformanceLoggerContext;
    exports.default = _default;
  },
  335,
  [7, 1, 78]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = getCachedComponentWithDisplayName;
    var cache = new Map();

    function getCachedComponentWithDisplayName(displayName) {
      var ComponentWithDisplayName = cache.get(displayName);

      if (!ComponentWithDisplayName) {
        ComponentWithDisplayName = function ComponentWithDisplayName(_ref) {
          var children = _ref.children;
          return children;
        };

        ComponentWithDisplayName.displayName = displayName;
        cache.set(displayName, ComponentWithDisplayName);
      }

      return ComponentWithDisplayName;
    }
  },
  336,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeDeviceEventManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _RCTDeviceEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var DEVICE_BACK_EVENT = "hardwareBackPress";
    var _backPressSubscriptions = [];

    _RCTDeviceEventEmitter.default.addListener(DEVICE_BACK_EVENT, function () {
      for (var i = _backPressSubscriptions.length - 1; i >= 0; i--) {
        if (_backPressSubscriptions[i]()) {
          return;
        }
      }

      BackHandler.exitApp();
    });

    var BackHandler = {
      exitApp: function exitApp() {
        if (!_NativeDeviceEventManager.default) {
          return;
        }

        _NativeDeviceEventManager.default.invokeDefaultBackPressHandler();
      },
      addEventListener: function addEventListener(eventName, handler) {
        if (_backPressSubscriptions.indexOf(handler) === -1) {
          _backPressSubscriptions.push(handler);
        }

        return {
          remove: function remove() {
            return BackHandler.removeEventListener(eventName, handler);
          },
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        if (_backPressSubscriptions.indexOf(handler) !== -1) {
          _backPressSubscriptions.splice(
            _backPressSubscriptions.indexOf(handler),
            1
          );
        }
      },
    };
    module.exports = BackHandler;
  },
  337,
  [7, 338, 8]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("DeviceEventManager");

    exports.default = _default;
  },
  338,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _logError = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var _NativeAppState = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var AppState = (function () {
      function AppState() {
        var _this = this;

        (0, _classCallCheck2.default)(this, AppState);
        this.currentState = null;

        if (_NativeAppState.default == null) {
          this.isAvailable = false;
        } else {
          this.isAvailable = true;
          var emitter = new _NativeEventEmitter.default(
            _Platform.default.OS !== "ios" ? null : _NativeAppState.default
          );
          this._emitter = emitter;
          this.currentState =
            _NativeAppState.default.getConstants().initialAppState;
          var eventUpdated = false;
          emitter.addListener("appStateDidChange", function (appStateData) {
            eventUpdated = true;
            _this.currentState = appStateData.app_state;
          });

          _NativeAppState.default.getCurrentAppState(function (appStateData) {
            if (
              !eventUpdated &&
              _this.currentState !== appStateData.app_state
            ) {
              _this.currentState = appStateData.app_state;
              emitter.emit("appStateDidChange", appStateData);
            }
          }, _logError.default);
        }
      }

      (0, _createClass2.default)(AppState, [
        {
          key: "addEventListener",
          value: function addEventListener(type, handler) {
            var emitter = this._emitter;

            if (emitter == null) {
              throw new Error(
                "Cannot use AppState when `isAvailable` is false."
              );
            }

            switch (type) {
              case "change":
                var changeHandler = handler;
                return emitter.addListener(
                  "appStateDidChange",
                  function (appStateData) {
                    changeHandler(appStateData.app_state);
                  }
                );

              case "memoryWarning":
                var memoryWarningHandler = handler;
                return emitter.addListener(
                  "memoryWarning",
                  memoryWarningHandler
                );

              case "blur":
              case "focus":
                var focusOrBlurHandler = handler;
                return emitter.addListener(
                  "appStateFocusChange",
                  function (hasFocus) {
                    if (type === "blur" && !hasFocus) {
                      focusOrBlurHandler();
                    }

                    if (type === "focus" && hasFocus) {
                      focusOrBlurHandler();
                    }
                  }
                );
            }

            throw new Error("Trying to subscribe to unknown event: " + type);
          },
        },
      ]);
      return AppState;
    })();

    module.exports = new AppState();
  },
  339,
  [7, 16, 17, 82, 340, 341, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var logError = function logError() {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      if (args.length === 1 && args[0] instanceof Error) {
        var err = args[0];
        console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
      } else {
        console.error.apply(console, args);
      }
    };

    module.exports = logError;
  },
  340,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("AppState");

    exports.default = _default;
  },
  341,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _NativeAsyncLocalStorage = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _NativeAsyncSQLiteDBStorage = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    var RCTAsyncStorage =
      _NativeAsyncSQLiteDBStorage.default || _NativeAsyncLocalStorage.default;
    var AsyncStorage = {
      _getRequests: [],
      _getKeys: [],
      _immediate: null,
      getItem: function getItem(key, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiGet([key], function (errors, result) {
            var value =
              result && result[0] && result[0][1] ? result[0][1] : null;
            var errs = convertErrors(errors);
            callback && callback(errs && errs[0], value);

            if (errs) {
              reject(errs[0]);
            } else {
              resolve(value);
            }
          });
        });
      },
      setItem: function setItem(key, value, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiSet([[key, value]], function (errors) {
            var errs = convertErrors(errors);
            callback && callback(errs && errs[0]);

            if (errs) {
              reject(errs[0]);
            } else {
              resolve();
            }
          });
        });
      },
      removeItem: function removeItem(key, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiRemove([key], function (errors) {
            var errs = convertErrors(errors);
            callback && callback(errs && errs[0]);

            if (errs) {
              reject(errs[0]);
            } else {
              resolve();
            }
          });
        });
      },
      mergeItem: function mergeItem(key, value, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
            var errs = convertErrors(errors);
            callback && callback(errs && errs[0]);

            if (errs) {
              reject(errs[0]);
            } else {
              resolve();
            }
          });
        });
      },
      clear: function clear(callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.clear(function (error) {
            callback && callback(convertError(error));

            if (error && convertError(error)) {
              reject(convertError(error));
            } else {
              resolve();
            }
          });
        });
      },
      getAllKeys: function getAllKeys(callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.getAllKeys(function (error, keys) {
            callback && callback(convertError(error), keys);

            if (error) {
              reject(convertError(error));
            } else {
              resolve(keys);
            }
          });
        });
      },
      flushGetRequests: function flushGetRequests() {
        var getRequests = this._getRequests;
        var getKeys = this._getKeys;
        this._getRequests = [];
        this._getKeys = [];
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
          var map = {};
          result &&
            result.forEach(function (_ref) {
              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
                key = _ref2[0],
                value = _ref2[1];

              map[key] = value;
              return value;
            });
          var reqLength = getRequests.length;

          for (var i = 0; i < reqLength; i++) {
            var request = getRequests[i];
            var requestKeys = request.keys;
            var requestResult = requestKeys.map(function (key) {
              return [key, map[key]];
            });
            request.callback && request.callback(null, requestResult);
            request.resolve && request.resolve(requestResult);
          }
        });
      },
      multiGet: function multiGet(keys, callback) {
        var _this = this;

        if (!this._immediate) {
          this._immediate = setImmediate(function () {
            _this._immediate = null;

            _this.flushGetRequests();
          });
        }

        return new Promise(function (resolve, reject) {
          _this._getRequests.push({
            keys: keys,
            callback: callback,
            keyIndex: _this._getKeys.length,
            resolve: resolve,
            reject: reject,
          });

          keys.forEach(function (key) {
            if (_this._getKeys.indexOf(key) === -1) {
              _this._getKeys.push(key);
            }
          });
        });
      },
      multiSet: function multiSet(keyValuePairs, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
            var error = convertErrors(errors);
            callback && callback(error);

            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        });
      },
      multiRemove: function multiRemove(keys, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiRemove(keys, function (errors) {
            var error = convertErrors(errors);
            callback && callback(error);

            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        });
      },
      multiMerge: function multiMerge(keyValuePairs, callback) {
        (0, _invariant.default)(
          RCTAsyncStorage,
          "RCTAsyncStorage not available"
        );
        return new Promise(function (resolve, reject) {
          RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
            var error = convertErrors(errors);
            callback && callback(error);

            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        });
      },
    };

    if (RCTAsyncStorage && !RCTAsyncStorage.multiMerge) {
      delete AsyncStorage.mergeItem;
      delete AsyncStorage.multiMerge;
    }

    function convertErrors(errs) {
      if (!errs) {
        return null;
      }

      return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
        return convertError(e);
      });
    }

    function convertError(error) {
      if (!error) {
        return null;
      }

      var out = new Error(error.message);
      out.key = error.key;
      return out;
    }

    module.exports = AsyncStorage;
  },
  342,
  [7, 44, 343, 344, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("AsyncLocalStorage");

    exports.default = _default;
  },
  343,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("AsyncSQLiteDBStorage");

    exports.default = _default;
  },
  344,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeClipboard = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    module.exports = {
      getString: function getString() {
        return _NativeClipboard.default.getString();
      },
      setString: function setString(content) {
        _NativeClipboard.default.setString(content);
      },
    };
  },
  345,
  [7, 346]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("Clipboard");

    exports.default = _default;
  },
  346,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeDeviceInfo = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    module.exports = _NativeDeviceInfo.default;
  },
  347,
  [7, 154]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeDevSettings = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var DevSettings = {
      addMenuItem: function addMenuItem(title, handler) {},
      reload: function reload(reason) {},
      onFastRefresh: function onFastRefresh() {},
    };
    module.exports = DevSettings;
  },
  348,
  [7, 349, 82, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("DevSettings");

    exports.default = _default;
  },
  349,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeImagePickerIOS = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var ImagePickerIOS = {
      canRecordVideos: function canRecordVideos(callback) {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );
        return _NativeImagePickerIOS.default.canRecordVideos(callback);
      },
      canUseCamera: function canUseCamera(callback) {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );
        return _NativeImagePickerIOS.default.canUseCamera(callback);
      },
      openCameraDialog: function openCameraDialog(
        config,
        successCallback,
        cancelCallback
      ) {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );
        var newConfig = {
          videoMode: true,
          unmirrorFrontFacingCamera: false,
        };

        if (config.videoMode != null) {
          newConfig.videoMode = config.videoMode;
        }

        if (config.unmirrorFrontFacingCamera != null) {
          newConfig.unmirrorFrontFacingCamera =
            config.unmirrorFrontFacingCamera;
        }

        return _NativeImagePickerIOS.default.openCameraDialog(
          newConfig,
          successCallback,
          cancelCallback
        );
      },
      openSelectDialog: function openSelectDialog(
        config,
        successCallback,
        cancelCallback
      ) {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );
        var newConfig = {
          showImages: true,
          showVideos: false,
        };

        if (config.showImages != null) {
          newConfig.showImages = config.showImages;
        }

        if (config.showVideos != null) {
          newConfig.showVideos = config.showVideos;
        }

        return _NativeImagePickerIOS.default.openSelectDialog(
          newConfig,
          successCallback,
          cancelCallback
        );
      },
      removePendingVideo: function removePendingVideo(url) {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );

        _NativeImagePickerIOS.default.removePendingVideo(url);
      },
      clearAllPendingVideos: function clearAllPendingVideos() {
        (0, _invariant.default)(
          _NativeImagePickerIOS.default,
          "ImagePickerIOS is not available"
        );

        _NativeImagePickerIOS.default.clearAllPendingVideos();
      },
    };
    module.exports = ImagePickerIOS;
  },
  350,
  [7, 351, 4]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("ImagePickerIOS");

    exports.default = _default;
  },
  351,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _possibleConstructorReturn2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _getPrototypeOf2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _NativeEventEmitter2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _InteractionManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

    var _NativeLinkingManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[9])
    );

    var _NativeIntentAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[10])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

    var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var Linking = (function (_NativeEventEmitter) {
      (0, _inherits2.default)(Linking, _NativeEventEmitter);

      var _super = _createSuper(Linking);

      function Linking() {
        (0, _classCallCheck2.default)(this, Linking);
        return _super.call(
          this,
          _Platform.default.OS === "ios"
            ? (0, _nullthrows.default)(_NativeLinkingManager.default)
            : undefined
        );
      }

      (0, _createClass2.default)(Linking, [
        {
          key: "addEventListener",
          value: function addEventListener(eventType, listener, context) {
            return this.addListener(eventType, listener);
          },
        },
        {
          key: "openURL",
          value: function openURL(url) {
            this._validateURL(url);

            if (_Platform.default.OS === "android") {
              return (0, _nullthrows.default)(
                _NativeIntentAndroid.default
              ).openURL(url);
            } else {
              return (0, _nullthrows.default)(
                _NativeLinkingManager.default
              ).openURL(url);
            }
          },
        },
        {
          key: "canOpenURL",
          value: function canOpenURL(url) {
            this._validateURL(url);

            if (_Platform.default.OS === "android") {
              return (0, _nullthrows.default)(
                _NativeIntentAndroid.default
              ).canOpenURL(url);
            } else {
              return (0, _nullthrows.default)(
                _NativeLinkingManager.default
              ).canOpenURL(url);
            }
          },
        },
        {
          key: "openSettings",
          value: function openSettings() {
            if (_Platform.default.OS === "android") {
              return (0, _nullthrows.default)(
                _NativeIntentAndroid.default
              ).openSettings();
            } else {
              return (0, _nullthrows.default)(
                _NativeLinkingManager.default
              ).openSettings();
            }
          },
        },
        {
          key: "getInitialURL",
          value: function getInitialURL() {
            return _Platform.default.OS === "android"
              ? _InteractionManager.default
                  .runAfterInteractions()
                  .then(function () {
                    return (0, _nullthrows.default)(
                      _NativeIntentAndroid.default
                    ).getInitialURL();
                  })
              : (0, _nullthrows.default)(
                  _NativeLinkingManager.default
                ).getInitialURL();
          },
        },
        {
          key: "sendIntent",
          value: function sendIntent(action, extras) {
            if (_Platform.default.OS === "android") {
              return (0, _nullthrows.default)(
                _NativeIntentAndroid.default
              ).sendIntent(action, extras);
            } else {
              return new Promise(function (resolve, reject) {
                return reject(new Error("Unsupported"));
              });
            }
          },
        },
        {
          key: "_validateURL",
          value: function _validateURL(url) {
            (0, _invariant.default)(
              typeof url === "string",
              "Invalid URL: should be a string. Was: " + url
            );
            (0, _invariant.default)(url, "Invalid URL: cannot be empty");
          },
        },
      ]);
      return Linking;
    })(_NativeEventEmitter2.default);

    module.exports = new Linking();
  },
  352,
  [7, 16, 17, 28, 30, 33, 82, 212, 54, 353, 354, 4, 285]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("LinkingManager");

    exports.default = _default;
  },
  353,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("IntentAndroid");

    exports.default = _default;
  },
  354,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

    var _RCTLog = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var LogBox;
    {
      LogBox = {
        install: function install() {},
        uninstall: function uninstall() {},
        isInstalled: function isInstalled() {
          return false;
        },
        ignoreLogs: function ignoreLogs(patterns) {},
        ignoreAllLogs: function ignoreAllLogs(value) {},
        clearAllLogs: function clearAllLogs() {},
        addLog: function addLog(log) {},
        addException: function addException(error) {},
      };
    }
    module.exports = LogBox;
  },
  355,
  [7, 54, 111]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var InteractionManager = _$$_REQUIRE(_dependencyMap[0]);

    var TouchHistoryMath = _$$_REQUIRE(_dependencyMap[1]);

    var currentCentroidXOfTouchesChangedAfter =
      TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
    var currentCentroidYOfTouchesChangedAfter =
      TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
    var previousCentroidXOfTouchesChangedAfter =
      TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
    var previousCentroidYOfTouchesChangedAfter =
      TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
    var currentCentroidX = TouchHistoryMath.currentCentroidX;
    var currentCentroidY = TouchHistoryMath.currentCentroidY;
    var PanResponder = {
      _initializeGestureState: function _initializeGestureState(gestureState) {
        gestureState.moveX = 0;
        gestureState.moveY = 0;
        gestureState.x0 = 0;
        gestureState.y0 = 0;
        gestureState.dx = 0;
        gestureState.dy = 0;
        gestureState.vx = 0;
        gestureState.vy = 0;
        gestureState.numberActiveTouches = 0;
        gestureState._accountsForMovesUpTo = 0;
      },
      _updateGestureStateOnMove: function _updateGestureStateOnMove(
        gestureState,
        touchHistory
      ) {
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        gestureState.moveX = currentCentroidXOfTouchesChangedAfter(
          touchHistory,
          gestureState._accountsForMovesUpTo
        );
        gestureState.moveY = currentCentroidYOfTouchesChangedAfter(
          touchHistory,
          gestureState._accountsForMovesUpTo
        );
        var movedAfter = gestureState._accountsForMovesUpTo;
        var prevX = previousCentroidXOfTouchesChangedAfter(
          touchHistory,
          movedAfter
        );
        var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
        var prevY = previousCentroidYOfTouchesChangedAfter(
          touchHistory,
          movedAfter
        );
        var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
        var nextDX = gestureState.dx + (x - prevX);
        var nextDY = gestureState.dy + (y - prevY);
        var dt =
          touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
        gestureState.vx = (nextDX - gestureState.dx) / dt;
        gestureState.vy = (nextDY - gestureState.dy) / dt;
        gestureState.dx = nextDX;
        gestureState.dy = nextDY;
        gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
      },
      create: function create(config) {
        var interactionState = {
          handle: null,
        };
        var gestureState = {
          stateID: Math.random(),
          moveX: 0,
          moveY: 0,
          x0: 0,
          y0: 0,
          dx: 0,
          dy: 0,
          vx: 0,
          vy: 0,
          numberActiveTouches: 0,
          _accountsForMovesUpTo: 0,
        };
        var panHandlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder(event) {
            return config.onStartShouldSetPanResponder == null
              ? false
              : config.onStartShouldSetPanResponder(event, gestureState);
          },
          onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {
            return config.onMoveShouldSetPanResponder == null
              ? false
              : config.onMoveShouldSetPanResponder(event, gestureState);
          },
          onStartShouldSetResponderCapture:
            function onStartShouldSetResponderCapture(event) {
              if (event.nativeEvent.touches.length === 1) {
                PanResponder._initializeGestureState(gestureState);
              }

              gestureState.numberActiveTouches =
                event.touchHistory.numberActiveTouches;
              return config.onStartShouldSetPanResponderCapture != null
                ? config.onStartShouldSetPanResponderCapture(
                    event,
                    gestureState
                  )
                : false;
            },
          onMoveShouldSetResponderCapture:
            function onMoveShouldSetResponderCapture(event) {
              var touchHistory = event.touchHistory;

              if (
                gestureState._accountsForMovesUpTo ===
                touchHistory.mostRecentTimeStamp
              ) {
                return false;
              }

              PanResponder._updateGestureStateOnMove(
                gestureState,
                touchHistory
              );

              return config.onMoveShouldSetPanResponderCapture
                ? config.onMoveShouldSetPanResponderCapture(event, gestureState)
                : false;
            },
          onResponderGrant: function onResponderGrant(event) {
            if (!interactionState.handle) {
              interactionState.handle =
                InteractionManager.createInteractionHandle();
            }

            gestureState.x0 = currentCentroidX(event.touchHistory);
            gestureState.y0 = currentCentroidY(event.touchHistory);
            gestureState.dx = 0;
            gestureState.dy = 0;

            if (config.onPanResponderGrant) {
              config.onPanResponderGrant(event, gestureState);
            }

            return config.onShouldBlockNativeResponder == null
              ? true
              : config.onShouldBlockNativeResponder(event, gestureState);
          },
          onResponderReject: function onResponderReject(event) {
            clearInteractionHandle(
              interactionState,
              config.onPanResponderReject,
              event,
              gestureState
            );
          },
          onResponderRelease: function onResponderRelease(event) {
            clearInteractionHandle(
              interactionState,
              config.onPanResponderRelease,
              event,
              gestureState
            );

            PanResponder._initializeGestureState(gestureState);
          },
          onResponderStart: function onResponderStart(event) {
            var touchHistory = event.touchHistory;
            gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

            if (config.onPanResponderStart) {
              config.onPanResponderStart(event, gestureState);
            }
          },
          onResponderMove: function onResponderMove(event) {
            var touchHistory = event.touchHistory;

            if (
              gestureState._accountsForMovesUpTo ===
              touchHistory.mostRecentTimeStamp
            ) {
              return;
            }

            PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

            if (config.onPanResponderMove) {
              config.onPanResponderMove(event, gestureState);
            }
          },
          onResponderEnd: function onResponderEnd(event) {
            var touchHistory = event.touchHistory;
            gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
            clearInteractionHandle(
              interactionState,
              config.onPanResponderEnd,
              event,
              gestureState
            );
          },
          onResponderTerminate: function onResponderTerminate(event) {
            clearInteractionHandle(
              interactionState,
              config.onPanResponderTerminate,
              event,
              gestureState
            );

            PanResponder._initializeGestureState(gestureState);
          },
          onResponderTerminationRequest: function onResponderTerminationRequest(
            event
          ) {
            return config.onPanResponderTerminationRequest == null
              ? true
              : config.onPanResponderTerminationRequest(event, gestureState);
          },
        };
        return {
          panHandlers: panHandlers,
          getInteractionHandle: function getInteractionHandle() {
            return interactionState.handle;
          },
        };
      },
    };

    function clearInteractionHandle(
      interactionState,
      callback,
      event,
      gestureState
    ) {
      if (interactionState.handle) {
        InteractionManager.clearInteractionHandle(interactionState.handle);
        interactionState.handle = null;
      }

      if (callback) {
        callback(event, gestureState);
      }
    }

    module.exports = PanResponder;
  },
  356,
  [212, 357]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var TouchHistoryMath = {
      centroidDimension: function centroidDimension(
        touchHistory,
        touchesChangedAfter,
        isXAxis,
        ofCurrent
      ) {
        var touchBank = touchHistory.touchBank;
        var total = 0;
        var count = 0;
        var oneTouchData =
          touchHistory.numberActiveTouches === 1
            ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]
            : null;

        if (oneTouchData !== null) {
          if (
            oneTouchData.touchActive &&
            oneTouchData.currentTimeStamp > touchesChangedAfter
          ) {
            total +=
              ofCurrent && isXAxis
                ? oneTouchData.currentPageX
                : ofCurrent && !isXAxis
                ? oneTouchData.currentPageY
                : !ofCurrent && isXAxis
                ? oneTouchData.previousPageX
                : oneTouchData.previousPageY;
            count = 1;
          }
        } else {
          for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];

            if (
              touchTrack !== null &&
              touchTrack !== undefined &&
              touchTrack.touchActive &&
              touchTrack.currentTimeStamp >= touchesChangedAfter
            ) {
              var toAdd = undefined;

              if (ofCurrent && isXAxis) {
                toAdd = touchTrack.currentPageX;
              } else if (ofCurrent && !isXAxis) {
                toAdd = touchTrack.currentPageY;
              } else if (!ofCurrent && isXAxis) {
                toAdd = touchTrack.previousPageX;
              } else {
                toAdd = touchTrack.previousPageY;
              }

              total += toAdd;
              count++;
            }
          }
        }

        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
      },
      currentCentroidXOfTouchesChangedAfter:
        function currentCentroidXOfTouchesChangedAfter(
          touchHistory,
          touchesChangedAfter
        ) {
          return TouchHistoryMath.centroidDimension(
            touchHistory,
            touchesChangedAfter,
            true,
            true
          );
        },
      currentCentroidYOfTouchesChangedAfter:
        function currentCentroidYOfTouchesChangedAfter(
          touchHistory,
          touchesChangedAfter
        ) {
          return TouchHistoryMath.centroidDimension(
            touchHistory,
            touchesChangedAfter,
            false,
            true
          );
        },
      previousCentroidXOfTouchesChangedAfter:
        function previousCentroidXOfTouchesChangedAfter(
          touchHistory,
          touchesChangedAfter
        ) {
          return TouchHistoryMath.centroidDimension(
            touchHistory,
            touchesChangedAfter,
            true,
            false
          );
        },
      previousCentroidYOfTouchesChangedAfter:
        function previousCentroidYOfTouchesChangedAfter(
          touchHistory,
          touchesChangedAfter
        ) {
          return TouchHistoryMath.centroidDimension(
            touchHistory,
            touchesChangedAfter,
            false,
            false
          );
        },
      currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
      },
      currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
      },
      noCentroid: -1,
    };
    module.exports = TouchHistoryMath;
  },
  357,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

    var _NativeDialogManagerAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _NativePermissionsAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[5])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var Platform = _$$_REQUIRE(_dependencyMap[7]);

    var PERMISSION_REQUEST_RESULT = Object.freeze({
      GRANTED: "granted",
      DENIED: "denied",
      NEVER_ASK_AGAIN: "never_ask_again",
    });
    var PERMISSIONS = Object.freeze({
      READ_CALENDAR: "android.permission.READ_CALENDAR",
      WRITE_CALENDAR: "android.permission.WRITE_CALENDAR",
      CAMERA: "android.permission.CAMERA",
      READ_CONTACTS: "android.permission.READ_CONTACTS",
      WRITE_CONTACTS: "android.permission.WRITE_CONTACTS",
      GET_ACCOUNTS: "android.permission.GET_ACCOUNTS",
      ACCESS_FINE_LOCATION: "android.permission.ACCESS_FINE_LOCATION",
      ACCESS_COARSE_LOCATION: "android.permission.ACCESS_COARSE_LOCATION",
      ACCESS_BACKGROUND_LOCATION:
        "android.permission.ACCESS_BACKGROUND_LOCATION",
      RECORD_AUDIO: "android.permission.RECORD_AUDIO",
      READ_PHONE_STATE: "android.permission.READ_PHONE_STATE",
      CALL_PHONE: "android.permission.CALL_PHONE",
      READ_CALL_LOG: "android.permission.READ_CALL_LOG",
      WRITE_CALL_LOG: "android.permission.WRITE_CALL_LOG",
      ADD_VOICEMAIL: "com.android.voicemail.permission.ADD_VOICEMAIL",
      READ_VOICEMAIL: "com.android.voicemail.permission.READ_VOICEMAIL",
      WRITE_VOICEMAIL: "com.android.voicemail.permission.WRITE_VOICEMAIL",
      USE_SIP: "android.permission.USE_SIP",
      PROCESS_OUTGOING_CALLS: "android.permission.PROCESS_OUTGOING_CALLS",
      BODY_SENSORS: "android.permission.BODY_SENSORS",
      BODY_SENSORS_BACKGROUND: "android.permission.BODY_SENSORS_BACKGROUND",
      SEND_SMS: "android.permission.SEND_SMS",
      RECEIVE_SMS: "android.permission.RECEIVE_SMS",
      READ_SMS: "android.permission.READ_SMS",
      RECEIVE_WAP_PUSH: "android.permission.RECEIVE_WAP_PUSH",
      RECEIVE_MMS: "android.permission.RECEIVE_MMS",
      READ_EXTERNAL_STORAGE: "android.permission.READ_EXTERNAL_STORAGE",
      READ_MEDIA_IMAGES: "android.permission.READ_MEDIA_IMAGES",
      READ_MEDIA_VIDEO: "android.permission.READ_MEDIA_VIDEO",
      READ_MEDIA_AUDIO: "android.permission.READ_MEDIA_AUDIO",
      WRITE_EXTERNAL_STORAGE: "android.permission.WRITE_EXTERNAL_STORAGE",
      BLUETOOTH_CONNECT: "android.permission.BLUETOOTH_CONNECT",
      BLUETOOTH_SCAN: "android.permission.BLUETOOTH_SCAN",
      BLUETOOTH_ADVERTISE: "android.permission.BLUETOOTH_ADVERTISE",
      ACCESS_MEDIA_LOCATION: "android.permission.ACCESS_MEDIA_LOCATION",
      ACCEPT_HANDOVER: "android.permission.ACCEPT_HANDOVER",
      ACTIVITY_RECOGNITION: "android.permission.ACTIVITY_RECOGNITION",
      ANSWER_PHONE_CALLS: "android.permission.ANSWER_PHONE_CALLS",
      READ_PHONE_NUMBERS: "android.permission.READ_PHONE_NUMBERS",
      UWB_RANGING: "android.permission.UWB_RANGING",
      POST_NOTIFICATION: "android.permission.POST_NOTIFICATIONS",
      NEARBY_WIFI_DEVICES: "android.permission.NEARBY_WIFI_DEVICES",
    });

    var PermissionsAndroid = (function () {
      function PermissionsAndroid() {
        (0, _classCallCheck2.default)(this, PermissionsAndroid);
        this.PERMISSIONS = PERMISSIONS;
        this.RESULTS = PERMISSION_REQUEST_RESULT;
      }

      (0, _createClass2.default)(PermissionsAndroid, [
        {
          key: "checkPermission",
          value: function checkPermission(permission) {
            console.warn(
              '"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead'
            );
            (0, _invariant.default)(
              _NativePermissionsAndroid.default,
              "PermissionsAndroid is not installed correctly."
            );
            return _NativePermissionsAndroid.default.checkPermission(
              permission
            );
          },
        },
        {
          key: "check",
          value: function check(permission) {
            (0, _invariant.default)(
              _NativePermissionsAndroid.default,
              "PermissionsAndroid is not installed correctly."
            );
            return _NativePermissionsAndroid.default.checkPermission(
              permission
            );
          },
        },
        {
          key: "requestPermission",
          value: (function () {
            var _requestPermission = (0, _asyncToGenerator2.default)(function* (
              permission,
              rationale
            ) {
              console.warn(
                '"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead'
              );
              var response = yield this.request(permission, rationale);
              return response === this.RESULTS.GRANTED;
            });

            function requestPermission(_x, _x2) {
              return _requestPermission.apply(this, arguments);
            }

            return requestPermission;
          })(),
        },
        {
          key: "request",
          value: (function () {
            var _request = (0, _asyncToGenerator2.default)(function* (
              permission,
              rationale
            ) {
              (0, _invariant.default)(
                _NativePermissionsAndroid.default,
                "PermissionsAndroid is not installed correctly."
              );

              if (rationale) {
                var shouldShowRationale =
                  yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(
                    permission
                  );

                if (
                  shouldShowRationale &&
                  !!_NativeDialogManagerAndroid.default
                ) {
                  return new Promise(function (resolve, reject) {
                    var options = Object.assign({}, rationale);

                    _NativeDialogManagerAndroid.default.showAlert(
                      options,
                      function () {
                        return reject(new Error("Error showing rationale"));
                      },
                      function () {
                        return resolve(
                          _NativePermissionsAndroid.default.requestPermission(
                            permission
                          )
                        );
                      }
                    );
                  });
                }
              }

              return _NativePermissionsAndroid.default.requestPermission(
                permission
              );
            });

            function request(_x3, _x4) {
              return _request.apply(this, arguments);
            }

            return request;
          })(),
        },
        {
          key: "requestMultiple",
          value: function requestMultiple(permissions) {
            (0, _invariant.default)(
              _NativePermissionsAndroid.default,
              "PermissionsAndroid is not installed correctly."
            );
            return _NativePermissionsAndroid.default.requestMultiplePermissions(
              permissions
            );
          },
        },
      ]);
      return PermissionsAndroid;
    })();

    var PermissionsAndroidInstance = new PermissionsAndroid();
    module.exports = PermissionsAndroidInstance;
  },
  358,
  [7, 268, 16, 17, 104, 359, 4, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("PermissionsAndroid");

    exports.default = _default;
  },
  359,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeEventEmitter = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _NativePushNotificationManagerIOS = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

    var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

    var PushNotificationEmitter = new _NativeEventEmitter.default(
      _Platform.default.OS !== "ios"
        ? null
        : _NativePushNotificationManagerIOS.default
    );

    var _notifHandlers = new Map();

    var DEVICE_NOTIF_EVENT = "remoteNotificationReceived";
    var NOTIF_REGISTER_EVENT = "remoteNotificationsRegistered";
    var NOTIF_REGISTRATION_ERROR_EVENT = "remoteNotificationRegistrationError";
    var DEVICE_LOCAL_NOTIF_EVENT = "localNotificationReceived";

    var PushNotificationIOS = (function () {
      function PushNotificationIOS(nativeNotif) {
        var _this = this;

        (0, _classCallCheck2.default)(this, PushNotificationIOS);
        this._data = {};
        this._remoteNotificationCompleteCallbackCalled = false;
        this._isRemote = nativeNotif.remote;

        if (this._isRemote) {
          this._notificationId = nativeNotif.notificationId;
        }

        if (nativeNotif.remote) {
          Object.keys(nativeNotif).forEach(function (notifKey) {
            var notifVal = nativeNotif[notifKey];

            if (notifKey === "aps") {
              _this._alert = notifVal.alert;
              _this._sound = notifVal.sound;
              _this._badgeCount = notifVal.badge;
              _this._category = notifVal.category;
              _this._contentAvailable = notifVal["content-available"];
              _this._threadID = notifVal["thread-id"];
            } else {
              _this._data[notifKey] = notifVal;
            }
          });
        } else {
          this._badgeCount = nativeNotif.applicationIconBadgeNumber;
          this._sound = nativeNotif.soundName;
          this._alert = nativeNotif.alertBody;
          this._data = nativeNotif.userInfo;
          this._category = nativeNotif.category;
        }
      }

      (0, _createClass2.default)(
        PushNotificationIOS,
        [
          {
            key: "finish",
            value: function finish(fetchResult) {
              if (
                !this._isRemote ||
                !this._notificationId ||
                this._remoteNotificationCompleteCallbackCalled
              ) {
                return;
              }

              this._remoteNotificationCompleteCallbackCalled = true;
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(
                this._notificationId,
                fetchResult
              );
            },
          },
          {
            key: "getMessage",
            value: function getMessage() {
              return this._alert;
            },
          },
          {
            key: "getSound",
            value: function getSound() {
              return this._sound;
            },
          },
          {
            key: "getCategory",
            value: function getCategory() {
              return this._category;
            },
          },
          {
            key: "getAlert",
            value: function getAlert() {
              return this._alert;
            },
          },
          {
            key: "getContentAvailable",
            value: function getContentAvailable() {
              return this._contentAvailable;
            },
          },
          {
            key: "getBadgeCount",
            value: function getBadgeCount() {
              return this._badgeCount;
            },
          },
          {
            key: "getData",
            value: function getData() {
              return this._data;
            },
          },
          {
            key: "getThreadID",
            value: function getThreadID() {
              return this._threadID;
            },
          },
        ],
        [
          {
            key: "presentLocalNotification",
            value: function presentLocalNotification(details) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.presentLocalNotification(
                details
              );
            },
          },
          {
            key: "scheduleLocalNotification",
            value: function scheduleLocalNotification(details) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.scheduleLocalNotification(
                details
              );
            },
          },
          {
            key: "cancelAllLocalNotifications",
            value: function cancelAllLocalNotifications() {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
            },
          },
          {
            key: "removeAllDeliveredNotifications",
            value: function removeAllDeliveredNotifications() {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
            },
          },
          {
            key: "getDeliveredNotifications",
            value: function getDeliveredNotifications(callback) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.getDeliveredNotifications(
                callback
              );
            },
          },
          {
            key: "removeDeliveredNotifications",
            value: function removeDeliveredNotifications(identifiers) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(
                identifiers
              );
            },
          },
          {
            key: "setApplicationIconBadgeNumber",
            value: function setApplicationIconBadgeNumber(number) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(
                number
              );
            },
          },
          {
            key: "getApplicationIconBadgeNumber",
            value: function getApplicationIconBadgeNumber(callback) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(
                callback
              );
            },
          },
          {
            key: "cancelLocalNotifications",
            value: function cancelLocalNotifications(userInfo) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.cancelLocalNotifications(
                userInfo
              );
            },
          },
          {
            key: "getScheduledLocalNotifications",
            value: function getScheduledLocalNotifications(callback) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(
                callback
              );
            },
          },
          {
            key: "addEventListener",
            value: function addEventListener(type, handler) {
              (0, _invariant.default)(
                type === "notification" ||
                  type === "register" ||
                  type === "registrationError" ||
                  type === "localNotification",
                "PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events"
              );
              var listener;

              if (type === "notification") {
                listener = PushNotificationEmitter.addListener(
                  DEVICE_NOTIF_EVENT,
                  function (notifData) {
                    handler(new PushNotificationIOS(notifData));
                  }
                );
              } else if (type === "localNotification") {
                listener = PushNotificationEmitter.addListener(
                  DEVICE_LOCAL_NOTIF_EVENT,
                  function (notifData) {
                    handler(new PushNotificationIOS(notifData));
                  }
                );
              } else if (type === "register") {
                listener = PushNotificationEmitter.addListener(
                  NOTIF_REGISTER_EVENT,
                  function (registrationInfo) {
                    handler(registrationInfo.deviceToken);
                  }
                );
              } else if (type === "registrationError") {
                listener = PushNotificationEmitter.addListener(
                  NOTIF_REGISTRATION_ERROR_EVENT,
                  function (errorInfo) {
                    handler(errorInfo);
                  }
                );
              }

              _notifHandlers.set(type, listener);
            },
          },
          {
            key: "removeEventListener",
            value: function removeEventListener(type, handler) {
              (0, _invariant.default)(
                type === "notification" ||
                  type === "register" ||
                  type === "registrationError" ||
                  type === "localNotification",
                "PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events"
              );

              var listener = _notifHandlers.get(type);

              if (!listener) {
                return;
              }

              listener.remove();

              _notifHandlers.delete(type);
            },
          },
          {
            key: "requestPermissions",
            value: function requestPermissions(permissions) {
              var requestedPermissions = {
                alert: true,
                badge: true,
                sound: true,
              };

              if (permissions) {
                requestedPermissions = {
                  alert: !!permissions.alert,
                  badge: !!permissions.badge,
                  sound: !!permissions.sound,
                };
              }

              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );
              return _NativePushNotificationManagerIOS.default.requestPermissions(
                requestedPermissions
              );
            },
          },
          {
            key: "abandonPermissions",
            value: function abandonPermissions() {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.abandonPermissions();
            },
          },
          {
            key: "checkPermissions",
            value: function checkPermissions(callback) {
              (0, _invariant.default)(
                typeof callback === "function",
                "Must provide a valid callback"
              );
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.checkPermissions(
                callback
              );
            },
          },
          {
            key: "getInitialNotification",
            value: function getInitialNotification() {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );
              return _NativePushNotificationManagerIOS.default
                .getInitialNotification()
                .then(function (notification) {
                  return notification && new PushNotificationIOS(notification);
                });
            },
          },
          {
            key: "getAuthorizationStatus",
            value: function getAuthorizationStatus(callback) {
              (0, _invariant.default)(
                _NativePushNotificationManagerIOS.default,
                "PushNotificationManager is not available."
              );

              _NativePushNotificationManagerIOS.default.getAuthorizationStatus(
                callback
              );
            },
          },
        ]
      );
      return PushNotificationIOS;
    })();

    PushNotificationIOS.FetchResult = {
      NewData: "UIBackgroundFetchResultNewData",
      NoData: "UIBackgroundFetchResultNoData",
      ResultFailed: "UIBackgroundFetchResultFailed",
    };
    module.exports = PushNotificationIOS;
  },
  360,
  [7, 16, 17, 82, 361, 4, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("PushNotificationManager");

    exports.default = _default;
  },
  361,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var Settings = {
      get: function get(key) {
        console.warn("Settings is not yet supported on Android");
        return null;
      },
      set: function set(settings) {
        console.warn("Settings is not yet supported on Android");
      },
      watchKeys: function watchKeys(keys, callback) {
        console.warn("Settings is not yet supported on Android");
        return -1;
      },
      clearWatch: function clearWatch(watchId) {
        console.warn("Settings is not yet supported on Android");
      },
    };
    module.exports = Settings;
  },
  362,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _classCallCheck2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _NativeActionSheetManager = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[3])
    );

    var _NativeShareModule = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[4])
    );

    var Platform = _$$_REQUIRE(_dependencyMap[5]);

    var invariant = _$$_REQUIRE(_dependencyMap[6]);

    var processColor = _$$_REQUIRE(_dependencyMap[7]);

    var Share = (function () {
      function Share() {
        (0, _classCallCheck2.default)(this, Share);
      }

      (0, _createClass2.default)(Share, null, [
        {
          key: "share",
          value: function share(content) {
            var options =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : {};
            invariant(
              typeof content === "object" && content !== null,
              "Content to share must be a valid object"
            );
            invariant(
              typeof content.url === "string" ||
                typeof content.message === "string",
              "At least one of URL and message is required"
            );
            invariant(
              typeof options === "object" && options !== null,
              "Options must be a valid object"
            );
            {
              invariant(
                _NativeShareModule.default,
                "ShareModule should be registered on Android."
              );
              invariant(
                content.title == null || typeof content.title === "string",
                "Invalid title: title should be a string."
              );
              var newContent = {
                title: content.title,
                message:
                  typeof content.message === "string"
                    ? content.message
                    : undefined,
              };
              return _NativeShareModule.default
                .share(newContent, options.dialogTitle)
                .then(function (result) {
                  return Object.assign(
                    {
                      activityType: null,
                    },
                    result
                  );
                });
            }
          },
        },
      ]);
      return Share;
    })();

    Share.sharedAction = "sharedAction";
    Share.dismissedAction = "dismissedAction";
    module.exports = Share;
  },
  363,
  [7, 16, 17, 321, 364, 54, 4, 135]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.get("ShareModule");

    exports.default = _default;
  },
  364,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeToastAndroid = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var ToastAndroidConstants = _NativeToastAndroid.default.getConstants();

    var ToastAndroid = {
      SHORT: ToastAndroidConstants.SHORT,
      LONG: ToastAndroidConstants.LONG,
      TOP: ToastAndroidConstants.TOP,
      BOTTOM: ToastAndroidConstants.BOTTOM,
      CENTER: ToastAndroidConstants.CENTER,
      show: function show(message, duration) {
        _NativeToastAndroid.default.show(message, duration);
      },
      showWithGravity: function showWithGravity(message, duration, gravity) {
        _NativeToastAndroid.default.showWithGravity(message, duration, gravity);
      },
      showWithGravityAndOffset: function showWithGravityAndOffset(
        message,
        duration,
        gravity,
        xOffset,
        yOffset
      ) {
        _NativeToastAndroid.default.showWithGravityAndOffset(
          message,
          duration,
          gravity,
          xOffset,
          yOffset
        );
      },
    };
    module.exports = ToastAndroid;
  },
  365,
  [7, 366]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("ToastAndroid");

    exports.default = _default;
  },
  366,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = useColorScheme;

    var _shim = _$$_REQUIRE(_dependencyMap[1]);

    var _Appearance = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    function useColorScheme() {
      return (0, _shim.useSyncExternalStore)(
        function (callback) {
          var appearanceSubscription =
            _Appearance.default.addChangeListener(callback);

          return function () {
            return appearanceSubscription.remove();
          };
        },
        function () {
          return _Appearance.default.getColorScheme();
        }
      );
    }
  },
  367,
  [7, 368, 322]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    {
      module.exports = _$$_REQUIRE(_dependencyMap[0]);
    }
  },
  368,
  [369]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    /**
     * @license React
     * use-sync-external-store-shim.native.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";

    var e = _$$_REQUIRE(_dependencyMap[0]);

    function h(a, b) {
      return (a === b && (0 !== a || 1 / a === 1 / b)) || (a !== a && b !== b);
    }

    var k = "function" === typeof Object.is ? Object.is : h,
      l = e.useState,
      m = e.useEffect,
      n = e.useLayoutEffect,
      p = e.useDebugValue;

    function q(a, b) {
      var d = b(),
        f = l({
          inst: {
            value: d,
            getSnapshot: b,
          },
        }),
        c = f[0].inst,
        g = f[1];
      n(
        function () {
          c.value = d;
          c.getSnapshot = b;
          r(c) &&
            g({
              inst: c,
            });
        },
        [a, d, b]
      );
      m(
        function () {
          r(c) &&
            g({
              inst: c,
            });
          return a(function () {
            r(c) &&
              g({
                inst: c,
              });
          });
        },
        [a]
      );
      p(d);
      return d;
    }

    function r(a) {
      var b = a.getSnapshot;
      a = a.value;

      try {
        var d = b();
        return !k(a, d);
      } catch (f) {
        return true;
      }
    }

    exports.useSyncExternalStore =
      undefined !== e.useSyncExternalStore ? e.useSyncExternalStore : q;
  },
  369,
  [1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = useWindowDimensions;

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _Dimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

    var _react = _$$_REQUIRE(_dependencyMap[3]);

    function useWindowDimensions() {
      var _useState = (0, _react.useState)(function () {
          return _Dimensions.default.get("window");
        }),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        dimensions = _useState2[0],
        setDimensions = _useState2[1];

      (0, _react.useEffect)(
        function () {
          function handleChange(_ref) {
            var window = _ref.window;

            if (
              dimensions.width !== window.width ||
              dimensions.height !== window.height ||
              dimensions.scale !== window.scale ||
              dimensions.fontScale !== window.fontScale
            ) {
              setDimensions(window);
            }
          }

          var subscription = _Dimensions.default.addEventListener(
            "change",
            handleChange
          );

          handleChange({
            window: _Dimensions.default.get("window"),
          });
          return function () {
            subscription.remove();
          };
        },
        [dimensions]
      );
      return dimensions;
    }
  },
  370,
  [7, 44, 153, 1]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[0]);

    var UTFSequence = deepFreezeAndThrowOnMutationInDev({
      BOM: "\uFEFF",
      BULLET: "\u2022",
      BULLET_SP: "\xA0\u2022\xA0",
      MIDDOT: "\xB7",
      MIDDOT_SP: "\xA0\xB7\xA0",
      MIDDOT_KATAKANA: "\u30FB",
      MDASH: "\u2014",
      MDASH_SP: "\xA0\u2014\xA0",
      NDASH: "\u2013",
      NDASH_SP: "\xA0\u2013\xA0",
      NBSP: "\xA0",
      PIZZA: "\uD83C\uDF55",
      TRIANGLE_LEFT: "\u25C0",
      TRIANGLE_RIGHT: "\u25B6",
    });
    module.exports = UTFSequence;
  },
  371,
  [50]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    var _NativeVibration = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var Platform = _$$_REQUIRE(_dependencyMap[2]);

    var _vibrating = false;
    var _id = 0;
    var _default_vibration_length = 400;

    function vibrateScheduler(id, pattern, repeat, nextIndex) {
      if (!_vibrating || id !== _id) {
        return;
      }

      _NativeVibration.default.vibrate(_default_vibration_length);

      if (nextIndex >= pattern.length) {
        if (repeat) {
          nextIndex = 0;
        } else {
          _vibrating = false;
          return;
        }
      }

      setTimeout(function () {
        return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
      }, pattern[nextIndex]);
    }

    var Vibration = {
      vibrate: function vibrate() {
        var pattern =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : _default_vibration_length;
        var repeat =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : false;
        {
          if (typeof pattern === "number") {
            _NativeVibration.default.vibrate(pattern);
          } else if (Array.isArray(pattern)) {
            _NativeVibration.default.vibrateByPattern(pattern, repeat ? 0 : -1);
          } else {
            throw new Error("Vibration pattern should be a number or array");
          }
        }
      },
      cancel: function cancel() {
        {
          _NativeVibration.default.cancel();
        }
      },
    };
    module.exports = Vibration;
  },
  372,
  [7, 373, 54]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var TurboModuleRegistry = _interopRequireWildcard(
      _$$_REQUIRE(_dependencyMap[0])
    );

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(
        nodeInterop
      ) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (
        obj === null ||
        (typeof obj !== "object" && typeof obj !== "function")
      ) {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor =
        Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (
          key !== "default" &&
          Object.prototype.hasOwnProperty.call(obj, key)
        ) {
          var desc = hasPropertyDescriptor
            ? Object.getOwnPropertyDescriptor(obj, key)
            : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }

    var _default = TurboModuleRegistry.getEnforcing("Vibration");

    exports.default = _default;
  },
  373,
  [42]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    "use strict";

    var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

    var _createClass = _$$_REQUIRE(_dependencyMap[1]);

    var _inherits = _$$_REQUIRE(_dependencyMap[2]);

    var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

    var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        );
        return true;
      } catch (e) {
        return false;
      }
    }

    var React = _$$_REQUIRE(_dependencyMap[5]);

    var LogBox = _$$_REQUIRE(_dependencyMap[6]);

    var YellowBox;
    {
      YellowBox = (function (_React$Component2) {
        _inherits(YellowBox, _React$Component2);

        var _super2 = _createSuper(YellowBox);

        function YellowBox() {
          _classCallCheck(this, YellowBox);

          return _super2.apply(this, arguments);
        }

        _createClass(
          YellowBox,
          [
            {
              key: "render",
              value: function render() {
                return null;
              },
            },
          ],
          [
            {
              key: "ignoreWarnings",
              value: function ignoreWarnings(patterns) {},
            },
            {
              key: "install",
              value: function install() {},
            },
            {
              key: "uninstall",
              value: function uninstall() {},
            },
          ]
        );

        return YellowBox;
      })(React.Component);
    }
    module.exports = YellowBox;
  },
  374,
  [16, 17, 28, 30, 33, 1, 355]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.DynamicColorIOS = undefined;

    var DynamicColorIOS = function DynamicColorIOS(tuple) {
      throw new Error("DynamicColorIOS is not available on this platform.");
    };

    exports.DynamicColorIOS = DynamicColorIOS;
  },
  375,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.getDeviceSync =
      exports.getDeviceNameSync =
      exports.getDeviceName =
      exports.getDeviceId =
      exports.getDevice =
      exports.getCodenameSync =
      exports.getCodename =
      exports.getCarrierSync =
      exports.getCarrier =
      exports.getBundleId =
      exports.getBuildNumber =
      exports.getBuildIdSync =
      exports.getBuildId =
      exports.getBrightnessSync =
      exports.getBrightness =
      exports.getBrand =
      exports.getBootloaderSync =
      exports.getBootloader =
      exports.getBatteryLevelSync =
      exports.getBatteryLevel =
      exports.getBaseOsSync =
      exports.getBaseOs =
      exports.getAvailableLocationProvidersSync =
      exports.getAvailableLocationProviders =
      exports.getApplicationName =
      exports.getApiLevelSync =
      exports.getApiLevel =
      exports.getAndroidIdSync =
      exports.getAndroidId =
      exports.default =
        undefined;
    exports.getDeviceToken = getDeviceToken;
    exports.getFreeDiskStorage =
      exports.getFontScaleSync =
      exports.getFontScale =
      exports.getFirstInstallTimeSync =
      exports.getFirstInstallTime =
      exports.getFingerprintSync =
      exports.getFingerprint =
      exports.getDisplaySync =
      exports.getDisplay =
      exports.getDeviceTypeSync =
      exports.getDeviceType =
        undefined;
    exports.getFreeDiskStorageOld = getFreeDiskStorageOld;
    exports.getFreeDiskStorageOldSync = getFreeDiskStorageOldSync;
    exports.getLastUpdateTimeSync =
      exports.getLastUpdateTime =
      exports.getIpAddressSync =
      exports.getIpAddress =
      exports.getInstanceIdSync =
      exports.getInstanceId =
      exports.getInstallerPackageNameSync =
      exports.getInstallerPackageName =
      exports.getInstallReferrerSync =
      exports.getInstallReferrer =
      exports.getIncrementalSync =
      exports.getIncremental =
      exports.getHostSync =
      exports.getHost =
      exports.getHardwareSync =
      exports.getHardware =
      exports.getFreeDiskStorageSync =
        undefined;
    exports.getMacAddress = getMacAddress;
    exports.getMacAddressSync = getMacAddressSync;
    exports.getProductSync =
      exports.getProduct =
      exports.getPreviewSdkIntSync =
      exports.getPreviewSdkInt =
      exports.getPowerStateSync =
      exports.getPowerState =
      exports.getPhoneNumberSync =
      exports.getPhoneNumber =
      exports.getModel =
      exports.getMaxMemorySync =
      exports.getMaxMemory =
      exports.getManufacturerSync =
      exports.getManufacturer =
        undefined;
    exports.getReadableVersion = getReadableVersion;
    exports.getTotalDiskCapacity =
      exports.getTagsSync =
      exports.getTags =
      exports.getSystemVersion =
      exports.getSystemName =
      exports.getSystemAvailableFeaturesSync =
      exports.getSystemAvailableFeatures =
      exports.getSerialNumberSync =
      exports.getSerialNumber =
      exports.getSecurityPatchSync =
      exports.getSecurityPatch =
        undefined;
    exports.getTotalDiskCapacityOld = getTotalDiskCapacityOld;
    exports.getTotalDiskCapacityOldSync = getTotalDiskCapacityOldSync;
    exports.getUserAgent =
      exports.getUsedMemorySync =
      exports.getUsedMemory =
      exports.getUniqueIdSync =
      exports.getUniqueId =
      exports.getTypeSync =
      exports.getType =
      exports.getTotalMemorySync =
      exports.getTotalMemory =
      exports.getTotalDiskCapacitySync =
        undefined;
    exports.getVersion = exports.getUserAgentSync = undefined;
    exports.hasDynamicIsland = hasDynamicIsland;
    exports.hasHmsSync =
      exports.hasHms =
      exports.hasGmsSync =
      exports.hasGms =
        undefined;
    exports.hasNotch = hasNotch;
    exports.hasSystemFeature = hasSystemFeature;
    exports.hasSystemFeatureSync = hasSystemFeatureSync;
    exports.isKeyboardConnectedSync =
      exports.isKeyboardConnected =
      exports.isHeadphonesConnectedSync =
      exports.isHeadphonesConnected =
      exports.isEmulatorSync =
      exports.isEmulator =
      exports.isCameraPresentSync =
      exports.isCameraPresent =
      exports.isBatteryChargingSync =
      exports.isBatteryCharging =
      exports.isAirplaneModeSync =
      exports.isAirplaneMode =
        undefined;
    exports.isLandscape = isLandscape;
    exports.isLandscapeSync = isLandscapeSync;
    exports.isLocationEnabledSync = exports.isLocationEnabled = undefined;
    exports.isLowBatteryLevel = isLowBatteryLevel;
    exports.supportedAbisSync =
      exports.supportedAbis =
      exports.supported64BitAbisSync =
      exports.supported64BitAbis =
      exports.supported32BitAbisSync =
      exports.supported32BitAbis =
      exports.isTabletMode =
      exports.isTablet =
      exports.isPinOrFingerprintSetSync =
      exports.isPinOrFingerprintSet =
      exports.isMouseConnectedSync =
      exports.isMouseConnected =
        undefined;
    exports.syncUniqueId = syncUniqueId;
    exports.useBatteryLevel = useBatteryLevel;
    exports.useBatteryLevelIsLow = useBatteryLevelIsLow;
    exports.useBrightness = useBrightness;
    exports.useDeviceName = useDeviceName;
    exports.useFirstInstallTime = useFirstInstallTime;
    exports.useHasSystemFeature = useHasSystemFeature;
    exports.useIsEmulator = useIsEmulator;
    exports.useIsHeadphonesConnected = useIsHeadphonesConnected;
    exports.useManufacturer = useManufacturer;
    exports.usePowerState = usePowerState;

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _react = _$$_REQUIRE(_dependencyMap[3]);

    var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

    var _asyncHookWrappers = _$$_REQUIRE(_dependencyMap[5]);

    var _devicesWithDynamicIsland = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[6])
    );

    var _devicesWithNotch = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[7])
    );

    var _nativeInterface = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[8])
    );

    var _supportedPlatformInfo = _$$_REQUIRE(_dependencyMap[9]);

    var _getSupportedPlatform = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "uniqueId",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getUniqueId();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getUniqueIdSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform2 = (0, _slicedToArray2.default)(
        _getSupportedPlatform,
        2
      ),
      getUniqueId = _getSupportedPlatform2[0],
      getUniqueIdSync = _getSupportedPlatform2[1];

    exports.getUniqueIdSync = getUniqueIdSync;
    exports.getUniqueId = getUniqueId;
    var uniqueId;

    function syncUniqueId() {
      return _syncUniqueId.apply(this, arguments);
    }

    function _syncUniqueId() {
      _syncUniqueId = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === "ios") {
          uniqueId = yield _nativeInterface.default.syncUniqueId();
        } else {
          uniqueId = yield getUniqueId();
        }

        return uniqueId;
      });
      return _syncUniqueId.apply(this, arguments);
    }

    var _getSupportedPlatform3 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "instanceId",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getInstanceId();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getInstanceIdSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform4 = (0, _slicedToArray2.default)(
        _getSupportedPlatform3,
        2
      ),
      getInstanceId = _getSupportedPlatform4[0],
      getInstanceIdSync = _getSupportedPlatform4[1];

    exports.getInstanceIdSync = getInstanceIdSync;
    exports.getInstanceId = getInstanceId;

    var _getSupportedPlatform5 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "serialNumber",
        supportedPlatforms: ["android", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getSerialNumber();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSerialNumberSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform6 = (0, _slicedToArray2.default)(
        _getSupportedPlatform5,
        2
      ),
      getSerialNumber = _getSupportedPlatform6[0],
      getSerialNumberSync = _getSupportedPlatform6[1];

    exports.getSerialNumberSync = getSerialNumberSync;
    exports.getSerialNumber = getSerialNumber;

    var _getSupportedPlatform7 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "androidId",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getAndroidId();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getAndroidIdSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform8 = (0, _slicedToArray2.default)(
        _getSupportedPlatform7,
        2
      ),
      getAndroidId = _getSupportedPlatform8[0],
      getAndroidIdSync = _getSupportedPlatform8[1];

    exports.getAndroidIdSync = getAndroidIdSync;
    exports.getAndroidId = getAndroidId;

    var _getSupportedPlatform9 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getIpAddress();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getIpAddressSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform10 = (0, _slicedToArray2.default)(
        _getSupportedPlatform9,
        2
      ),
      getIpAddress = _getSupportedPlatform10[0],
      getIpAddressSync = _getSupportedPlatform10[1];

    exports.getIpAddressSync = getIpAddressSync;
    exports.getIpAddress = getIpAddress;

    var _getSupportedPlatform11 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.isCameraPresent();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isCameraPresentSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform12 = (0, _slicedToArray2.default)(
        _getSupportedPlatform11,
        2
      ),
      isCameraPresent = _getSupportedPlatform12[0],
      isCameraPresentSync = _getSupportedPlatform12[1];

    exports.isCameraPresentSync = isCameraPresentSync;
    exports.isCameraPresent = isCameraPresent;

    function getMacAddress() {
      return _getMacAddress.apply(this, arguments);
    }

    function _getMacAddress() {
      _getMacAddress = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === "android") {
          return _nativeInterface.default.getMacAddress();
        } else if (_reactNative.Platform.OS === "ios") {
          return "02:00:00:00:00:00";
        }

        return "unknown";
      });
      return _getMacAddress.apply(this, arguments);
    }

    function getMacAddressSync() {
      if (_reactNative.Platform.OS === "android") {
        return _nativeInterface.default.getMacAddressSync();
      } else if (_reactNative.Platform.OS === "ios") {
        return "02:00:00:00:00:00";
      }

      return "unknown";
    }

    var getDeviceId = function getDeviceId() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        defaultValue: "unknown",
        memoKey: "deviceId",
        getter: function getter() {
          return _nativeInterface.default.deviceId;
        },
        supportedPlatforms: ["android", "ios", "windows"],
      });
    };

    exports.getDeviceId = getDeviceId;

    var _getSupportedPlatform13 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "manufacturer",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _reactNative.Platform.OS == "ios"
            ? Promise.resolve("Apple")
            : _nativeInterface.default.getSystemManufacturer();
        },
        syncGetter: function syncGetter() {
          return _reactNative.Platform.OS == "ios"
            ? "Apple"
            : _nativeInterface.default.getSystemManufacturerSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform14 = (0, _slicedToArray2.default)(
        _getSupportedPlatform13,
        2
      ),
      getManufacturer = _getSupportedPlatform14[0],
      getManufacturerSync = _getSupportedPlatform14[1];

    exports.getManufacturerSync = getManufacturerSync;
    exports.getManufacturer = getManufacturer;

    var getModel = function getModel() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "model",
        defaultValue: "unknown",
        supportedPlatforms: ["ios", "android", "windows"],
        getter: function getter() {
          return _nativeInterface.default.model;
        },
      });
    };

    exports.getModel = getModel;

    var getBrand = function getBrand() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "brand",
        supportedPlatforms: ["android", "ios", "windows"],
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.brand;
        },
      });
    };

    exports.getBrand = getBrand;

    var getSystemName = function getSystemName() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        defaultValue: "unknown",
        supportedPlatforms: ["ios", "android", "windows"],
        memoKey: "systemName",
        getter: function getter() {
          return _reactNative.Platform.select({
            ios: _nativeInterface.default.systemName,
            android: "Android",
            windows: "Windows",
            default: "unknown",
          });
        },
      });
    };

    exports.getSystemName = getSystemName;

    var getSystemVersion = function getSystemVersion() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.systemVersion;
        },
        supportedPlatforms: ["android", "ios", "windows"],
        memoKey: "systemVersion",
      });
    };

    exports.getSystemVersion = getSystemVersion;

    var _getSupportedPlatform15 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "buildId",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getBuildId();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getBuildIdSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform16 = (0, _slicedToArray2.default)(
        _getSupportedPlatform15,
        2
      ),
      getBuildId = _getSupportedPlatform16[0],
      getBuildIdSync = _getSupportedPlatform16[1];

    exports.getBuildIdSync = getBuildIdSync;
    exports.getBuildId = getBuildId;

    var _getSupportedPlatform17 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "apiLevel",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getApiLevel();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getApiLevelSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform18 = (0, _slicedToArray2.default)(
        _getSupportedPlatform17,
        2
      ),
      getApiLevel = _getSupportedPlatform18[0],
      getApiLevelSync = _getSupportedPlatform18[1];

    exports.getApiLevelSync = getApiLevelSync;
    exports.getApiLevel = getApiLevel;

    var getBundleId = function getBundleId() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "bundleId",
        supportedPlatforms: ["android", "ios", "windows"],
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.bundleId;
        },
      });
    };

    exports.getBundleId = getBundleId;

    var _getSupportedPlatform19 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "installerPackageName",
        supportedPlatforms: ["android", "windows", "ios"],
        getter: function getter() {
          return _nativeInterface.default.getInstallerPackageName();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getInstallerPackageNameSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform20 = (0, _slicedToArray2.default)(
        _getSupportedPlatform19,
        2
      ),
      getInstallerPackageName = _getSupportedPlatform20[0],
      getInstallerPackageNameSync = _getSupportedPlatform20[1];

    exports.getInstallerPackageNameSync = getInstallerPackageNameSync;
    exports.getInstallerPackageName = getInstallerPackageName;

    var getApplicationName = function getApplicationName() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "appName",
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.appName;
        },
        supportedPlatforms: ["android", "ios", "windows"],
      });
    };

    exports.getApplicationName = getApplicationName;

    var getBuildNumber = function getBuildNumber() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "buildNumber",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.buildNumber;
        },
        defaultValue: "unknown",
      });
    };

    exports.getBuildNumber = getBuildNumber;

    var getVersion = function getVersion() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "version",
        defaultValue: "unknown",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.appVersion;
        },
      });
    };

    exports.getVersion = getVersion;

    function getReadableVersion() {
      return getVersion() + "." + getBuildNumber();
    }

    var _getSupportedPlatform21 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getDeviceName();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getDeviceNameSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform22 = (0, _slicedToArray2.default)(
        _getSupportedPlatform21,
        2
      ),
      getDeviceName = _getSupportedPlatform22[0],
      getDeviceNameSync = _getSupportedPlatform22[1];

    exports.getDeviceNameSync = getDeviceNameSync;
    exports.getDeviceName = getDeviceName;

    var _getSupportedPlatform23 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getUsedMemory();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getUsedMemorySync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform24 = (0, _slicedToArray2.default)(
        _getSupportedPlatform23,
        2
      ),
      getUsedMemory = _getSupportedPlatform24[0],
      getUsedMemorySync = _getSupportedPlatform24[1];

    exports.getUsedMemorySync = getUsedMemorySync;
    exports.getUsedMemory = getUsedMemory;

    var getUserAgent = function getUserAgent() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoAsync)({
        memoKey: "userAgent",
        defaultValue: "unknown",
        supportedPlatforms: ["android", "ios", "web"],
        getter: function getter() {
          return _nativeInterface.default.getUserAgent();
        },
      });
    };

    exports.getUserAgent = getUserAgent;

    var getUserAgentSync = function getUserAgentSync() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "userAgent",
        defaultValue: "unknown",
        supportedPlatforms: ["android", "web"],
        getter: function getter() {
          return _nativeInterface.default.getUserAgentSync();
        },
      });
    };

    exports.getUserAgentSync = getUserAgentSync;

    var _getSupportedPlatform25 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getFontScale();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getFontScaleSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform26 = (0, _slicedToArray2.default)(
        _getSupportedPlatform25,
        2
      ),
      getFontScale = _getSupportedPlatform26[0],
      getFontScaleSync = _getSupportedPlatform26[1];

    exports.getFontScaleSync = getFontScaleSync;
    exports.getFontScale = getFontScale;

    var _getSupportedPlatform27 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "bootloader",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getBootloader();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getBootloaderSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform28 = (0, _slicedToArray2.default)(
        _getSupportedPlatform27,
        2
      ),
      getBootloader = _getSupportedPlatform28[0],
      getBootloaderSync = _getSupportedPlatform28[1];

    exports.getBootloaderSync = getBootloaderSync;
    exports.getBootloader = getBootloader;

    var _getSupportedPlatform29 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        getter: function getter() {
          return _nativeInterface.default.getDevice();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getDeviceSync();
        },
        defaultValue: "unknown",
        memoKey: "device",
        supportedPlatforms: ["android"],
      }),
      _getSupportedPlatform30 = (0, _slicedToArray2.default)(
        _getSupportedPlatform29,
        2
      ),
      getDevice = _getSupportedPlatform30[0],
      getDeviceSync = _getSupportedPlatform30[1];

    exports.getDeviceSync = getDeviceSync;
    exports.getDevice = getDevice;

    var _getSupportedPlatform31 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "display",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getDisplay();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getDisplaySync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform32 = (0, _slicedToArray2.default)(
        _getSupportedPlatform31,
        2
      ),
      getDisplay = _getSupportedPlatform32[0],
      getDisplaySync = _getSupportedPlatform32[1];

    exports.getDisplaySync = getDisplaySync;
    exports.getDisplay = getDisplay;

    var _getSupportedPlatform33 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "fingerprint",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getFingerprint();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getFingerprintSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform34 = (0, _slicedToArray2.default)(
        _getSupportedPlatform33,
        2
      ),
      getFingerprint = _getSupportedPlatform34[0],
      getFingerprintSync = _getSupportedPlatform34[1];

    exports.getFingerprintSync = getFingerprintSync;
    exports.getFingerprint = getFingerprint;

    var _getSupportedPlatform35 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "hardware",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getHardware();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getHardwareSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform36 = (0, _slicedToArray2.default)(
        _getSupportedPlatform35,
        2
      ),
      getHardware = _getSupportedPlatform36[0],
      getHardwareSync = _getSupportedPlatform36[1];

    exports.getHardwareSync = getHardwareSync;
    exports.getHardware = getHardware;

    var _getSupportedPlatform37 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "host",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getHost();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getHostSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform38 = (0, _slicedToArray2.default)(
        _getSupportedPlatform37,
        2
      ),
      getHost = _getSupportedPlatform38[0],
      getHostSync = _getSupportedPlatform38[1];

    exports.getHostSync = getHostSync;
    exports.getHost = getHost;

    var _getSupportedPlatform39 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "product",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getProduct();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getProductSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform40 = (0, _slicedToArray2.default)(
        _getSupportedPlatform39,
        2
      ),
      getProduct = _getSupportedPlatform40[0],
      getProductSync = _getSupportedPlatform40[1];

    exports.getProductSync = getProductSync;
    exports.getProduct = getProduct;

    var _getSupportedPlatform41 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "tags",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getTags();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getTagsSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform42 = (0, _slicedToArray2.default)(
        _getSupportedPlatform41,
        2
      ),
      getTags = _getSupportedPlatform42[0],
      getTagsSync = _getSupportedPlatform42[1];

    exports.getTagsSync = getTagsSync;
    exports.getTags = getTags;

    var _getSupportedPlatform43 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "type",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getType();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getTypeSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform44 = (0, _slicedToArray2.default)(
        _getSupportedPlatform43,
        2
      ),
      getType = _getSupportedPlatform44[0],
      getTypeSync = _getSupportedPlatform44[1];

    exports.getTypeSync = getTypeSync;
    exports.getType = getType;

    var _getSupportedPlatform45 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "baseOs",
        supportedPlatforms: ["android", "web", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getBaseOs();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getBaseOsSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform46 = (0, _slicedToArray2.default)(
        _getSupportedPlatform45,
        2
      ),
      getBaseOs = _getSupportedPlatform46[0],
      getBaseOsSync = _getSupportedPlatform46[1];

    exports.getBaseOsSync = getBaseOsSync;
    exports.getBaseOs = getBaseOs;

    var _getSupportedPlatform47 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "previewSdkInt",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getPreviewSdkInt();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getPreviewSdkIntSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform48 = (0, _slicedToArray2.default)(
        _getSupportedPlatform47,
        2
      ),
      getPreviewSdkInt = _getSupportedPlatform48[0],
      getPreviewSdkIntSync = _getSupportedPlatform48[1];

    exports.getPreviewSdkIntSync = getPreviewSdkIntSync;
    exports.getPreviewSdkInt = getPreviewSdkInt;

    var _getSupportedPlatform49 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "securityPatch",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getSecurityPatch();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSecurityPatchSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform50 = (0, _slicedToArray2.default)(
        _getSupportedPlatform49,
        2
      ),
      getSecurityPatch = _getSupportedPlatform50[0],
      getSecurityPatchSync = _getSupportedPlatform50[1];

    exports.getSecurityPatchSync = getSecurityPatchSync;
    exports.getSecurityPatch = getSecurityPatch;

    var _getSupportedPlatform51 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "codeName",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getCodename();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getCodenameSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform52 = (0, _slicedToArray2.default)(
        _getSupportedPlatform51,
        2
      ),
      getCodename = _getSupportedPlatform52[0],
      getCodenameSync = _getSupportedPlatform52[1];

    exports.getCodenameSync = getCodenameSync;
    exports.getCodename = getCodename;

    var _getSupportedPlatform53 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "incremental",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getIncremental();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getIncrementalSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform54 = (0, _slicedToArray2.default)(
        _getSupportedPlatform53,
        2
      ),
      getIncremental = _getSupportedPlatform54[0],
      getIncrementalSync = _getSupportedPlatform54[1];

    exports.getIncrementalSync = getIncrementalSync;
    exports.getIncremental = getIncremental;

    var _getSupportedPlatform55 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "emulator",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.isEmulator();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isEmulatorSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform56 = (0, _slicedToArray2.default)(
        _getSupportedPlatform55,
        2
      ),
      isEmulator = _getSupportedPlatform56[0],
      isEmulatorSync = _getSupportedPlatform56[1];

    exports.isEmulatorSync = isEmulatorSync;
    exports.isEmulator = isEmulator;

    var isTablet = function isTablet() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        defaultValue: false,
        supportedPlatforms: ["android", "ios", "windows"],
        memoKey: "tablet",
        getter: function getter() {
          return _nativeInterface.default.isTablet;
        },
      });
    };

    exports.isTablet = isTablet;

    var _getSupportedPlatform57 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.isPinOrFingerprintSet();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isPinOrFingerprintSetSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform58 = (0, _slicedToArray2.default)(
        _getSupportedPlatform57,
        2
      ),
      isPinOrFingerprintSet = _getSupportedPlatform58[0],
      isPinOrFingerprintSetSync = _getSupportedPlatform58[1];

    exports.isPinOrFingerprintSetSync = isPinOrFingerprintSetSync;
    exports.isPinOrFingerprintSet = isPinOrFingerprintSet;
    var notch;

    function hasNotch() {
      if (notch === undefined) {
        var _brand = getBrand();

        var _model = getModel();

        notch =
          _devicesWithNotch.default.findIndex(function (item) {
            return (
              item.brand.toLowerCase() === _brand.toLowerCase() &&
              item.model.toLowerCase() === _model.toLowerCase()
            );
          }) !== -1;
      }

      return notch;
    }

    var dynamicIsland;

    function hasDynamicIsland() {
      if (dynamicIsland === undefined) {
        var _brand = getBrand();

        var _model = getModel();

        dynamicIsland =
          _devicesWithDynamicIsland.default.findIndex(function (item) {
            return (
              item.brand.toLowerCase() === _brand.toLowerCase() &&
              item.model.toLowerCase() === _model.toLowerCase()
            );
          }) !== -1;
      }

      return dynamicIsland;
    }

    var _getSupportedPlatform59 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.hasGms();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.hasGmsSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform60 = (0, _slicedToArray2.default)(
        _getSupportedPlatform59,
        2
      ),
      hasGms = _getSupportedPlatform60[0],
      hasGmsSync = _getSupportedPlatform60[1];

    exports.hasGmsSync = hasGmsSync;
    exports.hasGms = hasGms;

    var _getSupportedPlatform61 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.hasHms();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.hasHmsSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform62 = (0, _slicedToArray2.default)(
        _getSupportedPlatform61,
        2
      ),
      hasHms = _getSupportedPlatform62[0],
      hasHmsSync = _getSupportedPlatform62[1];

    exports.hasHmsSync = hasHmsSync;
    exports.hasHms = hasHms;

    var _getSupportedPlatform63 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "firstInstallTime",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getFirstInstallTime();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getFirstInstallTimeSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform64 = (0, _slicedToArray2.default)(
        _getSupportedPlatform63,
        2
      ),
      getFirstInstallTime = _getSupportedPlatform64[0],
      getFirstInstallTimeSync = _getSupportedPlatform64[1];

    exports.getFirstInstallTimeSync = getFirstInstallTimeSync;
    exports.getFirstInstallTime = getFirstInstallTime;

    var _getSupportedPlatform65 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "installReferrer",
        supportedPlatforms: ["android", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getInstallReferrer();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getInstallReferrerSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform66 = (0, _slicedToArray2.default)(
        _getSupportedPlatform65,
        2
      ),
      getInstallReferrer = _getSupportedPlatform66[0],
      getInstallReferrerSync = _getSupportedPlatform66[1];

    exports.getInstallReferrerSync = getInstallReferrerSync;
    exports.getInstallReferrer = getInstallReferrer;

    var _getSupportedPlatform67 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "lastUpdateTime",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getLastUpdateTime();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getLastUpdateTimeSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform68 = (0, _slicedToArray2.default)(
        _getSupportedPlatform67,
        2
      ),
      getLastUpdateTime = _getSupportedPlatform68[0],
      getLastUpdateTimeSync = _getSupportedPlatform68[1];

    exports.getLastUpdateTimeSync = getLastUpdateTimeSync;
    exports.getLastUpdateTime = getLastUpdateTime;

    var _getSupportedPlatform69 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getPhoneNumber();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getPhoneNumberSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform70 = (0, _slicedToArray2.default)(
        _getSupportedPlatform69,
        2
      ),
      getPhoneNumber = _getSupportedPlatform70[0],
      getPhoneNumberSync = _getSupportedPlatform70[1];

    exports.getPhoneNumberSync = getPhoneNumberSync;
    exports.getPhoneNumber = getPhoneNumber;

    var _getSupportedPlatform71 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios"],
        getter: function getter() {
          return _nativeInterface.default.getCarrier();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getCarrierSync();
        },
        defaultValue: "unknown",
      }),
      _getSupportedPlatform72 = (0, _slicedToArray2.default)(
        _getSupportedPlatform71,
        2
      ),
      getCarrier = _getSupportedPlatform72[0],
      getCarrierSync = _getSupportedPlatform72[1];

    exports.getCarrierSync = getCarrierSync;
    exports.getCarrier = getCarrier;

    var _getSupportedPlatform73 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "totalMemory",
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getTotalMemory();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getTotalMemorySync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform74 = (0, _slicedToArray2.default)(
        _getSupportedPlatform73,
        2
      ),
      getTotalMemory = _getSupportedPlatform74[0],
      getTotalMemorySync = _getSupportedPlatform74[1];

    exports.getTotalMemorySync = getTotalMemorySync;
    exports.getTotalMemory = getTotalMemory;

    var _getSupportedPlatform75 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "maxMemory",
        supportedPlatforms: ["android", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getMaxMemory();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getMaxMemorySync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform76 = (0, _slicedToArray2.default)(
        _getSupportedPlatform75,
        2
      ),
      getMaxMemory = _getSupportedPlatform76[0],
      getMaxMemorySync = _getSupportedPlatform76[1];

    exports.getMaxMemorySync = getMaxMemorySync;
    exports.getMaxMemory = getMaxMemory;

    var _getSupportedPlatform77 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getTotalDiskCapacity();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getTotalDiskCapacitySync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform78 = (0, _slicedToArray2.default)(
        _getSupportedPlatform77,
        2
      ),
      getTotalDiskCapacity = _getSupportedPlatform78[0],
      getTotalDiskCapacitySync = _getSupportedPlatform78[1];

    exports.getTotalDiskCapacitySync = getTotalDiskCapacitySync;
    exports.getTotalDiskCapacity = getTotalDiskCapacity;

    function getTotalDiskCapacityOld() {
      return _getTotalDiskCapacityOld.apply(this, arguments);
    }

    function _getTotalDiskCapacityOld() {
      _getTotalDiskCapacityOld = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === "android") {
          return _nativeInterface.default.getTotalDiskCapacityOld();
        }

        if (
          _reactNative.Platform.OS === "ios" ||
          _reactNative.Platform.OS === "windows" ||
          _reactNative.Platform.OS === "web"
        ) {
          return getTotalDiskCapacity();
        }

        return -1;
      });
      return _getTotalDiskCapacityOld.apply(this, arguments);
    }

    function getTotalDiskCapacityOldSync() {
      if (_reactNative.Platform.OS === "android") {
        return _nativeInterface.default.getTotalDiskCapacityOldSync();
      }

      if (
        _reactNative.Platform.OS === "ios" ||
        _reactNative.Platform.OS === "windows" ||
        _reactNative.Platform.OS === "web"
      ) {
        return getTotalDiskCapacitySync();
      }

      return -1;
    }

    var _getSupportedPlatform79 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getFreeDiskStorage();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getFreeDiskStorageSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform80 = (0, _slicedToArray2.default)(
        _getSupportedPlatform79,
        2
      ),
      getFreeDiskStorage = _getSupportedPlatform80[0],
      getFreeDiskStorageSync = _getSupportedPlatform80[1];

    exports.getFreeDiskStorageSync = getFreeDiskStorageSync;
    exports.getFreeDiskStorage = getFreeDiskStorage;

    function getFreeDiskStorageOld() {
      return _getFreeDiskStorageOld.apply(this, arguments);
    }

    function _getFreeDiskStorageOld() {
      _getFreeDiskStorageOld = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === "android") {
          return _nativeInterface.default.getFreeDiskStorageOld();
        }

        if (
          _reactNative.Platform.OS === "ios" ||
          _reactNative.Platform.OS === "windows" ||
          _reactNative.Platform.OS === "web"
        ) {
          return getFreeDiskStorage();
        }

        return -1;
      });
      return _getFreeDiskStorageOld.apply(this, arguments);
    }

    function getFreeDiskStorageOldSync() {
      if (_reactNative.Platform.OS === "android") {
        return _nativeInterface.default.getFreeDiskStorageOldSync();
      }

      if (
        _reactNative.Platform.OS === "ios" ||
        _reactNative.Platform.OS === "windows" ||
        _reactNative.Platform.OS === "web"
      ) {
        return getFreeDiskStorageSync();
      }

      return -1;
    }

    var _getSupportedPlatform81 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getBatteryLevel();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getBatteryLevelSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform82 = (0, _slicedToArray2.default)(
        _getSupportedPlatform81,
        2
      ),
      getBatteryLevel = _getSupportedPlatform82[0],
      getBatteryLevelSync = _getSupportedPlatform82[1];

    exports.getBatteryLevelSync = getBatteryLevelSync;
    exports.getBatteryLevel = getBatteryLevel;

    var _getSupportedPlatform83 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["ios", "android", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.getPowerState();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getPowerStateSync();
        },
        defaultValue: {},
      }),
      _getSupportedPlatform84 = (0, _slicedToArray2.default)(
        _getSupportedPlatform83,
        2
      ),
      getPowerState = _getSupportedPlatform84[0],
      getPowerStateSync = _getSupportedPlatform84[1];

    exports.getPowerStateSync = getPowerStateSync;
    exports.getPowerState = getPowerState;

    var _getSupportedPlatform85 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "windows", "web"],
        getter: function getter() {
          return _nativeInterface.default.isBatteryCharging();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isBatteryChargingSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform86 = (0, _slicedToArray2.default)(
        _getSupportedPlatform85,
        2
      ),
      isBatteryCharging = _getSupportedPlatform86[0],
      isBatteryChargingSync = _getSupportedPlatform86[1];

    exports.isBatteryChargingSync = isBatteryChargingSync;
    exports.isBatteryCharging = isBatteryCharging;

    function isLandscape() {
      return _isLandscape.apply(this, arguments);
    }

    function _isLandscape() {
      _isLandscape = (0, _asyncToGenerator2.default)(function* () {
        return Promise.resolve(isLandscapeSync());
      });
      return _isLandscape.apply(this, arguments);
    }

    function isLandscapeSync() {
      var _Dimensions$get = _reactNative.Dimensions.get("window"),
        height = _Dimensions$get.height,
        width = _Dimensions$get.width;

      return width >= height;
    }

    var _getSupportedPlatform87 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "web"],
        getter: function getter() {
          return _nativeInterface.default.isAirplaneMode();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isAirplaneModeSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform88 = (0, _slicedToArray2.default)(
        _getSupportedPlatform87,
        2
      ),
      isAirplaneMode = _getSupportedPlatform88[0],
      isAirplaneModeSync = _getSupportedPlatform88[1];

    exports.isAirplaneModeSync = isAirplaneModeSync;
    exports.isAirplaneMode = isAirplaneMode;

    var getDeviceType = function getDeviceType() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "deviceType",
        supportedPlatforms: ["android", "ios", "windows"],
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.deviceType;
        },
      });
    };

    exports.getDeviceType = getDeviceType;

    var getDeviceTypeSync = function getDeviceTypeSync() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({
        memoKey: "deviceType",
        supportedPlatforms: ["android", "ios", "windows"],
        defaultValue: "unknown",
        getter: function getter() {
          return _nativeInterface.default.deviceType;
        },
      });
    };

    exports.getDeviceTypeSync = getDeviceTypeSync;

    var _getSupportedPlatform89 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "_supportedAbis",
        supportedPlatforms: ["android", "ios", "windows"],
        getter: function getter() {
          return _nativeInterface.default.getSupportedAbis();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSupportedAbisSync();
        },
        defaultValue: [],
      }),
      _getSupportedPlatform90 = (0, _slicedToArray2.default)(
        _getSupportedPlatform89,
        2
      ),
      supportedAbis = _getSupportedPlatform90[0],
      supportedAbisSync = _getSupportedPlatform90[1];

    exports.supportedAbisSync = supportedAbisSync;
    exports.supportedAbis = supportedAbis;

    var _getSupportedPlatform91 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "_supported32BitAbis",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getSupported32BitAbis();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSupported32BitAbisSync();
        },
        defaultValue: [],
      }),
      _getSupportedPlatform92 = (0, _slicedToArray2.default)(
        _getSupportedPlatform91,
        2
      ),
      supported32BitAbis = _getSupportedPlatform92[0],
      supported32BitAbisSync = _getSupportedPlatform92[1];

    exports.supported32BitAbisSync = supported32BitAbisSync;
    exports.supported32BitAbis = supported32BitAbis;

    var _getSupportedPlatform93 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        memoKey: "_supported64BitAbis",
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getSupported64BitAbis();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSupported64BitAbisSync();
        },
        defaultValue: [],
      }),
      _getSupportedPlatform94 = (0, _slicedToArray2.default)(
        _getSupportedPlatform93,
        2
      ),
      supported64BitAbis = _getSupportedPlatform94[0],
      supported64BitAbisSync = _getSupportedPlatform94[1];

    exports.supported64BitAbisSync = supported64BitAbisSync;
    exports.supported64BitAbis = supported64BitAbis;

    function hasSystemFeature(_x) {
      return _hasSystemFeature.apply(this, arguments);
    }

    function _hasSystemFeature() {
      _hasSystemFeature = (0, _asyncToGenerator2.default)(function* (feature) {
        if (_reactNative.Platform.OS === "android") {
          return _nativeInterface.default.hasSystemFeature(feature);
        }

        return false;
      });
      return _hasSystemFeature.apply(this, arguments);
    }

    function hasSystemFeatureSync(feature) {
      if (_reactNative.Platform.OS === "android") {
        return _nativeInterface.default.hasSystemFeatureSync(feature);
      }

      return false;
    }

    function isLowBatteryLevel(level) {
      if (_reactNative.Platform.OS === "android") {
        return level < 0.15;
      }

      return level < 0.2;
    }

    var _getSupportedPlatform95 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android"],
        getter: function getter() {
          return _nativeInterface.default.getSystemAvailableFeatures();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getSystemAvailableFeaturesSync();
        },
        defaultValue: [],
      }),
      _getSupportedPlatform96 = (0, _slicedToArray2.default)(
        _getSupportedPlatform95,
        2
      ),
      getSystemAvailableFeatures = _getSupportedPlatform96[0],
      getSystemAvailableFeaturesSync = _getSupportedPlatform96[1];

    exports.getSystemAvailableFeaturesSync = getSystemAvailableFeaturesSync;
    exports.getSystemAvailableFeatures = getSystemAvailableFeatures;

    var _getSupportedPlatform97 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios", "web"],
        getter: function getter() {
          return _nativeInterface.default.isLocationEnabled();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isLocationEnabledSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform98 = (0, _slicedToArray2.default)(
        _getSupportedPlatform97,
        2
      ),
      isLocationEnabled = _getSupportedPlatform98[0],
      isLocationEnabledSync = _getSupportedPlatform98[1];

    exports.isLocationEnabledSync = isLocationEnabledSync;
    exports.isLocationEnabled = isLocationEnabled;

    var _getSupportedPlatform99 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios"],
        getter: function getter() {
          return _nativeInterface.default.isHeadphonesConnected();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isHeadphonesConnectedSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform100 = (0, _slicedToArray2.default)(
        _getSupportedPlatform99,
        2
      ),
      isHeadphonesConnected = _getSupportedPlatform100[0],
      isHeadphonesConnectedSync = _getSupportedPlatform100[1];

    exports.isHeadphonesConnectedSync = isHeadphonesConnectedSync;
    exports.isHeadphonesConnected = isHeadphonesConnected;

    var _getSupportedPlatform101 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["windows"],
        getter: function getter() {
          return _nativeInterface.default.isMouseConnected();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isMouseConnectedSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform102 = (0, _slicedToArray2.default)(
        _getSupportedPlatform101,
        2
      ),
      isMouseConnected = _getSupportedPlatform102[0],
      isMouseConnectedSync = _getSupportedPlatform102[1];

    exports.isMouseConnectedSync = isMouseConnectedSync;
    exports.isMouseConnected = isMouseConnected;

    var _getSupportedPlatform103 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["windows"],
        getter: function getter() {
          return _nativeInterface.default.isKeyboardConnected();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.isKeyboardConnectedSync();
        },
        defaultValue: false,
      }),
      _getSupportedPlatform104 = (0, _slicedToArray2.default)(
        _getSupportedPlatform103,
        2
      ),
      isKeyboardConnected = _getSupportedPlatform104[0],
      isKeyboardConnectedSync = _getSupportedPlatform104[1];

    exports.isKeyboardConnectedSync = isKeyboardConnectedSync;
    exports.isKeyboardConnected = isKeyboardConnected;

    var isTabletMode = function isTabletMode() {
      return (0, _supportedPlatformInfo.getSupportedPlatformInfoAsync)({
        supportedPlatforms: ["windows"],
        getter: function getter() {
          return _nativeInterface.default.isTabletMode();
        },
        defaultValue: false,
      });
    };

    exports.isTabletMode = isTabletMode;

    var _getSupportedPlatform105 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["android", "ios"],
        getter: function getter() {
          return _nativeInterface.default.getAvailableLocationProviders();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getAvailableLocationProvidersSync();
        },
        defaultValue: {},
      }),
      _getSupportedPlatform106 = (0, _slicedToArray2.default)(
        _getSupportedPlatform105,
        2
      ),
      getAvailableLocationProviders = _getSupportedPlatform106[0],
      getAvailableLocationProvidersSync = _getSupportedPlatform106[1];

    exports.getAvailableLocationProvidersSync =
      getAvailableLocationProvidersSync;
    exports.getAvailableLocationProviders = getAvailableLocationProviders;

    var _getSupportedPlatform107 = (0,
      _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({
        supportedPlatforms: ["ios"],
        getter: function getter() {
          return _nativeInterface.default.getBrightness();
        },
        syncGetter: function syncGetter() {
          return _nativeInterface.default.getBrightnessSync();
        },
        defaultValue: -1,
      }),
      _getSupportedPlatform108 = (0, _slicedToArray2.default)(
        _getSupportedPlatform107,
        2
      ),
      getBrightness = _getSupportedPlatform108[0],
      getBrightnessSync = _getSupportedPlatform108[1];

    exports.getBrightnessSync = getBrightnessSync;
    exports.getBrightness = getBrightness;

    function getDeviceToken() {
      return _getDeviceToken.apply(this, arguments);
    }

    function _getDeviceToken() {
      _getDeviceToken = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === "ios") {
          return _nativeInterface.default.getDeviceToken();
        }

        return "unknown";
      });
      return _getDeviceToken.apply(this, arguments);
    }

    var deviceInfoEmitter = new _reactNative.NativeEventEmitter(
      _reactNative.NativeModules.RNDeviceInfo
    );

    function useBatteryLevel() {
      var _useState = (0, _react.useState)(null),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        batteryLevel = _useState2[0],
        setBatteryLevel = _useState2[1];

      (0, _react.useEffect)(function () {
        var setInitialValue = (function () {
          var _ref = (0, _asyncToGenerator2.default)(function* () {
            var initialValue = yield getBatteryLevel();
            setBatteryLevel(initialValue);
          });

          return function setInitialValue() {
            return _ref.apply(this, arguments);
          };
        })();

        var onChange = function onChange(level) {
          setBatteryLevel(level);
        };

        setInitialValue();
        var subscription = deviceInfoEmitter.addListener(
          "RNDeviceInfo_batteryLevelDidChange",
          onChange
        );
        return function () {
          return subscription.remove();
        };
      }, []);
      return batteryLevel;
    }

    function useBatteryLevelIsLow() {
      var _useState3 = (0, _react.useState)(null),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        batteryLevelIsLow = _useState4[0],
        setBatteryLevelIsLow = _useState4[1];

      (0, _react.useEffect)(function () {
        var setInitialValue = (function () {
          var _ref2 = (0, _asyncToGenerator2.default)(function* () {
            var initialValue = yield getBatteryLevel();
            isLowBatteryLevel(initialValue) &&
              setBatteryLevelIsLow(initialValue);
          });

          return function setInitialValue() {
            return _ref2.apply(this, arguments);
          };
        })();

        setInitialValue();

        var onChange = function onChange(level) {
          setBatteryLevelIsLow(level);
        };

        var subscription = deviceInfoEmitter.addListener(
          "RNDeviceInfo_batteryLevelIsLow",
          onChange
        );
        return function () {
          return subscription.remove();
        };
      }, []);
      return batteryLevelIsLow;
    }

    function usePowerState() {
      var _useState5 = (0, _react.useState)({}),
        _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
        powerState = _useState6[0],
        setPowerState = _useState6[1];

      (0, _react.useEffect)(function () {
        var setInitialValue = (function () {
          var _ref3 = (0, _asyncToGenerator2.default)(function* () {
            var initialValue = yield getPowerState();
            setPowerState(initialValue);
          });

          return function setInitialValue() {
            return _ref3.apply(this, arguments);
          };
        })();

        var onChange = function onChange(state) {
          setPowerState(state);
        };

        setInitialValue();
        var subscription = deviceInfoEmitter.addListener(
          "RNDeviceInfo_powerStateDidChange",
          onChange
        );
        return function () {
          return subscription.remove();
        };
      }, []);
      return powerState;
    }

    function useIsHeadphonesConnected() {
      return (0, _asyncHookWrappers.useOnEvent)(
        "RNDeviceInfo_headphoneConnectionDidChange",
        isHeadphonesConnected,
        false
      );
    }

    function useFirstInstallTime() {
      return (0, _asyncHookWrappers.useOnMount)(getFirstInstallTime, -1);
    }

    function useDeviceName() {
      return (0, _asyncHookWrappers.useOnMount)(getDeviceName, "unknown");
    }

    function useHasSystemFeature(feature) {
      var asyncGetter = (0, _react.useCallback)(
        function () {
          return hasSystemFeature(feature);
        },
        [feature]
      );
      return (0, _asyncHookWrappers.useOnMount)(asyncGetter, false);
    }

    function useIsEmulator() {
      return (0, _asyncHookWrappers.useOnMount)(isEmulator, false);
    }

    function useManufacturer() {
      return (0, _asyncHookWrappers.useOnMount)(getManufacturer, "unknown");
    }

    function useBrightness() {
      var _useState7 = (0, _react.useState)(null),
        _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
        brightness = _useState8[0],
        setBrightness = _useState8[1];

      (0, _react.useEffect)(function () {
        var setInitialValue = (function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* () {
            var initialValue = yield getBrightness();
            setBrightness(initialValue);
          });

          return function setInitialValue() {
            return _ref4.apply(this, arguments);
          };
        })();

        var onChange = function onChange(value) {
          setBrightness(value);
        };

        setInitialValue();
        var subscription = deviceInfoEmitter.addListener(
          "RNDeviceInfo_brightnessDidChange",
          onChange
        );
        return function () {
          return subscription.remove();
        };
      }, []);
      return brightness;
    }

    var deviceInfoModule = {
      getAndroidId: getAndroidId,
      getAndroidIdSync: getAndroidIdSync,
      getApiLevel: getApiLevel,
      getApiLevelSync: getApiLevelSync,
      getApplicationName: getApplicationName,
      getAvailableLocationProviders: getAvailableLocationProviders,
      getAvailableLocationProvidersSync: getAvailableLocationProvidersSync,
      getBaseOs: getBaseOs,
      getBaseOsSync: getBaseOsSync,
      getBatteryLevel: getBatteryLevel,
      getBatteryLevelSync: getBatteryLevelSync,
      getBootloader: getBootloader,
      getBootloaderSync: getBootloaderSync,
      getBrand: getBrand,
      getBuildId: getBuildId,
      getBuildIdSync: getBuildIdSync,
      getBuildNumber: getBuildNumber,
      getBundleId: getBundleId,
      getCarrier: getCarrier,
      getCarrierSync: getCarrierSync,
      getCodename: getCodename,
      getCodenameSync: getCodenameSync,
      getDevice: getDevice,
      getDeviceId: getDeviceId,
      getDeviceName: getDeviceName,
      getDeviceNameSync: getDeviceNameSync,
      getDeviceSync: getDeviceSync,
      getDeviceToken: getDeviceToken,
      getDeviceType: getDeviceType,
      getDisplay: getDisplay,
      getDisplaySync: getDisplaySync,
      getFingerprint: getFingerprint,
      getFingerprintSync: getFingerprintSync,
      getFirstInstallTime: getFirstInstallTime,
      getFirstInstallTimeSync: getFirstInstallTimeSync,
      getFontScale: getFontScale,
      getFontScaleSync: getFontScaleSync,
      getFreeDiskStorage: getFreeDiskStorage,
      getFreeDiskStorageOld: getFreeDiskStorageOld,
      getFreeDiskStorageSync: getFreeDiskStorageSync,
      getFreeDiskStorageOldSync: getFreeDiskStorageOldSync,
      getHardware: getHardware,
      getHardwareSync: getHardwareSync,
      getHost: getHost,
      getHostSync: getHostSync,
      getIncremental: getIncremental,
      getIncrementalSync: getIncrementalSync,
      getInstallerPackageName: getInstallerPackageName,
      getInstallerPackageNameSync: getInstallerPackageNameSync,
      getInstallReferrer: getInstallReferrer,
      getInstallReferrerSync: getInstallReferrerSync,
      getInstanceId: getInstanceId,
      getInstanceIdSync: getInstanceIdSync,
      getIpAddress: getIpAddress,
      getIpAddressSync: getIpAddressSync,
      getLastUpdateTime: getLastUpdateTime,
      getLastUpdateTimeSync: getLastUpdateTimeSync,
      getMacAddress: getMacAddress,
      getMacAddressSync: getMacAddressSync,
      getManufacturer: getManufacturer,
      getManufacturerSync: getManufacturerSync,
      getMaxMemory: getMaxMemory,
      getMaxMemorySync: getMaxMemorySync,
      getModel: getModel,
      getPhoneNumber: getPhoneNumber,
      getPhoneNumberSync: getPhoneNumberSync,
      getPowerState: getPowerState,
      getPowerStateSync: getPowerStateSync,
      getPreviewSdkInt: getPreviewSdkInt,
      getPreviewSdkIntSync: getPreviewSdkIntSync,
      getProduct: getProduct,
      getProductSync: getProductSync,
      getReadableVersion: getReadableVersion,
      getSecurityPatch: getSecurityPatch,
      getSecurityPatchSync: getSecurityPatchSync,
      getSerialNumber: getSerialNumber,
      getSerialNumberSync: getSerialNumberSync,
      getSystemAvailableFeatures: getSystemAvailableFeatures,
      getSystemAvailableFeaturesSync: getSystemAvailableFeaturesSync,
      getSystemName: getSystemName,
      getSystemVersion: getSystemVersion,
      getTags: getTags,
      getTagsSync: getTagsSync,
      getTotalDiskCapacity: getTotalDiskCapacity,
      getTotalDiskCapacityOld: getTotalDiskCapacityOld,
      getTotalDiskCapacitySync: getTotalDiskCapacitySync,
      getTotalDiskCapacityOldSync: getTotalDiskCapacityOldSync,
      getTotalMemory: getTotalMemory,
      getTotalMemorySync: getTotalMemorySync,
      getType: getType,
      getTypeSync: getTypeSync,
      getUniqueId: getUniqueId,
      getUniqueIdSync: getUniqueIdSync,
      getUsedMemory: getUsedMemory,
      getUsedMemorySync: getUsedMemorySync,
      getUserAgent: getUserAgent,
      getUserAgentSync: getUserAgentSync,
      getVersion: getVersion,
      getBrightness: getBrightness,
      getBrightnessSync: getBrightnessSync,
      hasGms: hasGms,
      hasGmsSync: hasGmsSync,
      hasHms: hasHms,
      hasHmsSync: hasHmsSync,
      hasNotch: hasNotch,
      hasDynamicIsland: hasDynamicIsland,
      hasSystemFeature: hasSystemFeature,
      hasSystemFeatureSync: hasSystemFeatureSync,
      isAirplaneMode: isAirplaneMode,
      isAirplaneModeSync: isAirplaneModeSync,
      isBatteryCharging: isBatteryCharging,
      isBatteryChargingSync: isBatteryChargingSync,
      isCameraPresent: isCameraPresent,
      isCameraPresentSync: isCameraPresentSync,
      isEmulator: isEmulator,
      isEmulatorSync: isEmulatorSync,
      isHeadphonesConnected: isHeadphonesConnected,
      isHeadphonesConnectedSync: isHeadphonesConnectedSync,
      isLandscape: isLandscape,
      isLandscapeSync: isLandscapeSync,
      isLocationEnabled: isLocationEnabled,
      isLocationEnabledSync: isLocationEnabledSync,
      isPinOrFingerprintSet: isPinOrFingerprintSet,
      isPinOrFingerprintSetSync: isPinOrFingerprintSetSync,
      isMouseConnected: isMouseConnected,
      isMouseConnectedSync: isMouseConnectedSync,
      isKeyboardConnected: isKeyboardConnected,
      isKeyboardConnectedSync: isKeyboardConnectedSync,
      isTabletMode: isTabletMode,
      isTablet: isTablet,
      supported32BitAbis: supported32BitAbis,
      supported32BitAbisSync: supported32BitAbisSync,
      supported64BitAbis: supported64BitAbis,
      supported64BitAbisSync: supported64BitAbisSync,
      supportedAbis: supportedAbis,
      supportedAbisSync: supportedAbisSync,
      syncUniqueId: syncUniqueId,
      useBatteryLevel: useBatteryLevel,
      useBatteryLevelIsLow: useBatteryLevelIsLow,
      useDeviceName: useDeviceName,
      useFirstInstallTime: useFirstInstallTime,
      useHasSystemFeature: useHasSystemFeature,
      useIsEmulator: useIsEmulator,
      usePowerState: usePowerState,
      useManufacturer: useManufacturer,
      useIsHeadphonesConnected: useIsHeadphonesConnected,
      useBrightness: useBrightness,
    };
    var _default = deviceInfoModule;
    exports.default = _default;
  },
  376,
  [7, 268, 44, 1, 3, 377, 378, 379, 380, 382]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.deviceInfoEmitter = undefined;
    exports.useOnEvent = useOnEvent;
    exports.useOnMount = useOnMount;

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _slicedToArray2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _react = _$$_REQUIRE(_dependencyMap[3]);

    var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

    function useOnMount(asyncGetter, initialResult) {
      var _useState = (0, _react.useState)({
          loading: true,
          result: initialResult,
        }),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        response = _useState2[0],
        setResponse = _useState2[1];

      (0, _react.useEffect)(
        function () {
          var getAsync = (function () {
            var _ref = (0, _asyncToGenerator2.default)(function* () {
              var result = yield asyncGetter();
              setResponse({
                loading: false,
                result: result,
              });
            });

            return function getAsync() {
              return _ref.apply(this, arguments);
            };
          })();

          getAsync();
        },
        [asyncGetter]
      );
      return response;
    }

    var deviceInfoEmitter = new _reactNative.NativeEventEmitter(
      _reactNative.NativeModules.RNDeviceInfo
    );
    exports.deviceInfoEmitter = deviceInfoEmitter;

    function useOnEvent(eventName, initialValueAsyncGetter, defaultValue) {
      var _useOnMount = useOnMount(initialValueAsyncGetter, defaultValue),
        loading = _useOnMount.loading,
        initialResult = _useOnMount.result;

      var _useState3 = (0, _react.useState)(defaultValue),
        _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
        result = _useState4[0],
        setResult = _useState4[1];

      (0, _react.useEffect)(
        function () {
          setResult(initialResult);
        },
        [initialResult]
      );
      (0, _react.useEffect)(
        function () {
          var subscription = deviceInfoEmitter.addListener(
            eventName,
            setResult
          );
          return function () {
            return subscription.remove();
          };
        },
        [eventName]
      );
      return {
        loading: loading,
        result: result,
      };
    }
  },
  377,
  [7, 268, 44, 1, 3]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;
    var devicesWithDynamicIsland = [
      {
        brand: "Apple",
        model: "iPhone 14 Pro",
      },
      {
        brand: "Apple",
        model: "iPhone 14 Pro Max",
      },
    ];
    var _default = devicesWithDynamicIsland;
    exports.default = _default;
  },
  378,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;
    var devicesWithNotch = [
      {
        brand: "Apple",
        model: "iPhone 14",
      },
      {
        brand: "Apple",
        model: "iPhone 14 Plus",
      },
      {
        brand: "Apple",
        model: "iPhone 14 Pro",
      },
      {
        brand: "Apple",
        model: "iPhone 14 Pro Max",
      },
      {
        brand: "Apple",
        model: "iPhone 13 mini",
      },
      {
        brand: "Apple",
        model: "iPhone 13",
      },
      {
        brand: "Apple",
        model: "iPhone 13 Pro",
      },
      {
        brand: "Apple",
        model: "iPhone 13 Pro Max",
      },
      {
        brand: "Apple",
        model: "iPhone 12 mini",
      },
      {
        brand: "Apple",
        model: "iPhone 12",
      },
      {
        brand: "Apple",
        model: "iPhone 12 Pro",
      },
      {
        brand: "Apple",
        model: "iPhone 12 Pro Max",
      },
      {
        brand: "Apple",
        model: "iPhone 11",
      },
      {
        brand: "Apple",
        model: "iPhone 11 Pro",
      },
      {
        brand: "Apple",
        model: "iPhone 11 Pro Max",
      },
      {
        brand: "Apple",
        model: "iPhone X",
      },
      {
        brand: "Apple",
        model: "iPhone XS",
      },
      {
        brand: "Apple",
        model: "iPhone XS Max",
      },
      {
        brand: "Apple",
        model: "iPhone XR",
      },
      {
        brand: "Asus",
        model: "ZenFone 5",
      },
      {
        brand: "Asus",
        model: "ZenFone 5z",
      },
      {
        brand: "google",
        model: "Pixel 3 XL",
      },
      {
        brand: "google",
        model: "Pixel 4a",
      },
      {
        brand: "Huawei",
        model: "P20",
      },
      {
        brand: "Huawei",
        model: "P20 Plus",
      },
      {
        brand: "Huawei",
        model: "P20 Lite",
      },
      {
        brand: "Huawei",
        model: "ANE-LX1",
      },
      {
        brand: "Huawei",
        model: "INE-LX1",
      },
      {
        brand: "Huawei",
        model: "POT-LX1",
      },
      {
        brand: "Huawei",
        model: "Honor Play",
      },
      {
        brand: "Huawei",
        model: "Honor 10",
      },
      {
        brand: "Huawei",
        model: "Mate 20 Lite",
      },
      {
        brand: "Huawei",
        model: "Mate 20 Pro",
      },
      {
        brand: "Huawei",
        model: "ELE-L29",
      },
      {
        brand: "Huawei",
        model: "P30 Lite",
      },
      {
        brand: "Huawei",
        model: "P30 Pro",
      },
      {
        brand: "Huawei",
        model: "JNY-LX1",
      },
      {
        brand: "Huawei",
        model: "Nova 3",
      },
      {
        brand: "Huawei",
        model: "Nova 3i",
      },
      {
        brand: "Leagoo",
        model: "S9",
      },
      {
        brand: "LG",
        model: "G7",
      },
      {
        brand: "LG",
        model: "G7 ThinQ",
      },
      {
        brand: "LG",
        model: "G7+ ThinQ",
      },
      {
        brand: "LG",
        model: "LM-Q910",
      },
      {
        brand: "LG",
        model: "LM-G710",
      },
      {
        brand: "LG",
        model: "LM-V405",
      },
      {
        brand: "Motorola",
        model: "Moto g7 Play",
      },
      {
        brand: "Motorola",
        model: "Moto g7 Power",
      },
      {
        brand: "Motorola",
        model: "One",
      },
      {
        brand: "Motorola",
        model: "Motorola One Vision",
      },
      {
        brand: "Nokia",
        model: "5.1 Plus",
      },
      {
        brand: "Nokia",
        model: "Nokia 6.1 Plus",
      },
      {
        brand: "Nokia",
        model: "7.1",
      },
      {
        brand: "Nokia",
        model: "8.1",
      },
      {
        brand: "OnePlus",
        model: "6",
      },
      {
        brand: "OnePlus",
        model: "A6003",
      },
      {
        brand: "ONEPLUS",
        model: "A6000",
      },
      {
        brand: "OnePlus",
        model: "OnePlus A6003",
      },
      {
        brand: "OnePlus",
        model: "ONEPLUS A6010",
      },
      {
        brand: "OnePlus",
        model: "ONEPLUS A6013",
      },
      {
        brand: "OnePlus",
        model: "ONEPLUS A6000",
      },
      {
        brand: "Oppo",
        model: "R15",
      },
      {
        brand: "Oppo",
        model: "R15 Pro",
      },
      {
        brand: "Oppo",
        model: "F7",
      },
      {
        brand: "Oukitel",
        model: "U18",
      },
      {
        brand: "Redmi",
        model: "M2004J19C",
      },
      {
        brand: "Sharp",
        model: "Aquos S3",
      },
      {
        brand: "Vivo",
        model: "V9",
      },
      {
        brand: "Vivo",
        model: "X21",
      },
      {
        brand: "Vivo",
        model: "X21 UD",
      },
      {
        brand: "xiaomi",
        model: "MI 8",
      },
      {
        brand: "xiaomi",
        model: "MI 8 Explorer Edition",
      },
      {
        brand: "xiaomi",
        model: "MI 8 SE",
      },
      {
        brand: "xiaomi",
        model: "MI 8 UD",
      },
      {
        brand: "xiaomi",
        model: "MI 8 Lite",
      },
      {
        brand: "xiaomi",
        model: "Mi 9",
      },
      {
        brand: "xiaomi",
        model: "POCO F1",
      },
      {
        brand: "xiaomi",
        model: "POCOPHONE F1",
      },
      {
        brand: "xiaomi",
        model: "Redmi 6 Pro",
      },
      {
        brand: "xiaomi",
        model: "Redmi Note 7",
      },
      {
        brand: "xiaomi",
        model: "Redmi 7",
      },
      {
        brand: "xiaomi",
        model: "Redmi Note 8",
      },
      {
        brand: "xiaomi",
        model: "Redmi Note 8 Pro",
      },
      {
        brand: "xiaomi",
        model: "Mi A2 Lite",
      },
      {
        brand: "Blackview",
        model: "A30",
      },
      {
        brand: "Samsung",
        model: "SM-A217F",
      },
      {
        brand: "Samsung",
        model: "SM-A715F",
      },
    ];
    var _default = devicesWithNotch;
    exports.default = _default;
  },
  379,
  []
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.default = undefined;

    var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

    var RNDeviceInfo = _reactNative.NativeModules.RNDeviceInfo;

    if (
      _reactNative.Platform.OS === "web" ||
      _reactNative.Platform.OS === "dom"
    ) {
      RNDeviceInfo = _$$_REQUIRE(_dependencyMap[1]);
    }

    if (!RNDeviceInfo) {
      if (
        _reactNative.Platform.OS === "android" ||
        _reactNative.Platform.OS === "ios" ||
        _reactNative.Platform.OS === "web" ||
        _reactNative.Platform.OS === "dom"
      ) {
        throw new Error(
          "react-native-device-info: NativeModule.RNDeviceInfo is null. To fix this issue try these steps:\n  \u2022 For react-native <= 0.59: Run `react-native link react-native-device-info` in the project root.\n  \u2022 Rebuild and re-run the app.\n  \u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n  If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-device-info/react-native-device-info"
        );
      }
    }

    var _default = RNDeviceInfo;
    exports.default = _default;
  },
  380,
  [3, 381]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.isLocationEnabledSync =
      exports.isLocationEnabled =
      exports.isCameraPresentSync =
      exports.isCameraPresent =
      exports.isBatteryChargingSync =
      exports.isBatteryCharging =
      exports.isAirplaneModeSync =
      exports.isAirplaneMode =
      exports.getUserAgentSync =
      exports.getUserAgent =
      exports.getUsedMemorySync =
      exports.getUsedMemory =
      exports.getTotalMemorySync =
      exports.getTotalMemory =
      exports.getTotalDiskCapacitySync =
      exports.getTotalDiskCapacity =
      exports.getPowerStateSync =
      exports.getPowerState =
      exports.getMaxMemorySync =
      exports.getMaxMemory =
      exports.getInstallReferrerSync =
      exports.getInstallReferrer =
      exports.getFreeDiskStorageSync =
      exports.getFreeDiskStorage =
      exports.getBatteryLevelSync =
      exports.getBatteryLevel =
      exports.getBaseOs =
        undefined;

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

    var deviceInfoEmitter = new _reactNative.NativeEventEmitter(
      _reactNative.NativeModules.RNDeviceInfo
    );
    var batteryCharging = false,
      batteryLevel = -1,
      powerState = {};

    var _readPowerState = function _readPowerState(battery) {
      var level = battery.level,
        charging = battery.charging,
        chargingtime = battery.chargingtime,
        dischargingtime = battery.dischargingtime;
      return {
        batteryLevel: level,
        lowPowerMode: false,
        batteryState:
          level === 1 ? "full" : charging ? "charging" : "unplugged",
        chargingtime: chargingtime,
        dischargingtime: dischargingtime,
      };
    };

    var getMaxMemorySync = function getMaxMemorySync() {
      if (window.performance && window.performance.memory) {
        return window.performance.memory.jsHeapSizeLimit;
      }

      return -1;
    };

    exports.getMaxMemorySync = getMaxMemorySync;

    var getInstallReferrerSync = function getInstallReferrerSync() {
      return document.referrer;
    };

    exports.getInstallReferrerSync = getInstallReferrerSync;

    var isAirplaneModeSync = function isAirplaneModeSync() {
      return !!navigator.onLine;
    };

    exports.isAirplaneModeSync = isAirplaneModeSync;

    var getUserAgentSync = function getUserAgentSync() {
      return window.navigator.userAgent;
    };

    exports.getUserAgentSync = getUserAgentSync;

    var isLocationEnabledSync = function isLocationEnabledSync() {
      return !!navigator.geolocation;
    };

    exports.isLocationEnabledSync = isLocationEnabledSync;

    var getTotalMemorySync = function getTotalMemorySync() {
      if (navigator.deviceMemory) {
        return navigator.deviceMemory * 1000000000;
      }

      return -1;
    };

    exports.getTotalMemorySync = getTotalMemorySync;

    var getUsedMemorySync = function getUsedMemorySync() {
      if (window.performance && window.performance.memory) {
        return window.performance.memory.usedJSHeapSize;
      }

      return -1;
    };

    exports.getUsedMemorySync = getUsedMemorySync;

    var init = function init() {
      if (typeof navigator === "undefined" || !navigator.getBattery) return;
      navigator.getBattery().then(function (battery) {
        batteryCharging = battery.charging;
        battery.addEventListener("chargingchange", function () {
          var charging = battery.charging;
          batteryCharging = charging;
          powerState = _readPowerState(battery);
          deviceInfoEmitter.emit(
            "RNDeviceInfo_powerStateDidChange",
            powerState
          );
        });
        battery.addEventListener("levelchange", function () {
          var level = battery.level;
          batteryLevel = level;
          powerState = _readPowerState(battery);
          deviceInfoEmitter.emit("RNDeviceInfo_batteryLevelDidChange", level);

          if (level < 0.2) {
            deviceInfoEmitter.emit("RNDeviceInfo_batteryLevelIsLow", level);
          }
        });
      });
    };

    var getBaseOsSync = function getBaseOsSync() {
      var userAgent = window.navigator.userAgent,
        platform = window.navigator.platform,
        macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K"],
        windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"],
        iosPlatforms = ["iPhone", "iPad", "iPod"];
      var os = platform;

      if (macosPlatforms.indexOf(platform) !== -1) {
        os = "Mac OS";
      } else if (iosPlatforms.indexOf(platform) !== -1) {
        os = "iOS";
      } else if (windowsPlatforms.indexOf(platform) !== -1) {
        os = "Windows";
      } else if (/Android/.test(userAgent)) {
        os = "Android";
      } else if (!os && /Linux/.test(platform)) {
        os = "Linux";
      }

      return os;
    };

    init();

    var getInstallReferrer = (function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        return getInstallReferrerSync();
      });

      return function getInstallReferrer() {
        return _ref.apply(this, arguments);
      };
    })();

    exports.getInstallReferrer = getInstallReferrer;

    var getUserAgent = (function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        return getUserAgentSync();
      });

      return function getUserAgent() {
        return _ref2.apply(this, arguments);
      };
    })();

    exports.getUserAgent = getUserAgent;

    var isBatteryCharging = (function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.getBattery) {
          return navigator.getBattery().then(function (battery) {
            return battery.charging;
          });
        }

        return false;
      });

      return function isBatteryCharging() {
        return _ref3.apply(this, arguments);
      };
    })();

    exports.isBatteryCharging = isBatteryCharging;

    var isBatteryChargingSync = function isBatteryChargingSync() {
      return batteryCharging;
    };

    exports.isBatteryChargingSync = isBatteryChargingSync;

    var isCameraPresent = (function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
          return navigator.mediaDevices
            .enumerateDevices()
            .then(function (devices) {
              return !!devices.find(function (d) {
                return d.kind === "videoinput";
              });
            });
        }

        return false;
      });

      return function isCameraPresent() {
        return _ref4.apply(this, arguments);
      };
    })();

    exports.isCameraPresent = isCameraPresent;

    var isCameraPresentSync = function isCameraPresentSync() {
      console.log(
        "[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent"
      );
      return false;
    };

    exports.isCameraPresentSync = isCameraPresentSync;

    var getBatteryLevel = (function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.getBattery) {
          return navigator.getBattery().then(function (battery) {
            return battery.level;
          });
        }

        return -1;
      });

      return function getBatteryLevel() {
        return _ref5.apply(this, arguments);
      };
    })();

    exports.getBatteryLevel = getBatteryLevel;

    var getBatteryLevelSync = function getBatteryLevelSync() {
      return batteryLevel;
    };

    exports.getBatteryLevelSync = getBatteryLevelSync;

    var isLocationEnabled = (function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* () {
        return isLocationEnabledSync();
      });

      return function isLocationEnabled() {
        return _ref6.apply(this, arguments);
      };
    })();

    exports.isLocationEnabled = isLocationEnabled;

    var isAirplaneMode = (function () {
      var _ref7 = (0, _asyncToGenerator2.default)(function* () {
        return isAirplaneModeSync();
      });

      return function isAirplaneMode() {
        return _ref7.apply(this, arguments);
      };
    })();

    exports.isAirplaneMode = isAirplaneMode;

    var getBaseOs = (function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* () {
        return getBaseOsSync();
      });

      return function getBaseOs() {
        return _ref8.apply(this, arguments);
      };
    })();

    exports.getBaseOs = getBaseOs;

    var getTotalDiskCapacity = (function () {
      var _ref9 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.storage && navigator.storage.estimate) {
          return navigator.storage.estimate().then(function (_ref10) {
            var quota = _ref10.quota;
            return quota;
          });
        }

        return -1;
      });

      return function getTotalDiskCapacity() {
        return _ref9.apply(this, arguments);
      };
    })();

    exports.getTotalDiskCapacity = getTotalDiskCapacity;

    var getTotalDiskCapacitySync = function getTotalDiskCapacitySync() {
      console.log(
        "[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity"
      );
      return -1;
    };

    exports.getTotalDiskCapacitySync = getTotalDiskCapacitySync;

    var getFreeDiskStorage = (function () {
      var _ref11 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.storage && navigator.storage.estimate) {
          return navigator.storage.estimate().then(function (_ref12) {
            var quota = _ref12.quota,
              usage = _ref12.usage;
            return quota - usage;
          });
        }

        return -1;
      });

      return function getFreeDiskStorage() {
        return _ref11.apply(this, arguments);
      };
    })();

    exports.getFreeDiskStorage = getFreeDiskStorage;

    var getFreeDiskStorageSync = function getFreeDiskStorageSync() {
      console.log(
        "[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage"
      );
      return -1;
    };

    exports.getFreeDiskStorageSync = getFreeDiskStorageSync;

    var getMaxMemory = (function () {
      var _ref13 = (0, _asyncToGenerator2.default)(function* () {
        return getMaxMemorySync();
      });

      return function getMaxMemory() {
        return _ref13.apply(this, arguments);
      };
    })();

    exports.getMaxMemory = getMaxMemory;

    var getUsedMemory = (function () {
      var _ref14 = (0, _asyncToGenerator2.default)(function* () {
        return getUsedMemorySync();
      });

      return function getUsedMemory() {
        return _ref14.apply(this, arguments);
      };
    })();

    exports.getUsedMemory = getUsedMemory;

    var getTotalMemory = (function () {
      var _ref15 = (0, _asyncToGenerator2.default)(function* () {
        return getTotalMemorySync();
      });

      return function getTotalMemory() {
        return _ref15.apply(this, arguments);
      };
    })();

    exports.getTotalMemory = getTotalMemory;

    var getPowerState = (function () {
      var _ref16 = (0, _asyncToGenerator2.default)(function* () {
        if (navigator.getBattery) {
          return navigator.getBattery().then(function (battery) {
            return _readPowerState(battery);
          });
        }

        return {};
      });

      return function getPowerState() {
        return _ref16.apply(this, arguments);
      };
    })();

    exports.getPowerState = getPowerState;

    var getPowerStateSync = function getPowerStateSync() {
      return powerState;
    };

    exports.getPowerStateSync = getPowerStateSync;
  },
  381,
  [7, 268, 3]
);
__d(
  function (
    global,
    _$$_REQUIRE,
    _$$_IMPORT_DEFAULT,
    _$$_IMPORT_ALL,
    module,
    exports,
    _dependencyMap
  ) {
    var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

    Object.defineProperty(exports, "__esModule", {
      value: true,
    });
    exports.clearMemo = clearMemo;
    exports.getSupportedPlatformInfoAsync = getSupportedPlatformInfoAsync;
    exports.getSupportedPlatformInfoFunctions =
      getSupportedPlatformInfoFunctions;
    exports.getSupportedPlatformInfoSync = getSupportedPlatformInfoSync;

    var _objectWithoutProperties2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[1])
    );

    var _asyncToGenerator2 = _interopRequireDefault(
      _$$_REQUIRE(_dependencyMap[2])
    );

    var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

    var _excluded = ["syncGetter"];
    var memo = {};

    function clearMemo() {
      memo = {};
    }

    function getSupportedFunction(supportedPlatforms, getter, defaultGetter) {
      var supportedMap = {};
      supportedPlatforms
        .filter(function (key) {
          return _reactNative.Platform.OS == key;
        })
        .forEach(function (key) {
          return (supportedMap[key] = getter);
        });
      return _reactNative.Platform.select(
        Object.assign({}, supportedMap, {
          default: defaultGetter,
        })
      );
    }

    function getSupportedPlatformInfoSync(_ref) {
      var getter = _ref.getter,
        supportedPlatforms = _ref.supportedPlatforms,
        defaultValue = _ref.defaultValue,
        memoKey = _ref.memoKey;

      if (memoKey && memo[memoKey] != undefined) {
        return memo[memoKey];
      } else {
        var output = getSupportedFunction(
          supportedPlatforms,
          getter,
          function () {
            return defaultValue;
          }
        )();

        if (memoKey) {
          memo[memoKey] = output;
        }

        return output;
      }
    }

    function getSupportedPlatformInfoAsync(_x) {
      return _getSupportedPlatformInfoAsync.apply(this, arguments);
    }

    function _getSupportedPlatformInfoAsync() {
      _getSupportedPlatformInfoAsync = (0, _asyncToGenerator2.default)(
        function* (_ref2) {
          var getter = _ref2.getter,
            supportedPlatforms = _ref2.supportedPlatforms,
            defaultValue = _ref2.defaultValue,
            memoKey = _ref2.memoKey;

          if (memoKey && memo[memoKey] != undefined) {
            return memo[memoKey];
          } else {
            var output = yield getSupportedFunction(
              supportedPlatforms,
              getter,
              function () {
                return Promise.resolve(defaultValue);
              }
            )();

            if (memoKey) {
              memo[memoKey] = output;
            }

            return output;
          }
        }
      );
      return _getSupportedPlatformInfoAsync.apply(this, arguments);
    }

    function getSupportedPlatformInfoFunctions(_ref3) {
      var syncGetter = _ref3.syncGetter,
        asyncParams = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
      return [
        function () {
          return getSupportedPlatformInfoAsync(asyncParams);
        },
        function () {
          return getSupportedPlatformInfoSync(
            Object.assign({}, asyncParams, {
              getter: syncGetter,
            })
          );
        },
      ];
    }
  },
  382,
  [7, 92, 268, 3]
);
__r(21);
__r(0);
