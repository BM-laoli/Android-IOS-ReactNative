__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _Business = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _app = _$$_REQUIRE(_dependencyMap[4]);

  _reactNative.AppRegistry.registerComponent(_app.bu1.name, function () {
    return _Business.default;
  });
},10000000,[7,1,3,10000001,10000010]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _ = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _utils = _$$_REQUIRE(_dependencyMap[5]);

  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[6]);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Frame = function Frame(props) {
    (0, _react.useEffect)(function () {
      init();
    }, []);

    var init = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        var params = yield _utils.navigation.getFromActivity();
        console.log('params', params);
      });

      return function init() {
        return _ref.apply(this, arguments);
      };
    }();

    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.hello,
        children: "BU1 "
      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
        title: "\u524D\u5F80BU2",
        onPress: function onPress() {
          _utils.navigation.pushToActivity("Bu2Activity", {
            value: 111
          });
        },
        style: styles.btn
      }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
        style: styles.flatContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.imgView,
          children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
            resizeMethod: "resize",
            resizeMode: "contain",
            source: _.default,
            style: styles.img
          })
        })
      })]
    });
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: "center",
      height: 100
    },
    hello: {
      fontSize: 20,
      textAlign: "center",
      margin: 10
    },
    imgView: {
      width: "100%"
    },
    img: {
      width: "100%",
      height: 600
    },
    flatContainer: {
      flex: 1
    },
    btn: {
      width: 30,
      height: 30
    }
  });

  var _default = Frame;
  exports.default = _default;
},10000001,[7,268,1,3,10000002,10000004,179]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/src/modules/Business1/assets/img",
    "width": 1024,
    "height": 500,
    "scales": [1],
    "hash": "938f55d05f70c75063d310be556059e4",
    "name": "1024_500",
    "type": "png"
  });
},10000002,[10000003]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},10000003,[150]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.navigation = undefined;
  Object.defineProperty(exports, "storageApp", {
    enumerable: true,
    get: function get() {
      return _storage.default;
    }
  });

  var _storage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var navigation = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  exports.navigation = navigation;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},10000004,[7,10000005,10000008]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _reactNativeStorage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var storageApp = new _reactNativeStorage.default({
    size: 1000,
    storageBackend: _reactNative.AsyncStorage,
    defaultExpires: 86400000,
    enableCache: true
  });
  var _default = storageApp;
  exports.default = _default;
},10000005,[7,3,10000006]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _error = _$$_REQUIRE(_dependencyMap[4]);

  var Storage = function () {
    function Storage() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      (0, _classCallCheck2.default)(this, Storage);
      this._SIZE = options.size || 1000;
      this.sync = options.sync || {};
      this.defaultExpires = options.defaultExpires !== undefined ? options.defaultExpires : 86400000;
      this.enableCache = options.enableCache !== false;
      this._s = options.storageBackend || null;
      this._innerVersion = 11;
      this.cache = {};

      if (this._s && this._s.setItem) {
        try {
          var promiseTest = this._s.setItem('__react_native_storage_test', 'test');

          this.isPromise = !!(promiseTest && promiseTest.then);
        } catch (e) {
          console.warn(e);
          delete this._s;
          throw e;
        }
      } else {
        console.warn("Data would be lost after reload cause there is no storageBackend specified!\n      \nEither use localStorage(for web) or AsyncStorage(for React Native) as a storageBackend.");
      }

      this._mapPromise = this.getItem('map').then(function (map) {
        _this._m = _this._checkMap(map && JSON.parse(map) || {});
      });
    }

    (0, _createClass2.default)(Storage, [{
      key: "getItem",
      value: function getItem(key) {
        return this._s ? this.isPromise ? this._s.getItem(key) : Promise.resolve(this._s.getItem(key)) : Promise.resolve();
      }
    }, {
      key: "setItem",
      value: function setItem(key, value) {
        return this._s ? this.isPromise ? this._s.setItem(key, value) : Promise.resolve(this._s.setItem(key, value)) : Promise.resolve();
      }
    }, {
      key: "removeItem",
      value: function removeItem(key) {
        return this._s ? this.isPromise ? this._s.removeItem(key) : Promise.resolve(this._s.removeItem(key)) : Promise.resolve();
      }
    }, {
      key: "_initMap",
      value: function _initMap() {
        return {
          innerVersion: this._innerVersion,
          index: 0,
          __keys__: {}
        };
      }
    }, {
      key: "_checkMap",
      value: function _checkMap(map) {
        if (map && map.innerVersion && map.innerVersion === this._innerVersion) {
          return map;
        } else {
          return this._initMap();
        }
      }
    }, {
      key: "_getId",
      value: function _getId(key, id) {
        return key + '_' + id;
      }
    }, {
      key: "_saveToMap",
      value: function _saveToMap(params) {
        var key = params.key,
            id = params.id,
            data = params.data,
            newId = this._getId(key, id),
            m = this._m;

        if (m[newId] !== undefined) {
          if (this.enableCache) this.cache[newId] = JSON.parse(data);
          return this.setItem('map_' + m[newId], data);
        }

        if (m[m.index] !== undefined) {
          var oldId = m[m.index];
          var splitOldId = oldId.split('_');
          delete m[oldId];

          this._removeIdInKey(splitOldId[0], splitOldId[1]);

          if (this.enableCache) {
            delete this.cache[oldId];
          }
        }

        m[newId] = m.index;
        m[m.index] = newId;
        m.__keys__[key] = m.__keys__[key] || [];

        m.__keys__[key].push(id);

        if (this.enableCache) {
          var cacheData = JSON.parse(data);
          this.cache[newId] = cacheData;
        }

        var currentIndex = m.index;

        if (++m.index === this._SIZE) {
          m.index = 0;
        }

        this.setItem('map_' + currentIndex, data);
        this.setItem('map', JSON.stringify(m));
      }
    }, {
      key: "save",
      value: function save(params) {
        var _this2 = this;

        var key = params.key,
            id = params.id,
            data = params.data,
            rawData = params.rawData,
            _params$expires = params.expires,
            expires = _params$expires === undefined ? this.defaultExpires : _params$expires;

        if (key.toString().indexOf('_') !== -1) {
          console.error('Please do not use "_" in key!');
        }

        var dataToSave = {
          rawData: data
        };

        if (data === undefined) {
          if (rawData !== undefined) {
            console.warn('"rawData" is deprecated, please use "data" instead!');
            dataToSave.rawData = rawData;
          } else {
            console.error('"data" is required in save()!');
            return;
          }
        }

        var now = Date.now();

        if (expires !== null) {
          dataToSave.expires = now + expires;
        }

        dataToSave = JSON.stringify(dataToSave);

        if (id === undefined) {
          if (this.enableCache) {
            var cacheData = JSON.parse(dataToSave);
            this.cache[key] = cacheData;
          }

          return this.setItem(key, dataToSave);
        } else {
          if (id.toString().indexOf('_') !== -1) {
            console.error('Please do not use "_" in id!');
          }

          return this._mapPromise.then(function () {
            return _this2._saveToMap({
              key: key,
              id: id,
              data: dataToSave
            });
          });
        }
      }
    }, {
      key: "getBatchData",
      value: function getBatchData(querys) {
        var _this3 = this;

        return Promise.all(querys.map(function (query) {
          return _this3.load(query);
        }));
      }
    }, {
      key: "getBatchDataWithIds",
      value: function () {
        var _getBatchDataWithIds = (0, _asyncToGenerator2.default)(function* (params) {
          var _this4 = this;

          var key = params.key,
              ids = params.ids,
              syncInBackground = params.syncInBackground,
              syncParams = params.syncParams;
          var tasks = ids.map(function (id) {
            return _this4.load({
              key: key,
              id: id,
              syncInBackground: syncInBackground,
              autoSync: false,
              batched: true
            });
          });
          var results = yield Promise.all(tasks);
          var missingIds = [];
          results.forEach(function (value) {
            if (value.syncId !== undefined) {
              missingIds.push(value.syncId);
            }
          });

          if (missingIds.length) {
            var syncData = yield this.sync[key]({
              id: missingIds,
              syncParams: syncParams
            });
            return results.map(function (value) {
              return value.syncId ? syncData.shift() : value;
            });
          } else {
            return results;
          }
        });

        function getBatchDataWithIds(_x) {
          return _getBatchDataWithIds.apply(this, arguments);
        }

        return getBatchDataWithIds;
      }()
    }, {
      key: "_lookupGlobalItem",
      value: function _lookupGlobalItem(params) {
        var _this5 = this;

        var key = params.key;

        if (this.enableCache && this.cache[key] !== undefined) {
          return this._loadGlobalItem(Object.assign({
            ret: this.cache[key]
          }, params));
        }

        return this.getItem(key).then(function (ret) {
          return _this5._loadGlobalItem(Object.assign({
            ret: ret
          }, params));
        });
      }
    }, {
      key: "_loadGlobalItem",
      value: function _loadGlobalItem(params) {
        var key = params.key,
            ret = params.ret,
            autoSync = params.autoSync,
            syncInBackground = params.syncInBackground,
            syncParams = params.syncParams;

        if (ret === null || ret === undefined) {
          if (autoSync && this.sync[key]) {
            return this.sync[key]({
              syncParams: syncParams
            });
          }

          throw new _error.NotFoundError(JSON.stringify(params));
        }

        if (typeof ret === 'string') {
          ret = JSON.parse(ret);

          if (this.enableCache) {
            this.cache[key] = ret;
          }
        }

        var now = Date.now();

        if (ret.expires < now) {
          if (autoSync && this.sync[key]) {
            if (syncInBackground) {
              try {
                this.sync[key]({
                  syncParams: syncParams,
                  syncInBackground: syncInBackground
                });
              } catch (e) {}

              return ret.rawData;
            }

            return this.sync[key]({
              syncParams: syncParams,
              syncInBackground: syncInBackground
            });
          }

          throw new _error.ExpiredError(JSON.stringify(params));
        }

        return ret.rawData;
      }
    }, {
      key: "_noItemFound",
      value: function _noItemFound(params) {
        var key = params.key,
            id = params.id,
            autoSync = params.autoSync,
            syncParams = params.syncParams;

        if (this.sync[key]) {
          if (autoSync) {
            return this.sync[key]({
              id: id,
              syncParams: syncParams
            });
          }

          return {
            syncId: id
          };
        }

        throw new _error.NotFoundError(JSON.stringify(params));
      }
    }, {
      key: "_loadMapItem",
      value: function _loadMapItem(params) {
        var ret = params.ret,
            key = params.key,
            id = params.id,
            autoSync = params.autoSync,
            batched = params.batched,
            syncInBackground = params.syncInBackground,
            syncParams = params.syncParams;

        if (ret === null || ret === undefined) {
          return this._noItemFound(params);
        }

        if (typeof ret === 'string') {
          ret = JSON.parse(ret);
          var _key = params.key,
              _id = params.id;

          var newId = this._getId(_key, _id);

          if (this.enableCache) {
            this.cache[newId] = ret;
          }
        }

        var now = Date.now();

        if (ret.expires < now) {
          if (autoSync && this.sync[key]) {
            if (syncInBackground) {
              try {
                this.sync[key]({
                  id: id,
                  syncParams: syncParams,
                  syncInBackground: syncInBackground
                });
              } catch (e) {}

              return ret.rawData;
            }

            return this.sync[key]({
              id: id,
              syncParams: syncParams,
              syncInBackground: syncInBackground
            });
          }

          if (batched) {
            return {
              syncId: id
            };
          }

          throw new _error.ExpiredError(JSON.stringify(params));
        }

        return ret.rawData;
      }
    }, {
      key: "_lookUpInMap",
      value: function _lookUpInMap(params) {
        var _this6 = this;

        var ret;
        var m = this._m;
        var key = params.key,
            id = params.id;

        var newId = this._getId(key, id);

        if (this.enableCache && this.cache[newId]) {
          ret = this.cache[newId];
          return this._loadMapItem(Object.assign({
            ret: ret
          }, params));
        }

        if (m[newId] !== undefined) {
          return this.getItem('map_' + m[newId]).then(function (ret) {
            return _this6._loadMapItem(Object.assign({
              ret: ret
            }, params));
          });
        }

        return this._noItemFound(Object.assign({
          ret: ret
        }, params));
      }
    }, {
      key: "remove",
      value: function remove(params) {
        var _this7 = this;

        return this._mapPromise.then(function () {
          var m = _this7._m;
          var key = params.key,
              id = params.id;

          if (id === undefined) {
            if (_this7.enableCache && _this7.cache[key]) {
              delete _this7.cache[key];
            }

            return _this7.removeItem(key);
          }

          var newId = _this7._getId(key, id);

          if (m[newId] !== undefined) {
            if (_this7.enableCache && _this7.cache[newId]) {
              delete _this7.cache[newId];
            }

            _this7._removeIdInKey(key, id);

            var idTobeDeleted = m[newId];
            delete m[newId];

            _this7.setItem('map', JSON.stringify(m));

            return _this7.removeItem('map_' + idTobeDeleted);
          }
        });
      }
    }, {
      key: "_removeIdInKey",
      value: function _removeIdInKey(key, id) {
        var indexTobeRemoved = (this._m.__keys__[key] || []).indexOf(id);

        if (indexTobeRemoved !== -1) {
          this._m.__keys__[key].splice(indexTobeRemoved, 1);
        }
      }
    }, {
      key: "load",
      value: function load(params) {
        var _this8 = this;

        var key = params.key,
            id = params.id,
            _params$autoSync = params.autoSync,
            autoSync = _params$autoSync === undefined ? true : _params$autoSync,
            _params$syncInBackgro = params.syncInBackground,
            syncInBackground = _params$syncInBackgro === undefined ? true : _params$syncInBackgro,
            syncParams = params.syncParams,
            batched = params.batched;
        return this._mapPromise.then(function () {
          if (id === undefined) {
            return _this8._lookupGlobalItem({
              key: key,
              autoSync: autoSync,
              syncInBackground: syncInBackground,
              syncParams: syncParams
            });
          } else {
            return _this8._lookUpInMap({
              key: key,
              id: id,
              autoSync: autoSync,
              syncInBackground: syncInBackground,
              batched: batched,
              syncParams: syncParams
            });
          }
        });
      }
    }, {
      key: "clearAll",
      value: function clearAll() {
        this._s.clear && this._s.clear();
        this._m = this._initMap();
      }
    }, {
      key: "clearMap",
      value: function clearMap() {
        var _this9 = this;

        return this.removeItem('map').then(function () {
          _this9.cache = {};
          _this9._m = _this9._initMap();
        });
      }
    }, {
      key: "clearMapForKey",
      value: function clearMapForKey(key) {
        var _this10 = this;

        return this._mapPromise.then(function () {
          var tasks = (_this10._m.__keys__[key] || []).map(function (id) {
            return _this10.remove({
              key: key,
              id: id
            });
          });
          return Promise.all(tasks);
        });
      }
    }, {
      key: "getIdsForKey",
      value: function getIdsForKey(key) {
        var _this11 = this;

        return this._mapPromise.then(function () {
          return _this11._m.__keys__[key] || [];
        });
      }
    }, {
      key: "getAllDataForKey",
      value: function getAllDataForKey(key, options) {
        var _this12 = this;

        options = Object.assign({
          syncInBackground: true
        }, options);
        return this.getIdsForKey(key).then(function (ids) {
          var querys = ids.map(function (id) {
            return {
              key: key,
              id: id,
              syncInBackground: options.syncInBackground
            };
          });
          return _this12.getBatchData(querys);
        });
      }
    }]);
    return Storage;
  }();

  exports.default = Storage;
},10000006,[7,268,16,17,10000007]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NotFoundError = exports.ExpiredError = undefined;

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var NotFoundError = function (_Error) {
    (0, _inherits2.default)(NotFoundError, _Error);

    var _super = _createSuper(NotFoundError);

    function NotFoundError(message) {
      var _this;

      (0, _classCallCheck2.default)(this, NotFoundError);
      _this = _super.call(this, "Not Found! Params: " + message);
      _this.name = 'NotFoundError';
      _this.stack = new Error().stack;
      return _this;
    }

    return (0, _createClass2.default)(NotFoundError);
  }((0, _wrapNativeSuper2.default)(Error));

  exports.NotFoundError = NotFoundError;

  var ExpiredError = function (_Error2) {
    (0, _inherits2.default)(ExpiredError, _Error2);

    var _super2 = _createSuper(ExpiredError);

    function ExpiredError(message) {
      var _this2;

      (0, _classCallCheck2.default)(this, ExpiredError);
      _this2 = _super2.call(this, "Expired! Params: " + message);
      _this2.name = 'ExpiredError';
      _this2.stack = new Error().stack;
      return _this2;
    }

    return (0, _createClass2.default)(ExpiredError);
  }((0, _wrapNativeSuper2.default)(Error));

  exports.ExpiredError = ExpiredError;
},10000007,[7,17,16,28,30,33,34]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pushToActivity = exports.getFromActivity = undefined;

  var _storage = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _native = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var pushToActivity = function pushToActivity(activity, params) {
    _storage.default.save({
      key: "MessageActivity",
      data: params,
      expires: 3600000
    });

    var _pre_fix = "com.example.myapprnn.";

    _native.default.changeActivity(_pre_fix + activity);
  };

  exports.pushToActivity = pushToActivity;

  var getFromActivity = function getFromActivity() {
    return new Promise(function (resolve, reject) {
      _storage.default.load({
        key: "MessageActivity",
        autoSync: true
      }).then(function (data) {
        resolve(data);
      }).catch(function () {
        reject("error");
      }).finally(function () {});
    });
  };

  exports.getFromActivity = getFromActivity;
},10000008,[7,10000005,10000009]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  if (!_reactNative.NativeModules.RNToolsManager) {
    throw new Error('native模块加载失败');
  }

  var RNToolsManager = {
    changeActivity: function changeActivity(value) {
      return _reactNative.NativeModules.RNToolsManager.changeActivity(value, null);
    }
  };
  var _default = RNToolsManager;
  exports.default = _default;
},10000009,[3]);
__d(function(global, require, _importDefaultUnused, _importAllUnused, module, exports, _dependencyMapUnused) {
  module.exports = {
  "main": {
    "name": "MyReactNativeApp"
  },
  "bu1": {
    "name": "bu1"
  },
  "bu2": {
    "name": "bu2"
  }
}
;
},10000010,[]);

__r(10000000);